prompt,testcase_type,testcase_name,response,documentation
Validate keyword-driven clientcentral_keywords for API common,keyword-driven,common,"*** Settings ***
Documentation    Validate common
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
common
    [Documentation]    Validate common using the following steps
Get JSON Headers    merchant    
    Convert To JSON    body

*** Keywords ***
Get JSON Headers
    [Arguments]    merchant
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    merchant

Convert To JSON
    [Arguments]    body
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    body

","The purpose of the test case named ""common"" can be summarized as follows:

The ""common"" test case is designed to verify the fundamental functionality and shared components of a software application or system. Its main goal is to ensure that the basic, widely-used features and elements—those that are common across various parts of the application—operate correctly. This includes verifying the stability, performance, and correctness of these core components, which may include authentication mechanisms, data processing, user interface elements, and system integrations. By focusing on common aspects, this test case helps to identify any primary defects or issues that could potentially affect multiple areas of the application, thereby ensuring a robust and reliable foundation for more specific and advanced features."
Validate keyword-driven clientcentral_keywords for API customer,keyword-driven,customer,"*** Settings ***
Documentation    Validate customer
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
customer
    [Documentation]    Validate customer using the following steps
Create Billing Address Body    unique_value|merchant_id    
    Create Customer Body    unique_value|merchant_key|merchant_id    
    Send Request To Create On Credit Hold Customer    merchant    
    Create Shipping Address Body    unique_value|merchant_id    
    Send Request To Create Customer    merchant_key|merchant_id    
    Create On Credit Hold Customer Body    unique_value|merchant_key|merchant_id

*** Keywords ***
Create Billing Address Body
    [Arguments]    unique_value|merchant_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    unique_value|merchant_id

Create Customer Body
    [Arguments]    unique_value|merchant_key|merchant_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    unique_value|merchant_key|merchant_id

Send Request To Create On Credit Hold Customer
    [Arguments]    merchant
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    merchant

Create Shipping Address Body
    [Arguments]    unique_value|merchant_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    unique_value|merchant_id

Send Request To Create Customer
    [Arguments]    merchant_key|merchant_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    merchant_key|merchant_id

Create On Credit Hold Customer Body
    [Arguments]    unique_value|merchant_key|merchant_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    unique_value|merchant_key|merchant_id

","The test case 'customer' likely serves several functions within a software application or system, specifically focusing on interactions related to customer operations. 

Here’s a detailed summary of its purpose:

1. **Validation of Customer Information**: The test case would verify the accuracy and correctness of customer data being handled. This could include validating fields such as name, contact information, address, and payment details.

2. **Functionality Testing**: It aims to ensure that all functionalities associated with customer actions, such as registration, login, profile updates, and account management, are working as intended. This would include checking form submissions, data integrity, and proper error handling.

3. **User Experience**: Evaluates the usability and navigation of the customer-related interfaces,"
Validate keyword-driven clientcentral_keywords for API invoice,keyword-driven,invoice,"*** Settings ***
Documentation    Validate invoice
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
invoice
    [Documentation]    Validate invoice using the following steps
Create Invoice Body    unique_value|invoice_number|due_amount|invoice_due_date|invoice_amount    
    Send Request To Create Disputed Invoice For Customer    merchant|unique_value|invoice_number|due_amount|Invoice_due_date    
    Create Company Details Body    nan    
    Send Request To Create Invoice  # robocop: disable too-many-arguments    merchant|unique_value|invoice_number|due_amount|Invoice_due_date|invoice_amount    
    Create Product Details Body    nan    
    Create Disputed Invoice Body    unique_value|invoice_number|due_amount|invoice_due_date    
    Create Ship To Address Body    nan    
    Create Bill To Address Body    nan    
    Send Request To Create Invoice For Customer  # robocop: disable too-many-arguments    merchant|unique_value|invoice_number|due_amount|Invoice_due_date|invoice_amount    
    Create Multiple Invoices Through API    |merchant|account_number|invoice_due_date

*** Keywords ***
Create Invoice Body
    [Arguments]    unique_value|invoice_number|due_amount|invoice_due_date|invoice_amount
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    unique_value|invoice_number|due_amount|invoice_due_date|invoice_amount

Send Request To Create Disputed Invoice For Customer
    [Arguments]    merchant|unique_value|invoice_number|due_amount|Invoice_due_date
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    merchant|unique_value|invoice_number|due_amount|Invoice_due_date

Create Company Details Body
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Send Request To Create Invoice  # robocop: disable too-many-arguments
    [Arguments]    merchant|unique_value|invoice_number|due_amount|Invoice_due_date|invoice_amount
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    merchant|unique_value|invoice_number|due_amount|Invoice_due_date|invoice_amount

Create Product Details Body
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Create Disputed Invoice Body
    [Arguments]    unique_value|invoice_number|due_amount|invoice_due_date
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    unique_value|invoice_number|due_amount|invoice_due_date

Create Ship To Address Body
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Create Bill To Address Body
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Send Request To Create Invoice For Customer  # robocop: disable too-many-arguments
    [Arguments]    merchant|unique_value|invoice_number|due_amount|Invoice_due_date|invoice_amount
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    merchant|unique_value|invoice_number|due_amount|Invoice_due_date|invoice_amount

Create Multiple Invoices Through API
    [Arguments]    |merchant|account_number|invoice_due_date
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    |merchant|account_number|invoice_due_date

","The purpose of the 'invoice' test case is to ensure that the invoicing system of an application operates accurately and efficiently. This typically involves verifying a variety of functional aspects such as:

1. **Correct Calculation**: Making sure that the invoicing system correctly calculates totals, taxes, discounts, and other financial elements based on the items or services listed.
  
2. **Data Accuracy**: Ensuring that all necessary details, such as item descriptions, quantities, prices, customer information, and date of transaction, are accurately captured and displayed.

3. **Format Compliance**: Validating that the invoice format meets the required standards, including proper alignment, readability, and inclusion of necessary sections like header, body, and footer."
Generate keyword-driven clientcentral_keywords for API processpayment,keyword-driven,processpayment,"*** Settings ***
Documentation    Validate processpayment
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
processpayment
    [Documentation]    Validate processpayment using the following steps
Create Process Invoice Payment Body For Credit Card    account_number|invoice_number|card_number|amount    
    Get Response Details    response    
    Get Gatewayid    response    
    Get Billing Information    response    
    Send Request To Process Transaction For Multiple Invoices    merchant|account_number|invoice_number|card_number|routing_number    
    Send Request To Process Payment Through ACH/Echeck Card    merchant|account_number|invoice_number|card_number|routing_number    
    Send Request To Process Payment For Credit Card    merchant|account_number|invoice_number|card_number|amount    
    Get JSON Header For Credit Card Token    nan    
    Get Card Details    16digits_cardnumber    
    Create Process Invoice Payment Body For ACH/Echeck    account_number|invoice_number|card_number|routing_number    
    Get Amount    response    
    Create Request For Credit Card Token    card_details    
    Create Invoice For Processing Payment    invoice_number|reason    
    Get Id After Processing Transaction    response    
    Create Process Invoice Body For Multiple Transaction    account_number|invoice_number|card_number|routing_number    
    Send Request To Get Credit Card Token    card_number

*** Keywords ***
Create Process Invoice Payment Body For Credit Card
    [Arguments]    account_number|invoice_number|card_number|amount
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number|invoice_number|card_number|amount

Get Response Details
    [Arguments]    response
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    response

Get Gatewayid
    [Arguments]    response
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    response

Get Billing Information
    [Arguments]    response
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    response

Send Request To Process Transaction For Multiple Invoices
    [Arguments]    merchant|account_number|invoice_number|card_number|routing_number
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    merchant|account_number|invoice_number|card_number|routing_number

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    merchant|account_number|invoice_number|card_number|routing_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    merchant|account_number|invoice_number|card_number|routing_number

Send Request To Process Payment For Credit Card
    [Arguments]    merchant|account_number|invoice_number|card_number|amount
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    merchant|account_number|invoice_number|card_number|amount

Get JSON Header For Credit Card Token
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Get Card Details
    [Arguments]    16digits_cardnumber
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    16digits_cardnumber

Create Process Invoice Payment Body For ACH/Echeck
    [Arguments]    account_number|invoice_number|card_number|routing_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number|invoice_number|card_number|routing_number

Get Amount
    [Arguments]    response
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    response

Create Request For Credit Card Token
    [Arguments]    card_details
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    card_details

Create Invoice For Processing Payment
    [Arguments]    invoice_number|reason
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    invoice_number|reason

Get Id After Processing Transaction
    [Arguments]    response
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    response

Create Process Invoice Body For Multiple Transaction
    [Arguments]    account_number|invoice_number|card_number|routing_number
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    account_number|invoice_number|card_number|routing_number

Send Request To Get Credit Card Token
    [Arguments]    card_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    card_number

","The purpose of the test case 'processpayment' is to verify that the payment processing functionality within a system operates as intended. This involves ensuring that all steps of the payment process are executed correctly and that the user receives appropriate feedback throughout the transaction.

Key aspects that the 'processpayment' test case might cover include:

1. **Validation of Payment Input Information:** Checking that all required payment details (such as credit card number, expiration date, CVV, billing address) are entered correctly and validated adequately without errors.
   
2. **Payment Gateway Integration:** Ensuring the system correctly communicates with the payment gateway, passes all necessary information, and handles the responses appropriately."
Create keyword-driven clientcentral_keywords for API token,keyword-driven,token,"*** Settings ***
Documentation    Validate token
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
token
    [Documentation]    Validate token using the following steps
Send Request To Get Invoice Token    invoice_location    
    Get Token Header    nan    
    Create Body To Get PayNowSession Id    customer_number    
    Get Invoice Location    response    
    Send Request To Get PayNowSession Id    customer_number    
    Get Headers For PayNowSession Id    nan    
    Get PayNowSession Id From Request Body    response

*** Keywords ***
Send Request To Get Invoice Token
    [Arguments]    invoice_location
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    invoice_location

Get Token Header
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Create Body To Get PayNowSession Id
    [Arguments]    customer_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    customer_number

Get Invoice Location
    [Arguments]    response
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    response

Send Request To Get PayNowSession Id
    [Arguments]    customer_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    customer_number

Get Headers For PayNowSession Id
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Get PayNowSession Id From Request Body
    [Arguments]    response
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    response

","A test case for 'token' typically aims to verify the functionality of token generation, validation, and management within an application. Tokens are commonly used for authentication and authorization purposes, ensuring that only authenticated users can access certain resources or perform specific actions. The purpose of the test case 'token' would include:

1. **Token Generation**: Validating that a token is correctly generated when a user logs in or requests access, ensuring that the token contains all necessary information (e.g., user ID, expiration time, and permissions).

2. **Token Validation**: Ensuring that the system correctly validates tokens, checking for proper format, signature, and expiration. This step verifies that invalid or expired tokens are rejected."
Generate keyword-driven web for CommonKeywordsForAllMerchants common,keyword-driven,common,"*** Settings ***
Documentation    Validate common
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
common
    [Documentation]    Validate common using the following steps
Fail And Take Screenshot    message    
    Validate String Should Be Equal    expected|actual    
    Process ACH Payment Through API    nan    
    Launch Web Application    browser_name|url|    
    Update Multiple Dynamic Values    locator|value1|value2    
    Validate Error Message Is Displayed    error_message    
    Validate String Should Contain    expected|actual    
    Validate String Should Not Contain    expected|actual    
    Update Dynamic Value    locator|value    
    Scroll Till Element Is Visible    locator    
    Wait Till Loading Icon Is Invisible    locator|time_out|loading_visibility_timeout    
    Launch Browser    browser_name|url    
    Read TestData From Excel    excel_path|tc_id|sheet_name    
    Validate String Should Not Be Equal    expected|actual    
    Click Until Element Is Invisible    click_locator    
    Scroll To Element    locator    
    Wait Until Element Is Clickable And Click    locator|time_out

*** Keywords ***
Fail And Take Screenshot
    [Arguments]    message
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    message

Validate String Should Be Equal
    [Arguments]    expected|actual
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected|actual

Process ACH Payment Through API
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Launch Web Application
    [Arguments]    browser_name|url|
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    browser_name|url|

Update Multiple Dynamic Values
    [Arguments]    locator|value1|value2
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    locator|value1|value2

Validate Error Message Is Displayed
    [Arguments]    error_message
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    error_message

Validate String Should Contain
    [Arguments]    expected|actual
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected|actual

Validate String Should Not Contain
    [Arguments]    expected|actual
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected|actual

Update Dynamic Value
    [Arguments]    locator|value
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    locator|value

Scroll Till Element Is Visible
    [Arguments]    locator
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    locator

Wait Till Loading Icon Is Invisible
    [Arguments]    locator|time_out|loading_visibility_timeout
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    locator|time_out|loading_visibility_timeout

Launch Browser
    [Arguments]    browser_name|url
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    browser_name|url

Read TestData From Excel
    [Arguments]    excel_path|tc_id|sheet_name
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    excel_path|tc_id|sheet_name

Validate String Should Not Be Equal
    [Arguments]    expected|actual
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected|actual

Click Until Element Is Invisible
    [Arguments]    click_locator
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    click_locator

Scroll To Element
    [Arguments]    locator
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    locator

Wait Until Element Is Clickable And Click
    [Arguments]    locator|time_out
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    locator|time_out

","The 'common' test case in software testing serves several key purposes:

1. **Validation of Core Functionality:** It ensures that the basic, essential features of the application are functioning correctly. This includes verifying that common operations and user interactions yield the expected results.

2. **Foundation Verification:** By testing typical or frequently used scenarios, it helps confirm that the foundational aspects of the application are stable. This is crucial for building confidence that more advanced or edge-case functionalities will also perform correctly.

3. **Regression Detection:** Regularly running 'common' test cases helps detect any regressions in the core functionality that might occur due to new code changes, updates, or bug fixes. This ensures that previously working features are not broken by ongoing development."
Create keyword-driven web for CommonKeywordsForAllMerchants homepage,keyword-driven,homepage,"*** Settings ***
Documentation    Validate homepage
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
homepage
    [Documentation]    Validate homepage using the following steps
Select Module    module    
    Select Merchant    merchant    
    Logout From Application    nan

*** Keywords ***
Select Module
    [Arguments]    module
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    module

Select Merchant
    [Arguments]    merchant
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    merchant

Logout From Application
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

","A test case for a websites homepage generally aims to validate that the homepage functions correctly and meets the specified requirements and user expectations. The primary objectives often include:

1. **Content Verification**: Ensuring that all text, images, links, and multimedia elements are displayed correctly and are up-to-date.

2. **Usability**: Verifying that the homepage is user-friendly, with elements such as navigation bars, search functionality, and call-to-action buttons working properly and intuitively.

3. **Performance**: Checking that the homepage loads within an acceptable time frame under different network conditions and performs well across various devices and browsers.

4. **Functionality**: Testing interactive elements to ensure they work as expected, such as sliders, drop-down and other components."
Validate keyword-driven web for CommonKeywordsForAllMerchants login,keyword-driven,login,"*** Settings ***
Documentation    Validate login
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
login
    [Documentation]    Validate login using the following steps
Enter Password Field    password    
    Enter Email Address Field    email    
    Validate Error Message For Invalid Email Address    login_credentials    
    Login To Client Central Application    email_address|password    
    Validate Error Message For Invalid Password    login_credentials    
    Enter Email Address And Password    email_address|password

*** Keywords ***
Enter Password Field
    [Arguments]    password
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    password

Enter Email Address Field
    [Arguments]    email
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    email

Validate Error Message For Invalid Email Address
    [Arguments]    login_credentials
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    login_credentials

Login To Client Central Application
    [Arguments]    email_address|password
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    email_address|password

Validate Error Message For Invalid Password
    [Arguments]    login_credentials
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    login_credentials

Enter Email Address And Password
    [Arguments]    email_address|password
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    email_address|password

","The purpose of the 'login' test case is to verify the functionality and security of the user authentication process. This test case ensures that a user can successfully log into the system using valid credentials and that improper access is restricted when invalid credentials are provided. Key aspects typically assessed during the 'login' test case include:

1. **Valid Credentials:**
   - Verify that users can log in successfully with correct username and password.
   - Ensure that the system redirects to the appropriate post-login page.

2. **Invalid Credentials:**
   - Test how the system handles incorrect username, password, or both.
   - Confirm error messages are informative and prompt appropriate user action.
   - Ensure the system does not disclose any sensitive information in error messages."
Create keyword-driven web for CommonKeywordsForAllMerchants tokens,keyword-driven,tokens,"*** Settings ***
Documentation    Validate tokens
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
tokens
    [Documentation]    Validate tokens using the following steps
Navigate To Open Invoices Page From Email    nan    
    Navigate To Open Invoices Page With Invoice Token    account_number||invoice_token    
    Navigate To Open Invoices Page With Session Token    account_number|session_id    
    Validate PayNOW Open Invoices Page Is Displayed    Invoice_number    
    Validate Open Invoices Page Is Displayed    invoice_number

*** Keywords ***
Navigate To Open Invoices Page From Email
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Navigate To Open Invoices Page With Invoice Token
    [Arguments]    account_number||invoice_token
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number||invoice_token

Navigate To Open Invoices Page With Session Token
    [Arguments]    account_number|session_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number|session_id

Validate PayNOW Open Invoices Page Is Displayed
    [Arguments]    Invoice_number
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    Invoice_number

Validate Open Invoices Page Is Displayed
    [Arguments]    invoice_number
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    invoice_number

","The 'tokens' test case serves to validate the creation, management, and utilization of tokens within a system, often in the context of authentication and authorization. Tokens are typically used to ensure secure access to resources by verifying the identity of users and the permissions they have.

Key components of the 'tokens' test case include:

1. **Generation of Tokens**: Ensures that tokens can be successfully created. This may involve generating a unique identifier, embedding user information, and applying encryption.

2. **Validation of Tokens**: Confirms that the generated tokens can be authenticated to verify the user’s identity. This involves checking the integrity and authenticity of the token, often by deciphering it with a secret key or verifying it against a database."
Build keyword-driven omnicorp for Customers autopay,keyword-driven,autopay,"*** Settings ***
Documentation    Validate autopay
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
autopay
    [Documentation]    Validate autopay using the following steps
Select Status    option    
    Navigate To AutoPay    nan    
    Validate AutoPay Details Are Displayed    expected_customernumber|expected_paymenttype|expected_scheduletype|expected_accountnumber    
    Validate AutoPay Is Cancelled    account_number    
    Select Invoices Due For The Payment    nan    
    Filter Customer In AutoPay    customer_number    
    Navigate To Customer Details Page From AutoPay    invoice_number    
    Get Total Number Of Transactions In AutoPay    nan    
    Cancel AutoPay    nan    
    Create AutoPay    customer_details|Payment_method    
    Select Saved Payment Method In Autopay    payment_method    
    Validate Active Payment Details After Displayed    all_transactionscount|expected_status    
    Validate Inactive Payment Details Are Displayed    all_transactionscount|expected_status    
    Select Each Day As Payment Option    nan

*** Keywords ***
Select Status
    [Arguments]    option
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    option

Navigate To AutoPay
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate AutoPay Details Are Displayed
    [Arguments]    expected_customernumber|expected_paymenttype|expected_scheduletype|expected_accountnumber
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_customernumber|expected_paymenttype|expected_scheduletype|expected_accountnumber

Validate AutoPay Is Cancelled
    [Arguments]    account_number
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    account_number

Select Invoices Due For The Payment
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Filter Customer In AutoPay
    [Arguments]    customer_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    customer_number

Navigate To Customer Details Page From AutoPay
    [Arguments]    invoice_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    invoice_number

Get Total Number Of Transactions In AutoPay
    [Arguments]    nan
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    nan

Cancel AutoPay
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Create AutoPay
    [Arguments]    customer_details|Payment_method
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    customer_details|Payment_method

Select Saved Payment Method In Autopay
    [Arguments]    payment_method
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    payment_method

Validate Active Payment Details After Displayed
    [Arguments]    all_transactionscount|expected_status
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    all_transactionscount|expected_status

Validate Inactive Payment Details Are Displayed
    [Arguments]    all_transactionscount|expected_status
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    all_transactionscount|expected_status

Select Each Day As Payment Option
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

","The 'autopay' test case is designed to evaluate the functionality, reliability, and accuracy of an automated payment system. Its primary purpose is to ensure that the system can handle various payment scenarios—including recurring payments, scheduled payments, and immediate transactions—without errors or failures. 

Key aspects of the test case include:

1. **Transaction Processing:** Verifying that the system successfully processes payments according to predefined schedules and user instructions.
2. **User Interaction:** Ensuring that users can easily set up, modify, and cancel automated payments through the user interface.
3. **Error Handling:** Checking that the system appropriately handles errors such as insufficient funds, invalid payment details, and network issues, providing clear feedback to the user."
Generate keyword-driven omnicorp for Customers scheduled_payments,keyword-driven,scheduled_payments,"*** Settings ***
Documentation    Validate scheduled_payments
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
scheduled_payments
    [Documentation]    Validate scheduled_payments using the following steps
Validate Last 7 Days And 30 Days Scheduled Payaments Dates    day    
    Validate Today And Yesterday Scheduled Payments Are Displayed    date    
    Create Scheduled Payment    account_number    
    Select Payment Date    date    
    Validate Last Month And This Month Date Scheduled Payments Dates    day    
    Validate Status In Scheduled Payments    expected_status    
    Validate Scheduled Payment Details Are Displayed    expected_payment_date|expected_status|expected_origin    
    Cancel Scheduled Payment    nan

*** Keywords ***
Validate Last 7 Days And 30 Days Scheduled Payaments Dates
    [Arguments]    day
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    day

Validate Today And Yesterday Scheduled Payments Are Displayed
    [Arguments]    date
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    date

Create Scheduled Payment
    [Arguments]    account_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number

Select Payment Date
    [Arguments]    date
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    date

Validate Last Month And This Month Date Scheduled Payments Dates
    [Arguments]    day
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    day

Validate Status In Scheduled Payments
    [Arguments]    expected_status
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_status

Validate Scheduled Payment Details Are Displayed
    [Arguments]    expected_payment_date|expected_status|expected_origin
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_payment_date|expected_status|expected_origin

Cancel Scheduled Payment
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

","The purpose of the test case 'scheduled_payments' is to verify the correct functionality of a financial application's scheduled payments feature. This feature allows users to set up payments that are automatically executed on specified future dates. The test case checks several aspects to ensure the feature works as intended, including:

1. **Scheduling a Payment:** Confirming that a user can successfully schedule a payment by specifying the recipient, amount, and scheduled date.
2. **Payment Execution:** Ensuring scheduled payments are executed automatically at the correct time without user intervention.
3. **Notification Handling:** Verifying that the user receives alerts or notifications upon successful scheduling of a payment, as well as upon its execution.
4. **Error Handling:** Checking for proper management of different error scenarios."
Create keyword-driven sterlingcooper for Customers failed_login_attempts,keyword-driven,failed_login_attempts,"*** Settings ***
Documentation    Validate failed_login_attempts
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
failed_login_attempts
    [Documentation]    Validate failed_login_attempts using the following steps
Validate Number Of Recent Login Failed Attempts    account_number|expected_recent_attempts    
    Validate Filterd Customer Number Is Displayed    account_number    
    Validate Customer Failed Login Details Are Expanded    merchant    
    Filter With Customer Number In Failed PayNOW Logins    account_number    
    Validate Last Login Failed Attempt Is Displayed    account_number|expected_last_attempt    
    Validate Customer Failed Login Details Are Collapsed    merchant    
    Login To PayNOW With Invalid Credentials    account_number|invoice_number    
    Validate Total Number Of Login Failed Attempts    account_number|expected_total_attempts    
    Expand Customer Failed Login Details    nan    
    Collapse Customer Failed Login Details    nan    
    Validate First Login Failed Attempt Is Displayed    account_number|expected_first_attempt

*** Keywords ***
Validate Number Of Recent Login Failed Attempts
    [Arguments]    account_number|expected_recent_attempts
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    account_number|expected_recent_attempts

Validate Filterd Customer Number Is Displayed
    [Arguments]    account_number
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    account_number

Validate Customer Failed Login Details Are Expanded
    [Arguments]    merchant
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    merchant

Filter With Customer Number In Failed PayNOW Logins
    [Arguments]    account_number
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    account_number

Validate Last Login Failed Attempt Is Displayed
    [Arguments]    account_number|expected_last_attempt
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    account_number|expected_last_attempt

Validate Customer Failed Login Details Are Collapsed
    [Arguments]    merchant
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    merchant

Login To PayNOW With Invalid Credentials
    [Arguments]    account_number|invoice_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number|invoice_number

Validate Total Number Of Login Failed Attempts
    [Arguments]    account_number|expected_total_attempts
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    account_number|expected_total_attempts

Expand Customer Failed Login Details
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Collapse Customer Failed Login Details
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate First Login Failed Attempt Is Displayed
    [Arguments]    account_number|expected_first_attempt
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    account_number|expected_first_attempt

","The test case 'failed_login_attempts' is designed to verify the system’s behavior when a user fails to log in multiple times with incorrect credentials. The primary purpose of this test case is to ensure that the system properly handles and responds to repeated failed login attempts, which could be indicative of a security threat such as a brute force attack. Key aspects typically evaluated in this test case include:

1. **Lockout Mechanism**: Verify if the system locks the user account after a certain number of consecutive failed login attempts to prevent unauthorized access.
2. **Error Messaging**: Ensure that the error messages returned to the user are generic (e.g., ""Incorrect username or password"") to avoid giving away which part of the login credentials is incorrect."
Build keyword-driven sterlingcooper for Dashboard dashboard,keyword-driven,dashboard,"*** Settings ***
Documentation    Validate dashboard
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
dashboard
    [Documentation]    Validate dashboard using the following steps
Validate Details Are Displayed In Last Page    nan    
    Validate Details Are Displayed In First Page    nan    
    Send Invoice Email And Navigate To Email Summary    account_number    
    Expand Details In Email Summary    nan    
    Validate Email Summary Page Is Displayed    date    
    Filter With Customer Number In Email Details    filter_with|customer_number    
    Validate Details Are Displayed In Next And Previous Page    expected_count    
    Validate Email Format In Email Details    expected_emailformat    
    Navigate To Customer Details Page From Email Details    customer    
    Validate Email Details Are Displayed    expected_email|expected_date|expected_subject    
    Reset Filter    nan    
    Validate Email Details Are Expanded In Email Summary    nan    
    Navigate To Customer Details Page From Email Summary    nan    
    Collapse Details In Email Summary    nan    
    Validate Email Details Are Collapsed In Email Summary    nan    
    Navigate To Pages    page    
    Validate Reset Filter Details Are Displayed    nan    
    Validate Email Sent Date And Subject    expected_subject|expected_emailaddress    
    Validate Email PDF Attachment Status    expected_pdfstatus    
    Navigate To Email Summary Page    day

*** Keywords ***
Validate Details Are Displayed In Last Page
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate Details Are Displayed In First Page
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Send Invoice Email And Navigate To Email Summary
    [Arguments]    account_number
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    account_number

Expand Details In Email Summary
    [Arguments]    nan
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    nan

Validate Email Summary Page Is Displayed
    [Arguments]    date
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    date

Filter With Customer Number In Email Details
    [Arguments]    filter_with|customer_number
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    filter_with|customer_number

Validate Details Are Displayed In Next And Previous Page
    [Arguments]    expected_count
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_count

Validate Email Format In Email Details
    [Arguments]    expected_emailformat
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_emailformat

Navigate To Customer Details Page From Email Details
    [Arguments]    customer
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    customer

Validate Email Details Are Displayed
    [Arguments]    expected_email|expected_date|expected_subject
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_email|expected_date|expected_subject

Reset Filter
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Email Details Are Expanded In Email Summary
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Navigate To Customer Details Page From Email Summary
    [Arguments]    nan
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    nan

Collapse Details In Email Summary
    [Arguments]    nan
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    nan

Validate Email Details Are Collapsed In Email Summary
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Navigate To Pages
    [Arguments]    page
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    page

Validate Reset Filter Details Are Displayed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate Email Sent Date And Subject
    [Arguments]    expected_subject|expected_emailaddress
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_subject|expected_emailaddress

Validate Email PDF Attachment Status
    [Arguments]    expected_pdfstatus
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_pdfstatus

Navigate To Email Summary Page
    [Arguments]    day
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    day

","Certainly! Here's a summary of a test case for the 'dashboard':

### Purpose of the 'Dashboard' Test Case:

The primary objective of the 'dashboard' test case is to ensure the functionality, usability, and performance of the dashboard feature within an application. The dashboard typically serves as the main interface where users can access key information, perform critical tasks, and navigate to other sections of the application. 

### Key Objectives:

1. **Functionality Testing**:
   - Verify that all elements on the dashboard (e.g., widgets, charts, tables, notifications) load correctly.
   - Check that interactive elements such as buttons, links, and menus are working as expected."
Create keyword-driven sterlingcooper for Invoices invoices,keyword-driven,invoices,"*** Settings ***
Documentation    Validate invoices
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
invoices
    [Documentation]    Validate invoices using the following steps
Validate Transaction Source After Transaction From Unified    transactionid|expected_transactionsource    
    Expand Email Details    nan    
    Validate Today And Yesterday Invoice Are Displayed    date|day    
    Validate Filtered Cusomer Number In Displayed In Invoices    invoice_number    
    Validate Financial Payment Details Are Displayed    expected_subtotal|expected_tax|expected_rebill_invoice    
    Select Tab In Invoice Details Page    tab_name    
    Send Email Invoice    account_number|invoice_number    
    Validate Sent Date And Provider Response Message Is Displayed    date|expected_response_message    
    Validate PayNOW Invoice Details Page Is Displayed    nan    
    Enable Toggle Button    option    
    Validate Email Details Are Expanded    nan    
    Validate Toggle Button Is Enabled    option    
    Validate Email Format Type Is Displayed    expected_format    
    Validate Email Details Are Collapsed    nan    
    Navigate To Details Page From Invoices    invoice_number    
    Collapse Email Details    nan    
    Validate Email Address Is Displayed    expected_email_address    
    Validate Filtered Invoice Number In Displayed In Invoices    invoice_number    
    Filter Invoice In Grid    invoice_number    
    Validate Filtered Invoice Is Displayed    invoice_number    
    Filter Invoice Details With Invoice And Customer Number    invoice_number|account_number    
    Validate PDF Attachment Status Is Displayed    expected_status    
    Valiadate Terms Amount Are Displayed In Financial Payments    expected_terms_allowed|expected_terms_taken|expected_terms|date    
    Validate Invoices Date For Last 7 Days And 30 Days    day    
    Validate Line Items Details Are Displayed    nan    
    Navigate To Transaction Details From Pending Payments    transaction_id    
    Validate Invoice Details Are Displayed    account_number|invoice_date|expected_total    
    Valiadate Invoice     Order Date And Document Type    
    Validate Subject And Sent Address Is Displayed    expected_subject|expected_email_address    
    Select Send From My Email Address    email    
    Navigate To Financial Payments    account_number|invoice_number    
    Validate Pending Payments Details After Transaction From PayNOW    expected_transactionid|expected_transactionsource|expected_paymentstatus|expected_amountpaid    
    Navigate To Customer Details Page From Summary    invoice_number    
    Validate Email Clicked Date And Count    expected_clicked_date|expected_clickd_count    
    Validate Virtual Terminal Page Is Displayed    nan    
    Send A Copy Of Email Invoice    email|sendcopy_emailid    
    Validate Tracking Details Is Displayed    nan    
    Filter Details In Invoices    account_number|invoice_number|filter_By    
    Validate Last Month And This Month Date    day

*** Keywords ***
Validate Transaction Source After Transaction From Unified
    [Arguments]    transactionid|expected_transactionsource
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    transactionid|expected_transactionsource

Expand Email Details
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Today And Yesterday Invoice Are Displayed
    [Arguments]    date|day
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    date|day

Validate Filtered Cusomer Number In Displayed In Invoices
    [Arguments]    invoice_number
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    invoice_number

Validate Financial Payment Details Are Displayed
    [Arguments]    expected_subtotal|expected_tax|expected_rebill_invoice
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_subtotal|expected_tax|expected_rebill_invoice

Select Tab In Invoice Details Page
    [Arguments]    tab_name
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    tab_name

Send Email Invoice
    [Arguments]    account_number|invoice_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number|invoice_number

Validate Sent Date And Provider Response Message Is Displayed
    [Arguments]    date|expected_response_message
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    date|expected_response_message

Validate PayNOW Invoice Details Page Is Displayed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Enable Toggle Button
    [Arguments]    option
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    option

Validate Email Details Are Expanded
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate Toggle Button Is Enabled
    [Arguments]    option
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    option

Validate Email Format Type Is Displayed
    [Arguments]    expected_format
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_format

Validate Email Details Are Collapsed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Navigate To Details Page From Invoices
    [Arguments]    invoice_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    invoice_number

Collapse Email Details
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Email Address Is Displayed
    [Arguments]    expected_email_address
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_email_address

Validate Filtered Invoice Number In Displayed In Invoices
    [Arguments]    invoice_number
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    invoice_number

Filter Invoice In Grid
    [Arguments]    invoice_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    invoice_number

Validate Filtered Invoice Is Displayed
    [Arguments]    invoice_number
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    invoice_number

Filter Invoice Details With Invoice And Customer Number
    [Arguments]    invoice_number|account_number
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    invoice_number|account_number

Validate PDF Attachment Status Is Displayed
    [Arguments]    expected_status
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_status

Valiadate Terms Amount Are Displayed In Financial Payments
    [Arguments]    expected_terms_allowed|expected_terms_taken|expected_terms|date
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    expected_terms_allowed|expected_terms_taken|expected_terms|date

Validate Invoices Date For Last 7 Days And 30 Days
    [Arguments]    day
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    day

Validate Line Items Details Are Displayed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Navigate To Transaction Details From Pending Payments
    [Arguments]    transaction_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    transaction_id

Validate Invoice Details Are Displayed
    [Arguments]    account_number|invoice_date|expected_total
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    account_number|invoice_date|expected_total

Valiadate Invoice
    [Arguments]     Order Date And Document Type
    [Return]    ${string}
    [Documentation]    Keyword description
    Log     Order Date And Document Type

Validate Subject And Sent Address Is Displayed
    [Arguments]    expected_subject|expected_email_address
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_subject|expected_email_address

Select Send From My Email Address
    [Arguments]    email
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    email

Navigate To Financial Payments
    [Arguments]    account_number|invoice_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number|invoice_number

Validate Pending Payments Details After Transaction From PayNOW
    [Arguments]    expected_transactionid|expected_transactionsource|expected_paymentstatus|expected_amountpaid
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_transactionid|expected_transactionsource|expected_paymentstatus|expected_amountpaid

Navigate To Customer Details Page From Summary
    [Arguments]    invoice_number
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    invoice_number

Validate Email Clicked Date And Count
    [Arguments]    expected_clicked_date|expected_clickd_count
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_clicked_date|expected_clickd_count

Validate Virtual Terminal Page Is Displayed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Send A Copy Of Email Invoice
    [Arguments]    email|sendcopy_emailid
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    email|sendcopy_emailid

Validate Tracking Details Is Displayed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Filter Details In Invoices
    [Arguments]    account_number|invoice_number|filter_By
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number|invoice_number|filter_By

Validate Last Month And This Month Date
    [Arguments]    day
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    day

","The purpose of the 'invoices' test case is to evaluate and verify the functionality, accuracy, and reliability of a system or application that handles the creation, management, processing, and reporting of invoices. This test case aims to ensure that all aspects of the invoicing process are working as intended, covering various scenarios and edge cases to identify potential issues or bugs.

### Key Objectives:
1. **Invoice Creation**: Validate that invoices can be generated with correct details such as item descriptions, quantities, prices, customer information, tax calculations, and total amounts.

2. **Editing and Updating**: Ensure that existing invoices can be modified accurately, reflecting changes in item quantities, prices, or any other relevant information, while maintaining data integrity.

3."
Create keyword-driven sterlingcooper for Settings settings,keyword-driven,settings,"*** Settings ***
Documentation    Validate settings
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
settings
    [Documentation]    Validate settings using the following steps
Navigate To PayNOW    account_number|invoice_number    
    Validate PDF Document Is Displayed In PayNOW    expected_filename    
    Validate PDF Is Deleted In Settings    expected_message    
    Validate Message In Settings    expected_message    
    Select Document Type In Settings    nan    
    Upload File In Settings Tab    file_name    
    Validate PDF Is Closed    nan    
    Close PDF Document    nan    
    Validate File Is Uploaded    actual_filename|expected_documenttype    
    Delete PDF Attachment    nan

*** Keywords ***
Navigate To PayNOW
    [Arguments]    account_number|invoice_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number|invoice_number

Validate PDF Document Is Displayed In PayNOW
    [Arguments]    expected_filename
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_filename

Validate PDF Is Deleted In Settings
    [Arguments]    expected_message
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_message

Validate Message In Settings
    [Arguments]    expected_message
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_message

Select Document Type In Settings
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Upload File In Settings Tab
    [Arguments]    file_name
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    file_name

Validate PDF Is Closed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Close PDF Document
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate File Is Uploaded
    [Arguments]    actual_filename|expected_documenttype
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    actual_filename|expected_documenttype

Delete PDF Attachment
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

","Certainly! The test case titled ""settings"" is typically designed to validate the functionality and reliability of an application's settings or configuration management features. Here is a summarized explanation of its purpose:

### Purpose of the ""settings"" Test Case

1. **Validation of Configuration**:
   - Ensure that users are able to access and modify application settings as intended.
   - Verify that changes to settings are saved correctly and persist across sessions.

2. **User Experience**:
   - Confirm that the settings interface is user-friendly and intuitive.
   - Check that all available settings options are properly labeled and functional.

3. **Security**:
   - Validate that security-related settings (e.g., password changes, two-factor authentication) are functioning correctly."
Validate keyword-driven sterlingcooper for Transactions payment_status,keyword-driven,payment_status,"*** Settings ***
Documentation    Validate payment_status
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
payment_status
    [Documentation]    Validate payment_status using the following steps
Validate Selected Payment Type Is Displayed    expected_status    
    Validate Payment Status Information    nan    
    Validate Payment Status    invoice_number|expected_status    
    Filter With Invoice Number In Payment Status    invoice_number    
    Navigate To Transaction Details Page From Payment Status    gateway_id    
    Select Payment Status Type    payment_status_type    
    Validate Filtered Invoice Number In Displayed    invoice_number    
    Navigate To Invoice Details Page From Payment Status    invoice_number

*** Keywords ***
Validate Selected Payment Type Is Displayed
    [Arguments]    expected_status
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_status

Validate Payment Status Information
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate Payment Status
    [Arguments]    invoice_number|expected_status
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    invoice_number|expected_status

Filter With Invoice Number In Payment Status
    [Arguments]    invoice_number
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    invoice_number

Navigate To Transaction Details Page From Payment Status
    [Arguments]    gateway_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    gateway_id

Select Payment Status Type
    [Arguments]    payment_status_type
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    payment_status_type

Validate Filtered Invoice Number In Displayed
    [Arguments]    invoice_number
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    invoice_number

Navigate To Invoice Details Page From Payment Status
    [Arguments]    invoice_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    invoice_number

","Sure, the test case 'payment_status' is typically designed to verify and validate the functionality related to the status updates of payments within a system. Here is a summary explaining its purpose:

**Objective:**
The primary objective of the 'payment_status' test case is to ensure that the payment processing system accurately reflects the current status of payments. This includes updating and displaying the correct status such as 'Pending', 'Completed', 'Failed', or 'Cancelled', etc. at various stages of the payment lifecycle.

**Purpose:**
1. **Accuracy Verification:** To check if the payment status is correctly updated in the system after each transaction or attempted transaction. This encompasses different payment methods and scenarios.
 "
Validate keyword-driven sterlingcooper for Virtual Terminal virtual_terminal,keyword-driven,virtual_terminal,"*** Settings ***
Documentation    Validate virtual_terminal
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
virtual_terminal
    [Documentation]    Validate virtual_terminal using the following steps
Search Customer In Virtual Terminal    account_number    
    Validate Searched Customer Number Is Displayed    customer_number    
    Process Transacton With Saved Payment Method    account_number|saved_payment_method    
    Validate Surcharge    expected_surcharge    
    Select Multiple Invoices    nan    
    Validate Surchage Exempt Is Applied    nan    
    Select State In PayNOW    state    
    Select State In Virtual Terminal    state    
    Validate Surcharge Is Not Applied For Zero Surcharge State    expected_surcharge    
    Select Over Payment Confirmation    option    
    Navigate To PayNOW And Select State    state

*** Keywords ***
Search Customer In Virtual Terminal
    [Arguments]    account_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number

Validate Searched Customer Number Is Displayed
    [Arguments]    customer_number
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    customer_number

Process Transacton With Saved Payment Method
    [Arguments]    account_number|saved_payment_method
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number|saved_payment_method

Validate Surcharge
    [Arguments]    expected_surcharge
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_surcharge

Select Multiple Invoices
    [Arguments]    nan
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    nan

Validate Surchage Exempt Is Applied
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Select State In PayNOW
    [Arguments]    state
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    state

Select State In Virtual Terminal
    [Arguments]    state
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    state

Validate Surcharge Is Not Applied For Zero Surcharge State
    [Arguments]    expected_surcharge
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_surcharge

Select Over Payment Confirmation
    [Arguments]    option
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    option

Navigate To PayNOW And Select State
    [Arguments]    state
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    state

","The 'virtual_terminal' test case is designed to evaluate the functionality and performance of a software or system's virtual terminal feature. A virtual terminal is an emulation of a physical terminal that enables users to interact with the operating system or software applications through a command-line interface within a graphical environment. 

The purpose of this test case is to ensure that the virtual terminal correctly replicates the behavior of a physical terminal, providing a reliable and seamless user experience. Specific aspects that may be tested include:

1. **Initialization and Configuration**: Ensuring that the virtual terminal can be successfully initialized and configured according to the user's preferences.
2. **Command Execution**: Verifying that commands entered into the virtual terminal are executed correctly and display appropriate output."
Validate keyword-driven paynow_keywords for API autopay,keyword-driven,autopay,"*** Settings ***
Documentation    Validate autopay
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
autopay
    [Documentation]    Validate autopay using the following steps
Send Request To Get AutoPay Details    date, customer_number    
    Create Request For AutoPay    autopay_details, 16digits_cardnumber    
    Send Request To Create AutoPay For Day Of The Month    customer_number, card_number    
    Send Request To Create AutoPay For Each Day    customer_number, card_number    
    Send Request To Create AutoPay For Specific Day Of The Week    customer_number, card_number, day

*** Keywords ***
Send Request To Get AutoPay Details
    [Arguments]    date, customer_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    date, customer_number

Create Request For AutoPay
    [Arguments]    autopay_details, 16digits_cardnumber
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    autopay_details, 16digits_cardnumber

Send Request To Create AutoPay For Day Of The Month
    [Arguments]    customer_number, card_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    customer_number, card_number

Send Request To Create AutoPay For Each Day
    [Arguments]    customer_number, card_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    customer_number, card_number

Send Request To Create AutoPay For Specific Day Of The Week
    [Arguments]    customer_number, card_number, day
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    customer_number, card_number, day

","The test case 'autopay' is designed to verify the functionality and reliability of an automatic payment system. The purpose is to ensure that the system correctly processes scheduled payments without manual intervention. Key objectives likely include:

1. **Validation of Payment Scheduling**: Check that users can successfully set up autopay for recurrent bills and that the system stores payment schedules accurately.
2. **Payment Execution**: Confirm that the system triggers payments on the correct dates and for the correct amounts.
3. **Handling of Funds**: Ensure that funds are correctly debited from the user's account and credited to the recipient's account.
4. **Notification System**: Verify that users receive appropriate notifications about upcoming autopayments, successful transactions, and any issues that arises."
Generate keyword-driven paynow_keywords for API common,keyword-driven,common,"*** Settings ***
Documentation    Validate common
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
common
    [Documentation]    Validate common using the following steps
Get JSON Headers    merchant_key    
    Convert To JSON    body

*** Keywords ***
Get JSON Headers
    [Arguments]    merchant_key
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    merchant_key

Convert To JSON
    [Arguments]    body
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    body

","The test case titled 'common' typically refers to a suite of tests designed to assess general and commonly-used functionalities within a software application. The purpose of this test case is to ensure that basic features and operations, which are expected to be utilized frequently by users, work as intended. 

Key aspects usually covered in 'common' test cases include:

1. **User Authentication**: Validating login and logout processes, password resets, and account lockouts.
2. **Navigation**: Ensuring that navigation elements like menus, tabs, and buttons are functional and appropriately redirect users.
3. **Data Handling**: Testing CRUD (Create, Read, Update, Delete) operations for typical entities within the application."
Validate keyword-driven paynow_keywords for API customer,keyword-driven,customer,"*** Settings ***
Documentation    Validate customer
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
customer
    [Documentation]    Validate customer using the following steps
Create Billing Address Body    unique_value, merchant_id    
    Create Customer Body    unique_value, merchant_key, merchant_id    
    Create Shipping Address Body    unique_value, merchant_id    
    Send Request To Create Customer    merchant_key, merchant_id

*** Keywords ***
Create Billing Address Body
    [Arguments]    unique_value, merchant_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    unique_value, merchant_id

Create Customer Body
    [Arguments]    unique_value, merchant_key, merchant_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    unique_value, merchant_key, merchant_id

Create Shipping Address Body
    [Arguments]    unique_value, merchant_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    unique_value, merchant_id

Send Request To Create Customer
    [Arguments]    merchant_key, merchant_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    merchant_key, merchant_id

","The test case 'customer' typically aims to validate the functionality and performance of a system or application from the perspective of a customer or user. Its primary purpose is to ensure that the system meets the specified requirements and delivers a satisfactory user experience. Key aspects often examined in such a test case include:

1. **User Interface (UI) Usability**: Ensuring that the user interface is intuitive, responsive, and easy to navigate.
2. **Functional Requirements**: Verifying that all user-related features (e.g., account creation, login, product search, order placement) work correctly.
3. **Performance**: Assessing how the system performs under various loads and ensuring that response times are within acceptable limits."
Generate keyword-driven paynow_keywords for API invoice,keyword-driven,invoice,"*** Settings ***
Documentation    Validate invoice
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
invoice
    [Documentation]    Validate invoice using the following steps
Create Invoice Body    unique_value, invoice_number, due_amount, merchant_id, invoice_due_date    
    Create Company Details Body    nan    
    Create Multiple Invoices With Multiple Due Dates    account_number, integrated_merchant    
    Create Product Details Body    nan    
    Create Ship To Address Body    merchant_id    
    Create Bill To Address Body    merchant_id    
    Send Request To Create Invoice For Customer  # robocop:disable=too-many-arguments    unique_value, merchant_key, merchant_id, invoice_number, due_amount, date    
    Create Multiple Invoices Through API    account_number, integrated_merchant, due_date

*** Keywords ***
Create Invoice Body
    [Arguments]    unique_value, invoice_number, due_amount, merchant_id, invoice_due_date
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    unique_value, invoice_number, due_amount, merchant_id, invoice_due_date

Create Company Details Body
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Create Multiple Invoices With Multiple Due Dates
    [Arguments]    account_number, integrated_merchant
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    account_number, integrated_merchant

Create Product Details Body
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Create Ship To Address Body
    [Arguments]    merchant_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    merchant_id

Create Bill To Address Body
    [Arguments]    merchant_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    merchant_id

Send Request To Create Invoice For Customer  # robocop:disable=too-many-arguments
    [Arguments]    unique_value, merchant_key, merchant_id, invoice_number, due_amount, date
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    unique_value, merchant_key, merchant_id, invoice_number, due_amount, date

Create Multiple Invoices Through API
    [Arguments]    account_number, integrated_merchant, due_date
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    account_number, integrated_merchant, due_date

","Certainly! Below is a summarization of the test case typically labeled as 'invoice':

**Test Case: Invoice**

**Purpose:**
The primary objective of the 'invoice' test case is to verify and validate the functionality, accuracy, and reliability of the invoicing system or feature within a software application. This encompasses ensuring that invoices are generated correctly, reflect the accurate details of transactions, and adhere to predefined business rules and standards.

**Key Areas of Focus:**
1. **Invoice Generation:**
   - Validate that invoices are generated correctly for various types of transactions, including single item sales and multiple item purchases.
   - Ensure the correct information is extracted and displayed on the invoice, such as item descriptions, quantities, unit prices, tax, and total."
Create keyword-driven paynow_keywords for API processpayment,keyword-driven,processpayment,"*** Settings ***
Documentation    Validate processpayment
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
processpayment
    [Documentation]    Validate processpayment using the following steps
Create Request For Credit Card Token    card_details    
    Create Process Invoice Payment Body For Credit Card    account_number, invoice_number, creditcard_number, merchant_id    
    Create Invoice For Processing Payment    invoice_number, reason    
    Send Request To Process Payment Through ACH/Echeck Card    integrated_merchant, account_number, invoice_number, card_number, routing_number    
    Send Request To Get Credit Card Token    card_number    
    Send Request To Process Payment For Credit Card    integrated_merchant, account_number, invoice_number, creditcard_number    
    Get JSON Header For Credit Card Token    nan    
    Get Card Details    16digits_cardnumber    
    Create Process Invoice Payment Body For ACH/Echeck    account_number, invoice_number, card_number, routing_number, merchant_id

*** Keywords ***
Create Request For Credit Card Token
    [Arguments]    card_details
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    card_details

Create Process Invoice Payment Body For Credit Card
    [Arguments]    account_number, invoice_number, creditcard_number, merchant_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number, invoice_number, creditcard_number, merchant_id

Create Invoice For Processing Payment
    [Arguments]    invoice_number, reason
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    invoice_number, reason

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    integrated_merchant, account_number, invoice_number, card_number, routing_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    integrated_merchant, account_number, invoice_number, card_number, routing_number

Send Request To Get Credit Card Token
    [Arguments]    card_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    card_number

Send Request To Process Payment For Credit Card
    [Arguments]    integrated_merchant, account_number, invoice_number, creditcard_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    integrated_merchant, account_number, invoice_number, creditcard_number

Get JSON Header For Credit Card Token
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Get Card Details
    [Arguments]    16digits_cardnumber
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    16digits_cardnumber

Create Process Invoice Payment Body For ACH/Echeck
    [Arguments]    account_number, invoice_number, card_number, routing_number, merchant_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number, invoice_number, card_number, routing_number, merchant_id

","The test case 'processpayment' is designed to evaluate the functionality and reliability of a payment processing system within an application. Its primary purpose is to ensure that the system accurately handles various aspects of a payment transaction, including:

1. **Input Validation**: Verifying that the system correctly processes valid payment details and appropriately handles invalid or missing inputs.
2. **Transaction Handling**: Ensuring that payments are correctly authorized, captured, and if necessary, refunded or voided.
3. **Error Handling**: Checking the system's response to different error conditions, such as network failures, insufficient funds, or expired cards."
Build keyword-driven paynow_keywords for API scheduledpayments,keyword-driven,scheduledpayments,"*** Settings ***
Documentation    Validate scheduledpayments
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
scheduledpayments
    [Documentation]    Validate scheduledpayments using the following steps
Send Request To Get Customer Id    id    
    Create Body For Schedule Payment    id, customer_id

*** Keywords ***
Send Request To Get Customer Id
    [Arguments]    id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    id

Create Body For Schedule Payment
    [Arguments]    id, customer_id
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    id, customer_id

","The ""scheduledpayments"" test case is designed to ensure the functionality and reliability of a system that handles the creation, management, and execution of scheduled payments. The purpose of this test case includes:

1. **Validation of Input Data**: Ensure that the system properly validates all input data used to create a scheduled payment, including date, amount, recipient details, frequency, and other pertinent information.

2. **Scheduling Mechanism**: Verify that the scheduling mechanism correctly stores the payment details and parameters to be executed at the specified intervals (daily, weekly, monthly, etc.).

3. **Execution of Payments**: Check that scheduled payments are triggered and processed accurately at the correct times, including edge cases such as leap years, end of month."
Build keyword-driven paynow_keywords for Web common,keyword-driven,common,"*** Settings ***
Documentation    Validate common
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
common
    [Documentation]    Validate common using the following steps
Fail And Take Screenshot    message    
    Validate String Should Be Equal    expected, actual    
    Click And Wait For Element    click_locator, future_element, message    
    Launch Web Application    browser_name, url    
    Validate Error Message Is Displayed    error_message    
    Validate String Should Contain    expected, actual    
    Validate String Should Not Contain    expected, actual    
    Update Dynamic Value    locator, value    
    Scroll Till Element Is Visible    locator    
    Enter Account Number And Invoice    accountnumber, invoice    
    Wait Till Loading Icon Is Invisible    locator, time_out, loading_visibility_timeout    
    Launch Browser    browser_name, url    
    Read TestData From Excel    excel_path, tc_id, sheet_name    
    Validate String Should Not Be Equal    expected, actual    
    Click Until Element Is Invisible    click_locator    
    Scroll To Element    locator    
    Wait Until Element Is Clickable And Click    locator, time_out    
    Launch PayNow Application    merchant

*** Keywords ***
Fail And Take Screenshot
    [Arguments]    message
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    message

Validate String Should Be Equal
    [Arguments]    expected, actual
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected, actual

Click And Wait For Element
    [Arguments]    click_locator, future_element, message
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    click_locator, future_element, message

Launch Web Application
    [Arguments]    browser_name, url
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    browser_name, url

Validate Error Message Is Displayed
    [Arguments]    error_message
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    error_message

Validate String Should Contain
    [Arguments]    expected, actual
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected, actual

Validate String Should Not Contain
    [Arguments]    expected, actual
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected, actual

Update Dynamic Value
    [Arguments]    locator, value
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    locator, value

Scroll Till Element Is Visible
    [Arguments]    locator
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    locator

Enter Account Number And Invoice
    [Arguments]    accountnumber, invoice
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    accountnumber, invoice

Wait Till Loading Icon Is Invisible
    [Arguments]    locator, time_out, loading_visibility_timeout
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    locator, time_out, loading_visibility_timeout

Launch Browser
    [Arguments]    browser_name, url
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    browser_name, url

Read TestData From Excel
    [Arguments]    excel_path, tc_id, sheet_name
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    excel_path, tc_id, sheet_name

Validate String Should Not Be Equal
    [Arguments]    expected, actual
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected, actual

Click Until Element Is Invisible
    [Arguments]    click_locator
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    click_locator

Scroll To Element
    [Arguments]    locator
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    locator

Wait Until Element Is Clickable And Click
    [Arguments]    locator, time_out
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    locator, time_out

Launch PayNow Application
    [Arguments]    merchant
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    merchant

","The ""common"" test case is typically designed to verify the fundamental and shared functionalities of a software application or system. Its purpose is to ensure that the basic components and general features operate correctly and interact as expected. This test case often includes:

1. **Basic Functionality Checks**: Ensuring that core features such as user authentication, basic data transactions, navigation, and other primary functions work correctly.
  
2. **Interoperability Tests**: Confirming that different modules or components of the system can communicate and work together without issues.

3. **Usability Verification**: Assessing whether common user interactions are intuitive and functionally accurate."
Build keyword-driven web for PayNOW common_openinvoices,keyword-driven,common_openinvoices,"*** Settings ***
Documentation    Validate common_openinvoices
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
common_openinvoices
    [Documentation]    Validate common_openinvoices using the following steps
Select Payment Method    payment_method    
    Enter ACH/ECheck Values    echeck_details    
    Navigate To Window    nan    
    Process Payment Without Payment Authorization    nan    
    Validate Payment Method And Total Amount    expected_payment_method, expected_amount    
    Enter Customer Details    too-long-keyword    
    Validate Payment Authorization Is Unchecked By Default    nan    
    Click On Close Button    nan    
    Signout From Payment Receipt Page    nan    
    Navigate To Contact Unified Payments Group For More Information    nan    
    Validate Surcharge Amount Is Displayed    nan    
    Validate Total Charges Under Summary Of Payment    expected_charges    
    Validate Payment Authorization Screen Is Closed    nan    
    Validate Customer Invoice Referral Page Is Visible    nan    
    Validate Details In Generated Payment Receipt    payment_type, account_number, payment_method, amount    
    Validate Surcharge Percentage Should Be Equal    exp_percentage    
    Validate Checkboxes Are Selected By Default    nan    
    Add Reason For Less Than Due Amount    invoice, reason    
    Validate Errors After Clicking On Process Invoice    error_message    
    Enter Zip Code    zip_code    
    Wait Till Loading Text Is Invisible    nan    
    Validate Invoice Receipt Is Received In Email    transaction_id    
    Get Transaction ID    nan    
    Validate Find Routing Number Popover Is Displayed    nan    
    Generate Random Customer Details    nan    
    Select Specific Invoice And Enter Amount    invoice_number, amount    
    Select Account Type In ACH/ECheck    account_type    
    Validate Send EMail Receipt Is Checked By Default    nan    
    Navigate To Payment Authorization And Validate Title    nan    
    Enter Lumpsum Amount    amount    
    Validate Payment Type And Account Number    expected_payment_method, expected_account_number    
    Select State    state    
     Enter Credit Card Details    card_number, expired_data, cvv_number    
    Validate Terms Conditions And Privacy Policy Page Is Closed    nan    
    Validate Future Payment Details In Scheduled Payments Page    future_date    
    Select Payment Type    payment_type    
    Process Invoice Payment    nan    
    Navigate To Terms Conditions And Privacy Policy Page    nan    
    Validate Terms Conditions And Privacy Policy Page Is Displayed    nan    
    Validate Payment Receipt Is Generated    nan    
    Enter ACH/ECheck Details    account_number, routing_number

*** Keywords ***
Select Payment Method
    [Arguments]    payment_method
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    payment_method

Enter ACH/ECheck Values
    [Arguments]    echeck_details
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    echeck_details

Navigate To Window
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Process Payment Without Payment Authorization
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Payment Method And Total Amount
    [Arguments]    expected_payment_method, expected_amount
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_payment_method, expected_amount

Enter Customer Details
    [Arguments]    too-long-keyword
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    too-long-keyword

Validate Payment Authorization Is Unchecked By Default
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Click On Close Button
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Signout From Payment Receipt Page
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Navigate To Contact Unified Payments Group For More Information
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Surcharge Amount Is Displayed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate Total Charges Under Summary Of Payment
    [Arguments]    expected_charges
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_charges

Validate Payment Authorization Screen Is Closed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate Customer Invoice Referral Page Is Visible
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate Details In Generated Payment Receipt
    [Arguments]    payment_type, account_number, payment_method, amount
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    payment_type, account_number, payment_method, amount

Validate Surcharge Percentage Should Be Equal
    [Arguments]    exp_percentage
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    exp_percentage

Validate Checkboxes Are Selected By Default
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Add Reason For Less Than Due Amount
    [Arguments]    invoice, reason
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    invoice, reason

Validate Errors After Clicking On Process Invoice
    [Arguments]    error_message
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    error_message

Enter Zip Code
    [Arguments]    zip_code
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    zip_code

Wait Till Loading Text Is Invisible
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Invoice Receipt Is Received In Email
    [Arguments]    transaction_id
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    transaction_id

Get Transaction ID
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Find Routing Number Popover Is Displayed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Generate Random Customer Details
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Select Specific Invoice And Enter Amount
    [Arguments]    invoice_number, amount
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    invoice_number, amount

Select Account Type In ACH/ECheck
    [Arguments]    account_type
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    account_type

Validate Send EMail Receipt Is Checked By Default
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Navigate To Payment Authorization And Validate Title
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Enter Lumpsum Amount
    [Arguments]    amount
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    amount

Validate Payment Type And Account Number
    [Arguments]    expected_payment_method, expected_account_number
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_payment_method, expected_account_number

Select State
    [Arguments]    state
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    state

 Enter Credit Card Details
    [Arguments]    card_number, expired_data, cvv_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    card_number, expired_data, cvv_number

Validate Terms Conditions And Privacy Policy Page Is Closed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate Future Payment Details In Scheduled Payments Page
    [Arguments]    future_date
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    future_date

Select Payment Type
    [Arguments]    payment_type
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    payment_type

Process Invoice Payment
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Navigate To Terms Conditions And Privacy Policy Page
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Terms Conditions And Privacy Policy Page Is Displayed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate Payment Receipt Is Generated
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Enter ACH/ECheck Details
    [Arguments]    account_number, routing_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number, routing_number

","The test case ""common_openinvoices"" appears to be designed to validate the functionality of a financial or accounting system by testing its ability to handle and process open invoices. Open invoices are unpaid invoices that are still active within the system, which may need to be tracked for various purposes such as follow-up, reporting, and ensuring timely payments. 

### Purpose:
1. **Validation of Data Integrity:**
   - Ensure that all open invoices are correctly recorded in the system with accurate details including amounts, due dates, client information, and status.

2. **Functional Testing:**
   - Verify that features related to open invoices, such as searching, sorting, filtering, and displaying them, work as expected.
   - Confirm that the system correctly updates"
Validate keyword-driven web for PayNOW non-integrated_openinvoices,keyword-driven,non-integrated_openinvoices,"*** Settings ***
Documentation    Validate non-integrated_openinvoices
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
non-integrated_openinvoices
    [Documentation]    Validate non-integrated_openinvoices using the following steps
Validate All Invoices Should Be Removed    nan    
    Validate Filled-In Specific Invoice Data    invoice_number, expected_dueamount, expected_amounttopay    
    Click On Clear All Button    nan    
    Click On Add Invoice    nan    
    Enter Credit Card Values    creditcard_details    
    Create Multiple Invoices    nan    
    Enter Customer Details Without State    nan    
    Validate Filled-In Specific Invoice Data After Removing Other Invoice    invoice_no_to_unselect, expected_invoicenumber, expected_dueamount    
    Validate Invoice Details With Invalid Data    test_case_validation, specific_invoice    
    Enter Account Number    account_number    
    Add Invoice Details    invoice_number, due_amount, amount_to_pay    
    Validate Customer Can Navigate Back From Payment Methods    payment_method    
    Validate Selected Invoice Should Be Removed    invoice_number    
    Validate Dundermifflin Wikipedia Screen Is Visible    nan

*** Keywords ***
Validate All Invoices Should Be Removed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate Filled-In Specific Invoice Data
    [Arguments]    invoice_number, expected_dueamount, expected_amounttopay
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    invoice_number, expected_dueamount, expected_amounttopay

Click On Clear All Button
    [Arguments]    nan
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    nan

Click On Add Invoice
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Enter Credit Card Values
    [Arguments]    creditcard_details
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    creditcard_details

Create Multiple Invoices
    [Arguments]    nan
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    nan

Enter Customer Details Without State
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Filled-In Specific Invoice Data After Removing Other Invoice
    [Arguments]    invoice_no_to_unselect, expected_invoicenumber, expected_dueamount
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    invoice_no_to_unselect, expected_invoicenumber, expected_dueamount

Validate Invoice Details With Invalid Data
    [Arguments]    test_case_validation, specific_invoice
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    test_case_validation, specific_invoice

Enter Account Number
    [Arguments]    account_number
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    account_number

Add Invoice Details
    [Arguments]    invoice_number, due_amount, amount_to_pay
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    invoice_number, due_amount, amount_to_pay

Validate Customer Can Navigate Back From Payment Methods
    [Arguments]    payment_method
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    payment_method

Validate Selected Invoice Should Be Removed
    [Arguments]    invoice_number
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    invoice_number

Validate Dundermifflin Wikipedia Screen Is Visible
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

","The test case 'non-integrated_openinvoices' is designed to validate the behavior and functionality of an invoicing system when it operates in a non-integrated environment. The primary purpose of this test case is to ensure that the system correctly handles open invoices independently of other systems or modules. Specifically, the test case aims to verify the following:

1. **Invoice Creation:** The ability to create new invoices with the necessary details, such as customer information, invoice items, amounts, and due dates.
2. **Invoice Retrieval:** The retrieval of open invoices from the system, ensuring that they are accurately listed with all relevant details.
3. **Status Management:** The handling of invoices statuses, ensuring that open invoices remain consistently marked until they are paid or"
Validate keyword-driven web for PayNOW omnicorp_autopay,keyword-driven,omnicorp_autopay,"*** Settings ***
Documentation    Validate omnicorp_autopay
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
omnicorp_autopay
    [Documentation]    Validate omnicorp_autopay using the following steps
Login To PayNOW And Navigate To Autopay    account_number, invoice_number    
    Enter Customer And Credit Card Details For AutoPay    card_number    
    Save AutoPay    nan    
    Validate Created AutoPay Details For Sepecific Day Of Month    expected_scheduleday, expected_invoicetype, expected_paymentday, expected_invoiceduedays    
    Enter Customer Details For AutoPay    customer_details, merchant    
    Validate AutoPay Details Are Deleted    nan    
    Validate AutoPay Origin In Scheduled Payments    account_number, invoice_number, expected_origin    
    Delete AutoPay Details    nan    
    Select Specific Day Of The Month    nan    
    Validate Created AutoPay Details For Each Day Of Week    expected_scheduleday, expected_invoicetype    
    Validate Created AutoPay Details For Specific Day Of Week    expected_scheduleday, expected_invoicetype, expected_dayofweek    
    Select Invoices That Are Within Due Date    due    
    Select Invoices Due For The Payment    nan    
    Select Specific Day Of The Week    day    
    Close Delete AutoPay Confirmation Popup    nan    
    Select Invoices That Are Past The Invoice Date    invoice_due    
    Validate Delete AutoPay Confirmation Popup Is Closed    nan    
    Select Each Day As Payment Option    nan

*** Keywords ***
Login To PayNOW And Navigate To Autopay
    [Arguments]    account_number, invoice_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number, invoice_number

Enter Customer And Credit Card Details For AutoPay
    [Arguments]    card_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    card_number

Save AutoPay
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Created AutoPay Details For Sepecific Day Of Month
    [Arguments]    expected_scheduleday, expected_invoicetype, expected_paymentday, expected_invoiceduedays
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_scheduleday, expected_invoicetype, expected_paymentday, expected_invoiceduedays

Enter Customer Details For AutoPay
    [Arguments]    customer_details, merchant
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    customer_details, merchant

Validate AutoPay Details Are Deleted
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate AutoPay Origin In Scheduled Payments
    [Arguments]    account_number, invoice_number, expected_origin
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    account_number, invoice_number, expected_origin

Delete AutoPay Details
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Select Specific Day Of The Month
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Created AutoPay Details For Each Day Of Week
    [Arguments]    expected_scheduleday, expected_invoicetype
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_scheduleday, expected_invoicetype

Validate Created AutoPay Details For Specific Day Of Week
    [Arguments]    expected_scheduleday, expected_invoicetype, expected_dayofweek
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_scheduleday, expected_invoicetype, expected_dayofweek

Select Invoices That Are Within Due Date
    [Arguments]    due
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    due

Select Invoices Due For The Payment
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Select Specific Day Of The Week
    [Arguments]    day
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    day

Close Delete AutoPay Confirmation Popup
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Select Invoices That Are Past The Invoice Date
    [Arguments]    invoice_due
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    invoice_due

Validate Delete AutoPay Confirmation Popup Is Closed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Select Each Day As Payment Option
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

","The ""omnicorp_autopay"" test case aims to verify the functionality and reliability of the automated payment system developed by Omnicorp. The primary purpose of this test case is to ensure that the autopay feature successfully processes payments on behalf of users as expected. This includes validating that the system can accurately handle recurring transactions, apply correct charges, manage payment scheduling, and maintain security and data integrity throughout.

Key objectives of the test case include:
1. **Accuracy and Timeliness**: Confirm that payments are processed accurately and on the scheduled dates without delays.
2. **Error Handling**: Verify that the system appropriately manages scenarios with insufficient funds, expired payment methods, and other transactional errors."
Create keyword-driven web for PayNOW common_openinvoices,keyword-driven,common_openinvoices,"*** Settings ***
Documentation    Validate common_openinvoices
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
common_openinvoices
    [Documentation]    Validate common_openinvoices using the following steps
Select Payment Method    payment_method    
    Enter ACH/ECheck Values    echeck_details    
    Navigate To Window    nan    
    Process Payment Without Payment Authorization    nan    
    Validate Payment Method And Total Amount    expected_payment_method, expected_amount    
    Enter Customer Details    too-long-keyword    
    Validate Payment Authorization Is Unchecked By Default    nan    
    Click On Close Button    nan    
    Signout From Payment Receipt Page    nan    
    Navigate To Contact Unified Payments Group For More Information    nan    
    Validate Surcharge Amount Is Displayed    nan    
    Validate Total Charges Under Summary Of Payment    expected_charges    
    Validate Payment Authorization Screen Is Closed    nan    
    Validate Customer Invoice Referral Page Is Visible    nan    
    Validate Details In Generated Payment Receipt    payment_type, account_number, payment_method, amount    
    Validate Surcharge Percentage Should Be Equal    exp_percentage    
    Validate Checkboxes Are Selected By Default    nan    
    Add Reason For Less Than Due Amount    invoice, reason    
    Validate Errors After Clicking On Process Invoice    error_message    
    Enter Zip Code    zip_code    
    Wait Till Loading Text Is Invisible    nan    
    Validate Invoice Receipt Is Received In Email    transaction_id    
    Get Transaction ID    nan    
    Validate Find Routing Number Popover Is Displayed    nan    
    Generate Random Customer Details    nan    
    Select Specific Invoice And Enter Amount    invoice_number, amount    
    Select Account Type In ACH/ECheck    account_type    
    Validate Send EMail Receipt Is Checked By Default    nan    
    Navigate To Payment Authorization And Validate Title    nan    
    Enter Lumpsum Amount    amount    
    Validate Payment Type And Account Number    expected_payment_method, expected_account_number    
    Select State    state    
     Enter Credit Card Details    card_number, expired_data, cvv_number    
    Validate Terms Conditions And Privacy Policy Page Is Closed    nan    
    Validate Future Payment Details In Scheduled Payments Page    future_date    
    Select Payment Type    payment_type    
    Process Invoice Payment    nan    
    Navigate To Terms Conditions And Privacy Policy Page    nan    
    Validate Terms Conditions And Privacy Policy Page Is Displayed    nan    
    Validate Payment Receipt Is Generated    nan    
    Enter ACH/ECheck Details    account_number, routing_number

*** Keywords ***
Select Payment Method
    [Arguments]    payment_method
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    payment_method

Enter ACH/ECheck Values
    [Arguments]    echeck_details
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    echeck_details

Navigate To Window
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Process Payment Without Payment Authorization
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Payment Method And Total Amount
    [Arguments]    expected_payment_method, expected_amount
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_payment_method, expected_amount

Enter Customer Details
    [Arguments]    too-long-keyword
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    too-long-keyword

Validate Payment Authorization Is Unchecked By Default
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Click On Close Button
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Signout From Payment Receipt Page
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Navigate To Contact Unified Payments Group For More Information
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Surcharge Amount Is Displayed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate Total Charges Under Summary Of Payment
    [Arguments]    expected_charges
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_charges

Validate Payment Authorization Screen Is Closed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate Customer Invoice Referral Page Is Visible
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate Details In Generated Payment Receipt
    [Arguments]    payment_type, account_number, payment_method, amount
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    payment_type, account_number, payment_method, amount

Validate Surcharge Percentage Should Be Equal
    [Arguments]    exp_percentage
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    exp_percentage

Validate Checkboxes Are Selected By Default
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Add Reason For Less Than Due Amount
    [Arguments]    invoice, reason
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    invoice, reason

Validate Errors After Clicking On Process Invoice
    [Arguments]    error_message
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    error_message

Enter Zip Code
    [Arguments]    zip_code
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    zip_code

Wait Till Loading Text Is Invisible
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Invoice Receipt Is Received In Email
    [Arguments]    transaction_id
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    transaction_id

Get Transaction ID
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Find Routing Number Popover Is Displayed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Generate Random Customer Details
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Select Specific Invoice And Enter Amount
    [Arguments]    invoice_number, amount
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    invoice_number, amount

Select Account Type In ACH/ECheck
    [Arguments]    account_type
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    account_type

Validate Send EMail Receipt Is Checked By Default
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Navigate To Payment Authorization And Validate Title
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Enter Lumpsum Amount
    [Arguments]    amount
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    amount

Validate Payment Type And Account Number
    [Arguments]    expected_payment_method, expected_account_number
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_payment_method, expected_account_number

Select State
    [Arguments]    state
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    state

 Enter Credit Card Details
    [Arguments]    card_number, expired_data, cvv_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    card_number, expired_data, cvv_number

Validate Terms Conditions And Privacy Policy Page Is Closed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate Future Payment Details In Scheduled Payments Page
    [Arguments]    future_date
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    future_date

Select Payment Type
    [Arguments]    payment_type
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    payment_type

Process Invoice Payment
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Navigate To Terms Conditions And Privacy Policy Page
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Terms Conditions And Privacy Policy Page Is Displayed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate Payment Receipt Is Generated
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Enter ACH/ECheck Details
    [Arguments]    account_number, routing_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number, routing_number

","The test case 'common_openinvoices' focuses on validating the functionality of a system related to the handling of open invoices. The primary purpose of this test case is to ensure that the system correctly identifies, retrieves, and processes invoices that are still outstanding and have not yet been settled.

This involves verifying several aspects, such as:

1. **Identification of Open Invoices:** The test case checks whether the system can accurately distinguish between paid and unpaid invoices.
2. **Retrieval Process:** It assesses if the system can fetch all relevant details of the open invoices, such as the invoice number, due date, amount due, and any other pertinent information.
3. **Data Integrity:** The test verifies the accuracy and consistency of the data associated with open"
Build keyword-driven web for PayNOW non-integrated_openinvoices,keyword-driven,non-integrated_openinvoices,"*** Settings ***
Documentation    Validate non-integrated_openinvoices
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
non-integrated_openinvoices
    [Documentation]    Validate non-integrated_openinvoices using the following steps
Validate All Invoices Should Be Removed    nan    
    Validate Filled-In Specific Invoice Data    invoice_number, expected_dueamount, expected_amounttopay    
    Click On Clear All Button    nan    
    Click On Add Invoice    nan    
    Enter Credit Card Values    creditcard_details    
    Create Multiple Invoices    nan    
    Enter Customer Details Without State    nan    
    Validate Filled-In Specific Invoice Data After Removing Other Invoice    invoice_no_to_unselect, expected_invoicenumber, expected_dueamount    
    Validate Invoice Details With Invalid Data    test_case_validation, specific_invoice    
    Enter Account Number    account_number    
    Add Invoice Details    invoice_number, due_amount, amount_to_pay    
    Validate Customer Can Navigate Back From Payment Methods    payment_method    
    Validate Selected Invoice Should Be Removed    invoice_number    
    Validate Dundermifflin Wikipedia Screen Is Visible    nan

*** Keywords ***
Validate All Invoices Should Be Removed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate Filled-In Specific Invoice Data
    [Arguments]    invoice_number, expected_dueamount, expected_amounttopay
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    invoice_number, expected_dueamount, expected_amounttopay

Click On Clear All Button
    [Arguments]    nan
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    nan

Click On Add Invoice
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Enter Credit Card Values
    [Arguments]    creditcard_details
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    creditcard_details

Create Multiple Invoices
    [Arguments]    nan
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    nan

Enter Customer Details Without State
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Filled-In Specific Invoice Data After Removing Other Invoice
    [Arguments]    invoice_no_to_unselect, expected_invoicenumber, expected_dueamount
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    invoice_no_to_unselect, expected_invoicenumber, expected_dueamount

Validate Invoice Details With Invalid Data
    [Arguments]    test_case_validation, specific_invoice
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    test_case_validation, specific_invoice

Enter Account Number
    [Arguments]    account_number
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    account_number

Add Invoice Details
    [Arguments]    invoice_number, due_amount, amount_to_pay
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    invoice_number, due_amount, amount_to_pay

Validate Customer Can Navigate Back From Payment Methods
    [Arguments]    payment_method
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    payment_method

Validate Selected Invoice Should Be Removed
    [Arguments]    invoice_number
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    invoice_number

Validate Dundermifflin Wikipedia Screen Is Visible
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

","The test case 'non-integrated_openinvoices' is designed to evaluate the functionality and reliability of a system's ability to handle open invoices in an environment where it does not rely on integration with other external systems. The primary purpose of this test case is to ensure that open invoices can be accurately managed, tracked, and processed without the need for synchronization or communication with external applications or services.

Here are the key objectives of the 'non-integrated_openinvoices' test case:
1. **Validation of Independent Operations**: Assess whether the system can independently maintain and operate on open invoices without requiring input or data exchange from/to other systems."
Generate keyword-driven web for PayNOW omnicorp_autopay,keyword-driven,omnicorp_autopay,"*** Settings ***
Documentation    Validate omnicorp_autopay
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
omnicorp_autopay
    [Documentation]    Validate omnicorp_autopay using the following steps
Login To PayNOW And Navigate To Autopay    account_number, invoice_number    
    Enter Customer And Credit Card Details For AutoPay    card_number    
    Save AutoPay    nan    
    Validate Created AutoPay Details For Sepecific Day Of Month    expected_scheduleday, expected_invoicetype, expected_paymentday, expected_invoiceduedays    
    Enter Customer Details For AutoPay    customer_details, merchant    
    Validate AutoPay Details Are Deleted    nan    
    Validate AutoPay Origin In Scheduled Payments    account_number, invoice_number, expected_origin    
    Delete AutoPay Details    nan    
    Select Specific Day Of The Month    nan    
    Validate Created AutoPay Details For Each Day Of Week    expected_scheduleday, expected_invoicetype    
    Validate Created AutoPay Details For Specific Day Of Week    expected_scheduleday, expected_invoicetype, expected_dayofweek    
    Select Invoices That Are Within Due Date    due    
    Select Invoices Due For The Payment    nan    
    Select Specific Day Of The Week    day    
    Close Delete AutoPay Confirmation Popup    nan    
    Select Invoices That Are Past The Invoice Date    invoice_due    
    Validate Delete AutoPay Confirmation Popup Is Closed    nan    
    Select Each Day As Payment Option    nan

*** Keywords ***
Login To PayNOW And Navigate To Autopay
    [Arguments]    account_number, invoice_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number, invoice_number

Enter Customer And Credit Card Details For AutoPay
    [Arguments]    card_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    card_number

Save AutoPay
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Created AutoPay Details For Sepecific Day Of Month
    [Arguments]    expected_scheduleday, expected_invoicetype, expected_paymentday, expected_invoiceduedays
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_scheduleday, expected_invoicetype, expected_paymentday, expected_invoiceduedays

Enter Customer Details For AutoPay
    [Arguments]    customer_details, merchant
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    customer_details, merchant

Validate AutoPay Details Are Deleted
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Validate AutoPay Origin In Scheduled Payments
    [Arguments]    account_number, invoice_number, expected_origin
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    account_number, invoice_number, expected_origin

Delete AutoPay Details
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Select Specific Day Of The Month
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Validate Created AutoPay Details For Each Day Of Week
    [Arguments]    expected_scheduleday, expected_invoicetype
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_scheduleday, expected_invoicetype

Validate Created AutoPay Details For Specific Day Of Week
    [Arguments]    expected_scheduleday, expected_invoicetype, expected_dayofweek
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_scheduleday, expected_invoicetype, expected_dayofweek

Select Invoices That Are Within Due Date
    [Arguments]    due
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    due

Select Invoices Due For The Payment
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Select Specific Day Of The Week
    [Arguments]    day
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    day

Close Delete AutoPay Confirmation Popup
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Select Invoices That Are Past The Invoice Date
    [Arguments]    invoice_due
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    invoice_due

Validate Delete AutoPay Confirmation Popup Is Closed
    [Arguments]    nan
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    nan

Select Each Day As Payment Option
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

","The test case 'omnicorp_autopay' is designed to verify the functionality and reliability of the autopay system within Omnicorp's payment processing platform. The primary purpose of this test case is to ensure that the automatic payment feature correctly schedules, processes, and records recurring payments without errors. 

Additionally, this test case assesses whether the system handles various scenarios, such as:

1. Successful autopay transactions.
2. Failed autopay due to insufficient funds or technical issues.
3. Handling of user adjustments or cancellations of autopay settings.
4. Notifications and alerts to the users about upcoming or failed payments.
5. Accurate timing and frequency of autopay transactions.
6. Security measures to protect user payment information.

Ultimately, the test aims"
Validate keyword-driven web for PayNOW omnicorp_openinvoices,keyword-driven,omnicorp_openinvoices,"*** Settings ***
Documentation    Validate omnicorp_openinvoices
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
omnicorp_openinvoices
    [Documentation]    Validate omnicorp_openinvoices using the following steps
Enter Account Number And Invoice Number    login_details    
    Validate Error Message For Empty Details    value

*** Keywords ***
Enter Account Number And Invoice Number
    [Arguments]    login_details
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    login_details

Validate Error Message For Empty Details
    [Arguments]    value
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    value

","The test case 'omnicorp_openinvoices' is designed to verify and validate the management and processing of open invoices within the Omnicorp system. Its primary purpose is to ensure the accurate handling of all related financial transactions and records pertaining to outstanding invoices. This includes:

1. **Data Integrity**: Confirming that open invoices are correctly recorded, displayed, and reflect accurate financial data.
2. **Functional Accuracy**: Checking that all functionalities associated with open invoices, such as creation, modification, querying, and closing, operate as intended.
3. **Compliance and Validation**: Ensuring the system adheres to financial regulations and business rules, which might include proper calculation of due amounts, application of payments, and status updates.
4."
Generate keyword-driven web for PayNOW omnicorp_scheduled_payments,keyword-driven,omnicorp_scheduled_payments,"*** Settings ***
Documentation    Validate omnicorp_scheduled_payments
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
omnicorp_scheduled_payments
    [Documentation]    Validate omnicorp_scheduled_payments using the following steps
Navigate To Schedule Payments Tab    account_number, invoice_number    
    Validate Scheduled Payment Origin Is Displyed    invoice_number, expected_payment_origin    
    Create Schedule Payment    nan    
    Cancel Schedule Payment    nan    
    Select Payment Date    date    
    Validate Scheduled Payment Status    account_number, invoice_number, expected_status    
    Get Schedule Payment Id    account_number, invoice_number    
    Send Event To Process Schedule Payment    account_number, invoice_number    
    Validate Scheduled Payment Date Is Displayed    expected_payment_date    
    Accept Terms Discount Alert    nan

*** Keywords ***
Navigate To Schedule Payments Tab
    [Arguments]    account_number, invoice_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number, invoice_number

Validate Scheduled Payment Origin Is Displyed
    [Arguments]    invoice_number, expected_payment_origin
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    invoice_number, expected_payment_origin

Create Schedule Payment
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Cancel Schedule Payment
    [Arguments]    nan
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    nan

Select Payment Date
    [Arguments]    date
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    date

Validate Scheduled Payment Status
    [Arguments]    account_number, invoice_number, expected_status
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    account_number, invoice_number, expected_status

Get Schedule Payment Id
    [Arguments]    account_number, invoice_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number, invoice_number

Send Event To Process Schedule Payment
    [Arguments]    account_number, invoice_number
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    account_number, invoice_number

Validate Scheduled Payment Date Is Displayed
    [Arguments]    expected_payment_date
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    expected_payment_date

Accept Terms Discount Alert
    [Arguments]    nan
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    nan

","The test case 'omnicorp_scheduled_payments' is designed to validate the functionality and reliability of the scheduled payments feature within the Omnicorp financial system. Its primary purpose is to ensure that the system accurately processes and manages automated payments that users set up to occur on a future date or at regular intervals.

Key aspects of the test case include:
1. **Creation**: Confirming users can successfully schedule a payment by selecting the payee, amount, frequency (one-time, daily, weekly, monthly, etc.), and the start date.
2. **Modification**: Ensuring users can modify scheduled payments before they are processed, including changes to the amount, date, and frequency."
Validate keyword-driven web for HolidayBookingSystem booking_confirmation,keyword-driven,booking_confirmation,"*** Settings ***
Documentation    Validate booking_confirmation
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
booking_confirmation
[Documentation]    Validate booking_confirmation using the following steps
Select Destination    destination
Choose Travel Dates    travel_dates
Provide Traveler Information    traveler_details
Confirm Booking    nan
Validate Booking Confirmation    booking_details
Send Confirmation Email    email_details
Check Email For Confirmation    nan

*** Keywords ***
Select Destination
[Arguments]    destination
[Return]    ${string}
[Documentation]    Keyword description
Log    destination

Choose Travel Dates
[Arguments]    travel_dates
[Return]    ${string}
[Documentation]    Keyword description
Log    travel_dates

Provide Traveler Information
[Arguments]    traveler_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    traveler_details

Confirm Booking
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Booking Confirmation
[Arguments]    booking_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    booking_details

Send Confirmation Email
[Arguments]    email_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email_details

Check Email For Confirmation
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The test case 'booking_confirmation' is designed to evaluate the functionality and reliability of a holiday booking system's ability to confirm a booking. The primary purpose of this test case is to ensure that users can successfully book a holiday package, receive confirmation, and validate all booking details.

Here are the key objectives of the 'booking_confirmation' test case:
"
Create keyword-driven tellywiz for UserManagement user_registration,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_registration
[Documentation]    Validate user registration using the following steps
Navigate To Registration Page    nan
Fill Registration Form    user_details
Submit Registration Form    nan
Validate Successful Registration Message    expected_message
Log Out From Application    nan

*** Keywords ***
Navigate To Registration Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Fill Registration Form
[Arguments]    user_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_details

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Successful Registration Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Log Out From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'user_registration' test case is formulated to validate the user registration process within an application. The test ensures that new users can create accounts seamlessly and verifies that all associated functionalities related to registration work as expected.

Key aspects of the test case include:

1. **Form Navigation:** Ensuring that users can navigate to the registration page without any issues.
2. **Data Input:** Verifying that all necessary fields within the registration form can be filled correctly.
3. **Submission Process:** Checking that form submission works and proper feedback is given to the user.
4. **Confirmation:** Validating that a successful registration message or confirmation is displayed after the registration process.
5. **Session Management:** Ensuring that the user session is managed properly post-registration, including the logout functionality."
Validate keyword-driven web for PayNOW transactions,keyword-driven,transactions,"*** Settings ***
Documentation    Validate transactions
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
transactions
[Documentation]    Validate transactions using the following steps
Login With Valid Credentials    VALID_USER, VALID_PASSWORD
Fetch Transactions List    transaction_date_range
Validate Transaction Details    transaction_id

*** Keywords ***
Login With Valid Credentials
[Arguments]    VALID_USER, VALID_PASSWORD
[Return]    ${boolean}
[Documentation]    Keyword description
Log    VALID_USER, VALID_PASSWORD

Fetch Transactions List
[Arguments]    transaction_date_range
[Return]    ${list}
[Documentation]    Keyword description
Log    transaction_date_range

Validate Transaction Details
[Arguments]    transaction_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id

","The test case 'transactions' aims to validate the accuracy, reliability, and performance of the financial transaction handling in the PayNOW system. Here's a summary of its objectives:

1. **User Authentication:**
- Ensure that the system correctly authenticates users with valid credentials.

2. **Transaction Retrieval:**
- Verify that the application can retrieve a list of transactions within a specified date range.

3. **Transaction Validation:**
- Confirm that individual transaction details (e.g., transaction ID, amount, date) are accurate and correctly displayed."
Perform tasks for Customer Management System - CMS,keyword-driven,customer_management_system,"*** Settings ***
Documentation    Validate customer_management_system
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
customer_management_system
[Documentation]    Validate customer_management_system using the following steps
Add New Customer    customer_data
Validate New Customer Is Added    customer_id
Search For Existing Customer    customer_name
Validate Customer Details Are Displayed    customer_id
Update Customer Address    customer_id|new_address
Validate Updated Customer Address    customer_id|expected_address
Delete Customer Record    customer_id
Validate Customer Record Is Deleted    customer_id

*** Keywords ***
Add New Customer
[Arguments]    customer_data
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_data

Validate New Customer Is Added
[Arguments]    customer_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id

Search For Existing Customer
[Arguments]    customer_name
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_name

Validate Customer Details Are Displayed
[Arguments]    customer_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id

Update Customer Address
[Arguments]    customer_id|new_address
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id|new_address

Validate Updated Customer Address
[Arguments]    customer_id|expected_address
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id|expected_address

Delete Customer Record
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

Validate Customer Record Is Deleted
[Arguments]    customer_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id

","The 'customer_management_system' test case is designed to evaluate the functionalities of a Customer Management System (CMS). This test case ensures that the CMS can handle various customer-related operations such as adding, searching, updating, and deleting customer records efficiently.
"
Build keyword-driven web for PayNOW customer_payments,keyword-driven,customer_payments,"*** Settings ***
Documentation    Validate customer_payments
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
customer_payments
[Documentation]    Validate customer_payments using the following steps
Login To Customer PayNOW And Navigate To Payments    customer_id
Select Payment Method For Customer    payment_method
Enter Customer Payment Details    payment_details
Submit Payment    nan
Validate Payment Confirmation For Customer    confirmation_details
Generate Payment Receipt    customer_id
Validate Payment Receipt    receipt_details
Log Out From PayNOW    nan

*** Keywords ***
Login To Customer PayNOW And Navigate To Payments
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

Select Payment Method For Customer
[Arguments]    payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method

Enter Customer Payment Details
[Arguments]    payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_details

Submit Payment
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment Confirmation For Customer
[Arguments]    confirmation_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    confirmation_details

Generate Payment Receipt
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

Validate Payment Receipt
[Arguments]    receipt_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    receipt_details

Log Out From PayNOW
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'customer_payments' test case is designed to verify the customer payment functionality within the PayNOW platform. The main goal is to ensure the system correctly handles the workflow of processing customer payments, right from login to payment confirmation and receipt generation.

The test case covers:
1. **Login and Navigation:** Validating that a customer can log in and navigate to the payments section.
2. **Payment Method Selection:** Ensuring the customer can select a preferred payment method.
3. **Payment Details Entry:** Entering accurate payment details for processing.
4. **Payment Submission:** Submitting the payment and observing proper handling by the system.
5. **Confirmation Validation:** Checking that the payment confirmation details are displayed correctly.
6. **Receipt Generation and Validation:** Generating and validating the payment receipt to ensure details match the transaction.
7. **Logout:** Ensuring the customer can securely log out after making the payment.

The testing process aims to verify the smooth operation of customer payment processing while ensuring data integrity, timely transaction processing, and accurate record-keeping for audit and review purposes."
Build keyword-driven omnicorp for Customers transaction_history,keyword-driven,transaction_history,"*** Settings ***
Documentation    Validate transaction_history
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
transaction_history
[Documentation]    Validate transaction_history using the following steps
Navigate To Transaction History    nan
Validate Transaction History Page Is Displayed    nan
Filter Transactions By Date Range    start_date|end_date
Validate Transaction List Is Displayed    nan
Validate Transaction Details For A Specific Date    transaction_date
Sort Transactions By Amount    amount
Apply Transaction Type Filter    transaction_type
Validate Filtered Transaction List    filtered_list
Download Transaction History As PDF    nan
Validate Downloaded PDF Contains Transactions    expected_transactions
Clear Transaction Filters    nan
Validate Transaction Filters Are Cleared    nan
Export Transaction History To CSV    nan
Validate Exported CSV File Content    expected_content
Print Transaction History Report    nan
Validate Printed Report Matches Transaction History    expected_report_content

*** Keywords ***
Navigate To Transaction History
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Transaction History Page Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Filter Transactions By Date Range
[Arguments]    start_date|end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date|end_date

Validate Transaction List Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Transaction Details For A Specific Date
[Arguments]    transaction_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_date

Sort Transactions By Amount
[Arguments]    amount
[Return]    ${string}
[Documentation]    Keyword description
Log    amount

Apply Transaction Type Filter
[Arguments]    transaction_type
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_type

Validate Filtered Transaction List
[Arguments]    filtered_list
[Return]    ${boolean}
[Documentation]    Keyword description
Log    filtered_list

Download Transaction History As PDF
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Downloaded PDF Contains Transactions
[Arguments]    expected_transactions
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_transactions

Clear Transaction Filters
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Transaction Filters Are Cleared
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Export Transaction History To CSV
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Exported CSV File Content
[Arguments]    expected_content
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_content

Print Transaction History Report
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Printed Report Matches Transaction History
[Arguments]    expected_report_content
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_report_content

","The 'transaction_history' test case is designed to assure the correctness and robustness of a system's capability to manage and display transaction histories. Its main focus is on verifying that users can easily access, filter, and export their transaction records, ensuring both data accuracy and usability.

Key objectives include:
1. **User Accessibility:** Ensuring that users can navigate to and view their transaction history without any issues.
2. **Data Filtering:** Verifying that users can filter transactions based on date range, type, and amount to narrow down the listed results.
3. **Data Export:** Confirming that users can export their transaction history into different formats such as PDF and CSV and that the exported content matches the displayed data.
4. **Report Generation:** Ensuring that users can print reports of their transaction histories and that"
Validate keyword-driven web for PayNOW integrated_transactions,keyword-driven,integrated_transactions,"*** Settings ***
Documentation    Validate integrated_transactions
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
integrated_transactions
[Documentation]    Validate integrated_transactions using the following steps
Enter Transaction ID And Amount    transaction_details
Validate Transaction Success Message    transaction_result
Click On Confirm Button    nan
Enter Customer Details And Payment Method    customer_info|payment_method
Validate Transaction Failure Due To Invalid Payment Method    transaction_failure
Create And Validate Multiple Transactions    nan
Validate Duplicate Transaction Error    duplicate_transaction_details
Validate Transaction History Is Updated    transaction_history_details

*** Keywords ***
Enter Transaction ID And Amount
[Arguments]    transaction_details
[Return]    ${integer}
[Documentation]    Keyword description
Log    transaction_details

Validate Transaction Success Message
[Arguments]    transaction_result
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_result

Click On Confirm Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Customer Details And Payment Method
[Arguments]    customer_info|payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_info|payment_method

Validate Transaction Failure Due To Invalid Payment Method
[Arguments]    transaction_failure
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_failure

Create And Validate Multiple Transactions
[Arguments]    nan
[Return]    @{list}
[Documentation]    Keyword description
Log    nan

Validate Duplicate Transaction Error
[Arguments]    duplicate_transaction_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    duplicate_transaction_details

Validate Transaction History Is Updated
[Arguments]    transaction_history_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_history_details
","The test case 'integrated_transactions' is designed to verify and validate the end-to-end management and processing of transactions within the integrated PayNOW system. This includes ensuring all related financial activities are accurate and reliable.
"
Build keyword-driven user_profile_keywords for Web profile,keyword-driven,profile,"*** Settings ***
Documentation    Validate profile
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
profile
[Documentation]    Validate profile using the following steps
Login User    username, password
Navigate To User Profile    nan
Validate User Profile Data    username, email, phone
Update User Profile Data    username, new_email, new_phone
Validate Profile Update Success Message    success_message
Validate Updated Profile Data    updated_username, updated_email, updated_phone
Logout User    nan

*** Keywords ***
Login User
[Arguments]    username, password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, password

Navigate To User Profile
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate User Profile Data
[Arguments]    username, email, phone
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, email, phone

Update User Profile Data
[Arguments]    username, new_email, new_phone
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, new_email, new_phone

Validate Profile Update Success Message
[Arguments]    success_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    success_message

Validate Updated Profile Data
[Arguments]    updated_username, updated_email, updated_phone
[Return]    ${boolean}
[Documentation]    Keyword description
Log    updated_username, updated_email, updated_phone

Logout User
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The ""profile"" test case is designed to validate user profile functionalities within a web application. This includes verifying the ability to log in, view, update, and validate profile data. The goals of the ""profile"" test case are:
"
Build keyword-driven web for PayNOW verify_transaction_history,keyword-driven,verify_transaction_history,"*** Settings ***
Documentation    Validate verify_transaction_history
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
verify_transaction_history
[Documentation]    Validate verify_transaction_history using the following steps
Select Transaction History Tab    nan
Enter Date Range    start_date, end_date
Filter Transactions By Type    transaction_type
Sort Transactions By Date    nan
Validate Displayed Transactions    expected_transactions
Click On Transaction Details    transaction_id
Validate Transaction Details    expected_details
Export Transaction History    export_format
Validate Exported File    expected_file
Validate Empty State When No Transaction    nan
Validate Pagination In Transaction History    nan

*** Keywords ***
Select Transaction History Tab
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Date Range
[Arguments]    start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date, end_date

Filter Transactions By Type
[Arguments]    transaction_type
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_type

Sort Transactions By Date
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Displayed Transactions
[Arguments]    expected_transactions
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_transactions

Click On Transaction Details
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Validate Transaction Details
[Arguments]    expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_details

Export Transaction History
[Arguments]    export_format
[Return]    ${string}
[Documentation]    Keyword description
Log    export_format

Validate Exported File
[Arguments]    expected_file
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_file

Validate Empty State When No Transaction
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Pagination In Transaction History
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The test case ""verify_transaction_history"" is intended to ensure the accuracy and functionality of the transaction history features within a financial or accounting system. Key aspects that this test case will cover include:

1. **Validation of Data Display**:
- Ensure that transactions within the specified date range are accurately displayed.
- The ability to filter transactions by type and validate the correct transactions are shown.

2. **Details and Export Functionality**:
- Validate that clicking on a transaction displays the correct details.
- Ensure that exporting transaction data is accurate and produces the correct file format.

3. **User Experience and UI**:
- Ensure the system displays proper pagination.
- Validate the empty state display when no transactions are available."
Create keyword-driven web for PayNOW account_management,keyword-driven,account_management,"*** Settings ***
Documentation    Validate account management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
account_management
[Documentation]    Validate account management using the following steps
Navigate To Account Management Page    account_id
Validate Account Details Are Displayed    account_id, expected_details
Update Account Information    account_id, new_info
Validate Account Information Is Updated    account_id, expected_updated_info
Deactivate Account    account_id
Validate Account Is Deactivated    account_id
Reactivate Account    account_id
Validate Account Is Reactivated    account_id
Change Account Password    account_id, new_password
Validate Password Is Changed    account_id, expected_password_status
Delete Account    account_id
Validate Account Is Deleted    account_id

*** Keywords ***
Navigate To Account Management Page
[Arguments]    account_id
[Return]    ${string}
[Documentation]    Navigate to the account management page using the account id
Log    account_id

Validate Account Details Are Displayed
[Arguments]    account_id, expected_details
[Return]    ${boolean}
[Documentation]    Confirm the account details are properly displayed
Log    account_id, expected_details

Update Account Information
[Arguments]    account_id, new_info
[Return]    ${string}
[Documentation]    Update the account information with the new data
Log    account_id, new_info

Validate Account Information Is Updated
[Arguments]    account_id, expected_updated_info
[Return]    ${boolean}
[Documentation]    Verify the account information has been updated successfully
Log    account_id, expected_updated_info

Deactivate Account
[Arguments]    account_id
[Return]    ${string}
[Documentation]    Deactivate the given account
Log    account_id

Validate Account Is Deactivated
[Arguments]    account_id
[Return]    ${boolean}
[Documentation]    Check that the account is deactivated
Log    account_id

Reactivate Account
[Arguments]    account_id
[Return]    ${string}
[Documentation]    Reactivate the given account
Log    account_id

Validate Account Is Reactivated
[Arguments]    account_id
[Return]    ${boolean}
[Documentation]    Ensure the account is reactivated correctly
Log    account_id

Change Account Password
[Arguments]    account_id, new_password
[Return]    ${string}
[Documentation]    Change the account password to a new password
Log    account_id, new_password

Validate Password Is Changed
[Arguments]    account_id, expected_password_status
[Return]    ${boolean}
[Documentation]    Verify the account password is changed successfully
Log    account_id, expected_password_status

Delete Account
[Arguments]    account_id
[Return]    ${string}
[Documentation]    Remove the given account from the system
Log    account_id

Validate Account Is Deleted
[Arguments]    account_id
[Return]    ${boolean}
[Documentation]    Confirm the account has been deleted
Log    account_id

","The 'account_management' test case is designed to ensure the functionality of managing user accounts within the PayNOW system, covering operations such as creating, updating, deactivating, and deleting accounts, as well as password changes.

Key components of the 'account_management' test case include:
"
Generate keyword-driven clientcentral_keywords for API accountactivation,keyword-driven,accountactivation,"*** Settings ***
Documentation    Validate accountactivation
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
accountactivation
[Documentation]    Validate accountactivation using the following steps
Create Activation Request Body    unique_value|merchant_id
Send Activation Request    merchant_key|merchant_id
Get Activation Response Details    response
Validate Activation Success Message    response|expected_message
Validate Account Status After Activation    merchant_id|expected_status
Send Request To Reactivate Account    merchant_key|account_id

*** Keywords ***
Create Activation Request Body
[Arguments]    unique_value|merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value|merchant_id

Send Activation Request
[Arguments]    merchant_key|merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant_key|merchant_id

Get Activation Response Details
[Arguments]    response
[Return]    ${string}
[Documentation]    Keyword description
Log    response

Validate Activation Success Message
[Arguments]    response|expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response|expected_message

Validate Account Status After Activation
[Arguments]    merchant_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    merchant_id|expected_status

Send Request To Reactivate Account
[Arguments]    merchant_key|account_id
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant_key|account_id
","The test case 'accountactivation' is crafted to verify the account activation workflow in a software system. This involves ensuring that accounts can be correctly activated and reactivated, and the system's responses are accurately handled and validated.

Key objectives of the 'accountactivation' test case include:
"
Create a keyword-driven test case for Finance transactions,keyword-driven,transactions,"*** Settings ***
Documentation    Validate transactions
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
transactions
[Documentation]    Validate transactions using the following steps
Create New Transaction    account_number|amount|date
Validate Transaction Details    transaction_id|expected_amount|expected_date
Update Transaction Amount    transaction_id|new_amount
Delete Transaction    transaction_id
Validate Transaction Is Deleted    transaction_id
Validate All Transactions For Account    account_number

*** Keywords ***
Create New Transaction
[Arguments]    account_number|amount|date
[Return]    ${transaction_id}
[Documentation]    Keyword description
Log    account_number, amount, date

Validate Transaction Details
[Arguments]    transaction_id|expected_amount|expected_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, expected_amount, expected_date

Update Transaction Amount
[Arguments]    transaction_id|new_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, new_amount

Delete Transaction
[Arguments]    transaction_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id

Validate Transaction Is Deleted
[Arguments]    transaction_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id

Validate All Transactions For Account
[Arguments]    account_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number

","The test case 'transactions' is designed to ensure the proper functionality of financial transactions within an application. It involves validating several key aspects to guarantee the system's integrity and reliability when handling transactions, including:

1. **Transaction Creation:** Verifying that users can successfully create a new transaction by specifying necessary details such as account number, amount, and date.
2. **Detail Validation:** Ensuring that transaction details are accurately stored and retrievable, and match the expected values.
3. **Modification:** Confirming the ability to update transaction details like the transaction amount and validating the changes.
4. **Deletion:** Ensuring that transactions can be deleted and are no longer visible or retrievable after deletion.
5. **Comprehensive Account Validation:** Checking that all transactions related to a specific account are correctly listed, ensuring the data integrity and completeness of the transaction history.

This test case provides a thorough check of transaction operations, aiming to detect any issues that could affect financial processes."
Generate keyword-driven web for UserManagement user_profile_updates,keyword-driven,user_profile_updates,"*** Settings ***
Documentation    Validate user_profile_updates
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_profile_updates
[Documentation]    Validate user_profile_updates using the following steps
Navigate To Profile Page    user_id
Validate Profile Information Is Displayed    user_id, expected_profile_data
Update User Email    user_id, new_email
Update User Password    user_id, new_password
Upload Profile Picture    user_id, picture_path
Validate Updated Email Is Displayed    user_id, expected_email
Validate Updated Password Is Displayed    user_id
Validate Profile Picture Is Displayed    user_id, expected_picture

*** Keywords ***
Navigate To Profile Page
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate Profile Information Is Displayed
[Arguments]    user_id, expected_profile_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id, expected_profile_data

Update User Email
[Arguments]    user_id, new_email
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, new_email

Update User Password
[Arguments]    user_id, new_password
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, new_password

Upload Profile Picture
[Arguments]    user_id, picture_path
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, picture_path

Validate Updated Email Is Displayed
[Arguments]    user_id, expected_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id, expected_email

Validate Updated Password Is Displayed
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Validate Profile Picture Is Displayed
[Arguments]    user_id, expected_picture
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id, expected_picture
","The test case 'user_profile_updates' is designed to validate the functionality and reliability of the user profile update feature within the UserManagement system. Its primary purpose is to ensure that users can successfully update their profile information and that these changes are accurately reflected throughout the system.

Key aspects of the test case include:

1. **Navigation:** Confirming that users can navigate to the profile page using their unique user ID.
2. **Initial Validation:** Ensuring that the original profile information is correctly displayed before any changes are made.
3. **Updates:** Verifying that users can update their email, password, and profile picture, and that the new information is correctly saved.
4. **Post-Update Validation:** Checking that the updated email, password, and profile picture are displayed correctly on the profile page.
5. **Error Handling:** Ensuring the system appropriately handles any errors or invalid inputs during the update process."
Create keyword-driven web for BankingApp transaction_history,keyword-driven,transaction_history,"*** Settings ***
Documentation    Validate transaction_history
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
transaction_history
[Documentation]    Validate transaction_history using the following steps
Login To BankingApp    username|password
Navigate To Transaction History Page    user_id
Filter Transactions By Date    start_date|end_date
Verify Transaction Details    transaction_id|expected_details
Validate Total Debits And Credits    expected_debits|expected_credits
Export Transaction History    format

*** Keywords ***
Login To BankingApp
[Arguments]    username|password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|password

Navigate To Transaction History Page
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Filter Transactions By Date
[Arguments]    start_date|end_date
[Return]    ${list}
[Documentation]    Keyword description
Log    start_date|end_date

Verify Transaction Details
[Arguments]    transaction_id|expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id|expected_details

Validate Total Debits And Credits
[Arguments]    expected_debits|expected_credits
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_debits|expected_credits

Export Transaction History
[Arguments]    format
[Return]    ${string}
[Documentation]    Keyword description
Log    format

","The 'transaction_history' test case is designed to verify the correct functionality of the transaction history feature within a banking application. This feature allows users to view a record of their financial transactions over a specified period.

The main objectives of the 'transaction_history' test case are:
"
Validate keyword-driven productcentral_keywords for API product_catalog,keyword-driven,product_catalog,"*** Settings ***
Documentation    Validate product_catalog
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
product_catalog
[Documentation]    Validate product_catalog using the following steps
Create Product Catalog Body    catalog_name|catalog_id|product_list|discount
Send Request To Create Product Catalog    merchant|catalog_name|catalog_id|product_list|discount
Create Product Details    nan
Validate Product Catalog Response    catalog_id|expected_status
Filter Products By Category    category_name
Validate Filtered Products Are Displayed    catalog_id|category_name
Navigate To Product Details Page    product_id
Update Product Catalog    catalog_name|catalog_id|updated_product_list
Validate Updated Product Catalog Response    catalog_id|expected_status

*** Keywords ***
Create Product Catalog Body
[Arguments]    catalog_name|catalog_id|product_list|discount
[Return]    ${string}
[Documentation]    Keyword description
Log    catalog_name|catalog_id|product_list|discount

Send Request To Create Product Catalog
[Arguments]    merchant|catalog_name|catalog_id|product_list|discount
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant|catalog_name|catalog_id|product_list|discount

Create Product Details
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Product Catalog Response
[Arguments]    catalog_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    catalog_id|expected_status

Filter Products By Category
[Arguments]    category_name
[Return]    ${list}
[Documentation]    Keyword description
Log    category_name

Validate Filtered Products Are Displayed
[Arguments]    catalog_id|category_name
[Return]    ${boolean}
[Documentation]    Keyword description
Log    catalog_id|category_name

Navigate To Product Details Page
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Update Product Catalog
[Arguments]    catalog_name|catalog_id|updated_product_list
[Return]    ${string}
[Documentation]    Keyword description
Log    catalog_name|catalog_id|updated_product_list

Validate Updated Product Catalog Response
[Arguments]    catalog_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    catalog_id|expected_status

","The purpose of the 'product_catalog' test case is to validate the functionality of a product catalog management system in an application. This involves ensuring the accuracy and efficiency of various aspects, including:

1. **Product Catalog Creation:** Ensuring that product catalogs can be created successfully with all necessary details such as catalog name, catalog ID, product list, and discounts.

2. **Product Details Verification:** Confirming that all product details are accurately captured and stored within the catalog.

3. **Catalog Updating:** Validating that updates to product catalogs, including additions and removals of products, are processed and reflected correctly.

4. **Filtering and Navigation:** Checking that products can be filtered by category and that navigation to individual product detail pages is seamless and accurate.

The test case employs keyword-driven testing to ensure modularity and reusability of test steps."
Verify data synchronization and validation for user_profiles,keyword-driven,user_profiles,"*** Settings ***
Documentation    Verify user_profiles
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_profiles
[Documentation]    Verify user_profiles using the following steps
Load User Profiles Page    nan
Validate User Profiles Displayed    user_profiles_list
Select User Profile    profile_id
Edit User Profile Details    profile_id, new_details
Validate Profile Current Data    profile_id, expected_details
Navigate To Account Settings    nan
Verify Email Sync Across Profiles    profile_id, email
Update Profile Picture    profile_id, picture_path
Validate Profile Picture Updated    profile_id, expected_picture
Verify Profile Update Notification    nan
Validate All Profiles Are Synced With Server    sync_status
Trigger Manual Synchronization    nan
Validate Sync Status    nan
Validate User Details In Profile Section    detail_section, profile_id, expected_data
Validate Profile Email Is Correct    profile_id, expected_email
Validate Custom Fields In Profile    profile_id, custom_fields
Add New Custom Field In Profile    profile_id, custom_field
Validate Added Custom Field In Profile    profile_id, expected_field
Delete User Profile    profile_id
Validate Profile Is Deleted    profile_id

*** Keywords ***
Load User Profiles Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate User Profiles Displayed
[Arguments]    user_profiles_list
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_profiles_list

Select User Profile
[Arguments]    profile_id
[Return]    ${string}
[Documentation]    Keyword description
Log    profile_id

Edit User Profile Details
[Arguments]    profile_id, new_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    profile_id, new_details

Validate Profile Current Data
[Arguments]    profile_id, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    profile_id, expected_details

Navigate To Account Settings
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Verify Email Sync Across Profiles
[Arguments]    profile_id, email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    profile_id, email

Update Profile Picture
[Arguments]    profile_id, picture_path
[Return]    ${string}
[Documentation]    Keyword description
Log    profile_id, picture_path

Validate Profile Picture Updated
[Arguments]    profile_id, expected_picture
[Return]    ${boolean}
[Documentation]    Keyword description
Log    profile_id, expected_picture

Verify Profile Update Notification
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate All Profiles Are Synced With Server
[Arguments]    sync_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    sync_status

Trigger Manual Synchronization
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Sync Status
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate User Details In Profile Section
[Arguments]    detail_section, profile_id, expected_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    detail_section, profile_id, expected_data

Validate Profile Email Is Correct
[Arguments]    profile_id, expected_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    profile_id, expected_email

Validate Custom Fields In Profile
[Arguments]    profile_id, custom_fields
[Return]    ${boolean}
[Documentation]    Keyword description
Log    profile_id, custom_fields

Add New Custom Field In Profile
[Arguments]    profile_id, custom_field
[Return]    ${string}
[Documentation]    Keyword description
Log    profile_id, custom_field

Validate Added Custom Field In Profile
[Arguments]    profile_id, expected_field
[",
Generate keyword-driven web for PayNOW prime_enterpayment,keyword-driven,prime_enterpayment,"*** Settings ***
Documentation    Validate prime_enterpayment
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
prime_enterpayment
[Documentation]    Validate prime_enterpayment using the following steps
Login And Navigate To Payment Screen    account_number
Enter Payment Details    payment_method, amount, due_date
Submit Payment    nan
Validate Payment Confirmation Is Displayed    nan
Validate Payment Details On Confirmation Page    expected_payment_method, expected_amount, expected_due_date
Navigate Back To Payment Screen    nan
Check Payment History For Correct Entry    account_number
Validate Email Confirmation Is Sent    email_content
Logout From Application    nan
Confirm Logout    nan

*** Keywords ***
Login And Navigate To Payment Screen
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Enter Payment Details
[Arguments]    payment_method, amount, due_date
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method, amount, due_date

Submit Payment
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment Confirmation Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Payment Details On Confirmation Page
[Arguments]    expected_payment_method, expected_amount, expected_due_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_payment_method, expected_amount, expected_due_date

Navigate Back To Payment Screen
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Check Payment History For Correct Entry
[Arguments]    account_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number

Validate Email Confirmation Is Sent
[Arguments]    email_content
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email_content

Logout From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Confirm Logout
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The test case 'prime_enterpayment' aims to validate the functionality and accuracy of the payment entry process within the PrimePay Payment system. 
"
Build keyword-driven autoRent for Booking book_a_car,keyword-driven,book_a_car,"*** Settings ***
Documentation    Validate book_a_car
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
book_a_car
[Documentation]    Validate book_a_car using the following steps
Login With Valid Credentials    ${VALID_USER}    ${VALID_PASSWORD}
Search For A Car    location    pickup_date    return_date
Select Car From Search Results    car_index
Validate Car Details    expected_car_details
Enter Personal Details    first_name    last_name    email    phone_number
Enter Payment Information    card_number    expiry_date    cvv
Submit Booking    nan
Validate Booking Confirmation    expected_confirmation_message
Logout From Application    nan

*** Keywords ***
Login With Valid Credentials
[Arguments]    username    password
[Return]    ${boolean}
[Documentation]    Log in with valid credentials
Log    username
Log    password

Search For A Car
[Arguments]    location    pickup_date    return_date
[Return]    ${boolean}
[Documentation]    Search for a car based on specified criteria
Log    location
Log    pickup_date
Log    return_date

Select Car From Search Results
[Arguments]    car_index
[Return]    ${string}
[Documentation]    Select a car from the search results
Log    car_index

Validate Car Details
[Arguments]    expected_car_details
[Return]    ${boolean}
[Documentation]    Validate the details of the selected car
Log    expected_car_details

Enter Personal Details
[Arguments]    first_name    last_name    email    phone_number
[Return]    ${string}
[Documentation]    Enter personal information for booking
Log    first_name
Log    last_name
Log    email
Log    phone_number

Enter Payment Information
[Arguments]    card_number    expiry_date    cvv
[Return]    ${string}
[Documentation]    Enter the payment information
Log    card_number
Log    expiry_date
Log    cvv

Submit Booking
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Submit the car booking
Log    nan

Validate Booking Confirmation
[Arguments]    expected_confirmation_message
[Return]    ${boolean}
[Documentation]    Validate the booking confirmation message
Log    expected_confirmation_message

Logout From Application
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Log out from the application
Log    nan

","The 'book_a_car' test case is designed to ensure the automated car booking process works accurately and efficiently. This test case encompasses steps to search for a car, select a model, input personal and payment details, and finalize the booking.

Purpose:

1. **Functional Validation**:
- Ensure the search functionality returns correct results.
- Verify the car selection process works as intended.
- Validate that car details are accurately displayed.

2. **User Interaction**:
- Check that users can log in, input personal details, and make payments without encountering errors.
- Confirm the booking submission and receive the appropriate confirmation message.

3. **Data Integrity**:
- Validate the accuracy of personal and payment information processing.
- Confirm that the booking details are accurately captured and stored."
Create keyword-driven web test case for PayNOW update_user_profile,keyword-driven,update_user_profile,"*** Settings ***
Documentation    Validate update_user_profile
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
update_user_profile
[Documentation]    Validate update_user_profile using the following steps
Login To PayNOW And Navigate To Profile    user_id
Enter New User Profile Details    user_details
Save User Profile    nan
Validate Updated Profile Details    expected_user_details
Modify User Profile Details    new_user_details
Save Modified Profile Details    nan
Validate Profile Modification    new_expected_details
Reset User Profile To Default    nan
Validate Reset Profile Details    default_user_details
Logout From Profile    nan

*** Keywords ***
Login To PayNOW And Navigate To Profile
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Enter New User Profile Details
[Arguments]    user_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_details

Save User Profile
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Updated Profile Details
[Arguments]    expected_user_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_user_details

Modify User Profile Details
[Arguments]    new_user_details
[Return]    ${string}
[Documentation]    Keyword description
Log    new_user_details

Save Modified Profile Details
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Profile Modification
[Arguments]    new_expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    new_expected_details

Reset User Profile To Default
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Reset Profile Details
[Arguments]    default_user_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    default_user_details

Logout From Profile
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'update_user_profile' is designed to verify the functionality and reliability of the user profile update system within PayNOW. This test case's primary aim is to ensure that users can successfully update their profile information, and these updates are accurately reflected in the system. Additionally, this test evaluates the system's ability to handle various profile-related actions and validation, including:

1. **Profile Information Update:** Ensuring users can update their personal details such as name, email, address, and contact number.
2. **Profile Data Validation:** Checking that the updated details are correctly saved and displayed.
3. **Modification and Reversion:** Allowing users to modify their profile again and revert to default settings if needed.
4. **Error Handling:** Validating the system's response to invalid or incomplete data entries.
5. **Security Measures:** Ensuring the security of user profile data during the update process.

The test case aims to assess the user profile update feature's smooth functioning, user experience, and system security."
Create keyword-driven web for PayNOW omnicorp_payment_disputes,keyword-driven,omnicorp_payment_disputes,"*** Settings ***
Documentation    Validate omnicorp_payment_disputes
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
omnicorp_payment_disputes
[Documentation]    Validate omnicorp_payment_disputes using the following steps
Navigate To Disputes Tab    account_number
Validate Dispute Summary Displayed    account_number, dispute_id
Create New Dispute    dispute_details
Validate Dispute Creation Confirmation    dispute_id
Update Dispute Information    dispute_id, updated_dispute_details
Validate Updated Dispute Information    dispute_id, expected_dispute_status
Close Dispute    dispute_id
Validate Dispute Closure Confirmation    dispute_id

*** Keywords ***
Navigate To Disputes Tab
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Validate Dispute Summary Displayed
[Arguments]    account_number, dispute_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, dispute_id

Create New Dispute
[Arguments]    dispute_details
[Return]    ${string}
[Documentation]    Keyword description
Log    dispute_details

Validate Dispute Creation Confirmation
[Arguments]    dispute_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    dispute_id

Update Dispute Information
[Arguments]    dispute_id, updated_dispute_details
[Return]    ${string}
[Documentation]    Keyword description
Log    dispute_id, updated_dispute_details

Validate Updated Dispute Information
[Arguments]    dispute_id, expected_dispute_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    dispute_id, expected_dispute_status

Close Dispute
[Arguments]    dispute_id
[Return]    ${string}
[Documentation]    Keyword description
Log    dispute_id

Validate Dispute Closure Confirmation
[Arguments]    dispute_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    dispute_id

","The test case 'omnicorp_payment_disputes' is designed to validate the handling and management of payment disputes within the Omnicorp financial system. The main objective is to ensure that users can successfully create, update, and close disputes related to erroneous or disputed payments. This includes verifying that the dispute information is accurately recorded, reflected in the user interface, and that users are notified of the dispute status changes appropriately.

Key aspects of the test case:"
Validate keyword-driven reportgeneration_keywords for API reporting,keyword-driven,reporting,"*** Settings ***
Documentation    Validate reporting
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
reporting
[Documentation]    Validate reporting using the following steps
Create Report Request Body    unique_value, report_type, report_filters
Send Request To Generate Report    report_type, report_filters
Validate Report Generation Status    report_id
Download Generated Report    report_id

*** Keywords ***
Create Report Request Body
[Arguments]    unique_value, report_type, report_filters
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value, report_type, report_filters

Send Request To Generate Report
[Arguments]    report_type, report_filters
[Return]    ${string}
[Documentation]    Keyword description
Log    report_type, report_filters

Validate Report Generation Status
[Arguments]    report_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    report_id

Download Generated Report
[Arguments]    report_id
[Return]    ${string}
[Documentation]    Keyword description
Log    report_id

","The test case 'reporting' aims to verify the correctness, accuracy, and performance of the report generation functionality within an application or system. Its primary purpose is to ensure that various types of reports can be generated correctly, meet the expected criteria, and are available for download within the stipulated time frame.

Key objectives of this test case include:
"
Validate keyword-driven web for BankingApp transaction_history,keyword-driven,transaction_history,"*** Settings ***
Documentation    Validate transaction_history
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
transaction_history
[Documentation]    Validate transaction_history using the following steps
Login To Banking Application    username, password
Navigate To Transaction History    nan
Validate Transaction List Is Displayed    nan
Filter Transaction By Date Range    start_date, end_date
Validate Filtered Transactions By Date Range    start_date, end_date
Sort Transactions By Amount    nan
Validate Transactions Are Sorted By Amount    nan
Select Specific Transaction    transaction_id
Validate Transaction Details    transaction_id, expected_details
Export Transaction History    file_format
Validate Exported Transaction History    file_format, expected_content

*** Keywords ***
Login To Banking Application
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Navigate To Transaction History
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Transaction List Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Filter Transaction By Date Range
[Arguments]    start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date, end_date

Validate Filtered Transactions By Date Range
[Arguments]    start_date, end_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    start_date, end_date

Sort Transactions By Amount
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Transactions Are Sorted By Amount
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Select Specific Transaction
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Validate Transaction Details
[Arguments]    transaction_id, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, expected_details

Export Transaction History
[Arguments]    file_format
[Return]    ${string}
[Documentation]    Keyword description
Log    file_format

Validate Exported Transaction History
[Arguments]    file_format, expected_content
[Return]    ${boolean}
[Documentation]    Keyword description
Log    file_format, expected_content

","The 'transaction_history' test case is designed to verify the functionality of the transaction history feature in a banking application. This includes ensuring that users can view, filter, sort, and validate transaction records accurately. Key aspects validated in this test case include:

1. **Login Validation**:
- Confirming successful login using valid credentials to access the transaction history.

2. **Transaction List Display**:
- Ensuring that the transaction history list is displayed correctly upon navigating to the respective section.

3. **Filtering and Sorting**:
- Validating that transactions can be filtered by date range.
- Checking that transactions can be sorted by amount accurately.

4. **Transaction Details**:
- Verifying the details of specific transactions for accuracy.

5. **Export Functionality**:
- Ensuring the transaction history can be exported in different formats (e.g., PDF, CSV) and validating the accuracy of the exported content."
Validate keyword-driven phoenixtours for Booking Site booking_site,keyword-driven,booking_site,"*** Settings ***
Documentation    Validate booking_site
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
booking_site
[Documentation]    Validate booking_site using the following steps
Search Tours    destination, start_date, end_date
Validate Available Tours Are Displayed    destination
Select Tour From Results    tour_id
Enter Customer Information    customer_name, email, phone
Select Payment Method    payment_method
Confirm Booking    booking_reference
Validate Booking Confirmation Is Displayed    booking_reference
Cancel Booking    booking_reference
Validate Booking Is Canceled    booking_reference
Validate Error Messages For Empty Fields    field_name
Validate Tour Details In Confirmation    tour_id, customer_name, start_date, end_date

*** Keywords ***
Search Tours
[Arguments]    destination, start_date, end_date
[Return]    @{list}
[Documentation]    Keyword description
Log    destination, start_date, end_date

Validate Available Tours Are Displayed
[Arguments]    destination
[Return]    ${boolean}
[Documentation]    Keyword description
Log    destination

Select Tour From Results
[Arguments]    tour_id
[Return]    ${string}
[Documentation]    Keyword description
Log    tour_id

Enter Customer Information
[Arguments]    customer_name, email, phone
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_name, email, phone

Select Payment Method
[Arguments]    payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method

Confirm Booking
[Arguments]    booking_reference
[Return]    ${string}
[Documentation]    Keyword description
Log    booking_reference

Validate Booking Confirmation Is Displayed
[Arguments]    booking_reference
[Return]    ${boolean}
[Documentation]    Keyword description
Log    booking_reference

Cancel Booking
[Arguments]    booking_reference
[Return]    ${string}
[Documentation]    Keyword description
Log    booking_reference

Validate Booking Is Canceled
[Arguments]    booking_reference
[Return]    ${boolean}
[Documentation]    Keyword description
Log    booking_reference

Validate Error Messages For Empty Fields
[Arguments]    field_name
[Return]    ${string}
[Documentation]    Keyword description
Log    field_name

Validate Tour Details In Confirmation
[Arguments]    tour_id, customer_name, start_date, end_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    tour_id, customer_name, start_date, end_date

","The 'booking_site' test case is designed to assess the functionality and user experience of the booking site for Phoenix Tours, an online tour booking system. This test case ensures that the booking process is smooth, user-friendly, and free of errors. Key areas of focus include:
"
Develop keyword-driven user_registration scenario for new user sign-up,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       newuser
${VALID_PASSWORD}   password123

*** Test Cases ***
user_registration
[Documentation]    Validate user_registration using the following steps
Open Registration Page    nan
Fill In User Details    username|email|password|confirm_password
Submit Registration Form    nan
Validate Successful Registration Message    expected_message
Navigate To User Dashboard    nan
Validate User Details On Dashboard    username|email
Close Registration Confirmation    nan
Validate Registration Email Sent    email
Log Out    nan

*** Keywords ***
Open Registration Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Fill In User Details
[Arguments]    username|email|password|confirm_password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|email|password|confirm_password

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Successful Registration Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Navigate To User Dashboard
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate User Details On Dashboard
[Arguments]    username|email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|email

Close Registration Confirmation
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Registration Email Sent
[Arguments]    email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email

Log Out
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan
","The test case 'user_registration' is crafted to verify the entire flow of registering a new user within a system, ensuring that all critical steps—from opening the registration page to confirming the registration email—function as expected.

Key aspects of this test case include:

1. **Registration Form Verification:** Ensuring that the registration form correctly captures and validates user details, such as username, email, and password.

2. **Successful Registration:** Verifying that submitting the registration form leads to a successful registration message and navigates to the appropriate user dashboard.

3. **Dashboard Validation:** Ensuring that the user's details are correctly displayed on the dashboard after registration.

4. **Email Confirmation:** Validating that a confirmation email is sent to the registered email address and that its content is correct.

The test aims to comprehensively verify the user's experience and the system's reliability during the registration process, addressing potential issues such as data validation, successful user creation, and communication through confirmation emails."
Perform keyword-driven testing for GlobalSystems payment_processing,keyword-driven,payment_processing,"*** Settings ***
Documentation    Validate payment_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
payment_processing
[Documentation]    Validate payment_processing using the following steps
Login To PaymentPortal And Navigate To Payments    user_credentials, session_id
Verify Payment Gateway Connection    gateway_response
Process Payment With Credit Card    card_details, payment_amount
Validate Payment Confirmation Details    confirmation_details
Process Refund For Payment    transaction_id
Validate Refund Confirmation Details    refund_details
Check Payment Status In Transactions    transaction_id
Validate Error Message For Invalid Card    card_number
Close Payment Session    session_id

*** Keywords ***
Login To PaymentPortal And Navigate To Payments
[Arguments]    user_credentials, session_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_credentials, session_id

Verify Payment Gateway Connection
[Arguments]    gateway_response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    gateway_response

Process Payment With Credit Card
[Arguments]    card_details, payment_amount
[Return]    ${string}
[Documentation]    Keyword description
Log    card_details, payment_amount

Validate Payment Confirmation Details
[Arguments]    confirmation_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    confirmation_details

Process Refund For Payment
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Validate Refund Confirmation Details
[Arguments]    refund_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    refund_details

Check Payment Status In Transactions
[Arguments]    transaction_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id

Validate Error Message For Invalid Card
[Arguments]    card_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    card_number

Close Payment Session
[Arguments]    session_id
[Return]    ${string}
[Documentation]    Keyword description
Log    session_id

","The test case 'payment_processing' is designed to validate the functionality, correctness, and robustness of the payment processing system within GlobalSystems' financial platform. It aims to ensure that the payment system correctly processes different types of payments and handles various scenarios. The primary objectives of this test case include:

1. **Payment Gateway Verification**:
- Confirm that the payment gateway integration is working correctly and is able to process payments securely.

2. **Payment Processing**:
- Ensure the system can process payments using different methods (e.g., credit card).
- Validate that payments are correctly recorded and detailed accurately.

3. **Refund Handling**:
- Verify that the refund process operates correctly and updates transaction records as expected.

4. **Error Handling**:
- Check the system's response to invalid payment information, ensuring proper error messages are displayed.

5. **Session and Security Management**:
- Ensure that the user sessions are handled securely, logging out users after transactions are completed.

By covering these aspects, the test helps in verifying that the payment processing system provides reliable and secure functionality for handling financial transactions."
Validate keyword-driven clientcentral_keywords for API refund,keyword-driven,refund,"*** Settings ***
Documentation    Validate refund
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
refund
[Documentation]    Validate refund using the following steps
Create Refund Request Body    customer_id|order_id|refund_amount|refund_reason
Send Request To Process Refund For Credit Card    merchant|customer_id|order_id|refund_amount|refund_reason
Verify Refund Status    order_id|expected_status
Send Request To Process Refund For ACH/Echeck    merchant|customer_id|order_id|refund_amount|refund_reason
Get Refund Transaction Id    response
Fetch Refund Details    customer_id|order_id
Validate Refund Processing    customer_id|order_id|expected_status|expected_amount
Log Refund Processing    response
Create Partial Refund Request Body    customer_id|order_id|partial_refund_amount|refund_reason
Send Request To Process Partial Refund For Credit Card    merchant|customer_id|order_id|partial_refund_amount|refund_reason

*** Keywords ***
Create Refund Request Body
[Arguments]    customer_id|order_id|refund_amount|refund_reason
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id|order_id|refund_amount|refund_reason

Send Request To Process Refund For Credit Card
[Arguments]    merchant|customer_id|order_id|refund_amount|refund_reason
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant|customer_id|order_id|refund_amount|refund_reason

Verify Refund Status
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

Send Request To Process Refund For ACH/Echeck
[Arguments]    merchant|customer_id|order_id|refund_amount|refund_reason
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant|customer_id|order_id|refund_amount|refund_reason

Get Refund Transaction Id
[Arguments]    response
[Return]    ${string}
[Documentation]    Keyword description
Log    response

Fetch Refund Details
[Arguments]    customer_id|order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id|order_id

Validate Refund Processing
[Arguments]    customer_id|order_id|expected_status|expected_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id|order_id|expected_status|expected_amount

Log Refund Processing
[Arguments]    response
[Return]    ${string}
[Documentation]    Keyword description
Log    response

Create Partial Refund Request Body
[Arguments]    customer_id|order_id|partial_refund_amount|refund_reason
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id|order_id|partial_refund_amount|refund_reason

Send Request To Process Partial Refund For Credit Card
[Arguments]    merchant|customer_id|order_id|partial_refund_amount|refund_reason
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant|customer_id|order_id|partial_refund_amount|refund_reason

","The purpose of the 'refund' test case is to ensure that the refund processing system of an application operates correctly and efficiently. This process involves verifying several functional aspects such as:
"
Generate keyword-driven shoponline_keywords for E-commerce checkout,keyword-driven,checkout,"*** Settings ***
Documentation    Validate checkout
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
checkout
[Documentation]    Validate checkout using the following steps
Add Item To Cart    item_id, quantity
Navigate To Checkout Page    user_id
Fill Shipping Information    address, city, state, zip_code
Fill Payment Information    card_number, expiration_date, security_code, billing_address
Validate Order Summary    expected_item_list, expected_total_amount
Submit Order    nan
Validate Order Confirmation    order_id, user_id, expected_status

*** Keywords ***
Add Item To Cart
[Arguments]    item_id, quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id, quantity

Navigate To Checkout Page
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Fill Shipping Information
[Arguments]    address, city, state, zip_code
[Return]    ${string}
[Documentation]    Keyword description
Log    address, city, state, zip_code

Fill Payment Information
[Arguments]    card_number, expiration_date, security_code, billing_address
[Return]    ${string}
[Documentation]    Keyword description
Log    card_number, expiration_date, security_code, billing_address

Validate Order Summary
[Arguments]    expected_item_list, expected_total_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_item_list, expected_total_amount

Submit Order
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order Confirmation
[Arguments]    order_id, user_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, user_id, expected_status

","
"
Generate keyword-driven stirlinglead for Reports performance_monitoring,keyword-driven,performance_monitoring,"*** Settings ***
Documentation    Validate performance_monitoring
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
performance_monitoring
[Documentation]    Validate performance_monitoring using the following steps
Login And Navigate To Performance Reports    user, password
Select Date Range For Performance Report    start_date, end_date
Validate Performance Data Is Displayed    expected_data
Filter Performance Data By Region    region
Validate Filtered Performance Data    expected_filtered_data
Export Performance Report    export_type
Validate Exported Report Format    expected_format
Send Performance Report Via Email    recipient_email
Validate Email Sent Status    expected_status
Logout From Performance Reports    nan

*** Keywords ***
Login And Navigate To Performance Reports
[Arguments]    user, password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user, password

Select Date Range For Performance Report
[Arguments]    start_date, end_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    start_date, end_date

Validate Performance Data Is Displayed
[Arguments]    expected_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_data

Filter Performance Data By Region
[Arguments]    region
[Return]    ${boolean}
[Documentation]    Keyword description
Log    region

Validate Filtered Performance Data
[Arguments]    expected_filtered_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_filtered_data

Export Performance Report
[Arguments]    export_type
[Return]    ${boolean}
[Documentation]    Keyword description
Log    export_type

Validate Exported Report Format
[Arguments]    expected_format
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_format

Send Performance Report Via Email
[Arguments]    recipient_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    recipient_email

Validate Email Sent Status
[Arguments]    expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_status

Logout From Performance Reports
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The test case 'performance_monitoring' aims to validate the performance monitoring features of a reporting application. The objective is to ensure the functionality, usability, and accuracy of the performance reports generated within the application.

Key aspects covered by this test case include:

1. **User Authentication:** Verifying the login process to access performance reports.
2. **Report Generation:** Selecting date ranges and regions to generate accurate performance data.
3. **Data Validation:** Ensuring the data displayed matches expected metrics and is filtered correctly.
4. **Report Export:** Checking if reports can be exported in various formats and ensuring the exported files meet the required format specifications.
5. **Report Distribution:** Sending performance reports via email and verifying the email delivery status.
6. **Session Management:** Ensuring the user can logout successfully after completing reporting tasks.

This comprehensive test case will help in identifying any issues in the performance monitoring feature, ensuring it functions seamlessly end-to-end."
Build keyword-driven web for ShopSmart loyalty_points,keyword-driven,loyalty_points,"*** Settings ***
Documentation    Validate loyalty_points
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
loyalty_points
[Documentation]    Validate loyalty_points using the following steps
Login To Loyalty Points System    username, password
Check Loyalty Points Balance    customer_id
Earn Loyalty Points For Purchase    customer_id, purchase_amount
Validate Earned Points Are Updated    customer_id, expected_points
Redeem Loyalty Points For Discount    customer_id, points_to_redeem
Validate Redeemed Points Are Deducted    customer_id, expected_remaining_points
Generate Loyalty Points Report    customer_id
Validate Report Data    report_id, expected_data
Logout From Loyalty Points System    nan

*** Keywords ***
Login To Loyalty Points System
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Check Loyalty Points Balance
[Arguments]    customer_id
[Return]    ${integer}
[Documentation]    Keyword description
Log    customer_id

Earn Loyalty Points For Purchase
[Arguments]    customer_id, purchase_amount
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id, purchase_amount

Validate Earned Points Are Updated
[Arguments]    customer_id, expected_points
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id, expected_points

Redeem Loyalty Points For Discount
[Arguments]    customer_id, points_to_redeem
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id, points_to_redeem

Validate Redeemed Points Are Deducted
[Arguments]    customer_id, expected_remaining_points
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id, expected_remaining_points

Generate Loyalty Points Report
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

Validate Report Data
[Arguments]    report_id, expected_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    report_id, expected_data

Logout From Loyalty Points System
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'loyalty_points' is designed to validate the functionality and reliability of the loyalty points system within the ShopSmart application. Its purpose includes confirming the various functionalities related to loyalty points management for customers.

Key aspects of the test case:"
Validate keyword-driven web for User Registration,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_registration
[Documentation]    Validate user_registration using the following steps
Navigate To Registration Page    nan
Input Registration Details    username, password, email
Submit Registration Form    nan
Validate Registration Success Message    expected_message
Validate User Is Redirected To Dashboard    nan
Logout User    nan
Login With New User Credentials    username, password
Validate User Login    nan

*** Keywords ***
Navigate To Registration Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Input Registration Details
[Arguments]    username, password, email
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password, email

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Registration Success Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Validate User Is Redirected To Dashboard
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Logout User
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Login With New User Credentials
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Validate User Login
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The test case 'user_registration' is designed to validate the entire user registration process within an application. Here's a detailed summary of its purpose:
"
Create keyword-driven sterlingcooper for Reports report_generation,keyword-driven,report_generation,"*** Settings ***
Documentation    Validate report_generation
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
report_generation
[Documentation]    Validate report_generation using the following steps
Navigate To Reports Section    account_number
Validate Report Download Is Initiated    expected_report_type
Generate Financial Report    report_parameters
Validate Report Content    expected_content
Select Report Type    report_type
Download Generated Report    report_id
Validate Report File Is Saved    report_path
Filter Reports By Date Range    start_date|end_date
Validate Filtered Reports Are Displayed    expected_reports

*** Keywords ***
Navigate To Reports Section
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Validate Report Download Is Initiated
[Arguments]    expected_report_type
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_report_type

Generate Financial Report
[Arguments]    report_parameters
[Return]    ${string}
[Documentation]    Keyword description
Log    report_parameters

Validate Report Content
[Arguments]    expected_content
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_content

Select Report Type
[Arguments]    report_type
[Return]    ${string}
[Documentation]    Keyword description
Log    report_type

Download Generated Report
[Arguments]    report_id
[Return]    ${string}
[Documentation]    Keyword description
Log    report_id

Validate Report File Is Saved
[Arguments]    report_path
[Return]    ${boolean}
[Documentation]    Keyword description
Log    report_path

Filter Reports By Date Range
[Arguments]    start_date|end_date
[Return]    ${integer}
[Documentation]    Keyword description
Log    start_date|end_date

Validate Filtered Reports Are Displayed
[Arguments]    expected_reports
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_reports

","The test case 'report_generation' is designed to validate the functionality and accuracy of the report generation feature within an application. Its main goal is to ensure that users can generate, download, and verify various types of reports through the application.

Key aspects of the test case include:"
Perform keyword-driven testing for Billing notifications,keyword-driven,notifications,"*** Settings ***
Documentation    Validate billing notifications
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
notifications
[Documentation]    Validate billing notifications using the following steps
Setup Notification Preferences    preference
Navigate To Notifications Section    nan
Validate Notifications Are Enabled    expected_status
Send Test Notification    notification_type
Validate Notification Receipt    notification_type|expected_message
Configure Email Notification Settings    email_preferences
Validate Email Notification Sent    email_address|expected_email_content
Setup SMS Notification Preferences    sms_preferences
Validate SMS Notification Sent    phone_number|expected_sms_content
Enable Push Notifications    nan
Validate Push Notification Receipt    expected_push_message
Navigate To Notification History    nan
Validate Notification History Entries    expected_entries
Filter Notifications By Type    notification_type
Validate Filtered Notifications Are Displayed    notification_type|expected_count
Disable Notifications    preference
Validate Notifications Are Disabled    expected_status

*** Keywords ***
Setup Notification Preferences
[Arguments]    preference
[Return]    ${string}
[Documentation]    Keyword description
Log    preference

Navigate To Notifications Section
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Notifications Are Enabled
[Arguments]    expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_status

Send Test Notification
[Arguments]    notification_type
[Return]    ${string}
[Documentation]    Keyword description
Log    notification_type

Validate Notification Receipt
[Arguments]    notification_type|expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    notification_type|expected_message

Configure Email Notification Settings
[Arguments]    email_preferences
[Return]    ${string}
[Documentation]    Keyword description
Log    email_preferences

Validate Email Notification Sent
[Arguments]    email_address|expected_email_content
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email_address|expected_email_content

Setup SMS Notification Preferences
[Arguments]    sms_preferences
[Return]    ${string}
[Documentation]    Keyword description
Log    sms_preferences

Validate SMS Notification Sent
[Arguments]    phone_number|expected_sms_content
[Return]    ${boolean}
[Documentation]    Keyword description
Log    phone_number|expected_sms_content

Enable Push Notifications
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Push Notification Receipt
[Arguments]    expected_push_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_push_message

Navigate To Notification History
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Notification History Entries
[Arguments]    expected_entries
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_entries

Filter Notifications By Type
[Arguments]    notification_type
[Return]    ${string}
[Documentation]    Keyword description
Log    notification_type

Validate Filtered Notifications Are Displayed
[Arguments]    notification_type|expected_count
[Return]    ${boolean}
[Documentation]    Keyword description
Log    notification_type|expected_count

Disable Notifications
[Arguments]    preference
[Return]    ${string}
[Documentation]    Keyword description
Log    preference

Validate Notifications Are Disabled
[Arguments]    expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_status

","The 'notifications' test case is designed to systematically evaluate the functionality, usability, and reliability of the billing notification system within an application. The test ensures that users are effectively notified about their billing activities through various channels such as email, SMS, and push notifications.

Key objectives of the test case include:

1. **Preference Setup:** Validating that users can set and modify notification preferences.
2. **Notification Delivery:** Ensuring that notifications are sent and received correctly through all configured channels.
3. **History Tracking:** Verifying that the notification history is accurately maintained and displayed.
4. **Error Handling:**"
Validate keyword-driven AcmeCorp for OrderProcessing order_status,keyword-driven,order_status,"*** Settings ***
Documentation    Validate order_status
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_status
[Documentation]    Validate order_status using the following steps
Validate Order Status After Submission    order_id, expected_status
Validate Order Details In Database    order_id
Update Order Status    order_id, new_status
Filter Orders By Status    status_filter
Validate Status Update On UI    order_id, expected_status
Navigate To Order Details Page    order_id
Validate Order Status After Cancellation    order_id, expected_status
Refresh Order Status    order_id
Export Order Status Report    date_range

*** Keywords ***
Validate Order Status After Submission
[Arguments]    order_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, expected_status

Validate Order Details In Database
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Update Order Status
[Arguments]    order_id, new_status
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id, new_status

Filter Orders By Status
[Arguments]    status_filter
[Return]    ${list}
[Documentation]    Keyword description
Log    status_filter

Validate Status Update On UI
[Arguments]    order_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, expected_status

Navigate To Order Details Page
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Status After Cancellation
[Arguments]    order_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, expected_status

Refresh Order Status
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Export Order Status Report
[Arguments]    date_range
[Return]    ${string}
[Documentation]    Keyword description
Log    date_range

","Sure, the test case 'order_status' is designed to verify and validate the functionality related to the status updates of orders within the AcmeCorp's Order Processing system. Here's a summary explaining its purpose:

**Objective:**
The main objective of the 'order_status' test case is to ensure that the order processing system accurately updates and displays the status of orders at various stages such as 'Pending', 'Processed', 'Shipped', 'Delivered', 'Cancelled', etc.

**Purpose:**
1. **Accuracy Verification:** To check if the system updates the order status correctly after each transaction or operation. This includes validating against the database and ensuring that the UI reflects the correct status.

2. **Consistency Check:** To ensure the consistency of order status updates across different parts of the system, including the database and user interface.

3. **Functional Checks:** To test functionalities that involve order status changes, such as filtering orders by status, updating status, and navigating to order details."
Create keyword-driven primecol for Users login_and_logout,keyword-driven,login_and_logout,"*** Settings ***
Documentation    Validate login_and_logout
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
login_and_logout
[Documentation]    Validate login_and_logout using the following steps
Login To Primecol    username|password
Validate User Dashboard Is Displayed    username
Logout From Primecol    nan
Validate User Is Logged Out    nan
Validate Login Button Is Displayed    nan

*** Keywords ***
Login To Primecol
[Arguments]    username|password
[Return]    ${boolean}
[Documentation]    Keyword to log in to the Primecol application
Log    username|password

Validate User Dashboard Is Displayed
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword to validate that the user dashboard is displayed after login
Log    username

Logout From Primecol
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword to log out from the Primecol application
Log    nan

Validate User Is Logged Out
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword to validate that the user has been logged out
Log    nan

Validate Login Button Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword to validate that the login button is displayed on the login page
Log    nan

","The test case 'login_and_logout' is designed to verify the login and logout functionality of the Primecol application. Its primary purpose is to ensure that users can log in and out of the application with valid credentials and that the system behaves as expected during these operations.

Key aspects of the test case include:
"
Validate keyword-driven accountmanagement_keywords for API userprofile,keyword-driven,userprofile,"*** Settings ***
Documentation    Validate userprofile
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
userprofile
[Documentation]    Validate userprofile using the following steps
Send Request To Retrieve User Profile    user_id
Validate User Profile Data    user_id, user_name, email, status
Update User Profile Details    new_user_name, new_email, new_status
Validate Updated User Profile    user_id, new_user_name, new_email, new_status
Send Request To Delete User Profile    user_id
Validate User Profile Deletion    user_id

*** Keywords ***
Send Request To Retrieve User Profile
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate User Profile Data
[Arguments]    user_id, user_name, email, status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id, user_name, email, status

Update User Profile Details
[Arguments]    new_user_name, new_email, new_status
[Return]    ${string}
[Documentation]    Keyword description
Log    new_user_name, new_email, new_status

Validate Updated User Profile
[Arguments]    user_id, new_user_name, new_email, new_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id, new_user_name, new_email, new_status

Send Request To Delete User Profile
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate User Profile Deletion
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

","The test case 'userprofile' is designed to verify the functionality and reliability of the user profile management system in an application. The purpose is to ensure that the system correctly handles user profile data, including retrieving, updating, and deleting user profiles.
"
Validate keyword-driven accountingmodule for CustomerOrders customer_orders,keyword-driven,customer_orders,"*** Settings ***
Documentation    Validate customer_orders
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
customer_orders
[Documentation]    Validate customer_orders using the following steps
Login To Accounting Module    username|password
Search For Customer Orders    customer_id
Validate Order List Is Displayed    order_list
Select Order From List    order_id
Validate Order Details Are Displayed    order_details
Update Order Status    order_id|new_status
Validate Order Status Is Updated    order_id|expected_status
Add Note To Order    order_id|note
Validate Note Is Added To Order    order_id|expected_note
Log Out From Accounting Module    username

*** Keywords ***
Login To Accounting Module
[Arguments]    username|password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password

Search For Customer Orders
[Arguments]    customer_id
[Return]    ${list}
[Documentation]    Keyword description
Log    customer_id

Validate Order List Is Displayed
[Arguments]    order_list
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_list

Select Order From List
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Details Are Displayed
[Arguments]    order_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_details

Update Order Status
[Arguments]    order_id|new_status
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|new_status

Validate Order Status Is Updated
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

Add Note To Order
[Arguments]    order_id|note
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|note

Validate Note Is Added To Order
[Arguments]    order_id|expected_note
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_note

Log Out From Accounting Module
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

","The 'customer_orders' test case is designed to evaluate the functionality and reliability of the Customer Orders feature within an accounting module. This test case ensures that the application can handle various customer order-related processes, including searching for orders, validating order details, updating statuses, and adding notes, thereby maintaining accurate and up-to-date order records."
Validate keyword-driven sterlingcooper for E-commerce Checkout ecomm_checkout,keyword-driven,ecomm_checkout,"*** Settings ***
Documentation    Validate ecomm_checkout
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
ecomm_checkout
[Documentation]    Validate ecomm_checkout using the following steps
Add Item To Cart    item_id
Validate Item Added To Cart    item_id
Proceed To Checkout    nan
Enter Shipping Address    address
Select Shipping Method    method
Enter Payment Information    payment_info
Apply Coupon Code    coupon_code
Validate Discount Applied    expected_discount
Place Order    nan
Validate Order Confirmation    order_details

*** Keywords ***
Add Item To Cart
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id

Validate Item Added To Cart
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

Proceed To Checkout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Shipping Address
[Arguments]    address
[Return]    ${string}
[Documentation]    Keyword description
Log    address

Select Shipping Method
[Arguments]    method
[Return]    ${string}
[Documentation]    Keyword description
Log    method

Enter Payment Information
[Arguments]    payment_info
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_info

Apply Coupon Code
[Arguments]    coupon_code
[Return]    ${string}
[Documentation]    Keyword description
Log    coupon_code

Validate Discount Applied
[Arguments]    expected_discount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_discount

Place Order
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order Confirmation
[Arguments]    order_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_details

","The 'ecomm_checkout' test case is aimed at validating the end-to-end checkout process in an e-commerce application. Specifically, it ensures that every step from adding an item to the cart through to order confirmation works seamlessly and as expected.

### Key Objectives:

1. **Cart Functionality**:
- Verify that items can be successfully added to the cart.
- Confirm that the correct items and quantities are displayed in the cart.

2. **Checkout Process**:
- Ensure that the user can proceed to checkout from the cart.
- Validate that shipping address and payment information can be entered accurately.

3. **Discounts and Offers**:
- Apply coupon codes and validate that the corresponding discounts are applied.

4. **Order Placement**:
- Verify that the order is successfully placed.
- Confirm that the order confirmation details are displayed correctly and include all relevant information."
Test API integration for paymentprocessing,keyword-driven,paymentprocessing,"*** Settings ***
Documentation    Validate paymentprocessing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
paymentprocessing
[Documentation]    Validate paymentprocessing using the following steps
Validate User Credentials    testuser, secret
Create Payment Request Body    transaction_id, amount, merchant_id
Send Payment Request    transaction_id, amount, merchant_id

*** Keywords ***
Validate User Credentials
[Arguments]    testuser, secret
[Return]    ${boolean}
[Documentation]    Keyword description
Log    testuser, secret

Create Payment Request Body
[Arguments]    transaction_id, amount, merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id, amount, merchant_id

Send Payment Request
[Arguments]    transaction_id, amount, merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id, amount, merchant_id
","The ""paymentprocessing"" test case is intended to validate the functionality and reliability of the payment processing system within the application. 
"
Validate keyword-driven paynow_keywords for Mobile app transaction,keyword-driven,mobile_app_transaction,"*** Settings ***
Documentation    Validate mobile_app_transaction
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Launch Mobile App
Suite Teardown   Close Mobile App
Resource         mobile_resource_file.robot

*** Variables ***
${VALID_USER}       mobileuser
${VALID_PASSWORD}   mobilepass

*** Test Cases ***
mobile_app_transaction
[Documentation]    Validate mobile_app_transaction using the following steps
Login To Mobile App    mobileuser, mobilepass
Initiate Transaction    transaction_details
Verify Transaction Summary    expected_summary
Select Payment Method    payment_method
Confirm Transaction    confirmation_details
Validate Transaction Success Message    success_message
Log Out From Mobile App    mobileuser

*** Keywords ***
Login To Mobile App
[Arguments]    mobileuser, mobilepass
[Return]    ${boolean}
[Documentation]    Keyword description
Log    mobileuser, mobilepass

Initiate Transaction
[Arguments]    transaction_details
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_details

Verify Transaction Summary
[Arguments]    expected_summary
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_summary

Select Payment Method
[Arguments]    payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method

Confirm Transaction
[Arguments]    confirmation_details
[Return]    ${string}
[Documentation]    Keyword description
Log    confirmation_details

Validate Transaction Success Message
[Arguments]    success_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    success_message

Log Out From Mobile App
[Arguments]    mobileuser
[Return]    ${boolean}
[Documentation]    Keyword description
Log    mobileuser

","The 'mobile_app_transaction' test case aims to validate the functionality and performance of mobile app transactions within a system. A successful test ensures that the core transactional features operate correctly and reliably on mobile devices. 
"
Verify transaction processing for e-commerce portal_abc123,keyword-driven,portal_abc123,"*** Settings ***
Documentation    Validate portal_abc123
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret
${PRODUCT_ID}       12345
${CART_ID}          67890

*** Test Cases ***
portal_abc123
[Documentation]    Validate portal_abc123 using the following steps
Add Product To Cart    ${PRODUCT_ID}
Validate Product In Cart    ${CART_ID}
Apply Discount Code    discount_code
Validate Discount Applied    expected_discount
Proceed To Checkout    cart_id
Validate Checkout Page Is Displayed    expected_checkout
Enter Payment Details    payment_method_details
Confirm Purchase    nan

*** Keywords ***
Add Product To Cart
[Arguments]    ${PRODUCT_ID}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PRODUCT_ID}

Validate Product In Cart
[Arguments]    ${CART_ID}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${CART_ID}

Apply Discount Code
[Arguments]    discount_code
[Return]    ${string}
[Documentation]    Keyword description
Log    discount_code

Validate Discount Applied
[Arguments]    expected_discount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_discount

Proceed To Checkout
[Arguments]    cart_id
[Return]    ${string}
[Documentation]    Keyword description
Log    cart_id

Validate Checkout Page Is Displayed
[Arguments]    expected_checkout
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_checkout

Enter Payment Details
[Arguments]    payment_method_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method_details

Confirm Purchase
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'portal_abc123' test case is designed to validate the end-to-end transaction processing flow on an e-commerce portal. It ensures that products can be added to the cart, discount codes are applied correctly, and the checkout process is smooth and secure.

Key components of the 'portal_abc123' test case include:
"
Build keyword-driven web for PayNOW user_login,keyword-driven,user_login,"*** Settings ***
Documentation    Validate user_login
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_login
[Documentation]    Validate user_login using the following steps
Open Login Page    nan
Enter User Credentials    username, password
Click Login Button    nan
Validate Welcome Message    welcome_message
Navigate To User Dashboard    nan
Validate User Dashboard Is Accessible    nan
Signout From Application    nan
Validate Login Page Is Accessible After Logout    nan

*** Keywords ***
Open Login Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter User Credentials
[Arguments]    username, password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, password

Click Login Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Welcome Message
[Arguments]    welcome_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    welcome_message

Navigate To User Dashboard
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate User Dashboard Is Accessible
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Signout From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Login Page Is Accessible After Logout
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The test case 'user_login' is designed to validate the functionality and reliability of the user login process within a system. The primary focus is to ensure that users can successfully log in to the application with valid credentials and access their respective dashboards.

Key Objectives:"
Generate keyword-driven web for PayNOW invoice_approval_process,keyword-driven,invoice_approval_process,"*** Settings ***
Documentation    Validate invoice_approval_process
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
invoice_approval_process
[Documentation]    Validate invoice_approval_process using the following steps
Navigate To Invoice Approval Tab    order_number
Validate Pending Approval Exists    order_number, expected_status
Approve Invoice    order_number
Reject Invoice    order_number, reject_reason
Save Invoice Comments    order_number, comment
Validate Approval Confirmation Message Is Displayed    expected_message
Get Invoice Approval Status    order_number
Send Approval Notification    order_number
Validate Approved Invoice Status Is Displayed    order_number, expected_status
Log Out From Invoice Approval Page    nan

*** Keywords ***
Navigate To Invoice Approval Tab
[Arguments]    order_number
[Return]    ${string}
[Documentation]    Keyword description
Log    order_number

Validate Pending Approval Exists
[Arguments]    order_number, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number, expected_status

Approve Invoice
[Arguments]    order_number
[Return]    ${string}
[Documentation]    Keyword description
Log    order_number

Reject Invoice
[Arguments]    order_number, reject_reason
[Return]    ${string}
[Documentation]    Keyword description
Log    order_number, reject_reason

Save Invoice Comments
[Arguments]    order_number, comment
[Return]    ${string}
[Documentation]    Keyword description
Log    order_number, comment

Validate Approval Confirmation Message Is Displayed
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Get Invoice Approval Status
[Arguments]    order_number
[Return]    ${string}
[Documentation]    Keyword description
Log    order_number

Send Approval Notification
[Arguments]    order_number
[Return]    ${string}
[Documentation]    Keyword description
Log    order_number

Validate Approved Invoice Status Is Displayed
[Arguments]    order_number, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number, expected_status

Log Out From Invoice Approval Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'invoice_approval_process' is designed to validate the functionality of the invoice approval workflow within the PayNOW system. This ensures that invoices go through the correct approval stages and relevant statuses are updated and visible as expected. Key objectives include:
1. **User Interface Validation:** Ensuring that users can successfully navigate to the invoice approval section.
2. **Workflow Execution:** Verifying that invoices can be approved or rejected, comments can be added, and the approval status is correctly updated.
3. **Notification and Feedback:** Confirming that appropriate notifications and messages are displayed to the user during the approval process."
Create keyword-driven login_keywords for API user_management,keyword-driven,user_management,"*** Settings ***
Documentation    Validate user_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_management
[Documentation]    Validate user_management using the following steps
Initiate Login Process    username, password
Verify User Authentication    username, password
Fetch User Details After Login    username
Validate User Session Token    username, session_token
Logout User    username
Verify Logout Status    username

*** Keywords ***
Initiate Login Process
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Verify User Authentication
[Arguments]    username, password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, password

Fetch User Details After Login
[Arguments]    username
[Return]    ${dictionary}
[Documentation]    Keyword description
Log    username

Validate User Session Token
[Arguments]    username, session_token
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, session_token

Logout User
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Verify Logout Status
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

","The test case 'user_management' is designed to validate the key functionalities related to user management in an application, specifically focusing on login and logout processes. The primary goal is to ensure that the system appropriately handles user authentication, session management, and logout operations. This involves:
"
Generate keyword-driven ecommerce for Products product_search,keyword-driven,product_search,"*** Settings ***
Documentation    Validate product_search
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
product_search
[Documentation]    Validate product_search using the following steps
Enter Product Name In Search Bar    product_name
Click On Search Button    nan
Verify Search Results Are Displayed    expected_product_name
Validate Product Details In Search Results    expected_product_price|expected_product_name

*** Keywords ***
Enter Product Name In Search Bar
[Arguments]    product_name
[Return]    ${string}
[Documentation]    Keyword description
Log    product_name

Click On Search Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Verify Search Results Are Displayed
[Arguments]    expected_product_name
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_product_name

Validate Product Details In Search Results
[Arguments]    expected_product_price|expected_product_name
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_product_price|expected_product_name

","The test case titled 'product_search' is designed to verify the search functionality of an e-commerce application. The purpose of this test case is to ensure that users can successfully search for products using the search bar and that the relevant product details are displayed correctly in the search results.

Key aspects usually covered in 'product_search' test cases include:
"
Create keyword-driven web for ECommerceUserRegistration,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       newuser
${VALID_PASSWORD}   Welcome123
${INVALID_EMAIL}    invalidemail.com

*** Test Cases ***
user_registration
[Documentation]    Validate user_registration using the following steps
Navigate To Registration Page    url
Fill Registration Form    username|password|email|confirm_password
Submit Registration Form    submit_button_locator
Validate User Is Registered Successfully    username
Validate Error Is Displayed For Invalid Email    invalid_email|error_message
Validate Password Confirmation Error Is Displayed    password|mismatch_password|error_message
Validate Duplicate Account Error    username|error_message

*** Keywords ***
Navigate To Registration Page
[Arguments]    url
[Return]    ${string}
[Documentation]    Keyword description
Log    url

Fill Registration Form
[Arguments]    username|password|email|confirm_password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password|email|confirm_password

Submit Registration Form
[Arguments]    submit_button_locator
[Return]    ${string}
[Documentation]    Keyword description
Log    submit_button_locator

Validate User Is Registered Successfully
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Validate Error Is Displayed For Invalid Email
[Arguments]    invalid_email|error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invalid_email|error_message

Validate Password Confirmation Error Is Displayed
[Arguments]    password|mismatch_password|error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    password|mismatch_password|error_message

Validate Duplicate Account Error
[Arguments]    username|error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|error_message

","The 'user_registration' test case serves to verify that the user registration process of an e-commerce platform functions correctly. Ensuring that new users can create accounts without issues is critical for user acquisition and overall user experience. Key aspects covered by this test case include:

1. **Input Validation:** Verifying that all required fields are properly filled out and validated. This includes confirming that invalid inputs (e.g., an improperly formatted email) are correctly rejected and appropriate error messages are displayed.

2. **Form Submission:** Ensuring that the registration form can be submitted successfully and that the system correctly handles both valid and invalid submissions.

3. **User Feedback:** Validating that the system provides clear and useful feedback to the user upon successful registration, as well as in cases where errors occur.

4. **Error Handling:** Confirming that specific error conditions are correctly identified and communicated to the user, such as duplicate account creation or password confirmation mismatches.

By rigorously testing these scenarios, we can ensure that new users can successfully register and begin using the platform with minimal friction."
Validate keyword-driven ecommerce_keywords for API ordermanagement,keyword-driven,ordermanagement,"*** Settings ***
Documentation    Validate ordermanagement
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
ordermanagement
[Documentation]    Validate ordermanagement using the following steps
Create Order Body    order_id, customer_id, product_id
Send Request To Place Order    order_body
Validate Order Status    order_id, expected_status
Send Request To Update Order    order_id, update_details
Validate Updated Order Details    order_id, expected_details
Send Request To Cancel Order    order_id
Validate Cancellation Reflects In System    order_id, expected_status

*** Keywords ***
Create Order Body
[Arguments]    order_id, customer_id, product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id, customer_id, product_id

Send Request To Place Order
[Arguments]    order_body
[Return]    ${string}
[Documentation]    Keyword description
Log    order_body

Validate Order Status
[Arguments]    order_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, expected_status

Send Request To Update Order
[Arguments]    order_id, update_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id, update_details

Validate Updated Order Details
[Arguments]    order_id, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, expected_details

Send Request To Cancel Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Cancellation Reflects In System
[Arguments]    order_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, expected_status

","The test case ""ordermanagement"" is designed to ensure the functionality and reliability of a system managing customer orders. The objectives of this test case include:
"
Generate keyword-driven test case for ecommerce analytics productpage,keyword-driven,productpage,"*** Settings ***
Documentation    Validate productpage
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
productpage
[Documentation]    Validate productpage using the following steps
Validate Product Details Are Displayed    product_id
Validate Add To Cart Functionality    product_id
Validate Product Review Submission    review_text
Validate Product Image Gallery    product_id
Navigate To Related Products    product_id
Validate Product Availability Status    product_id
Validate Product Price And Discounts    product_id, expected_price
Validate Product Specification Tab    product_id
Enter Quantity And Validate Price Calculation    product_id, quantity
Validate Product Description Length    product_id

*** Keywords ***
Validate Product Details Are Displayed
[Arguments]    product_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id

Validate Add To Cart Functionality
[Arguments]    product_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id

Validate Product Review Submission
[Arguments]    review_text
[Return]    ${boolean}
[Documentation]    Keyword description
Log    review_text

Validate Product Image Gallery
[Arguments]    product_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id

Navigate To Related Products
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Validate Product Availability Status
[Arguments]    product_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id

Validate Product Price And Discounts
[Arguments]    product_id, expected_price
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id, expected_price

Validate Product Specification Tab
[Arguments]    product_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id

Enter Quantity And Validate Price Calculation
[Arguments]    product_id, quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id, quantity

Validate Product Description Length
[Arguments]    product_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id

","The test case for the 'productpage' is aimed at ensuring the functionality and usability of the product page on an ecommerce platform. The primary objective is to verify that the product page correctly displays the necessary information and allows interaction in various crucial areas, including:
"
Validate keyword-driven paynow_keywords for system_notifications,keyword-driven,system_notifications,"*** Settings ***
Documentation    Validate system_notifications
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
system_notifications
[Documentation]    Validate system_notifications using the following steps
Check Notification System Availability    system_status
Verify Email Notification Delivered    recipient_email
Validate SMS Notification Sent    phone_number
Validate Push Notification Triggered    device_id
Check Notification Content Accuracy    notification_id, expected_content
Validate Notification Log Recorded Correctly    notification_log_id
Resend Failed Notifications    notification_id
Track Notification Status    notification_id
Verify Notification Preferences Saved    user_id, preferences

*** Keywords ***
Check Notification System Availability
[Arguments]    system_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    system_status

Verify Email Notification Delivered
[Arguments]    recipient_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    recipient_email

Validate SMS Notification Sent
[Arguments]    phone_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    phone_number

Validate Push Notification Triggered
[Arguments]    device_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    device_id

Check Notification Content Accuracy
[Arguments]    notification_id, expected_content
[Return]    ${string}
[Documentation]    Keyword description
Log    notification_id, expected_content

Validate Notification Log Recorded Correctly
[Arguments]    notification_log_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    notification_log_id

Resend Failed Notifications
[Arguments]    notification_id
[Return]    ${string}
[Documentation]    Keyword description
Log    notification_id

Track Notification Status
[Arguments]    notification_id
[Return]    ${string}
[Documentation]    Keyword description
Log    notification_id

Verify Notification Preferences Saved
[Arguments]    user_id, preferences
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id, preferences

","The test case 'system_notifications' is designed to verify the accuracy, functionality, and reliability of the notification system. The primary objectives of this test case include:
"
Validate keyword-driven retailapp_keywords for User cart_operations,keyword-driven,cart_operations,"*** Settings ***
Documentation    Validate cart_operations
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
cart_operations
[Documentation]    Validate cart_operations using the following steps
Add Item To Cart    item_id|quantity
Verify Item Added To Cart    item_id
Update Item Quantity In Cart    item_id|new_quantity
Verify Updated Item Quantity    item_id|new_quantity
Remove Item From Cart    item_id
Verify Item Removed From Cart    item_id
Apply Discount Code    discount_code
Verify Discount Applied    discount_code
Proceed To Checkout    nan
Validate Checkout Summary    nan

*** Keywords ***
Add Item To Cart
[Arguments]    item_id|quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id|quantity

Verify Item Added To Cart
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

Update Item Quantity In Cart
[Arguments]    item_id|new_quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id|new_quantity

Verify Updated Item Quantity
[Arguments]    item_id|new_quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id|new_quantity

Remove Item From Cart
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

Verify Item Removed From Cart
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

Apply Discount Code
[Arguments]    discount_code
[Return]    ${boolean}
[Documentation]    Keyword description
Log    discount_code

Verify Discount Applied
[Arguments]    discount_code
[Return]    ${boolean}
[Documentation]    Keyword description
Log    discount_code

Proceed To Checkout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Checkout Summary
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'cart_operations' is designed to evaluate the functionality and reliability of the shopping cart feature within a retail application. Its primary purpose is to ensure that users can effectively manage items within their cart, including adding, updating, and removing items, as well as applying discount codes and proceeding to checkout. The key aspects typically evaluated in this test case include:
"
Create automated clientcentral_keywords for API user_management,keyword-driven,user_management,"*** Settings ***
Documentation    Validate user_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_management
[Documentation]    Validate user_management using the following steps
Create User Account    username|password|email|role
Send Request To Create User    username|password|email|role
Get User Details    user_id
Validate User Creation Response    response
Update User Account    user_id|new_email|new_role
Send Request To Update User    user_id|new_email|new_role
Get Updated User Details    user_id
Validate User Update Response    response
Delete User Account    user_id
Send Request To Delete User    user_id
Validate User Deletion Response    response

*** Keywords ***
Create User Account
[Arguments]    username|password|email|role
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password|email|role

Send Request To Create User
[Arguments]    username|password|email|role
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password|email|role

Get User Details
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate User Creation Response
[Arguments]    response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response

Update User Account
[Arguments]    user_id|new_email|new_role
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id|new_email|new_role

Send Request To Update User
[Arguments]    user_id|new_email|new_role
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id|new_email|new_role

Get Updated User Details
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate User Update Response
[Arguments]    response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response

Delete User Account
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Send Request To Delete User
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate User Deletion Response
[Arguments]    response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response

","The 'user_management' test case is crafted to ensure the comprehensive testing of an API's user management functionalities. This test case covers all critical aspects of user account lifecycle management, from creation to deletion. Here are the key objectives of the 'user_management' test case:
"
Generate keyword-driven tests for OrderWorkflow for ECommerce platform,keyword-driven,order_workflow,"*** Settings ***
Documentation    Validate order_workflow
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_workflow
[Documentation]    Validate order_workflow using the following steps
Login To Application    username|password
Add Item To Cart    item_id
Checkout Cart    nan
Validate Order Confirmation    order_id
Logout From Application    nan

*** Keywords ***
Login To Application
[Arguments]    username|password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password

Add Item To Cart
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id

Checkout Cart
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order Confirmation
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Logout From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'order_workflow' test case is created to validate the end-to-end flow of placing an order on an eCommerce platform. This includes logging in, adding items to the cart, checking out, and confirming the order.

Key objectives of this test case are:
"
Create keyword-driven sterlingcooper for Customers profile_update,keyword-driven,profile_update,"*** Settings ***
Documentation    Validate profile_update
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
profile_update
[Documentation]    Validate profile_update using the following steps
Navigate To Profile Page    user_id
Enter First Name Field    first_name
Enter Last Name Field    last_name
Enter Email Address Field    email
Enter Phone Number Field    phone_number
Enter Address    street|city|zip_code
Validate Updated First Name Is Displayed    user_id|expected_first_name
Validate Updated Last Name Is Displayed    user_id|expected_last_name
Validate Updated Email Address Is Displayed    user_id|expected_email
Validate Updated Phone Number Is Displayed    user_id|expected_phone
Validate Updated Address Is Displayed    user_id|expected_street|expected_city|expected_zip_code
Save Profile Changes    nan
Validate Profile Update Success Message Is Displayed    nan

*** Keywords ***
Navigate To Profile Page
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Enter First Name Field
[Arguments]    first_name
[Return]    ${string}
[Documentation]    Keyword description
Log    first_name

Enter Last Name Field
[Arguments]    last_name
[Return]    ${string}
[Documentation]    Keyword description
Log    last_name

Enter Email Address Field
[Arguments]    email
[Return]    ${string}
[Documentation]    Keyword description
Log    email

Enter Phone Number Field
[Arguments]    phone_number
[Return]    ${string}
[Documentation]    Keyword description
Log    phone_number

Enter Address
[Arguments]    street|city|zip_code
[Return]    ${string}
[Documentation]    Keyword description
Log    street|city|zip_code

Validate Updated First Name Is Displayed
[Arguments]    user_id|expected_first_name
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id|expected_first_name

Validate Updated Last Name Is Displayed
[Arguments]    user_id|expected_last_name
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id|expected_last_name

Validate Updated Email Address Is Displayed
[Arguments]    user_id|expected_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id|expected_email

Validate Updated Phone Number Is Displayed
[Arguments]    user_id|expected_phone
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id|expected_phone

Validate Updated Address Is Displayed
[Arguments]    user_id|expected_street|expected_city|expected_zip_code
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id|expected_street|expected_city|expected_zip_code

Save Profile Changes
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Profile Update Success Message Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan
","The 'profile_update' test case evaluates the functionality of updating and validating user profile information within the application. Key objectives include:
"
Validate keyword-driven web for UserSubscription management,keyword-driven,subscription_management,"*** Settings ***
Documentation    Validate subscription_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
subscription_management
[Documentation]    Validate subscription_management using the following steps
Enter Subscription Details    subscription_info
Validate Successful Subscription Message    confirmation_code
Cancel Subscription    subscription_id
Validate Subscription Cancellation Message    cancellation_confirmation

*** Keywords ***
Enter Subscription Details
[Arguments]    subscription_info
[Return]    ${string}
[Documentation]    Keyword description
Log    subscription_info

Validate Successful Subscription Message
[Arguments]    confirmation_code
[Return]    ${boolean}
[Documentation]    Keyword description
Log    confirmation_code

Cancel Subscription
[Arguments]    subscription_id
[Return]    ${string}
[Documentation]    Keyword description
Log    subscription_id

Validate Subscription Cancellation Message
[Arguments]    cancellation_confirmation
[Return]    ${boolean}
[Documentation]    Keyword description
Log    cancellation_confirmation

","The 'subscription_management' test case focuses on the critical processes involved in managing user subscriptions within a software application or web service. This test case ensures that users can successfully subscribe, receive appropriate confirmation, cancel subscriptions, and receive accurate cancellation acknowledgments. Key aspects assessed during this test case include:

1. **Subscription Creation:**
- Verify that users can enter subscription details and initiate a subscription process.
- Ensure the system provides clear and accurate messages on successful subscription creation.

2. **Subscription Cancellation:**
- Test the user's ability to cancel an existing subscription.
- Confirm the system provides confirmation of successful cancellation and does not leave the subscription in an undefined state.

3. **Message Validation:**
- Ensure that all user-facing messages are clear, informative, and guide the user through the process efficiently.
- Validate that the messages adhere to business requirements and do not disclose any unnecessary information."
Validate keyword-driven checkout_process for eCommerce website,keyword-driven,checkout_process,"*** Settings ***
Documentation    Validate checkout process
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
checkout_process
[Documentation]    Validate checkout process using the following steps
Navigate To Product Page    product_id
Add Product To Cart    product_id, quantity
Navigate To Checkout Page    cart_id
Enter Shipping Information    shipping_details
Enter Payment Information    payment_details
Confirm Order    order_id

*** Keywords ***
Navigate To Product Page
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Add Product To Cart
[Arguments]    product_id, quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id, quantity

Navigate To Checkout Page
[Arguments]    cart_id
[Return]    ${string}
[Documentation]    Keyword description
Log    cart_id

Enter Shipping Information
[Arguments]    shipping_details
[Return]    ${string}
[Documentation]    Keyword description
Log    shipping_details

Enter Payment Information
[Arguments]    payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_details

Confirm Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

","The 'checkout_process' test case serves to validate the eCommerce purchasing workflow, ensuring smooth and accurate order placement. This involves various steps from product selection to order confirmation. Key components likely include:
"
Validate keyword-driven rest_api for User Management user_creation,keyword-driven,user_creation,"*** Settings ***
Documentation    Validate user_creation
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_creation
[Documentation]    Validate user_creation using the following steps
Initialize User Creation Request    user_details
Validate User Creation Response    response_code, expected_response
Send User Creation Request    user_details
Validate Created User In System    user_id, expected_data
Cleanup Created User    user_id

*** Keywords ***
Initialize User Creation Request
[Arguments]    user_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_details

Validate User Creation Response
[Arguments]    response_code, expected_response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response_code, expected_response

Send User Creation Request
[Arguments]    user_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_details

Validate Created User In System
[Arguments]    user_id, expected_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id, expected_data

Cleanup Created User
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id
","The 'user_creation' test case is designed to validate the functionality of the user management system's REST API for creating new users. The test aims to ensure that the API correctly processes requests for user creation and that newly created users are properly stored and retrievable in the system. Key objectives likely include:
"
Validate keyword-driven profile_keywords for API userprofile,keyword-driven,userprofile,"*** Settings ***
Documentation    Validate user profile
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
userprofile
[Documentation]    Validate user profile using the following steps
Send Request To Get UserProfile Details    user_id
Create Request For Updating Profile    user_id, user_details
Send Request To Update UserProfile    user_id, updated_details
Create Profile Picture Upload Request  user_id, image_file
Send Request To Upload Profile Picture    user_id, image_file
Create Profile Deletion Request    user_id
Send Request To Delete UserProfile    user_id

*** Keywords ***
Send Request To Get UserProfile Details
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Create Request For Updating Profile
[Arguments]    user_id, user_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, user_details

Send Request To Update UserProfile
[Arguments]    user_id, updated_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, updated_details

Create Profile Picture Upload Request
[Arguments]    user_id, image_file
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, image_file

Send Request To Upload Profile Picture
[Arguments]    user_id, image_file
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, image_file

Create Profile Deletion Request
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Send Request To Delete UserProfile
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

","The test case 'userprofile' is intended to validate the functionality and consistency of an application's user profile management features. Key objectives include:
"
Create keyword-driven ordering system automation for API placeorder,keyword-driven,placeorder,"*** Settings ***
Documentation    Validate placeorder
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       customeruser
${VALID_PASSWORD}   orderpass

*** Test Cases ***
placeorder
[Documentation]    Validate placeorder using the following steps
Create Body For New Order    customer_id|product_id|quantity|price
Send Order Request    order_body
Get Order Confirmation    response
Get Order Status    order_id
Validate Order Total    response|expected_total
Create Body For Multiple Products Order    customer_id|products
Send Multiple Products Order Request    order_body
Get Multiple Products Order Confirmation    response
Validate Multiple Products Order Total    response|expected_total
Cancel Order    order_id
Validate Order Cancellation    response|expected_status

*** Keywords ***
Create Body For New Order
[Arguments]    customer_id|product_id|quantity|price
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id|product_id|quantity|price

Send Order Request
[Arguments]    order_body
[Return]    ${string}
[Documentation]    Keyword description
Log    order_body

Get Order Confirmation
[Arguments]    response
[Return]    ${string}
[Documentation]    Keyword description
Log    response

Get Order Status
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Total
[Arguments]    response|expected_total
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response|expected_total

Create Body For Multiple Products Order
[Arguments]    customer_id|products
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id|products

Send Multiple Products Order Request
[Arguments]    order_body
[Return]    ${string}
[Documentation]    Keyword description
Log    order_body

Get Multiple Products Order Confirmation
[Arguments]    response
[Return]    ${string}
[Documentation]    Keyword description
Log    response

Validate Multiple Products Order Total
[Arguments]    response|expected_total
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response|expected_total

Cancel Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Cancellation
[Arguments]    response|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response|expected_status

","The purpose of the 'placeorder' test case is to verify the functionality and reliability of the order placement process in an ordering system API. This involves ensuring that orders can be created, processed, confirmed, and canceled accurately and efficiently, covering various scenarios and edge cases to identify potential issues or bugs.

### Key Objectives:"
Validate keyword-driven paynow_keywords for User Profile user_profile,keyword-driven,user_profile,"*** Settings ***
Documentation    Validate user_profile
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_profile
[Documentation]    Validate user_profile using the following steps
Login User    ${VALID_USER}    ${VALID_PASSWORD}
Navigate To User Profile    nan
Update User Information    user_info
Validate Updated Information    user_info
Change User Password    old_password|new_password
Validate Password Change    success_message
Logout User    nan

*** Keywords ***
Login User
[Arguments]    username|password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password

Navigate To User Profile
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Update User Information
[Arguments]    user_info
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_info

Validate Updated Information
[Arguments]    user_info
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_info

Change User Password
[Arguments]    old_password|new_password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    old_password|new_password

Validate Password Change
[Arguments]    success_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    success_message

Logout User
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'user_profile' is designed to validate the accuracy and functionality of user profile management within a software application. This test case focuses on ensuring that users can view and update their personal information and credentials correctly.

Key aspects tested in 'user_profile' include:
"
Validate keyword-driven usermanagement for API users,keyword-driven,users,"*** Settings ***
Documentation    Validate users
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
users
[Documentation]    Validate users management using the following steps
Create New User    username, password, role
Update User Information    user_id, updated_info
Get User Details    user_id
Delete User    user_id
List All Users    nan

*** Keywords ***
Create New User
[Arguments]    username, password, role
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password, role

Update User Information
[Arguments]    user_id, updated_info
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, updated_info

Get User Details
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Delete User
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

List All Users
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The purpose of the 'users' test case is to evaluate and verify the functionality, accuracy, and reliability of a system or application that handles user management. This test case aims to ensure that all aspects of user management processes are working as intended, covering various scenarios and edge cases to identify potential issues or bugs.

### Key Objectives:"
Create keyword-driven web for PayNOW client_portal_transactions,keyword-driven,client_portal_transactions,"*** Settings ***
Documentation    Validate client_portal_transactions
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
client_portal_transactions
[Documentation]    Validate client_portal_transactions using the following steps
Navigate To Client Transactions Tab    account_number
Validate Client Transaction History Is Displayed    account_number
Search Client Transaction By Date    start_date, end_date
Apply Filter To Transactions    filter_type, filter_value
Validate Transaction Details Are Correct    transaction_id, expected_details
Export Transaction History    file_format
Validate Exported File Is Available    file_path
Delete Specific Transaction    transaction_id
Validate Transaction Deletion    transaction_id
Validate Pagination In Transaction History    expected_page_number
Log Out From Client Portal    nan

*** Keywords ***
Navigate To Client Transactions Tab
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Validate Client Transaction History Is Displayed
[Arguments]    account_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number

Search Client Transaction By Date
[Arguments]    start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date, end_date

Apply Filter To Transactions
[Arguments]    filter_type, filter_value
[Return]    ${string}
[Documentation]    Keyword description
Log    filter_type, filter_value

Validate Transaction Details Are Correct
[Arguments]    transaction_id, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, expected_details

Export Transaction History
[Arguments]    file_format
[Return]    ${string}
[Documentation]    Keyword description
Log    file_format

Validate Exported File Is Available
[Arguments]    file_path
[Return]    ${boolean}
[Documentation]    Keyword description
Log    file_path

Delete Specific Transaction
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Validate Transaction Deletion
[Arguments]    transaction_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id

Validate Pagination In Transaction History
[Arguments]    expected_page_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_page_number

Log Out From Client Portal
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'client_portal_transactions' is designed to verify the functionality and robustness of the transaction management feature in a client's portal within the PayNOW system. The main objective is to ensure that users can accurately view, manage, and interact with their transaction history within the portal.

Key objectives:"
Validate keyword-driven web for MyApp user_login,keyword-driven,user_login,"*** Settings ***
Documentation    Validate user_login
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_login
[Documentation]    Validate user_login using the following steps
Enter Username And Password    user_cred
Validate Successful Login    success_message
Logout From Application    nan

*** Keywords ***
Enter Username And Password
[Arguments]    user_cred
[Return]    ${string}
[Documentation]    Keyword description
Log    user_cred

Validate Successful Login
[Arguments]    success_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    success_message

Logout From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case ""user_login"" aims to validate the user authentication process within the MyApp application. The primary objectives include:
"
Validate keyword-driven web for CommonKeywordsForAllMerchants registration,keyword-driven,registration,"*** Settings ***
Documentation    Validate registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
registration
[Documentation]    Validate registration using the following steps
Enter First Name Field    first_name
Enter Last Name Field    last_name
Enter Email Address Field For Registration    email
Enter Password For Registration    password
Re-enter Password For Registration    confirm_password
Submit Registration Form    nan
Validate Confirmation Email Sent    email
Validate Error Message For Already Registered Email    email
Validate Password Strength Indicator    password
Validate Successful Registration Message    nan
Login After Successful Registration    email|password

*** Keywords ***
Enter First Name Field
[Arguments]    first_name
[Return]    ${string}
[Documentation]    Keyword description
Log    first_name

Enter Last Name Field
[Arguments]    last_name
[Return]    ${string}
[Documentation]    Keyword description
Log    last_name

Enter Email Address Field For Registration
[Arguments]    email
[Return]    ${string}
[Documentation]    Keyword description
Log    email

Enter Password For Registration
[Arguments]    password
[Return]    ${string}
[Documentation]    Keyword description
Log    password

Re-enter Password For Registration
[Arguments]    confirm_password
[Return]    ${string}
[Documentation]    Keyword description
Log    confirm_password

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Confirmation Email Sent
[Arguments]    email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email

Validate Error Message For Already Registered Email
[Arguments]    email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email

Validate Password Strength Indicator
[Arguments]    password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    password

Validate Successful Registration Message
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Login After Successful Registration
[Arguments]    email|password
[Return]    ${string}
[Documentation]    Keyword description
Log    email|password

","The purpose of the 'registration' test case is to verify the functionality and security of the user registration process. This test case ensures that a user can successfully register in the system using valid details and that appropriate measures and messages are displayed when invalid or duplicate details are provided. Key aspects typically assessed during the 'registration' test case include:

1. **Valid Registration Details:**
- Verify that users can successfully register with correct and unique details.
- Ensure that a confirmation email is sent post registration.

2. **Invalid Registration Details:**
- Test how the system handles already registered emails.
- Confirm error messages are informative and prompt appropriate user action.
- Ensure the system prompts users regarding the strength of the entered password.

3. **Post Registration:**
- Verify that users can log in successfully after completing the registration process.
- Ensure that the system redirects to the appropriate post-registration page.
"
Validate keyword-driven web for eShop user_authentication,keyword-driven,user_authentication,"*** Settings ***
Documentation    Validate user_authentication
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_authentication
[Documentation]    Validate user_authentication using the following steps
Navigate To Login Page    nan
Enter User Credentials    username, password
Click Login Button    nan
Validate User Is Authenticated    expected_username
Logout User    nan
Enter Invalid Credentials    invalid_username, invalid_password
Validate Authentication Failure Message    expected_failure_message
Validate Logout Button Is Not Visible    nan
Navigate To Forgot Password Page    nan
Request Password Reset Link    email
Navigate To Registration Page    nan
Input Registration Details    user_details
Validate Successful Registration Message    expected_registration_message

*** Keywords ***
Navigate To Login Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter User Credentials
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Click Login Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate User Is Authenticated
[Arguments]    expected_username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_username

Logout User
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Invalid Credentials
[Arguments]    invalid_username, invalid_password
[Return]    ${string}
[Documentation]    Keyword description
Log    invalid_username, invalid_password

Validate Authentication Failure Message
[Arguments]    expected_failure_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_failure_message

Validate Logout Button Is Not Visible
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Navigate To Forgot Password Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Request Password Reset Link
[Arguments]    email
[Return]    ${string}
[Documentation]    Keyword description
Log    email

Navigate To Registration Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Input Registration Details
[Arguments]    user_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_details

Validate Successful Registration Message
[Arguments]    expected_registration_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_registration_message

","The purpose of the test case 'user_authentication' is to verify that the authentication functionality within the eShop system operates as intended. This involves ensuring that all steps of the user authentication process are executed correctly and that the user receives appropriate feedback throughout various authentication scenarios.

Key aspects that the 'user_authentication' test case might cover include:
"
Develop keyword-driven usermanagement_keywords for User Registration,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       newuser
${VALID_EMAIL}      newuser@example.com
${VALID_PASSWORD}   strongpassword

*** Test Cases ***
user_registration
[Documentation]    Validate user_registration using the following steps
Open Registration Page    nan
Enter User Details    username, email, password
Submit Registration Form    nan
Validate Successful Registration    response
Send Welcome Email    email
Validate Email Confirmation Link    email
Confirm User Registration    confirmation_token

*** Keywords ***
Open Registration Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter User Details
[Arguments]    username, email, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, email, password

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Successful Registration
[Arguments]    response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response

Send Welcome Email
[Arguments]    email
[Return]    ${string}
[Documentation]    Keyword description
Log    email

Validate Email Confirmation Link
[Arguments]    email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email

Confirm User Registration
[Arguments]    confirmation_token
[Return]    ${boolean}
[Documentation]    Keyword description
Log    confirmation_token

","The test case 'user_registration' ensures the functionality and reliability of the user registration process in an application. The objective of this test case includes:
"
Perform keyword-driven validation for API productcatalog,keyword-driven,productcatalog,"*** Settings ***
Documentation    Validate productcatalog
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
productcatalog
[Documentation]    Validate productcatalog using the following steps
Create Product Catalog Body    unique_value|merchant_id
Create Product Body    unique_value|merchant_key|product_id
Send Request To Create Product    merchant
Create Product Image Body    unique_value|merchant_id
Send Request To Create Product Image    merchant_key|merchant_id
Create Product Description Body    unique_value|merchant_key|merchant_id

*** Keywords ***
Create Product Catalog Body
[Arguments]    unique_value|merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value|merchant_id

Create Product Body
[Arguments]    unique_value|merchant_key|product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value|merchant_key|product_id

Send Request To Create Product
[Arguments]    merchant
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant

Create Product Image Body
[Arguments]    unique_value|merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value|merchant_id

Send Request To Create Product Image
[Arguments]    merchant_key|merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant_key|merchant_id

Create Product Description Body
[Arguments]    unique_value|merchant_key|merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value|merchant_key|merchant_id

","The 'productcatalog' test case serves multiple important functions within a software application or API, focusing specifically on validating various aspects associated with the product catalog.

Here’s a detailed summary of its purpose:
"
Create keyword-driven clientcentral_testcases for API userprofile,keyword-driven,userprofile,"
*** Settings ***
Documentation    Validate userprofile
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
userprofile
[Documentation]    Validate userprofile using the following steps
Send Request To Get User Profile    user_id
Validate User Profile Response    response
Update User Profile Details    user_id, user_details
Send Request To Update User Profile    user_id, user_details
Validate Updated User Profile Response    response

*** Keywords ***
Send Request To Get User Profile
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate User Profile Response
[Arguments]    response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response

Update User Profile Details
[Arguments]    user_id, user_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, user_details

Send Request To Update User Profile
[Arguments]    user_id, user_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, user_details

Validate Updated User Profile Response
[Arguments]    response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response
","The test case 'userprofile' is designed to validate the functionality and reliability of the user profile management system within an application. The key objectives of this test case include:
"
Generate keyword-driven web for UserManagement system_user_operations,keyword-driven,system_user_operations,"*** Settings ***
Documentation    Validate system_user_operations
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
system_user_operations
[Documentation]    Validate system_user_operations using the following steps
Create User    username, email, role
Update User Information    username, new_email, new_role
Validate User Creation    username, expected_email, expected_role
Validate User Update    username, new_email, new_role
Delete User    username
Validate User Deletion    username

*** Keywords ***
Create User
[Arguments]    username, email, role
[Return]    ${string}
[Documentation]    Keyword description
Log    username, email, role

Update User Information
[Arguments]    username, new_email, new_role
[Return]    ${string}
[Documentation]    Keyword description
Log    username, new_email, new_role

Validate User Creation
[Arguments]    username, expected_email, expected_role
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, expected_email, expected_role

Validate User Update
[Arguments]    username, new_email, new_role
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, new_email, new_role

Delete User
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate User Deletion
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

","The test case 'system_user_operations' is designed to validate the complete sequence of user management functions within the system. This involves testing all user-related operations to ensure they perform as expected, covering the creation, update, validation, and deletion of users.

Key objectives of the test case include:
1. **User Creation Verification:** Ensuring that users can be created with correct details such as username, email, and role, and that these details are accurately stored in the system.
2. **User Update Validation:** Verifying that user information, such as email and role, can be updated accurately and that these changes are reflected correctly in the system.
3. **User Existence Checks:** Confirming that the system can accurately validate the existence and details of users post-creation and post-update.
4. **User Deletion:** Checking that users can be successfully deleted from the system and that this action removes the user and all related information as expected.

This comprehensive test case ensures that the core user management functionalities are robust, reliable, and error-free, thereby maintaining system integrity and user data consistency."
Verify keyword-driven web for PayNOW corporate_billing_statements,keyword-driven,corporate_billing_statements,"*** Settings ***
Documentation    Validate corporate_billing_statements
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
corporate_billing_statements
[Documentation]    Validate corporate_billing_statements using the following steps
Navigate To Billing Statements Tab    account_number
Validate Billing Statement Table Is Displayed    nan
Generate New Billing Statement    invoice_details
Download Billing Statement PDF    invoice_number
Validate Downloaded Billing Statement Is Correct    invoice_number, expected_details
Delete Billing Statement    invoice_number
Validate Billing Statement Deletion    invoice_number
Filter Billing Statements By Date Range    start_date, end_date
Validate Filtered Billing Statements Are Displayed    start_date, end_date
Select Billing Statement    invoice_number
Validate Billing Statement Details    invoice_number, expected_details

*** Keywords ***
Navigate To Billing Statements Tab
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Validate Billing Statement Table Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Generate New Billing Statement
[Arguments]    invoice_details
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_details

Download Billing Statement PDF
[Arguments]    invoice_number
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_number

Validate Downloaded Billing Statement Is Correct
[Arguments]    invoice_number, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number, expected_details

Delete Billing Statement
[Arguments]    invoice_number
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_number

Validate Billing Statement Deletion
[Arguments]    invoice_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number

Filter Billing Statements By Date Range
[Arguments]    start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date, end_date

Validate Filtered Billing Statements Are Displayed
[Arguments]    start_date, end_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    start_date, end_date

Select Billing Statement
[Arguments]    invoice_number
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_number

Validate Billing Statement Details
[Arguments]    invoice_number, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number, expected_details

","The test case 'corporate_billing_statements' aims to validate the functionality of generating, viewing, downloading, filtering, and deleting corporate billing statements within a billing management system. Key objectives include:

1. **Navigation and Interface Testing:** Verifying that users can navigate to the billing statements section and that it displays correctly.
2. **Billing Statement Generation:** Ensuring that new billing statements can be generated accurately with the correct details.
3. **Download and Verification:** Testing that billing statements can be downloaded as PDFs and verifying the accuracy of the downloaded content.
4. **Deletion Process:** Confirming that billing statements can be deleted and validating the deletion process.
5. **Filtering and Selection:** Checking that billing statements can be filtered by date range and validating the results.
6. **Details Validation:** Ensuring the details shown for a selected billing statement match expected values."
Generate a keyword-driven test case for UserRegistration process,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}             newuser
${VALID_PASSWORD}         userpassword
${VALID_EMAIL}            user@example.com
${VALID_PHONE}            1234567890

*** Test Cases ***
user_registration
[Documentation]    Validate user_registration using the following steps
Open Registration Page    nan
Fill User Info    ${VALID_USER}, ${VALID_PASSWORD}, ${VALID_EMAIL}, ${VALID_PHONE}
Submit Registration    nan
Validate Successful Registration    nan
Logout From Application    nan

*** Keywords ***
Open Registration Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Open user registration page
Log    nan

Fill User Info
[Arguments]    username, password, email, phone
[Return]    ${string}
[Documentation]    Fill in user information on the registration form
Log    username, password, email, phone

Submit Registration
[Arguments]    nan
[Return]    ${string}
[Documentation]    Submit the registration form
Log    nan

Validate Successful Registration
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Validate that the registration was successful
Log    nan

Logout From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Logout from the application
Log    nan

","The test case titled 'user_registration' is aimed at validating the entire flow of a user registering themselves on an application. The main objectives of this test case include:
"
Build keyword-driven questventures for Inventory item_management,keyword-driven,item_management,"*** Settings ***
Documentation    Validate item_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
item_management
[Documentation]    Validate item_management using the following steps
Add New Item    item_details
Edit Item Details    item_id, new_item_details
Delete Item    item_id
Validate Item Is Added    item_id, expected_details
Validate Item Is Edited    item_id, expected_new_details
Validate Item Is Deleted    item_id
Search Item By Name    item_name
Validate Search Results    item_name, expected_number_of_results
Sort Items By Category    category
Validate Items Are Sorted    category, expected_order
Filter Items By Availability    availability_status
Validate Filtered Items Are Displayed    availability_status, expected_items
Export Item List    format
Validate Exported List Content    format, expected_content

*** Keywords ***
Add New Item
[Arguments]    item_details
[Return]    ${integer}
[Documentation]    Keyword description
Log    item_details

Edit Item Details
[Arguments]    item_id, new_item_details
[Return]    ${integer}
[Documentation]    Keyword description
Log    item_id, new_item_details

Delete Item
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

Validate Item Is Added
[Arguments]    item_id, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id, expected_details

Validate Item Is Edited
[Arguments]    item_id, expected_new_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id, expected_new_details

Validate Item Is Deleted
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

Search Item By Name
[Arguments]    item_name
[Return]    ${integer}
[Documentation]    Keyword description
Log    item_name

Validate Search Results
[Arguments]    item_name, expected_number_of_results
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_name, expected_number_of_results

Sort Items By Category
[Arguments]    category
[Return]    ${integer}
[Documentation]    Keyword description
Log    category

Validate Items Are Sorted
[Arguments]    category, expected_order
[Return]    ${boolean}
[Documentation]    Keyword description
Log    category, expected_order

Filter Items By Availability
[Arguments]    availability_status
[Return]    ${integer}
[Documentation]    Keyword description
Log    availability_status

Validate Filtered Items Are Displayed
[Arguments]    availability_status, expected_items
[Return]    ${boolean}
[Documentation]    Keyword description
Log    availability_status, expected_items

Export Item List
[Arguments]    format
[Return]    ${string}
[Documentation]    Keyword description
Log    format

Validate Exported List Content
[Arguments]    format, expected_content
[Return]    ${boolean}
[Documentation]    Keyword description
Log    format, expected_content

","The 'item_management' test case is designed to evaluate the functionality and reliability of an inventory system that manages items. This test case ensures that the system can handle the full lifecycle of item management, including adding, editing, deleting, searching, sorting, filtering, and exporting items.

### Key Objectives:

1. **Adding Items:** Verify that new items can be added to the inventory with all required details.
2. **Editing Items:** Ensure that existing items can be modified as needed.
3. **Deleting Items:** Confirm that items can be removed from the inventory.
4. **Search and Sort:** Test the search functionality by item name and sorting items by different categories.
5. **Filtering:** Validate that items can be filtered by availability status.
6. **Exporting:** Ensure the item list can be exported in various formats and that the content of the exported list is correct."
Generate keyword-driven web for user_management_system_login,keyword-driven,user_management_system_login,"*** Settings ***
Documentation    Validate user_management_system_login
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USERNAME}       admin
${VALID_PASSWORD}       admin123

*** Test Cases ***
user_management_system_login
[Documentation]    Validate user_management_system_login using the following steps
Open Login Page    url
Enter Username    ${VALID_USERNAME}
Enter Password    ${VALID_PASSWORD}
Click On Login Button    nan
Validate Login Is Successful    expected_message
Validate User Dashboard    username
Logout    nan
Validate Logout Is Successful    expected_message

*** Keywords ***
Open Login Page
[Arguments]    url
[Return]    ${string}
[Documentation]    Keyword description
Log    url

Enter Username
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Enter Password
[Arguments]    password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    password

Click On Login Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Login Is Successful
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Validate User Dashboard
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Logout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Logout Is Successful
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

","The test case 'user_management_system_login' is designed to ensure that the login functionality of the user management system operates accurately and as expected. Key objectives of this test case include:
"
Verify keyword-driven clientcentral_keywords for API userauthentication,keyword-driven,userauthentication,"*** Settings ***
Documentation    Validate userauthentication
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
userauthentication
[Documentation]    Validate userauthentication using the following steps
Generate Authentication Token    username|password
Get User Information    token
Validate Token Expiry    token
Refresh Authentication Token    expired_token
Revoke Authentication Token    token
Validate User Access Rights    token|resource_id
Get Authentication History    username
Logout User    token
Delete User Authentication Data    username

*** Keywords ***
Generate Authentication Token
[Arguments]    username|password
[Return]    ${token}
[Documentation]    Keyword description
Log    username|password

Get User Information
[Arguments]    token
[Return]    ${userinfo}
[Documentation]    Keyword description
Log    token

Validate Token Expiry
[Arguments]    token
[Return]    ${boolean}
[Documentation]    Keyword description
Log    token

Refresh Authentication Token
[Arguments]    expired_token
[Return]    ${new_token}
[Documentation]    Keyword description
Log    expired_token

Revoke Authentication Token
[Arguments]    token
[Return]    ${string}
[Documentation]    Keyword description
Log    token

Validate User Access Rights
[Arguments]    token|resource_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    token|resource_id

Get Authentication History
[Arguments]    username
[Return]    ${history}
[Documentation]    Keyword description
Log    username

Logout User
[Arguments]    token
[Return]    ${string}
[Documentation]    Keyword description
Log    token

Delete User Authentication Data
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

","The ""userauthentication"" test case is designed to verify the authentication process for users within a system. The primary goal is to ensure that the authentication mechanisms work as expected, providing secure and correct access to users.

### Key Aspects Covered by the ""userauthentication"" Test Case:

1. **Token Generation and Management**:
- Ensure that authentication tokens are generated correctly upon successful login with valid credentials.
- Validate the expiration of tokens and ensure that appropriate actions can be taken when tokens are expired, such as refreshing the token.

2. **User Information and Access Rights**:
- Verify that user information can be retrieved using valid tokens.
- Ensure that user access rights are correctly enforced and validated.

3. **Token Handling**:
- Check the ability to revoke tokens to prevent further access.
- Confirm that the system logs out users correctly and deletes authentication data as required.

4. **Authentication History**:
- Retrieve and log authentication history to ensure that records of login attempts are maintained.

By verifying these aspects, the ""userauthentication"" test case ensures that the authentication process is robust, secure, and functions as expected."
Validate keyword-driven premierpay for Payment Processing payment_processing,keyword-driven,payment_processing,"*** Settings ***
Documentation    Validate payment_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
payment_processing
[Documentation]    Validate payment_processing using the following steps
Verify User Can Login    username, password
Select Payment Method    payment_method
Enter Payment Details    payment_details
Validate Payment Submission    expected_payment_id
Check Payment History    user_id
Verify Payment Is Listed In History    payment_id
Logout User    nan

*** Keywords ***
Verify User Can Login
[Arguments]    username, password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, password

Select Payment Method
[Arguments]    payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method

Enter Payment Details
[Arguments]    payment_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_details

Validate Payment Submission
[Arguments]    expected_payment_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_payment_id

Check Payment History
[Arguments]    user_id
[Return]    @{list}
[Documentation]    Keyword description
Log    user_id

Verify Payment Is Listed In History
[Arguments]    payment_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_id

Logout User
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The 'payment_processing' test case is designed to validate the proper functioning and robustness of the payment processing system. The critical features of this test include verifying successful user authentication, correctly selecting payment methods, entering valid payment details, ensuring successful payment submission, checking for accurate listing in payment history, and properly logging out users.

The key aspects tested in the 'payment_processing' test case include:"
Create keyword-driven customers_management for CRM view_customers,keyword-driven,view_customers,"*** Settings ***
Documentation    Validate view_customers
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open CRM Application
Suite Teardown   Close CRM Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       crm_user
${VALID_PASSWORD}   strongpassword

*** Test Cases ***
view_customers
[Documentation]    Validate view_customers using the following steps
Access Customer List    account_credentials
Validate Customer Information Displayed Correctly    customer_data
Filter Customer List By Name    customer_name
Filter Customer List By ID    customer_id
Sort Customer List By Join Date    sort_order
Validate Customer Contact Information    contact_info
Search Customer By Phone Number    phone_number
Capture Customer Data    customer_data

*** Keywords ***
Access Customer List
[Arguments]    account_credentials
[Return]    ${string}
[Documentation]    Keyword description
Log    account_credentials

Validate Customer Information Displayed Correctly
[Arguments]    customer_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_data

Filter Customer List By Name
[Arguments]    customer_name
[Return]    ${list}
[Documentation]    Keyword description
Log    customer_name

Filter Customer List By ID
[Arguments]    customer_id
[Return]    ${list}
[Documentation]    Keyword description
Log    customer_id

Sort Customer List By Join Date
[Arguments]    sort_order
[Return]    ${list}
[Documentation]    Keyword description
Log    sort_order

Validate Customer Contact Information
[Arguments]    contact_info
[Return]    ${boolean}
[Documentation]    Keyword description
Log    contact_info

Search Customer By Phone Number
[Arguments]    phone_number
[Return]    ${list}
[Documentation]    Keyword description
Log    phone_number

Capture Customer Data
[Arguments]    customer_data
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_data

","The 'view_customers' test case is designed to ensure that the CRM system's functionality for viewing customer details is working correctly. It covers various critical aspects, such as:

1. **Accessibility:** Validating that users can successfully access the customer list using valid account credentials.
2. **Data Verification:** Ensuring that the customer information displayed on the CRM interface is accurate and up-to-date.
3. **Filtering and Sorting:** Checking the functionality of filtering the customer list based on name and ID, and sorting it by a specific criteria (e.g., join date).
4. **Contact Information:** Verifying that the contact details of customers are correctly displayed and formatted.
5. **Search Capability:** Ensuring the system can search for customers using phone numbers.
6. **Data Capture:** Capturing the customer data to validate it for further processing or verification tasks.

This test case validates the reliability and correctness of various functionalities related to viewing and managing customer information within the CRM system."
Implement keyword-driven gelatoid for Customers refunds,keyword-driven,refunds,"*** Settings ***
Documentation    Validate refunds
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
refunds
[Documentation]    Validate refunds using the following steps
Navigate To Refunds Page    nan
Validate Refunds Page Is Displayed    nan
Select Refund Reason    reason_code
Validate Available Balance For Refund    customer_number
Process Refund    refund_details
Validate Refund Success Message    expected_message
Navigate To Transaction History    customer_number
Validate Refund Entry In Transaction History    expected_entry
Cancel Refund    nan
Validate Refund Is Cancelled    customer_number

*** Keywords ***
Navigate To Refunds Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Refunds Page Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Select Refund Reason
[Arguments]    reason_code
[Return]    ${string}
[Documentation]    Keyword description
Log    reason_code

Validate Available Balance For Refund
[Arguments]    customer_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_number

Process Refund
[Arguments]    refund_details
[Return]    ${string}
[Documentation]    Keyword description
Log    refund_details

Validate Refund Success Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Navigate To Transaction History
[Arguments]    customer_number
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_number

Validate Refund Entry In Transaction History
[Arguments]    expected_entry
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_entry

Cancel Refund
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Refund Is Cancelled
[Arguments]    customer_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_number

","The test case 'refunds' is designed to evaluate the refund functionality of a financial application. It involves multiple validations to ensure that the process of refunding amounts to customers operates accurately and reliably. The key aspects tested in this case include:

1. **Navigation and Display:** Ensuring that the user can navigate to the refunds page and that the page displays correctly.
2. **Selection and Validation:** Checking that the system allows for selecting refund reasons and validates the available balance for the refund.
3. **Processing and Confirmation:** Verifying that refunds can be processed and correctly display success messages.
4. **Transaction History:** Ensuring that refunds are accurately recorded in the transaction history.
5. **Cancellation:** Testing the ability to cancel refunds and confirming that cancelled refunds are handled appropriately."
Test keyword-driven functionalities for e-Commerce order_processing,keyword-driven,order_processing,"*** Settings ***
Documentation    Validate order_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_processing
[Documentation]    Validate order_processing using the following steps
Login To E-Commerce Platform    username, password
Search For Product    product_id
Add Product To Cart    product_id, quantity
Proceed To Checkout    nan
Enter Payment Details    payment_method, card_details
Confirm Order    nan
Validate Order Confirmation Page    nan
Navigate To Order History    user_id
Validate Order Details    order_id, expected_details
Apply Discount Code    discount_code
Validate Discount Applied    expected_discount
Update Shipping Address    user_id, new_address
Validate Updated Shipping Address    expected_address
Cancel Order    order_id
Validate Order Is Canceled    order_id
Log Out From E-Commerce Platform    nan

*** Keywords ***
Login To E-Commerce Platform
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Search For Product
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Add Product To Cart
[Arguments]    product_id, quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id, quantity

Proceed To Checkout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Payment Details
[Arguments]    payment_method, card_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method, card_details

Confirm Order
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order Confirmation Page
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Navigate To Order History
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate Order Details
[Arguments]    order_id, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, expected_details

Apply Discount Code
[Arguments]    discount_code
[Return]    ${string}
[Documentation]    Keyword description
Log    discount_code

Validate Discount Applied
[Arguments]    expected_discount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_discount

Update Shipping Address
[Arguments]    user_id, new_address
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, new_address

Validate Updated Shipping Address
[Arguments]    expected_address
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_address

Cancel Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Is Canceled
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Log Out From E-Commerce Platform
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'order_processing' ensures that the e-Commerce platform's order management functionality is working as intended. This comprehensive test validates the entire order lifecycle, including:
"
Validate keyword-driven booking for Online Booking System,keyword-driven,booking,"*** Settings ***
Documentation    Validate booking
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
booking
[Documentation]    Validate booking using the following steps
Login Using Valid Credentials    ${VALID_USER}, ${VALID_PASSWORD}
Select Booking Date    date
Enter Customer Details    customer_details
Validate Available Slots    expected_slots
Select Slot For Booking    slot
Confirm Booking    nan
Validate Booking Confirmation    confirmation_details
Logout From Booking System    nan
Check Booking Status In Email    confirmation_email

*** Keywords ***
Login Using Valid Credentials
[Arguments]    user, password
[Return]    ${string}
[Documentation]    Keyword description
Log    user, password

Select Booking Date
[Arguments]    date
[Return]    ${string}
[Documentation]    Keyword description
Log    date

Enter Customer Details
[Arguments]    customer_details
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_details

Validate Available Slots
[Arguments]    expected_slots
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_slots

Select Slot For Booking
[Arguments]    slot
[Return]    ${string}
[Documentation]    Keyword description
Log    slot

Confirm Booking
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Booking Confirmation
[Arguments]    confirmation_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    confirmation_details

Logout From Booking System
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Check Booking Status In Email
[Arguments]    confirmation_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    confirmation_email

","The test case 'booking' aims to verify the functionality and reliability of an online booking system. The primary objective is to ensure users can successfully log in, select a booking date, enter customer details, select a slot, confirm the booking, and receive confirmation notifications.

Key objectives include:
"
Validate keyword-driven web for ShoppingCart checkout,keyword-driven,checkout,"*** Settings ***
Documentation    Validate checkout
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
checkout
[Documentation]    Validate checkout using the following steps
Add Item To Cart    item_id
Navigate To Cart    nan
Update Item Quantity    item_id|quantity
Validate Cart Total    expected_total
Proceed To Checkout    nan
Enter Shipping Address    address_details
Select Shipping Method    shipping_method
Enter Payment Information    payment_details
Review Order Summary    nan
Place Order    nan
Confirm Order Success    nan
Validate Order Confirmation Email    expected_email|expected_order_details
Validate Order Details In User Account    expected_order_details

*** Keywords ***
Add Item To Cart
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id

Navigate To Cart
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Update Item Quantity
[Arguments]    item_id|quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id|quantity

Validate Cart Total
[Arguments]    expected_total
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_total

Proceed To Checkout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Shipping Address
[Arguments]    address_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    address_details

Select Shipping Method
[Arguments]    shipping_method
[Return]    ${string}
[Documentation]    Keyword description
Log    shipping_method

Enter Payment Information
[Arguments]    payment_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_details

Review Order Summary
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Place Order
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Confirm Order Success
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order Confirmation Email
[Arguments]    expected_email|expected_order_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_email|expected_order_details

Validate Order Details In User Account
[Arguments]    expected_order_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_order_details

","The purpose of the 'checkout' test case is to verify the seamless execution of the entire checkout process in a shopping cart system. This test case ensures that a user can successfully add items to the cart, review the cart details, proceed through the checkout process, and place an order without encountering errors. Key aspects typically assessed during the 'checkout' test case include:

1. **Cart Management:**
- Ensure items can be added to and removed from the cart.
- Verify that the cart total updates correctly based on item quantities.

2. **Checkout Process:**
- Test the navigation from the cart to the checkout page.
- Validate the functionality of filling in shipping and payment information.
- Confirm the system accurately handles different shipping methods and calculates delivery times and costs.

3. **Order Placement:**
- Ensure the order summary is correct and the order can be placed successfully.
- Verify that an order confirmation email is sent and contains the correct details.
- Ensure the order details are displayed accurately in the user's account post-purchase."
Generate keyword-driven ordermanagement_keywords for API processing,keyword-driven,order_processing,"*** Settings ***
Documentation    Validate order processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_processing
[Documentation]    Validate order processing using the following steps
Create Order Request Body    order_id, customer_id, order_date, items, total_amount
Send Order Request    order_body
Validate Order Response    response_body
Extract Order ID From Response    response_body
Fetch Order Details    order_id
Validate Order Details    order_details

*** Keywords ***
Create Order Request Body
[Arguments]    order_id, customer_id, order_date, items, total_amount
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id, customer_id, order_date, items, total_amount

Send Order Request
[Arguments]    order_body
[Return]    ${string}
[Documentation]    Keyword description
Log    order_body

Validate Order Response
[Arguments]    response_body
[Return]    ${string}
[Documentation]    Keyword description
Log    response_body

Extract Order ID From Response
[Arguments]    response_body
[Return]    ${string}
[Documentation]    Keyword description
Log    response_body

Fetch Order Details
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Details
[Arguments]    order_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_details
","The 'order_processing' test case is designed to validate and ensure the accuracy, efficiency, and correctness of the order processing functionality within a software application. This test case involves several steps that collectively guarantee that orders are created, processed, and validated accurately.
"
Validate keyword-driven account_registration for UserManagement,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_registration
[Documentation]    Validate user_registration using the following steps
Navigate To Registration Page    nan
Validate Registration Form Is Displayed    nan
Enter User Details For Registration    username, email, password, confirm_password
Submit Registration Form    nan
Validate Successful Registration Message    expected_message
Get Registered User Details    username
Send Confirmation Email    email
Validate Email With Confirmation Link Is Received    email
Navigate To Email Confirmation Link    confirmation_link
Validate Email Address Is Confirmed    username
Validate User Is Redirected To Login Page    nan
Validate Registered Username Is Displayed On Login Page    username

*** Keywords ***
Navigate To Registration Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Registration Form Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Enter User Details For Registration
[Arguments]    username, email, password, confirm_password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, email, password, confirm_password

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Successful Registration Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Get Registered User Details
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Send Confirmation Email
[Arguments]    email
[Return]    ${string}
[Documentation]    Keyword description
Log    email

Validate Email With Confirmation Link Is Received
[Arguments]    email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email

Navigate To Email Confirmation Link
[Arguments]    confirmation_link
[Return]    ${string}
[Documentation]    Keyword description
Log    confirmation_link

Validate Email Address Is Confirmed
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Validate User Is Redirected To Login Page
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Registered Username Is Displayed On Login Page
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

","The test case 'user_registration' is designed to validate the registration functionality of a UserManagement system, ensuring that new users can successfully create an account and confirm their email address.

Key aspects of the test case include:"
Verify user profile update in UserManagement,keyword-driven,UserManagement,"*** Settings ***
Documentation    Verify User Profile Update
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
UserManagement
[Documentation]    Verify user profile update using the following steps
Navigate To User Profile    user_id
Update User Information    user_details
Validate User Information Is Updated    expected_details

*** Keywords ***
Navigate To User Profile
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Navigate to user's profile page using the user ID
Log    user_id

Update User Information
[Arguments]    user_details
[Return]    ${boolean}
[Documentation]    Update user profile with given details
Log    user_details

Validate User Information Is Updated
[Arguments]    expected_details
[Return]    ${boolean}
[Documentation]    Verify that the user details have been correctly updated
Log    expected_details

","The test case ""UserManagement"" focuses on ensuring the functionality, accuracy, and reliability of updating a user's profile within the user management module. The main objectives include:

1. **Navigation**:
- Confirm that the system correctly navigates to the user's profile page based on the given user ID.

2. **Update User Profile**:
- Ensure that user profile details can be updated accurately.
- Verify that the updates are applied immediately and correctly to the user profile.

3. **Validation of Updated Information**:
- Check that the updated details are displayed accurately.
- Confirm that the system saves and reflects the changes across sessions and different parts of the application."
Create keyword-driven employee_management for onboard_new_employee,keyword-driven,onboard_new_employee,"*** Settings ***
Documentation    Validate onboard_new_employee
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${HR_USER}       hrmanager
${HR_PASSWORD}   securepassword

*** Test Cases ***
onboard_new_employee
[Documentation]    Validate onboard_new_employee using the following steps
Create New Employee Record    employee_name|employee_id|department
Validate Employee Details    employee_name|expected_department
Add Employment Details    employee_id|employment_type|joining_date
Validate Employment Type    employee_id|expected_employment_type
Update Contact Information    employee_id|contact_details
Validate Updated Contact Information    employee_id|expected_contact_details
Assign Department To Employee    employee_id|department

*** Keywords ***
Create New Employee Record
[Arguments]    employee_name|employee_id|department
[Return]    ${string}
[Documentation]    Keyword description
Log    employee_name|employee_id|department

Validate Employee Details
[Arguments]    employee_name|expected_department
[Return]    ${boolean}
[Documentation]    Keyword description
Log    employee_name|expected_department

Add Employment Details
[Arguments]    employee_id|employment_type|joining_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    employee_id|employment_type|joining_date

Validate Employment Type
[Arguments]    employee_id|expected_employment_type
[Return]    ${boolean}
[Documentation]    Keyword description
Log    employee_id|expected_employment_type

Update Contact Information
[Arguments]    employee_id|contact_details
[Return]    ${string}
[Documentation]    Keyword description
Log    employee_id|contact_details

Validate Updated Contact Information
[Arguments]    employee_id|expected_contact_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    employee_id|expected_contact_details

Assign Department To Employee
[Arguments]    employee_id|department
[Return]    ${boolean}
[Documentation]    Keyword description
Log    employee_id|department

","The test case 'onboard_new_employee' is designed to verify the processes and functionalities related to the onboarding of new employees within an organization's Human Resources (HR) system. This test case ensures that all necessary steps and validations are correctly performed when adding a new employee to the system. The main objectives include:
"
Create keyword-driven sterlingcooper for Authentication login,keyword-driven,login,"*** Settings ***
Documentation    Validate login
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
login
[Documentation]    Validate login using the following steps
Enter Username And Password    ${VALID_USER}|${VALID_PASSWORD}
Click Login Button    nan
Validate Successful Login    expected_message
Navigate To Dashboard    nan
Validate Username Displayed On Dashboard    ${VALID_USER}
Logout User    nan
Validate Logout Successful    expected_message

*** Keywords ***
Enter Username And Password
[Arguments]    username|password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|password

Click Login Button
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Successful Login
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Navigate To Dashboard
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Username Displayed On Dashboard
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Logout User
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Logout Successful
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

","The test case titled ""login"" is designed to verify the functionality and security of the authentication process within an application. Here's a summary of its purpose:

### Purpose of the ""login"" Test Case

1. **Functionality Testing**:
- Ensure users can enter valid credentials (username and password).
- Verify that the login button properly initiates the authentication process.
- Confirm successful login redirects the user to the dashboard.

2. **User Verification**:
- Validate that the logged-in user's username is correctly displayed on the dashboard.
- Ensure logout functionality works and returns the user to the login page with confirmation.

3. **Security**:
- Validate that only users with valid credentials can log in.
- Ensure any error messages for failed logins are appropriately displayed without revealing sensitive information."
Validate keyword-driven megacorp for Orders order_processing,keyword-driven,order_processing,"*** Settings ***
Documentation    Validate order_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_processing
[Documentation]    Validate order_processing using the following steps
Validate Order Created Successfully    order_id
Validate Order Status                 order_id|expected_status
Validate Order Total Amount            order_id|expected_amount
Navigate To Order Details Page         order_id
Filter Orders By Date Range            start_date|end_date
Validate Orders List                   start_date|end_date|expected_count
Update Order Status                    order_id|new_status
Cancel Order                           order_id
Validate Cancelled Order Status        order_id|expected_status

*** Keywords ***
Validate Order Created Successfully
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Validate Order Status
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

Validate Order Total Amount
[Arguments]    order_id|expected_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_amount

Navigate To Order Details Page
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Filter Orders By Date Range
[Arguments]    start_date|end_date
[Return]    ${integer}
[Documentation]    Keyword description
Log    start_date|end_date

Validate Orders List
[Arguments]    start_date|end_date|expected_count
[Return]    ${boolean}
[Documentation]    Keyword description
Log    start_date|end_date|expected_count

Update Order Status
[Arguments]    order_id|new_status
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|new_status

Cancel Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Cancelled Order Status
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

","The test case 'order_processing' is designed to evaluate and verify the various stages of an order lifecycle within a business system. The main objectives and purposes include:

1. **Order Creation:** Ensuring that an order can be created successfully and accurately.
2. **Order Status Verification:** Validating that the order status is correctly updated and displayed at different points, such as 'Pending', 'Completed', 'Shipped', 'Cancelled'.
3. **Order Amount Accuracy:** Confirming that the total amount for an order is calculated and displayed correctly.
4. **Order Management:** Checking the ability to navigate to detailed order pages and perform actions such as filtering orders, updating order statuses, and cancelling orders.
5. **Consistency and Accuracy:** Ensuring all the interactions related to an order maintain data integrity and are reflected accurately across the system."
Test keyword-driven web functionality for PayNOW user_registration,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_registration
[Documentation]    Validate user_registration using the following steps
Open Registration Page    nan
Enter User Details    username, password, email
Submit Registration Form    nan
Verify Registration Success    welcome_message
Validate Email Confirmation Link    email_link
Activate User Account    activation_code
Login With Registered Details    username, password
Logout User    nan
Attempt Registration With Duplicate Email    email
Attempt Registration With Weak Password    weak_password
Validate Password Strength Indicator    strong_password, expected_strength
Verify Registration Form Field Validations    field_name, expected_validation_message
Validate System Error Handling During Registration    error_message

*** Keywords ***
Open Registration Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter User Details
[Arguments]    username, password, email
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password, email

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Verify Registration Success
[Arguments]    welcome_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    welcome_message

Validate Email Confirmation Link
[Arguments]    email_link
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email_link

Activate User Account
[Arguments]    activation_code
[Return]    ${string}
[Documentation]    Keyword description
Log    activation_code

Login With Registered Details
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Logout User
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Attempt Registration With Duplicate Email
[Arguments]    email
[Return]    ${string}
[Documentation]    Keyword description
Log    email

Attempt Registration With Weak Password
[Arguments]    weak_password
[Return]    ${string}
[Documentation]    Keyword description
Log    weak_password

Validate Password Strength Indicator
[Arguments]    strong_password, expected_strength
[Return]    ${boolean}
[Documentation]    Keyword description
Log    strong_password, expected_strength

Verify Registration Form Field Validations
[Arguments]    field_name, expected_validation_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    field_name, expected_validation_message

Validate System Error Handling During Registration
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message

","The test case 'user_registration' is designed to verify the comprehensive functionality and reliability of the user registration feature within the PayNOW application. The primary objectives are to ensure users can register successfully, receive confirmation emails, and log in with their new credentials.

Additionally, this test case assesses various scenarios, including:

1. Successful registration with valid details.
2. Handling duplicate email registrations.
3. Ensuring password strength is adequately validated.
4. Verifying field validations on the registration form.
5. Checking error handling during the registration process.
6. Confirming email confirmation link functionality.
7. Validating user account activation through email.
8. Testing the login functionality post-registration.
9. Ensuring users can log out successfully.
10. Verifying system responses to weak passwords.

The ultimate goal is to ensure a smooth and secure user experience during the registration process."
Validate keyword-driven paynow_keywords for API subscription,keyword-driven,subscription,"*** Settings ***
Documentation    Validate subscription
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
subscription
[Documentation]    Validate subscription using the following steps
Send Request To Get Subscription Details    customer_id
Create Subscription Request Body    subscription_details, payment_info
Send Request To Create Subscription    customer_id, subscription_body
Send Request To Update Subscription    customer_id, subscription_id, update_details
Send Request To Cancel Subscription    customer_id, subscription_id

*** Keywords ***
Send Request To Get Subscription Details
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

Create Subscription Request Body
[Arguments]    subscription_details, payment_info
[Return]    ${string}
[Documentation]    Keyword description
Log    subscription_details, payment_info

Send Request To Create Subscription
[Arguments]    customer_id, subscription_body
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id, subscription_body

Send Request To Update Subscription
[Arguments]    customer_id, subscription_id, update_details
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id, subscription_id, update_details

Send Request To Cancel Subscription
[Arguments]    customer_id, subscription_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id, subscription_id

","The test case 'subscription' is designed to validate the functionality and reliability of a subscription management system. The purpose includes:
"
Validate keyword-driven paynow_keywords for API refund,keyword-driven,refund,"*** Settings ***
Documentation    Validate refund
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
refund
[Documentation]    Validate refund using the following steps
Send Request To Initiate Refund    transaction_id, amount
Validate Refund Status    transaction_id, expected_status
Check Refund Processing Time    transaction_id
Validate Refund Amount    transaction_id, amount
Confirm Refund Notification    transaction_id, notification_type

*** Keywords ***
Send Request To Initiate Refund
[Arguments]    transaction_id, amount
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id, amount

Validate Refund Status
[Arguments]    transaction_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, expected_status

Check Refund Processing Time
[Arguments]    transaction_id
[Return]    ${datetime}
[Documentation]    Keyword description
Log    transaction_id

Validate Refund Amount
[Arguments]    transaction_id, amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, amount

Confirm Refund Notification
[Arguments]    transaction_id, notification_type
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, notification_type

","The test case 'refund' is designed to verify the functionality and accuracy of the refund process within a payment system. The goal is to ensure that the system properly handles refund requests and delivers correct outcomes. 
"
Validate user_authentication for SecureLoginApp,keyword-driven,user_authentication,"*** Settings ***
Documentation    Validate user_authentication
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_authentication
[Documentation]    Validate user_authentication using the following steps
Enter Username    username
Enter Password    password
Click Login Button    nan
Validate Successful Login    username
Logout From Application    nan

*** Keywords ***
Enter Username
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Enter Password
[Arguments]    password
[Return]    ${string}
[Documentation]    Keyword description
Log    password

Click Login Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Successful Login
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Logout From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'user_authentication' test case is designed to ensure that the user authentication process for the SecureLoginApp functions as expected. This involves verifying that users can successfully log in with valid credentials and are appropriately logged out when needed.

Key objectives of this test case include:
1. **Credential Input Verification:** Ensuring that the system accepts valid credentials and processes them correctly.
2. **Login Functionality:** Verifying that clicking the login button successfully authenticates users with valid credentials.
3. **Successful Login Validation:** Checking that the system recognizes and grants access to authenticated users.
4. **Logout Functionality:** Ensuring that users can successfully log out, and subsequent access attempts require re-authentication."
Create keyword-driven web for CommonKeywordsForAllMerchants logout,keyword-driven,logout,"*** Settings ***
Documentation    Validate logout
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
logout
[Documentation]    Validate logout using the following steps
Click On Logout Button    nan
Validate Logout Success Message    nan
Redirect To Login Page    nan
Verify User Session Cleared    nan
Attempt To Access Restricted Page Post Logout    nan
Validate Access Denied Post Logout    nan

*** Keywords ***
Click On Logout Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Logout Success Message
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Redirect To Login Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Verify User Session Cleared
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Attempt To Access Restricted Page Post Logout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Access Denied Post Logout
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The purpose of the 'logout' test case is to verify the proper functionality and security of the user logout process. This test ensures that when a user logs out, their session is effectively terminated and they are unable to access restricted areas without re-authenticating. Key aspects typically assessed during the 'logout' test case include:

1. **Logout Initiation:**
- Verify that clicking the logout button triggers the logout process.
- Ensure a success message is displayed upon successful logout.

2. **Session Termination:**
- Confirm that the user session is cleared and all session data is removed.

3. **Access Restrictions Post Logout:**
- Test that the user is redirected to the login page after logging out.
- Verify that attempts to access restricted pages after logout result in access denial and redirection to the login page."
Validate keyword-driven web for PayNOW omnicorp_paymenthistory,keyword-driven,omnicorp_paymenthistory,"*** Settings ***
Documentation    Validate omnicorp_paymenthistory
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
omnicorp_paymenthistory
[Documentation]    Validate omnicorp_paymenthistory using the following steps
Login To PayNOW And Navigate To Payment History    account_details
Validate Payment History Is Displayed    payment_history
Select Date Range For Payment History    start_date, end_date
Validate Payments Within Selected Date Range    expected_payments
Download Payment History    nan
Validate Downloaded Payment History Format    expected_format
Search Payment History By Transaction ID    transaction_id
Validate Search Results Based On Transaction ID    expected_details
Filter Payment History    filter_criteria
Validate Filtered Payment History    expected_filtered_payments

*** Keywords ***
Login To PayNOW And Navigate To Payment History
[Arguments]    account_details
[Return]    ${string}
[Documentation]    Keyword description
Log    account_details

Validate Payment History Is Displayed
[Arguments]    payment_history
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_history

Select Date Range For Payment History
[Arguments]    start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date, end_date

Validate Payments Within Selected Date Range
[Arguments]    expected_payments
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_payments

Download Payment History
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Downloaded Payment History Format
[Arguments]    expected_format
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_format

Search Payment History By Transaction ID
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Validate Search Results Based On Transaction ID
[Arguments]    expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_details

Filter Payment History
[Arguments]    filter_criteria
[Return]    ${string}
[Documentation]    Keyword description
Log    filter_criteria

Validate Filtered Payment History
[Arguments]    expected_filtered_payments
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_filtered_payments

","The test case 'omnicorp_paymenthistory' is designed to verify and validate the management and processing of payment history within the Omnicorp system. Its primary purpose is to ensure the accurate handling of all financial transactions records pertaining to past payments. This includes:
"
Validate keyword-driven globexcorporation for Billing invoice_management,keyword-driven,invoice_management,"*** Settings ***
Documentation    Validate invoice_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       test_user
${VALID_PASSWORD}   password123

*** Test Cases ***
invoice_management
[Documentation]    Validate invoice_management using the following steps
Login To Application    username, password
Navigate To Invoice Management    nan
Verify Invoice List Is Displayed    expected_count
Generate New Invoice    invoice_data
Validate Invoice Creation    invoice_number
Search Invoice By Number    invoice_number
Validate Invoice Details Are Correct    invoice_number, expected_data
Update Invoice Details    invoice_number, update_data
Validate Updated Invoice Details    invoice_number, expected_data
Delete Invoice    invoice_number
Confirm Invoice Deletion    invoice_number
Log Out From Application    nan

*** Keywords ***
Login To Application
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Navigate To Invoice Management
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Verify Invoice List Is Displayed
[Arguments]    expected_count
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_count

Generate New Invoice
[Arguments]    invoice_data
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_data

Validate Invoice Creation
[Arguments]    invoice_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number

Search Invoice By Number
[Arguments]    invoice_number
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_number

Validate Invoice Details Are Correct
[Arguments]    invoice_number, expected_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number, expected_data

Update Invoice Details
[Arguments]    invoice_number, update_data
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_number, update_data

Validate Updated Invoice Details
[Arguments]    invoice_number, expected_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number, expected_data

Delete Invoice
[Arguments]    invoice_number
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_number

Confirm Invoice Deletion
[Arguments]    invoice_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number

Log Out From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'invoice_management' test case is designed to evaluate the functionality and accuracy of an invoice management system. Its primary objective is to ensure all operations related to invoice handling—such as creation, updating, deletion, and validation—are performed correctly and efficiently. Key aspects covered in this test case include:

1. **User Authentication:** Ensuring that users can successfully log in and out of the application.
2. **Navigation and Access:** Verifying that users can navigate to the invoice management section.
3. **Invoice Operations:** Testing the creation, searching, updating, and deletion of invoices, as well as the validation of these operations.
4. **Data Validation:** Ensuring that invoice data is handled correctly and displayed accurately."
Validate keyword-driven sterlingcooper for Users user_management,keyword-driven,user_management,"*** Settings ***
Documentation    Validate user_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_management
[Documentation]    Validate user_management using the following steps
Create New User    username|password|email
Validate User Creation Success Message    expected_message
Search For Created User    username
Validate User Details Are Correct    username|email|status
Update User Information    username|new_email|new_status
Validate User Update Success Message    expected_message
Search For Updated User    username
Validate Updated User Details    username|new_email|new_status
Deactivate User    username
Validate User Deactivation Success Message    expected_message
Search For Deactivated User    username
Validate User Status Is Deactivated    username|expected_status
Reactivate User    username
Validate User Reactivation Success Message    expected_message
Search For Reactivated User    username
Validate User Status Is Active    username|expected_status
Delete User    username
Validate User Deletion Success Message    expected_message
Search For Deleted User    username
Validate User Is Not Found    username

*** Keywords ***
Create New User
[Arguments]    username|password|email
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password|email

Validate User Creation Success Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Search For Created User
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Validate User Details Are Correct
[Arguments]    username|email|status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|email|status

Update User Information
[Arguments]    username|new_email|new_status
[Return]    ${string}
[Documentation]    Keyword description
Log    username|new_email|new_status

Validate User Update Success Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Search For Updated User
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Validate Updated User Details
[Arguments]    username|new_email|new_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|new_email|new_status

Deactivate User
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate User Deactivation Success Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Search For Deactivated User
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Validate User Status Is Deactivated
[Arguments]    username|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|expected_status

Reactivate User
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate User Reactivation Success Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Search For Reactivated User
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Validate User Status Is Active
[Arguments]    username|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|expected_status

Delete User
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate User Deletion Success Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Search For Deleted User
[Arguments]    username
[Return]    ${boolean}
[Documentation]",
Build keyword-driven login_test for Web login_page,keyword-driven,login_page,"*** Settings ***
Documentation    Validate login_page
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
login_page
[Documentation]    Validate login_page using the following steps
Enter Username    username
Enter Password    password
Click Login Button    nan
Wait For Login To Complete    timeout
Validate Login Success Message Displayed    success_message
Validate Error Message Displayed On Invalid Login    error_message
Validate Redirect To Dashboard After Login    expected_url
Click Forgot Password Link    nan
Validate Forgot Password Page Loaded    expected_url
Validate Remember Me Functionality    username, password
Validate Logout Functionality    logout_message
Redirect To Login Page After Logout    expected_url
Validate Resend Activation Email Link    activation_email_message
Validate Captcha Appears After Several Failed Login Attempts    captcha_message

*** Keywords ***
Enter Username
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Enter Password
[Arguments]    password
[Return]    ${string}
[Documentation]    Keyword description
Log    password

Click Login Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Wait For Login To Complete
[Arguments]    timeout
[Return]    ${string}
[Documentation]    Keyword description
Log    timeout

Validate Login Success Message Displayed
[Arguments]    success_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    success_message

Validate Error Message Displayed On Invalid Login
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message

Validate Redirect To Dashboard After Login
[Arguments]    expected_url
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_url

Click Forgot Password Link
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Forgot Password Page Loaded
[Arguments]    expected_url
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_url

Validate Remember Me Functionality
[Arguments]    username, password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, password

Validate Logout Functionality
[Arguments]    logout_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    logout_message

Redirect To Login Page After Logout
[Arguments]    expected_url
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_url

Validate Resend Activation Email Link
[Arguments]    activation_email_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    activation_email_message

Validate Captcha Appears After Several Failed Login Attempts
[Arguments]    captcha_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    captcha_message

","The test case 'login_page' is designed to verify the core functionalities and security of the login page within a web application. It aims to ensure that users can access their accounts using valid credentials, handle various error scenarios, and navigate to different sections from the login page effectively. Specifically, the test case:
"
Validate keyword-driven web for E-Commerce_Product_Search product_search,keyword-driven,product_search,"*** Settings ***
Documentation    Validate product_search
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
product_search
[Documentation]    Validate product_search using the following steps
Open Home Page    nan
Enter Search Query    search_keyword
Click On Search Button    nan
Validate Search Results Are Displayed    search_keyword
Validate No Results Message For Invalid Search    invalid_search_keyword
Select Product From Search Results    product_name
Validate Product Details Page    product_name
Sort Search Results By Price    sort_order
Validate Sorted Results By Price    sort_order

*** Keywords ***
Open Home Page
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Enter Search Query
[Arguments]    search_keyword
[Return]    ${string}
[Documentation]    Keyword description
Log    search_keyword

Click On Search Button
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Search Results Are Displayed
[Arguments]    search_keyword
[Return]    ${boolean}
[Documentation]    Keyword description
Log    search_keyword

Validate No Results Message For Invalid Search
[Arguments]    invalid_search_keyword
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invalid_search_keyword

Select Product From Search Results
[Arguments]    product_name
[Return]    ${string}
[Documentation]    Keyword description
Log    product_name

Validate Product Details Page
[Arguments]    product_name
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_name

Sort Search Results By Price
[Arguments]    sort_order
[Return]    ${boolean}
[Documentation]    Keyword description
Log    sort_order

Validate Sorted Results By Price
[Arguments]    sort_order
[Return]    ${boolean}
[Documentation]    Keyword description
Log    sort_order

","The test case 'product_search' is designed to assess the functionality and user experience of the product search feature in an e-commerce application. This test case ensures that users can effectively search for products using various criteria, that search results are accurately displayed, and that additional features related to product search, such as sorting, are functioning correctly.

Key objectives of the 'product_search' test case include:"
Generate keyword-driven paynow_keywords for API payment,keyword-driven,payment,"*** Settings ***
Documentation    Validate payment
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
payment
[Documentation]    Validate payment using the following steps
Create Payment Body    unique_value, payment_amount, payment_method, merchant_id, transaction_date
Create Payment Details Body    merchant_id, payment_amount
Create Payment with Multiple Methods    account_number, integrated_merchant, payment_amount
Create Payment Confirmation Body    nan
Send Request To Process Payment For Customer  # robocop:disable=too-many-arguments    unique_value, merchant_key, merchant_id, payment_amount, transaction_date
Validate Payment Status Through API    account_number, integrated_merchant, transaction_id

*** Keywords ***
Create Payment Body
[Arguments]    unique_value, payment_amount, payment_method, merchant_id, transaction_date
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value, payment_amount, payment_method, merchant_id, transaction_date

Create Payment Details Body
[Arguments]    merchant_id, payment_amount
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant_id, payment_amount

Create Payment with Multiple Methods
[Arguments]    account_number, integrated_merchant, payment_amount
[Return]    @{list}
[Documentation]    Keyword description
Log    account_number, integrated_merchant, payment_amount

Create Payment Confirmation Body
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Send Request To Process Payment For Customer  # robocop:disable=too-many-arguments
[Arguments]    unique_value, merchant_key, merchant_id, payment_amount, transaction_date
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value, merchant_key, merchant_id, payment_amount, transaction_date

Validate Payment Status Through API
[Arguments]    account_number, integrated_merchant, transaction_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, integrated_merchant, transaction_id

","The 'payment' test case focuses on validating the payment processes within an application, ensuring accurate transaction handling, and verifying that payments are processed correctly and securely.

Key areas covered in the 'payment' test case include:

1. **Payment Body Creation**:
- Validation of creating the payment payload that includes details such as unique identifiers, payment amount, payment method, merchant details, and transaction date.

2. **Payment Details Verification**:
- Ensuring the accuracy of merchant and payment details provided during the process.

3. **Multiple Payment Methods**:
- Testing the payment processing with various methods and ensuring each method works as expected.

4. **Payment Confirmation**:
- Creating and validating the payment confirmation details that follow the payment request.

5. **Payment Processing**:
- Sending a request to process the payment and validating that the system processes the payment accurately and reflects the correct status.

These tests ensure that the overall payment processing functionality within the application is robust, secure, and error-free."
Validate keyword-driven cobaltgroup for Report generation all_reports,keyword-driven,all_reports,"*** Settings ***
Documentation    Validate all_reports
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       reportuser
${VALID_PASSWORD}   pass123

*** Test Cases ***
all_reports
[Documentation]    Validate all_reports using the following steps
Login With Valid Credentials    username, password
Navigate To Report Generation Page    nan
Select Report Type    report_type
Enter Report Parameters    report_parameters
Click On Generate Report Button    nan
Validate Report Generation Success Message    success_message
Validate Report Data Is Displayed Correctly    expected_report_data
Download The Generated Report    report_type
Validate Downloaded Report Matches Generated Report    report_file, expected_report_file
Schedule Report Generation    report_type, schedule_time
Validate Scheduled Report Is Generated    report_type, schedule_time
Delete Scheduled Report    schedule_id
Validate Scheduled Report Is Deleted    schedule_id
Logout    nan

*** Keywords ***
Login With Valid Credentials
[Arguments]    username, password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, password

Navigate To Report Generation Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Select Report Type
[Arguments]    report_type
[Return]    ${string}
[Documentation]    Keyword description
Log    report_type

Enter Report Parameters
[Arguments]    report_parameters
[Return]    ${string}
[Documentation]    Keyword description
Log    report_parameters

Click On Generate Report Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Report Generation Success Message
[Arguments]    success_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    success_message

Validate Report Data Is Displayed Correctly
[Arguments]    expected_report_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_report_data

Download The Generated Report
[Arguments]    report_type
[Return]    ${string}
[Documentation]    Keyword description
Log    report_type

Validate Downloaded Report Matches Generated Report
[Arguments]    report_file, expected_report_file
[Return]    ${boolean}
[Documentation]    Keyword description
Log    report_file, expected_report_file

Schedule Report Generation
[Arguments]    report_type, schedule_time
[Return]    ${string}
[Documentation]    Keyword description
Log    report_type, schedule_time

Validate Scheduled Report Is Generated
[Arguments]    report_type, schedule_time
[Return]    ${boolean}
[Documentation]    Keyword description
Log    report_type, schedule_time

Delete Scheduled Report
[Arguments]    schedule_id
[Return]    ${string}
[Documentation]    Keyword description
Log    schedule_id

Validate Scheduled Report Is Deleted
[Arguments]    schedule_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    schedule_id

Logout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The ""all_reports"" test case is designed to verify the functionality and reliability of the report generation feature provided by CobaltGroup. The primary objective is to ensure that reports can be generated accurately and efficiently, as well as validating the quality and integrity of the data within the reports.

Key objectives of this test case include:"
Verify keyword-driven e-commerce_keywords for Web product_search,keyword-driven,product_search,"*** Settings ***
Documentation    Validate product_search
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
product_search
[Documentation]    Validate product_search using the following steps
Open Home Page    url
Perform Login    username, password
Enter Search Keyword    search_keyword
Click Search Button    button_locator
Validate Search Results    expected_results
Sort Results By    sort_option
Filter Results By Category    category
Add Product To Cart    product_id
Validate Product In Cart    product_id
Perform Logout    nan

*** Keywords ***
Open Home Page
[Arguments]    url
[Return]    ${string}
[Documentation]    Keyword description
Log    url

Perform Login
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Enter Search Keyword
[Arguments]    search_keyword
[Return]    ${string}
[Documentation]    Keyword description
Log    search_keyword

Click Search Button
[Arguments]    button_locator
[Return]    ${string}
[Documentation]    Keyword description
Log    button_locator

Validate Search Results
[Arguments]    expected_results
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_results

Sort Results By
[Arguments]    sort_option
[Return]    ${string}
[Documentation]    Keyword description
Log    sort_option

Filter Results By Category
[Arguments]    category
[Return]    ${string}
[Documentation]    Keyword description
Log    category

Add Product To Cart
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Validate Product In Cart
[Arguments]    product_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id

Perform Logout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'product_search' is designed to verify the functionality of the product search feature in an e-commerce web application. It ensures that users can successfully search for products, filter and sort the search results, and add desired products to their cart. Specifically, it includes the following checks:
"
Validate keyword-driven web for PayNOW omnicorp_paymentstatus,keyword-driven,omnicorp_paymentstatus,"*** Settings ***
Documentation    Validate omnicorp_paymentstatus
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
omnicorp_paymentstatus
[Documentation]    Validate omnicorp_paymentstatus using the following steps
Enter Transaction ID And Customer Details    transaction_id, customer_id
Validate Payment Status Message    expected_status
Verify Transaction Details In Payment History    transaction_id, expected_details
Confirm Payment Status In Customer Account    customer_id, transaction_id, expected_status

*** Keywords ***
Enter Transaction ID And Customer Details
[Arguments]    transaction_id, customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id, customer_id

Validate Payment Status Message
[Arguments]    expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_status

Verify Transaction Details In Payment History
[Arguments]    transaction_id, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, expected_details

Confirm Payment Status In Customer Account
[Arguments]    customer_id, transaction_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id, transaction_id, expected_status

","The ""omnicorp_paymentstatus"" test case aims to verify the payment status functionality within the Omnicorp application. The primary goal of this test case is to ensure that the payment status is accurately reflected in the system and can be correctly validated based on transaction and customer details.

Key objectives of the test case include:"
Validate keyword-driven clientcentral_keywords for API payments,keyword-driven,payments,"*** Settings ***
Documentation    Validate payments
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
payments
[Documentation]    Validate payments using the following steps
Create Payment Body    transaction_id|amount|payment_date
Send Request To Process Payment    merchant|transaction_id|amount|payment_date
Create Customer Details Body    nan
Verify Payment Processing    merchant|transaction_id|amount|payment_date
Generate Payment Receipt    nan
Create Payment Confirmation Body    transaction_id|amount|payment_date
Validate Payment Receipt Details    nan
Send Request To Finalize Payment    merchant|transaction_id|amount|payment_date

*** Keywords ***
Create Payment Body
[Arguments]    transaction_id|amount|payment_date
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id|amount|payment_date

Send Request To Process Payment
[Arguments]    merchant|transaction_id|amount|payment_date
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant|transaction_id|amount|payment_date

Create Customer Details Body
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Verify Payment Processing
[Arguments]    merchant|transaction_id|amount|payment_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    merchant|transaction_id|amount|payment_date

Generate Payment Receipt
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Create Payment Confirmation Body
[Arguments]    transaction_id|amount|payment_date
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id|amount|payment_date

Validate Payment Receipt Details
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Send Request To Finalize Payment
[Arguments]    merchant|transaction_id|amount|payment_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    merchant|transaction_id|amount|payment_date

","The 'payments' test case is designed to ensure that the payment processing system within an application operates correctly, securely, and efficiently. Here are key objectives of the 'payments' test case:
"
Create keyword-driven sterlingcooper for Orders manage_orders,keyword-driven,manage_orders,"*** Settings ***
Documentation    Validate manage_orders
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}               testuser
${VALID_PASSWORD}           secret

*** Test Cases ***
manage_orders
[Documentation]    Validate manage_orders using the following steps
Create New Order    customer_id|order_details
Validate Order Confirmation    order_id
Edit Order Details    order_id|updated_details
Validate Order Details    order_id|expected_details
Cancel Order    order_id
Validate Order Cancellation    order_id|cancellation_status
Filter Orders By Date Range    start_date|end_date
Navigate To Order Details Page    order_id
Validate Order List Count    expected_count
Validate Order Export Functionality    export_format
Select Payment Method For Order    order_id|payment_method
Validate Payment Confirmation    order_id|payment_status

*** Keywords ***
Create New Order
[Arguments]    customer_id|order_details
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id|order_details

Validate Order Confirmation
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Edit Order Details
[Arguments]    order_id|updated_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|updated_details

Validate Order Details
[Arguments]    order_id|expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_details

Cancel Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Cancellation
[Arguments]    order_id|cancellation_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|cancellation_status

Filter Orders By Date Range
[Arguments]    start_date|end_date
[Return]    ${integer}
[Documentation]    Keyword description
Log    start_date|end_date

Navigate To Order Details Page
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order List Count
[Arguments]    expected_count
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_count

Validate Order Export Functionality
[Arguments]    export_format
[Return]    ${boolean}
[Documentation]    Keyword description
Log    export_format

Select Payment Method For Order
[Arguments]    order_id|payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|payment_method

Validate Payment Confirmation
[Arguments]    order_id|payment_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|payment_status

","The test case 'manage_orders' aims to validate the different functionalities involved in managing customer orders within a system. Here is a breakdown of its purposes:

1. **Order Creation and Validation**:
- Ensure that the system allows the creation of a new order and verifies its successful confirmation.

2. **Order Modification**:
- Validate that the details of an existing order can be edited and the changes are accurately reflected.

3. **Order Cancellation**:
- Verify that an order can be cancelled and the cancellation process is correctly handled by the system.

4. **Order Filtering and Navigation**:
- Confirm that orders can be filtered by date range and users can navigate to an individual order’s detail page.

5. **Order Listing and Exporting**:
- Ensure that the system displays the correct count of orders and supports exporting orders in different formats.

6. **Payment Processing**:
- Validate the selection of a payment method and confirm the payment status for an order.

The 'manage_orders' test case encompasses various scenarios to ensure the robustness and accuracy of the order management functionalities within the application."
Build keyword-driven usermanagement_keywords for API userregistration,keyword-driven,userregistration,"*** Settings ***
Documentation    Validate userregistration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
userregistration
[Documentation]    Validate userregistration using the following steps
Create User Registration Body    unique_value, email, password
Send Registration Request    user_body
Validate Registration Confirmation    user_id
Check User Data In Database    user_id

*** Keywords ***
Create User Registration Body
[Arguments]    unique_value, email, password
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value, email, password

Send Registration Request
[Arguments]    user_body
[Return]    ${string}
[Documentation]    Keyword description
Log    user_body

Validate Registration Confirmation
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Check User Data In Database
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

","The test case 'userregistration' is designed to validate the process of user registration within an application or system. The purpose of this test case includes:
"
Generate keyword-driven clientcentral_keywords for API processorder,keyword-driven,processorder,"*** Settings ***
Documentation    Validate processorder
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
processorder
[Documentation]    Validate processorder using the following steps
Create Order Request Body    customer_id|product_id|quantity|order_type
Get Response Code    response
Retrieve Order Details    response
Send Request To Validate Stock Availability    product_id|quantity
Process Payment For Order    payment_method|amount
Confirm Order Creation    order_id|customer_id
Cancel Order Request    order_id|reason
Generate Order Invoice    order_id|customer_id
Validate Order Status    order_id|status
Retrieve Customer Information    customer_id

*** Keywords ***
Create Order Request Body
[Arguments]    customer_id|product_id|quantity|order_type
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id|product_id|quantity|order_type

Get Response Code
[Arguments]    response
[Return]    ${integer}
[Documentation]    Keyword description
Log    response

Retrieve Order Details
[Arguments]    response
[Return]    ${string}
[Documentation]    Keyword description
Log    response

Send Request To Validate Stock Availability
[Arguments]    product_id|quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id|quantity

Process Payment For Order
[Arguments]    payment_method|amount
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method|amount

Confirm Order Creation
[Arguments]    order_id|customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|customer_id

Cancel Order Request
[Arguments]    order_id|reason
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|reason

Generate Order Invoice
[Arguments]    order_id|customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|customer_id

Validate Order Status
[Arguments]    order_id|status
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|status

Retrieve Customer Information
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id
","The purpose of the test case 'processorder' is to verify the order processing functionality within a system. It ensures that every step of the order process is executed correctly and that the user receives appropriate feedback throughout the transaction.

Key aspects that the 'processorder' test case might cover include:

1. **Validation of Order Input Information:** Checking that all required order details (such as customer ID, product ID, quantity, and order type) are entered correctly and validated without errors.

2. **Stock Availability Confirmation:** Ensuring the system correctly checks product availability and handles stocks accurately.

3. **Order Processing and Payment:** Verifying that the system processes the payment correctly and confirms the order creation.

4. **Handling Order Modifications:** Checking functionalities like canceling the order, generating invoices, and retrieving customer information.

Each step includes specific keywords and arguments necessary to emulate the order processing scenario and validate the outcomes accordingly."
Develop keyword-driven web for PaymentGateway payment_processing,keyword-driven,payment_processing,"*** Settings ***
Documentation    Validate payment_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
payment_processing
[Documentation]    Validate payment_processing using the following steps
Launch Payment Gateway    browser_name|url
User Login Payment Gateway    ${VALID_USER}|${VALID_PASSWORD}
Select Payment Method    method_type
Enter Payment Details    card_number|expiry_date|cvv
Validate Payment Summary    expected_amount|expected_currency
Confirm Payment    nan
Validate Transaction Success    expected_message
Logout Payment Gateway    nan
Read Transaction Data From Database    transaction_id|database_path
Validate Transaction Record In Database    transaction_id|expected_status
Generate Payment Receipt    transaction_id

*** Keywords ***
Launch Payment Gateway
[Arguments]    browser_name|url
[Return]    ${string}
[Documentation]    Keyword description
Log    browser_name|url

User Login Payment Gateway
[Arguments]    username|password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password

Select Payment Method
[Arguments]    method_type
[Return]    ${string}
[Documentation]    Keyword description
Log    method_type

Enter Payment Details
[Arguments]    card_number|expiry_date|cvv
[Return]    ${string}
[Documentation]    Keyword description
Log    card_number|expiry_date|cvv

Validate Payment Summary
[Arguments]    expected_amount|expected_currency
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_amount|expected_currency

Confirm Payment
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Transaction Success
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Logout Payment Gateway
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Read Transaction Data From Database
[Arguments]    transaction_id|database_path
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id|database_path

Validate Transaction Record In Database
[Arguments]    transaction_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id|expected_status

Generate Payment Receipt
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

","The 'payment_processing' test case is designed to evaluate the functionality, reliability, and accuracy of the payment gateway system. Its primary purpose is to ensure that the system can handle various payment scenarios—including user login, selection of payment methods, entering payment details, confirming payments, and validating transactions—without errors or failures.

Key aspects of the test case include:

1. **Transaction Accuracy:** Verifying that the system accurately processes payments according to user input and generates correct payment summaries.
2. **User Interaction:** Ensuring that users can easily navigate the payment gateway, select payment methods, and enter necessary details.
3. **Data Integrity:** Checking that transaction records are correctly inserted into the database and can be retrieved and validated.
4. **Error Handling:** Ensuring that the system handles errors such as invalid payment details or database connection issues, providing clear feedback to the user.
5. **Security:** Verifying that sensitive user information, such as payment details, is securely handled and protected."
Check keyword-driven functionality for UserManagement application,keyword-driven,user_management,"*** Settings ***
Documentation    Validate user_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_management
[Documentation]    Validate user_management using the following steps
Create New User Account    username, password, email
Login As New User    username, password
Validate User Dashboard Is Displayed    username
Update User Profile Details    username, new_email, new_phone
Validate Updated Profile Information    username, expected_email, expected_phone
Change User Password    username, old_password, new_password
Validate Password Changed Successfully    username, new_password
Logout User    username
Validate User Can Login With New Password    username, new_password
Delete User Account    username, password
Validate User Account Deletion    username

*** Keywords ***
Create New User Account
[Arguments]    username, password, email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, password, email

Login As New User
[Arguments]    username, password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, password

Validate User Dashboard Is Displayed
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Update User Profile Details
[Arguments]    username, new_email, new_phone
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, new_email, new_phone

Validate Updated Profile Information
[Arguments]    username, expected_email, expected_phone
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, expected_email, expected_phone

Change User Password
[Arguments]    username, old_password, new_password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, old_password, new_password

Validate Password Changed Successfully
[Arguments]    username, new_password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, new_password

Logout User
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Validate User Can Login With New Password
[Arguments]    username, new_password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, new_password

Delete User Account
[Arguments]    username, password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, password

Validate User Account Deletion
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

","The test case 'user_management' is designed to evaluate the functionality, reliability, and security of a user management system within an application. Here’s a summary of its purpose:

1. **Account Management**:
- Ensure the system allows creation of new user accounts with valid details.
- Verify that users can log in with their credentials and their dashboard is correctly displayed.

2. **Profile Update**:
- Confirm that users can update their profile details and that the changes are saved accurately.
- Validate that the updated information is correctly reflected in a user’s profile.

3. **Password Management**:
- Test the functionality to change user passwords and verify that the changes are effective.
- Ensure that users can log in with their new password after the change.

4. **Account Security and Deletion**:
- Check that users can safely log out of the system.
- Validate the deletion process of a user account and ensure that the account is properly removed from the system.

By following these steps, the test case ensures comprehensive coverage of the key functionalities within the user management application."
Validate keyword-driven inventory_management for restock_alerts,keyword-driven,restock_alerts,"*** Settings ***
Documentation    Validate restock_alerts
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
restock_alerts
[Documentation]    Validate restock_alerts using the following steps
Create Restock Alert For Product    product_id|threshold_amount
Validate Restock Alert Creation    alert_id
Trigger Restock Alert    product_id|stock_level
Validate Correct Alert Triggering    alert_id|expected_message
Update Restock Threshold For Product    product_id|new_threshold_amount
Validate Restock Alert Update    alert_id|new_threshold_amount

*** Keywords ***
Create Restock Alert For Product
[Arguments]    product_id|threshold_amount
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id|threshold_amount

Validate Restock Alert Creation
[Arguments]    alert_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    alert_id

Trigger Restock Alert
[Arguments]    product_id|stock_level
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id|stock_level

Validate Correct Alert Triggering
[Arguments]    alert_id|expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    alert_id|expected_message

Update Restock Threshold For Product
[Arguments]    product_id|new_threshold_amount
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id|new_threshold_amount

Validate Restock Alert Update
[Arguments]    alert_id|new_threshold_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    alert_id|new_threshold_amount

","The test case 'restock_alerts' is designed to verify and validate the functionality of restock alerts in an inventory management system. Its main objective is to ensure that notifications and alerts for restocking are properly created, managed, and triggered based on predefined thresholds and stock levels. Specific goals include:
"
Generate keyword-driven omnicorp for Orders process_order,keyword-driven,process_order,"*** Settings ***
Documentation    Validate process_order
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
process_order
[Documentation]    Validate process_order using the following steps
Create New Order    order_id, product_id
Validate Order Details    order_id
Update Order Status    order_id, new_status
Validate Updated Order Status    order_id, new_status
Delete Order    order_id

*** Keywords ***
Create New Order
[Arguments]    order_id, product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id, product_id

Validate Order Details
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Update Order Status
[Arguments]    order_id, new_status
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id, new_status

Validate Updated Order Status
[Arguments]    order_id, new_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, new_status

Delete Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

","The purpose of the test case 'process_order' is to verify the order processing functionality of an e-commerce or order management application. This test case covers essential operations related to order handling, ensuring that each step of the order lifecycle works correctly. It includes:

1. **Creating an Order:** Confirming that new orders can be created by specifying necessary details such as order ID and product ID.
2. **Validating Order Details:** Ensuring the details of newly created orders are correctly validated and stored in the system.
3. **Updating Order Status:** Verifying that the status of an existing order can be updated appropriately, reflecting changes in order progress or completion.
4. **Validating Updated Order Status:** Checking that the updated status of an order is accurately reflected in the system.
5. **Deleting an Order:** Making sure that orders can be properly deleted when necessary, removing them from the order management system."
Create keyword-driven web for eCommerce checkout_process,keyword-driven,checkout_process,"*** Settings ***
Documentation    Validate checkout_process
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}        testuser
${VALID_PASSWORD}    secret

*** Test Cases ***
checkout_process
[Documentation]    Validate checkout_process using the following steps
Add Item To Cart    item_id
Proceed To Checkout    nan
Enter Shipping Address    address_details
Select Payment Method    payment_method
Confirm Order    nan
Validate Order Confirmation    order_id

*** Keywords ***
Add Item To Cart
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id

Proceed To Checkout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Shipping Address
[Arguments]    address_details
[Return]    ${string}
[Documentation]    Keyword description
Log    address_details

Select Payment Method
[Arguments]    payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method

Confirm Order
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order Confirmation
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

","The test case 'checkout_process' is designed to validate the entire checkout process for an eCommerce platform. This includes steps from adding an item to the cart to confirming the order. The primary objectives are:
"
Validate keyword-driven web for Order Management System process_order,keyword-driven,process_order,"*** Settings ***
Documentation    Validate order processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
process_order
[Documentation]    Validate order processing using the following steps
Validate Product Availability    product_id
Add Product To Cart    product_id|quantity
Enter Shipping Information    address_details
Apply Discount Code    discount_code
Proceed To Checkout    payment_details
Confirm Order    order_details

*** Keywords ***
Validate Product Availability
[Arguments]    product_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id

Add Product To Cart
[Arguments]    product_id|quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id|quantity

Enter Shipping Information
[Arguments]    address_details
[Return]    ${string}
[Documentation]    Keyword description
Log    address_details

Apply Discount Code
[Arguments]    discount_code
[Return]    ${string}
[Documentation]    Keyword description
Log    discount_code

Proceed To Checkout
[Arguments]    payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_details

Confirm Order
[Arguments]    order_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_details

","The purpose of the 'process_order' test case is to ensure the integrity and efficiency of the order processing system within an e-commerce application. This test case verifies that orders can be placed successfully from product selection to order confirmation. The test case covers essential aspects of the ordering process including:

1. **Product Availability:**
- Check if the desired product is available in inventory.
- Ensure that the system displays the correct availability status.

2. **Adding Products to Cart:**
- Verify that products can be added to the shopping cart with specified quantities.
- Confirm that the cart reflects the correct product details.

3. **Shipping Information:**
- Test the entry of shipping information, ensuring all necessary fields are completed accurately.
- Validate that the shipping details are saved and used correctly.

4. **Discount Application:**
- Verify that discount codes are accepted and applied correctly.
- Ensure that the discount reflects accurately in the order total.

5. **Checkout Process:**
- Test the checkout process including payment methods.
- Confirm that the system processes payments securely and correctly.

6. **Order Confirmation:**
- Validate that orders are confirmed with accurate details.
- Ensure that users receive order confirmation notifications.

This test case aims to provide a comprehensive check of the order processing flow, ensuring a seamless experience for the end-users."
Develop keyword-driven paynow_keywords for API orders,keyword-driven,orders,"*** Settings ***
Documentation    Validate orders
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
orders
[Documentation]    Validate orders using the following steps
Create Order Body    order_id|customer_id|order_date|total_amount|items_list
Send Request To Create Order For Customer    order_id|customer_id|order_date|total_amount|items_list
Create Customer Details Body    customer_id
Send Order Confirmation    order_id|customer_id

*** Keywords ***
Create Order Body
[Arguments]    order_id|customer_id|order_date|total_amount|items_list
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|customer_id|order_date|total_amount|items_list

Send Request To Create Order For Customer
[Arguments]    order_id|customer_id|order_date|total_amount|items_list
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|customer_id|order_date|total_amount|items_list

Create Customer Details Body
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

Send Order Confirmation
[Arguments]    order_id|customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|customer_id

","The purpose of the 'orders' test case is to validate the functionality and accuracy of the order management system in the application. This generally entails testing several aspects to confirm the system operates as expected:
"
Validate keyword-driven adminportal_transactions for Transactions management,keyword-driven,transactions_management,"*** Settings ***
Documentation    Validate transactions_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       admin
${VALID_PASSWORD}   admin123

*** Test Cases ***
transactions_management
[Documentation]    Validate transactions_management using the following steps
Login To Application    ${VALID_USER}|${VALID_PASSWORD}
Search Transaction    transaction_id
Verify Transaction Details    transaction_id|expected_details
Update Transaction Status    transaction_id|new_status
Delete Transaction    transaction_id

*** Keywords ***
Login To Application
[Arguments]    ${username}|${password}
[Return]    ${boolean}
[Documentation]    Login to the application with provided credentials
Log    ${username}|${password}

Search Transaction
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Search for a transaction by ID
Log    transaction_id

Verify Transaction Details
[Arguments]    transaction_id|expected_details
[Return]    ${boolean}
[Documentation]    Verify the transaction details match the expected
Log    transaction_id|expected_details

Update Transaction Status
[Arguments]    transaction_id|new_status
[Return]    ${boolean}
[Documentation]    Update the status of a transaction
Log    transaction_id|new_status

Delete Transaction
[Arguments]    transaction_id
[Return]    ${boolean}
[Documentation]    Delete a transaction by ID
Log    transaction_id

","The purpose of the ""transactions_management"" test case is to validate the functionalities related to transaction management within an admin portal. This includes:

1. **Authentication Validation**:
- Ensure that the admin can successfully log into the application using valid credentials.

2. **Transaction Search and Verification**:
- Confirm that an admin can search for specific transactions using a transaction ID.
- Verify that the details of the transactions retrieved match the expected values.

3. **Transaction Update and Deletion**:
- Validate the ability to update the status of a transaction.
- Ensure that transactions can be deleted as required.

By covering these areas, the test case ensures that the admin portal's transaction management features operate as intended, thereby contributing to the reliability and efficiency of the overall system."
Validate keyword-driven web for PayNOW clientcentral_transactions,keyword-driven,clientcentral_transactions,"*** Settings ***
Documentation    Validate clientcentral_transactions
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
clientcentral_transactions
[Documentation]    Validate clientcentral_transactions using the following steps
Navigate To Transactions Tab    customer_id, start_date, end_date
Validate Transaction List Is Displayed    customer_id, start_date, end_date
Filter Transactions By Date    start_date, end_date
Validate Total Transactions Count    customer_id, expected_count
View Transaction Details    transaction_id
Export Transactions As CSV    customer_id

*** Keywords ***
Navigate To Transactions Tab
[Arguments]    customer_id, start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id, start_date, end_date

Validate Transaction List Is Displayed
[Arguments]    customer_id, start_date, end_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id, start_date, end_date

Filter Transactions By Date
[Arguments]    start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date, end_date

Validate Total Transactions Count
[Arguments]    customer_id, expected_count
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id, expected_count

View Transaction Details
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Export Transactions As CSV
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

","The test case 'clientcentral_transactions' is designed to ensure the robustness and accuracy of the transaction management feature within the ClientCentral system. Its primary objectives are to verify the comprehensive handling of financial transactions related to client accounts, focusing on the following aspects:
"
Create keyword-driven web for StoreManagement inventory,keyword-driven,inventory,"*** Settings ***
Documentation    Validate inventory
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
inventory
[Documentation]    Validate inventory using the following steps
Add New Item To Inventory    item_name, item_quantity, item_price
Validate Inventory Item Details    item_id, expected_item_name, expected_item_quantity, expected_item_price
Update Inventory Item Quantity    item_id, new_quantity
Validate Updated Inventory Item Details    item_id, expected_new_quantity
Delete Item From Inventory    item_id
Validate Inventory Item Is Deleted    item_id
Search Inventory Item    search_term
Validate Inventory Item Search Results    expected_item_name

*** Keywords ***
Add New Item To Inventory
[Arguments]    item_name, item_quantity, item_price
[Return]    ${item_id}
[Documentation]    Keyword description
Log    item_name, item_quantity, item_price

Validate Inventory Item Details
[Arguments]    item_id, expected_item_name, expected_item_quantity, expected_item_price
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id, expected_item_name, expected_item_quantity, expected_item_price

Update Inventory Item Quantity
[Arguments]    item_id, new_quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id, new_quantity

Validate Updated Inventory Item Details
[Arguments]    item_id, expected_new_quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id, expected_new_quantity

Delete Item From Inventory
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id

Validate Inventory Item Is Deleted
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

Search Inventory Item
[Arguments]    search_term
[Return]    ${list}
[Documentation]    Keyword description
Log    search_term

Validate Inventory Item Search Results
[Arguments]    expected_item_name
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_item_name

","The ""inventory"" test case aims to verify the management of inventory within a store or warehouse. The primary purpose of this test case is to ensure that the inventory system accurately handles the addition, updating, deletion, and searching of inventory items, whilst maintaining data integrity and accuracy."
Validate keyword-driven web for ProcessingOrders order_validation,keyword-driven,order_validation,"*** Settings ***
Documentation    Validate order_validation
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_validation
[Documentation]    Validate order_validation using the following steps
Place New Order    product_id|quantity|customer_details
Validate Order Confirmation    order_id
Update Order Quantity    order_id|new_quantity
Cancel Order    order_id
Validate Order Status    order_id|expected_status
Retrieve Order Details    order_id
Validate Invalid Order ID    invalid_order_id
Process Order Payment    order_id|payment_details
Validate Shipping Details    order_id|expected_shipping_info

*** Keywords ***
Place New Order
[Arguments]    product_id|quantity|customer_details
[Return]    ${order_id}
[Documentation]    Keyword description
Log    product_id|quantity|customer_details

Validate Order Confirmation
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Update Order Quantity
[Arguments]    order_id|new_quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|new_quantity

Cancel Order
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Validate Order Status
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

Retrieve Order Details
[Arguments]    order_id
[Return]    ${order_details}
[Documentation]    Keyword description
Log    order_id

Validate Invalid Order ID
[Arguments]    invalid_order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invalid_order_id

Process Order Payment
[Arguments]    order_id|payment_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|payment_details

Validate Shipping Details
[Arguments]    order_id|expected_shipping_info
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_shipping_info

","The test case 'order_validation' focuses on verifying different aspects of order processing within an e-commerce or order management system. This involves creating, updating, canceling orders, and validating various order attributes. The key points include:

1. **Order Placement:** Affirming that a customer can place an order with valid product ID and quantity.
2. **Order Confirmation:** Ensuring the system correctly confirms the order after placement.
3. **Order Management:** Checking that the order quantity can be updated and orders can be canceled when required.
4. **Order Status:** Validating the accuracy of order statuses throughout the process.
5. **Error Handling:** Handling invalid order IDs and other erroneous inputs appropriately.
6. **Order Payments:** Ensuring that payments are processed correctly and associated with the right orders.
7. **Shipping Information:** Verifying that correct shipping details are maintained for orders.

By covering these areas, the 'order_validation' test case ensures that the fundamental functions of order management perform as expected and provide a seamless experience for the users."
Create a keyword-driven web for PayNOW invoice_dispute_management,keyword-driven,invoice_dispute_management,"*** Settings ***
Documentation    Validate invoice_dispute_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
invoice_dispute_management
[Documentation]    Validate invoice_dispute_management using the following steps
Login To PayNOW And Navigate To Dispute Management    account_number, invoice_number
Raise Invoice Dispute    dispute_reason
Validate Dispute Confirmation Message    confirmation_message
Submit Dispute With Required Details    dispute_details
Validate Dispute Submission Status    expected_status
Search Invoice By Number    invoice_number
Provide Additional Information For Dispute    additional_info
Validate Dispute Resolution Status    account_number, invoice_number, expected_resolution
Close Dispute Window    nan
Logout From Dispute Management Page    nan

*** Keywords ***
Login To PayNOW And Navigate To Dispute Management
[Arguments]    account_number, invoice_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number, invoice_number

Raise Invoice Dispute
[Arguments]    dispute_reason
[Return]    ${string}
[Documentation]    Keyword description
Log    dispute_reason

Validate Dispute Confirmation Message
[Arguments]    confirmation_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    confirmation_message

Submit Dispute With Required Details
[Arguments]    dispute_details
[Return]    ${string}
[Documentation]    Keyword description
Log    dispute_details

Validate Dispute Submission Status
[Arguments]    expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_status

Search Invoice By Number
[Arguments]    invoice_number
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_number

Provide Additional Information For Dispute
[Arguments]    additional_info
[Return]    ${string}
[Documentation]    Keyword description
Log    additional_info

Validate Dispute Resolution Status
[Arguments]    account_number, invoice_number, expected_resolution
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, invoice_number, expected_resolution

Close Dispute Window
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Logout From Dispute Management Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'invoice_dispute_management' is designed to assess the functionality of the dispute management system for invoices within the PayNOW application. This test case aims to ensure that users can accurately and efficiently raise, submit, and manage disputes related to their invoices.

Key objectives of the test case include:

1. **User Authentication:** Ensure that only authenticated users can access the dispute management system.
2. **Dispute Raising and Submission:** Verify the process of raising a dispute and submitting all necessary details.
3. **Status Validation:** Confirm that the system displays the correct status messages and updates for disputes.
4. **Search and Validation:** Ensure that users can search for invoices and provide additional information if required.
5. **Resolution Handling:** Check that the system correctly handles and displays the resolution status of disputes.
6. **User Interface:** Validate that all user interface elements function correctly and that the system navigates appropriately through each step.

This test case is crucial for maintaining the reliability and efficiency of the dispute management feature within the PayNOW payment system."
Create keyword-driven web for UserRegistration registration,keyword-driven,registration,"*** Settings ***
Documentation    Validate registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret
${VALID_EMAIL}      testuser@example.com

*** Test Cases ***
registration
[Documentation]    Validate registration using the following steps
Enter Username Field    username
Enter Email Address Field    email
Enter Password Field    password
Confirm Password Field    confirm_password
Submit Registration Form    nan
Validate Successful Registration Message    nan
Validate Error Message For Invalid Email    email
Validate Error Message For Weak Password    password
Validate Error Message For Mismatched Passwords    password|confirm_password

*** Keywords ***
Enter Username Field
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Enter Email Address Field
[Arguments]    email
[Return]    ${string}
[Documentation]    Keyword description
Log    email

Enter Password Field
[Arguments]    password
[Return]    ${string}
[Documentation]    Keyword description
Log    password

Confirm Password Field
[Arguments]    confirm_password
[Return]    ${string}
[Documentation]    Keyword description
Log    confirm_password

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Successful Registration Message
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Error Message For Invalid Email
[Arguments]    email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email

Validate Error Message For Weak Password
[Arguments]    password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    password

Validate Error Message For Mismatched Passwords
[Arguments]    password|confirm_password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    password|confirm_password

","The purpose of the 'registration' test case is to verify the functionality and security of the user registration process. This test case ensures that a user can successfully create a new account using valid information and that errors are appropriately handled when invalid inputs are provided. Key aspects assessed during the 'registration' test case include:

1. **Valid Information:**
- Verify that users can register successfully with valid username, email, and password.
- Ensure that the system displays a confirmation message upon successful registration.

2. **Invalid Information:**
- Test how the system handles invalid email formats, weak passwords, and mismatched passwords.
- Confirm that error messages are clear, informative, and prompt appropriate user action.

3. **Security Checks:**
- Validate that the system does not disclose any sensitive information in error messages.
- Ensure that input fields properly sanitize data to prevent security vulnerabilities such as SQL injection and cross-site scripting (XSS)."
Create a keyword-driven test case for CommonKeywordsForAllMerchants payment,keyword-driven,payment,"*** Settings ***
Documentation    Validate payment
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
payment
[Documentation]    Validate payment using the following steps
Navigate To Payment Page    nan
Enter Payment Details    payment_details
Validate Payment Confirmation Is Displayed    transaction_id
Process Payment    payment_details
Validate Payment Receipt Is Generated    receipt_id

*** Keywords ***
Navigate To Payment Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Payment Details
[Arguments]    payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_details

Validate Payment Confirmation Is Displayed
[Arguments]    transaction_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id

Process Payment
[Arguments]    payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_details

Validate Payment Receipt Is Generated
[Arguments]    receipt_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    receipt_id

","The 'payment' test case serves to validate the entire payment process within a system, ensuring that transactions are processed accurately and efficiently. This typically covers various aspects such as the entry of payment details, confirmation of payment, and generation of receipts. Key components include:
"
Generate keyword-driven paynow_keywords for Web login,keyword-driven,login,"*** Settings ***
Documentation    Validate login
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
login
[Documentation]    Validate login using the following steps
Read TestData From Excel    excel_path, tc_id, sheet_name
Launch Web Application    browser_name, url
Enter User Credentials    username, password
Click Login Button    login_button_locator
Validate Error Message Is Displayed    error_message
Validate User Is Logged In    welcome_message

*** Keywords ***
Read TestData From Excel
[Arguments]    excel_path, tc_id, sheet_name
[Return]    ${string}
[Documentation]    Keyword description
Log    excel_path, tc_id, sheet_name

Launch Web Application
[Arguments]    browser_name, url
[Return]    ${string}
[Documentation]    Keyword description
Log    browser_name, url

Enter User Credentials
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Click Login Button
[Arguments]    login_button_locator
[Return]    ${string}
[Documentation]    Keyword description
Log    login_button_locator

Validate Error Message Is Displayed
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message

Validate User Is Logged In
[Arguments]    welcome_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    welcome_message
","The ""login"" test case is designed to validate the login functionality of a web application. Its purpose is to ensure that users can successfully log in with valid credentials and receive appropriate feedback for invalid login attempts.

Key aspects typically covered in a ""login"" test case include:

1. **Credential Validation:** Ensuring that valid username and password combinations allow user access, while invalid combinations provide correct error messages.
2. **User Interface Elements:** Verifying the presence and functionality of login interface elements like input fields and buttons.
3. **Error Messages:** Checking that error messages are displayed correctly for incorrect login attempts.
4. **Session Handling:** Confirming that the system manages user sessions appropriately upon successful login.
"
Create keyword-driven test case for Employee management system with task add_employee,keyword-driven,add_employee,"*** Settings ***
Documentation    Validate add_employee
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
add_employee
[Documentation]    Validate add_employee using the following steps
Navigate To Employee Management Page    nan
Add New Employee    employee_name|employee_id|email|department
Validate Employee Details Are Saved    employee_id
Validate Employee Email    employee_id|expected_email
Validate Employee Department    employee_id|expected_department
Send Welcome Email To New Employee    email

*** Keywords ***
Navigate To Employee Management Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Add New Employee
[Arguments]    employee_name|employee_id|email|department
[Return]    ${integer}
[Documentation]    Keyword description
Log    employee_name|employee_id|email|department

Validate Employee Details Are Saved
[Arguments]    employee_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    employee_id

Validate Employee Email
[Arguments]    employee_id|expected_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    employee_id|expected_email

Validate Employee Department
[Arguments]    employee_id|expected_department
[Return]    ${boolean}
[Documentation]    Keyword description
Log    employee_id|expected_department

Send Welcome Email To New Employee
[Arguments]    email
[Return]    ${string}
[Documentation]    Keyword description
Log    email
","The test case 'add_employee' is designed to ensure the functionality of adding a new employee in the employee management system works as expected. The purpose of this test case is to:
"
Validate keyword-driven web test case for payment processing,keyword-driven,payment_processing,"*** Settings ***
Documentation    Validate payment processing
Test Setup       Initialize Payment Environment
Test Teardown    Cleanup Payment Environment
Suite Setup      Open Payment Application
Suite Teardown   Close Payment Application
Resource         payment_resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
payment_processing
[Documentation]    Validate payment processing using the following steps
Login To Payment Gateway    ${VALID_USER}   ${VALID_PASSWORD}
Enter Payment Details    card_number|expiry_date|cvv
Confirm Payment    transaction_id
Verify Payment Confirmation    transaction_id

*** Keywords ***
Login To Payment Gateway
[Arguments]    username|password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password

Enter Payment Details
[Arguments]    card_number|expiry_date|cvv
[Return]    ${string}
[Documentation]    Keyword description
Log    card_number|expiry_date|cvv

Confirm Payment
[Arguments]    transaction_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id

Verify Payment Confirmation
[Arguments]    transaction_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id

","The test case ""payment_processing"" focuses on verifying the complete payment processing flow in a web application. This includes validating the critical steps involved in making a payment to ensure a seamless and error-free transaction experience for users.

Key components of the 'payment_processing' test case include:
"
Validate keyword-driven sterlingcooper for Orders order_processing,keyword-driven,order_processing,"*** Settings ***
Documentation    Validate order_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_processing
[Documentation]    Validate order_processing using the following steps
Select Order In Orders Page    order_id
Validate Selected Order Details Are Displayed    order_details
Process Order Payment    order_id|payment_details
Validate Payment Confirmation Page    nan
Select Shipment Method    shipment_method
Validate Shipment Method Is Updated    expected_method
Validate Order Status    order_id|expected_status
Filter Orders By Customer    customer_id
Navigate To Order Details Page From Orders Tab    order_id

*** Keywords ***
Select Order In Orders Page
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Selected Order Details Are Displayed
[Arguments]    order_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_details

Process Order Payment
[Arguments]    order_id|payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|payment_details

Validate Payment Confirmation Page
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Select Shipment Method
[Arguments]    shipment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    shipment_method

Validate Shipment Method Is Updated
[Arguments]    expected_method
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_method

Validate Order Status
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

Filter Orders By Customer
[Arguments]    customer_id
[Return]    ${integer}
[Documentation]    Keyword description
Log    customer_id

Navigate To Order Details Page From Orders Tab
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

","Sure, the test case 'order_processing' is designed to verify and validate the processes involved in handling orders within a system. Whether it's an e-commerce platform or a sales system, the purpose of this test case is to ensure seamless order processing from start to finish. Here is a summary explaining its purpose:

**Objective:**
The primary objective of the 'order_processing' test case is to ensure that orders can be created, paid for, shipped, and tracked accurately within the system.

**Purpose:**
1. **Order Validation:** To check if the selected order's details are displayed correctly, ensuring accuracy in product information, quantity, price, etc.

2. **Payment Processing:** To verify that the system can handle various payment methods correctly and confirm payment completion.

3. **Shipment Management:** To ensure users can select and update shipment methods, and that these changes are accurately reflected in the system.

4. **Status Tracking:** To validate that order statuses (e.g., 'Pending', 'Paid', 'Shipped', 'Delivered') are updated correctly and reflected accurately on the order details page.

This test case ensures all critical steps in the order processing cycle are functioning as expected."
Create keyword-driven web for ShoppingCart cart_items,keyword-driven,cart_items,"*** Settings ***
Documentation    Validate cart items
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
cart_items
[Documentation]    Validate cart items using the following steps
Add Item To Cart    item_id|quantity
Remove Item From Cart    item_id
Update Item Quantity In Cart    item_id|new_quantity
Validate Item Is In Cart    item_id
Validate Cart Total Amount    expected_total
Empty Cart    nan
Validate Cart Is Empty    nan

*** Keywords ***
Add Item To Cart
[Arguments]    item_id|quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id|quantity

Remove Item From Cart
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id

Update Item Quantity In Cart
[Arguments]    item_id|new_quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id|new_quantity

Validate Item Is In Cart
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

Validate Cart Total Amount
[Arguments]    expected_total
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_total

Empty Cart
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Cart Is Empty
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The 'cart_items' test case is designed to verify the functionality and accuracy of a shopping cart system within an e-commerce application. This test case ensures that users can properly interact with the cart by adding, updating, and removing items, and that the cart correctly reflects these actions.

Key components include:
"
Validate keyword-driven edatainsights for System_Logs integration,keyword-driven,integration,"*** Settings ***
Documentation    Validate integration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
integration
[Documentation]    Validate integration using the following steps
Check System Logs Availability    system_id
Validate Log Entries    system_id
Generate Test Logs    system_id|test_data
Validate Log Storage    system_id
Check Log Retrieval Functionality    system_id
Verify Log Format Compliance    system_id|expected_format
Validate Log Archiving Process    system_id
Validate Log Deletion Process    system_id

*** Keywords ***
Check System Logs Availability
[Arguments]    system_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    system_id

Validate Log Entries
[Arguments]    system_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    system_id

Generate Test Logs
[Arguments]    system_id|test_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    system_id|test_data

Validate Log Storage
[Arguments]    system_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    system_id

Check Log Retrieval Functionality
[Arguments]    system_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    system_id

Verify Log Format Compliance
[Arguments]    system_id|expected_format
[Return]    ${boolean}
[Documentation]    Keyword description
Log    system_id|expected_format

Validate Log Archiving Process
[Arguments]    system_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    system_id

Validate Log Deletion Process
[Arguments]    system_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    system_id

","The test case 'integration' is designed to verify and validate the integration and functionality of system logs within the eDataInsights platform. Its primary purpose is to ensure that system logs are accurately generated, stored, retrieved, formatted, archived, and deleted. This includes:
"
Generate keyword-driven API for AccountManagement account,keyword-driven,account,"*** Settings ***
Documentation    Validate account
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
account
[Documentation]    Validate account using the following steps
Create Account Request Body    unique_value, user_id
Send Account Creation Request    api_endpoint, request_body
Validate Account Creation Response    expected_status_code, response_body
Generate Account Activation Link    user_id
Send Account Activation Request    activation_link
Validate Account Activation Response    expected_status_code, response_body
Send Login Request    user_credentials
Validate Login Response    expected_status_code, login_response_body
Update Account Details    update_request_body
Send Update Account Request    api_endpoint, update_request_body
Validate Update Account Response    expected_status_code, update_response_body

*** Keywords ***
Create Account Request Body
[Arguments]    unique_value, user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value, user_id

Send Account Creation Request
[Arguments]    api_endpoint, request_body
[Return]    ${response}
[Documentation]    Keyword description
Log    api_endpoint, request_body

Validate Account Creation Response
[Arguments]    expected_status_code, response_body
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_status_code, response_body

Generate Account Activation Link
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Send Account Activation Request
[Arguments]    activation_link
[Return]    ${response}
[Documentation]    Keyword description
Log    activation_link

Validate Account Activation Response
[Arguments]    expected_status_code, response_body
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_status_code, response_body

Send Login Request
[Arguments]    user_credentials
[Return]    ${response}
[Documentation]    Keyword description
Log    user_credentials

Validate Login Response
[Arguments]    expected_status_code, login_response_body
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_status_code, login_response_body

Update Account Details
[Arguments]    update_request_body
[Return]    ${string}
[Documentation]    Keyword description
Log    update_request_body

Send Update Account Request
[Arguments]    api_endpoint, update_request_body
[Return]    ${response}
[Documentation]    Keyword description
Log    api_endpoint, update_request_body

Validate Update Account Response
[Arguments]    expected_status_code, update_response_body
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_status_code, update_response_body

","The 'account' test case primarily aims to validate all aspects of account management within a system or application. This includes the creation, activation, login, and updating of account details to ensure the processes are functioning correctly and securely. Key aspects examined in such a test case include:
"
Generate keyword-driven web for PayNOW integrated_payments,keyword-driven,integrated_payments,"*** Settings ***
Documentation    Validate integrated_payments
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
integrated_payments
[Documentation]    Validate integrated_payments using the following steps
Navigate To Payment Tab    user_id, invoice_id
Validate Payment Method Is Displayed    user_id, expected_payment_method
Enter Payment Details    payment_details
Submit Payment    nan
Validate Payment Confirmation Is Displayed    confirmation_message
Navigate To Payment History    user_id
Validate Payment Is Listed In History    invoice_id, expected_status
Verify Payment Amount In History    invoice_id, expected_amount
Logout    user_id

*** Keywords ***
Navigate To Payment Tab
[Arguments]    user_id, invoice_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, invoice_id

Validate Payment Method Is Displayed
[Arguments]    user_id, expected_payment_method
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id, expected_payment_method

Enter Payment Details
[Arguments]    payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_details

Submit Payment
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment Confirmation Is Displayed
[Arguments]    confirmation_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    confirmation_message

Navigate To Payment History
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate Payment Is Listed In History
[Arguments]    invoice_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_id, expected_status

Verify Payment Amount In History
[Arguments]    invoice_id, expected_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_id, expected_amount

Logout
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

","The test case 'integrated_payments' is designed to validate the functionality of the PayNOW payment system, specifically focusing on integrated payment processing. This test ensures that users can successfully navigate through the payment interface, enter necessary payment details, submit payments, and verify these payments are correctly logged in the payment history.

Key objectives of the test case include:
1. **Payment GUI Interaction:** Ensure the user interface for payments is intuitive, and users can easily input payment details and submit transactions.
2. **Payment Confirmation:** Verify that the system displays appropriate confirmation messages upon successful payment submissions.
3. **Historical Record Keeping:** Confirm that payment history accurately reflects all completed transactions, with correct statuses and amounts.
4. **User Session Management:** Validate that users can log out successfully after completing payment activities."
Validate keyword-driven test case for ShoppingCart operations,keyword-driven,ShoppingCartOperations,"*** Settings ***
Documentation    Validate ShoppingCartOperations
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
ShoppingCartOperations
[Documentation]    Validate ShoppingCartOperations using the following steps
Add Item To Cart    item_id, quantity
Validate Item In Cart    item_id
Remove Item From Cart    item_id
Validate Cart Is Empty    nan
Update Item Quantity In Cart    item_id, new_quantity
Display Cart Total    nan
Proceed To Checkout    nan

*** Keywords ***
Add Item To Cart
[Arguments]    item_id, quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id, quantity

Validate Item In Cart
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

Remove Item From Cart
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id

Validate Cart Is Empty
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Update Item Quantity In Cart
[Arguments]    item_id, new_quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id, new_quantity

Display Cart Total
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Proceed To Checkout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The purpose of the 'ShoppingCartOperations' test case is to examine and validate the fundamental functionalities of a shopping cart within an e-commerce application. This test case aims to ensure that critical operations related to managing the shopping cart are functioning as expected. Key areas assessed during the 'ShoppingCartOperations' test case include:

1. **Adding Items to Cart:**
- Verifying that items can be accurately added to the cart using valid item IDs and quantities.
- Ensuring that the cart correctly reflects the added items.

2. **Managing Cart Items:**
- Testing the ability to validate the presence of specific items in the cart.
- Ensuring that items can be removed from the cart and that the cart accurately reflects these changes.

3. **Cart Integrity:**
- Checking that the cart correctly handles updates to item quantities.
- Validating that the cart can display the correct total amount for added items.

4. **Checkout Process:**
- Confirming that the cart can proceed to the checkout process without issues.
- Ensuring that the system correctly handles empty cart scenarios and displays appropriate messages.

By focusing on these core functionalities, the 'ShoppingCartOperations' test case seeks to establish a reliable and seamless shopping experience for users, which is essential for the overall success of the e-commerce platform."
Create keyword-driven test case for UserManagement,keyword-driven,user_creation,"*** Settings ***
Documentation    Validate user creation
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${ADMIN_USER}       adminuser
${ADMIN_PASSWORD}   adminpass

*** Test Cases ***
user_creation
[Documentation]    Validate user creation using the following steps
Create New User    username|password|email
Validate User Created    username

*** Keywords ***
Create New User
[Arguments]    username|password|email
[Return]    ${string}
[Documentation]    Keyword description","The 'user_creation' test case is intended to verify the process for creating a new user within the application. This test ensures that the user creation functionality operates correctly and that new users can be added to the system successfully.

Key components of the 'user_creation' test case include:
"
Validate keyword-driven web for PayNOW integrated_closeinvoices,keyword-driven,integrated_closeinvoices,"*** Settings ***
Documentation    Validate integrated_closeinvoices
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
integrated_closeinvoices
[Documentation]    Validate integrated_closeinvoices using the following steps
Login And Verify User Session    ${VALID_USER}, ${VALID_PASSWORD}
Retrieve Open Invoices List    user_id
Enter Customer Payment Details    payment_details
Submit Payment And Verify    payment_details, expected_response
Validate Invoices Are Closed    invoice_ids

*** Keywords ***
Login And Verify User Session
[Arguments]    ${VALID_USER}, ${VALID_PASSWORD}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}, ${VALID_PASSWORD}

Retrieve Open Invoices List
[Arguments]    user_id
[Return]    @{invoices_list}
[Documentation]    Keyword description
Log    user_id

Enter Customer Payment Details
[Arguments]    payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_details

Submit Payment And Verify
[Arguments]    payment_details, expected_response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_details, expected_response

Validate Invoices Are Closed
[Arguments]    invoice_ids
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_ids

","The test case 'integrated_closeinvoices' is designed to validate the functionality of closing invoices within an integrated system. The purpose of this test case is to ensure that the system correctly transitions invoices from an open to a closed status following successful payments. Key validation points include:
"
Validate keyword-driven weborders for Orders order_management,keyword-driven,order_management,"*** Settings ***
Documentation    Validate order_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_management
[Documentation]    Validate order_management using the following steps
Select Orders Tab    nan
Validate Order List Is Displayed    order_list
Sort Orders By Date    date
Filter Orders By Status    status
Validate Customer Information Is Correct    customer_id
Select Order From List    order_id
Validate Order Details Page    order_id
Enter Payment Information    payment_details
Validate Payment Confirmation    order_id
Update Order Status    order_id|new_status
Validate Order Is Updated In Database    order_id
Send Order Confirmation Email    customer_email
Logout And Close Application    nan

*** Keywords ***
Select Orders Tab
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order List Is Displayed
[Arguments]    order_list
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_list

Sort Orders By Date
[Arguments]    date
[Return]    ${string}
[Documentation]    Keyword description
Log    date

Filter Orders By Status
[Arguments]    status
[Return]    ${string}
[Documentation]    Keyword description
Log    status

Validate Customer Information Is Correct
[Arguments]    customer_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id

Select Order From List
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Details Page
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Enter Payment Information
[Arguments]    payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_details

Validate Payment Confirmation
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Update Order Status
[Arguments]    order_id|new_status
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|new_status

Validate Order Is Updated In Database
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Send Order Confirmation Email
[Arguments]    customer_email
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_email

Logout And Close Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan
","The test case 'order_management' is designed to validate the functionality of an ecommerce order management system. This test ensures that the system correctly processes and manages customer orders from start to finish. 
"
Generate keyword-driven retailassistant_keywords for Shipping shipping,keyword-driven,shipping,"*** Settings ***
Documentation    Validate shipping
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
shipping
[Documentation]    Validate shipping using the following steps
Create Shipping Order Body    order_id|customer_id
Send Request To Create Shipping Order    order_id|customer_id
Validate Shipping Order Status    order_id|expected_status
Update Shipping Order Body    order_id|update_details
Validate Updated Shipping Order    order_id|expected_updated_details
Cancel Shipping Order Body    order_id
Send Request To Cancel Shipping Order    order_id
Validate Shipping Order Cancellation    order_id|expected_cancellation_status

*** Keywords ***
Create Shipping Order Body
[Arguments]    order_id|customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|customer_id

Send Request To Create Shipping Order
[Arguments]    order_id|customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|customer_id

Validate Shipping Order Status
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

Update Shipping Order Body
[Arguments]    order_id|update_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|update_details

Validate Updated Shipping Order
[Arguments]    order_id|expected_updated_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_updated_details

Cancel Shipping Order Body
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Send Request To Cancel Shipping Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Shipping Order Cancellation
[Arguments]    order_id|expected_cancellation_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_cancellation_status

","The 'shipping' test case is designed to validate all functionalities, processes, and scenarios related to shipping within a retail application. The test focuses on ensuring that the shipping processes, from order creation to cancellation, work as expected and handle data accurately.

### Key Objectives:

1. **Order Creation and Validation**:
- Verify that shipping orders can be created correctly with valid order and customer IDs.
- Ensure that the system accurately updates the status of shipping orders and reflects the expected results.

2. **Order Update and Validation**:
- Test the capability to update existing shipping orders and confirm the updates are correctly applied.

3. **Order Cancellation and Validation**:
- Check the process of cancelling shipping orders and accurately reflect the cancellation status.

This structured approach helps in ensuring the robustness and reliability of the shipping functionalities in the application."
Create keyword-driven web for Order management process_order,keyword-driven,process_order,"*** Settings ***
Documentation    Validate process_order
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
process_order
[Documentation]    Validate process_order using the following steps
Select Order Module    order_module
Enter Customer Information    customer_info
Validate Order Details    order_details
Select Payment Method    payment_method
Confirm Order    nan
Generate Order ID    nan
Navigate To Order Summary Page    nan
Validate Summary Details    summary_details
Signout    nan

*** Keywords ***
Select Order Module
[Arguments]    order_module
[Return]    ${string}
[Documentation]    Keyword description
Log    order_module

Enter Customer Information
[Arguments]    customer_info
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_info

Validate Order Details
[Arguments]    order_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_details

Select Payment Method
[Arguments]    payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method

Confirm Order
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Generate Order ID
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Navigate To Order Summary Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Summary Details
[Arguments]    summary_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    summary_details

Signout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan
","The test case 'process_order' focuses on verifying the functionality of an order management system. The main aim is to ensure that orders are processed accurately and efficiently from start to finish. This involves validating various steps such as:

1. **Order Module Selection:** Ensuring that the system can correctly identify and navigate to the order module.
2. **Customer Information Entry:** Verifying that accurate customer details can be input and stored.
3. **Order Details Validation:** Checking that the order details are correct and match the expected values.
4. **Payment Method Selection:** Ensuring that the correct payment method is selected and validated.
5. **Order Confirmation:** Confirming that the order is processed successfully and that an order ID is generated.
6. **Order Summary Navigation:** Validating that the order summary page is accessible and displays the correct information.
7. **Order Summary Validation:** Checking that the summary details are accurate and complete.
8. **Signout Process:** Ensuring that the user can sign out securely after the order process is completed.

This test case is essential to guarantee the accuracy and efficiency of the order processing system, thereby enhancing the customer experience and ensuring operational reliability."
Validate keyword-driven user_registration for Web Application,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_FIRST_NAME}  John
${VALID_LAST_NAME}   Doe
${VALID_EMAIL}       johndoe@example.com
${VALID_PASSWORD}    secret_password

*** Test Cases ***
user_registration
[Documentation]    Validate user_registration using the following steps
Open Registration Page
Enter User Details    first_name|last_name|email|password
Click Register Button
Validate Successful Registration Message    success_message
Verify User In Database    email

*** Keywords ***
Open Registration Page
[Arguments]
[Return]    ${string}
[Documentation]    Keyword description
Log    Opening the registration page

Enter User Details
[Arguments]    first_name|last_name|email|password
[Return]    ${string}
[Documentation]    Keyword description","The test case 'user_registration' is designed to verify the functionality and reliability of a web application's user registration process. The primary objectives of this test case include:

1. **Open Registration Page:** Confirm that the registration page is accessible and loads correctly.
2. **Enter User Details:** Ensure the application correctly records the user's first and last names, email, and password.
3. **Click Register Button:** Validate that pressing the register button triggers the registration process as expected.
4. **Validate Successful Registration Message:** Verify that the system displays an appropriate success message upon registration.
5. **Verify User In Database:** Confirm that the user information is correctly added to the database, ensuring data integrity and successful registration."
Generate keyword-driven web for QuickOrder order_processing,keyword-driven,order_processing,"*** Settings ***
Documentation    Validate order_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_processing
[Documentation]    Validate order processing using the following steps
Login to Application    ${VALID_USER}, ${VALID_PASSWORD}
Select Product and Add to Cart    product_id
Proceed to Checkout    nan
Enter Shipping Information    address, city, postcode
Select Payment Method    payment_method
Place Order    nan
Verify Order Confirmation    order_id

*** Keywords ***
Login to Application
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Select Product and Add to Cart
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Proceed to Checkout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Shipping Information
[Arguments]    address, city, postcode
[Return]    ${string}
[Documentation]    Keyword description
Log    address, city, postcode

Select Payment Method
[Arguments]    payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method

Place Order
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Verify Order Confirmation
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

","The test case 'order_processing' for the QuickOrder application is crafted to validate the end-to-end order processing workflow. This ensures that users can efficiently browse products, add them to the cart, proceed to checkout, enter shipping details, select a payment method, place the order, and receive an order confirmation.

Key objectives of the test case include:
1. **User Authentication:** Ensuring that users can log in with valid credentials and access the product catalog.
2. **Product Selection and Cart Management:** Validating that a user can select a product and add it to the shopping cart.
3. **Checkout Process:** Verifying the functionality of the checkout process, including entering shipping information and selecting payment methods.
4. **Order Placement:** Ensuring that users can place orders successfully and receive confirmation, reflecting accurate transaction details."
Validate keyword-driven sterlingcooper for Transactions refund_processing,keyword-driven,refund_processing,"*** Settings ***
Documentation    Validate refund_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
refund_processing
[Documentation]    Validate refund_processing using the following steps
Login And Navigate To Refund Processing Page    ${VALID_USER}|${VALID_PASSWORD}
Select Transaction For Refund    transaction_id
Enter Refund Amount And Submit    transaction_id|amount
Validate Refund Confirmation    transaction_id
Validate Refund Status In Transaction List    transaction_id|expected_status
Navigate To Transaction Details Page From Refund    transaction_id
Validate Refund Details On Transaction Page    transaction_id|expected_details

*** Keywords ***
Login And Navigate To Refund Processing Page
[Arguments]    ${VALID_USER}|${VALID_PASSWORD}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}|${VALID_PASSWORD}

Select Transaction For Refund
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Enter Refund Amount And Submit
[Arguments]    transaction_id|amount
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id|amount

Validate Refund Confirmation
[Arguments]    transaction_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id

Validate Refund Status In Transaction List
[Arguments]    transaction_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id|expected_status

Navigate To Transaction Details Page From Refund
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Validate Refund Details On Transaction Page
[Arguments]    transaction_id|expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id|expected_details

","The 'refund_processing' test case is designed to ensure that the refund functionalities within a transaction processing system work correctly. The purpose is to:
"
Validate keyword-driven account_creation for User Registration user_registration,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_registration
[Documentation]    Validate user_registration using the following steps
Fill Registration Form    user_details
Submit Registration Form    nan
Validate Confirmation Message    expected_message
Verify Email For Activation Link    email
Activate Account Via Link    activation_link
Log In With New Credentials    user_details

*** Keywords ***
Fill Registration Form
[Arguments]    user_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_details

Submit Registration Form
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Confirmation Message
[Arguments]    expected_message
[Return]    ${string}
[Documentation]    Keyword description
Log    expected_message

Verify Email For Activation Link
[Arguments]    email
[Return]    ${string}
[Documentation]    Keyword description
Log    email

Activate Account Via Link
[Arguments]    activation_link
[Return]    ${boolean}
[Documentation]    Keyword description
Log    activation_link

Log In With New Credentials
[Arguments]    user_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_details

","The 'user_registration' test case is designed to validate the functionality of the user registration process within an application. The purpose of this test case is to ensure that all steps involved in creating a new user account are working correctly and as expected. Here are the key aspects that the test case aims to verify:

1. **Form Filling and Submission**:
- Ensure that the registration form accepts user details, such as username, password, email, etc.
- Verify that the form can be submitted without errors.

2. **Confirmation and Activation**:
- Validate that a confirmation message is displayed after form submission.
- Check that an activation email is sent to the user's email address and that the activation link works correctly.

3. **Login Verification**:
- Ensure that after activation, the user can log in with the newly created credentials.

By validating these aspects, we ensure the user registration flow is smooth, secure, and user-friendly."
Validate keyword-driven booking system for Hotel Reservation,keyword-driven,hotel_reservation,"*** Settings ***
Documentation    Validate hotel_reservation
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
hotel_reservation
[Documentation]    Validate hotel_reservation using the following steps
Enter Booking Details    reservation_details
Confirm Availability    room_type, check_in_date
Process Payment    payment_details

*** Keywords ***
Enter Booking Details
[Arguments]    reservation_details
[Return]    ${string}
[Documentation]    Keyword description
Log    reservation_details

Confirm Availability
[Arguments]    room_type, check_in_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    room_type, check_in_date

Process Payment
[Arguments]    payment_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_details

","The test case ""hotel_reservation"" is designed to validate the entire process of booking a room in a hotel, ensuring that every step works seamlessly from entering booking details to payment processing. The primary objectives include:
"
Create keyword-driven clientcentral_keywords for API authenticateuser,keyword-driven,authenticateuser,"*** Settings ***
Documentation    Validate authenticateuser
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
authenticateuser
[Documentation]    Validate authenticateuser using the following steps
Create Auth Request    username, password
Send Auth Request    auth_body
Verify Auth Response    response_code, response_body

*** Keywords ***
Create Auth Request
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Send Auth Request
[Arguments]    auth_body
[Return]    ${string}
[Documentation]    Keyword description
Log    auth_body

Verify Auth Response
[Arguments]    response_code, response_body
[Return]    ${string}
[Documentation]    Keyword description
Log    response_code, response_body

","The 'authenticateuser' test case is aimed at verifying the user authentication functionality of a software application or API. This involves ensuring that users can log in with valid credentials, receive appropriate responses for invalid attempts, and that the system securely handles authentication data. Key objectives of this test case include:
"
Validate keyword-driven dunder_mifflin for Employees employee_details,keyword-driven,employee_details,"*** Settings ***
Documentation    Validate employee_details
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
employee_details
[Documentation]    Validate employee_details using the following steps
Select Tab In Employee Details Page    employee_tab
Validate Employee Count And Details After Adding New Employee    count|details
Select Employee Type    employee_type
Confirm Employee Deletion In Popup    nan
Validate Displayed Employees In Employee Detail Page    employees_list
Validate Employee Details Page Is Displayed    employee_id
Navigate To Employee Summary Page    department_id
Validate Current And Previous Month Employee Join Date    join_month
Validate Total Number And Details Of Employees After Update    count|details
Validate Employee Profile Page Is Displayed    employee_id
Validate Successful Employment Status Change    status_change
Validate Alert Popup Is Displayed For Employee Deletion    nan
Validate Employee Joining Date    expected_date|current_date
Validate Selected Date Is Displayed In Date Range    expected_date|daterange
Validate Department Head Checkbox Is Checked    department_id
Validate HR Can Collapse Employee Details    employee_id
Validate Employee Count In Employee Grid    count_of_employees
Click On Send Update Email    nan
Select Delete Employee    nan
Get Employee Count    locator
Get Current And Last Month    option",
Validate keyword-driven paynow_keywords for API recurringdonations,keyword-driven,recurringdonations,"*** Settings ***
Documentation    Validate recurringdonations
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
recurringdonations
[Documentation]    Validate recurringdonations using the following steps
Send Request To Get Donor Details    donor_id, organization_id
Create Body For Recurring Donation Setup    organization_id, donation_amount
Send Request To Create Recurring Donation    donor_id, organization_id, start_date
Validate Recurring Donation Setup    donor_id, organization_id, expected_frequency
Send Request To Get Donation Status    donation_id, expected_status

*** Keywords ***
Send Request To Get Donor Details
[Arguments]    donor_id, organization_id
[Return]    ${string}
[Documentation]    Keyword description
Log    donor_id, organization_id

Create Body For Recurring Donation Setup
[Arguments]    organization_id, donation_amount
[Return]    ${string}
[Documentation]    Keyword description
Log    organization_id, donation_amount

Send Request To Create Recurring Donation
[Arguments]    donor_id, organization_id, start_date
[Return]    ${string}
[Documentation]    Keyword description
Log    donor_id, organization_id, start_date

Validate Recurring Donation Setup
[Arguments]    donor_id, organization_id, expected_frequency
[Return]    ${boolean}
[Documentation]    Keyword description
Log    donor_id, organization_id, expected_frequency

Send Request To Get Donation Status
[Arguments]    donation_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    donation_id, expected_status

","The test case 'recurringdonations' is designed to ensure the functionality and reliability of a system that manages recurring donations. The objectives of this test case include:
"
Validate keyword-driven web for AdminKeywordsForUserManagement user_creation,keyword-driven,user_creation,"*** Settings ***
Documentation    Validate user creation
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_ADMIN}       adminuser
${VALID_ADMIN_PASSWORD}   adminsecret

*** Test Cases ***
user_creation
[Documentation]    Validate user creation using the following steps
Enter User Details    username|email|password
Submit User Creation Form    user_data
Validate User Creation Success Message    success_message
Check User Existence In Database    username

*** Keywords ***
Enter User Details
[Arguments]    username|email|password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|email|password

Submit User Creation Form
[Arguments]    user_data
[Return]    ${string}
[Documentation]    Keyword description
Log    user_data

Validate User Creation Success Message
[Arguments]    success_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    success_message

Check User Existence In Database
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

","The purpose of the 'user_creation' test case is to validate the functionality of creating a new user within the application. This test case verifies that the system allows an admin to create a user account, ensuring all necessary details are accurately captured and stored. Key aspects typically assessed during the 'user_creation' test case include:

1. **Entering User Details:**
- Verify that the fields for username, email, and password accept valid inputs.
- Ensure that proper validation is in place for all user details fields.

2. **Form Submission:**
- Test the submission process of the user creation form.
- Confirm that the form data is correctly transmitted to the server for processing.

3. **Success Message Validation:**
- Check that a success message is displayed upon successful user creation.
- Ensure that the success message is clear and informative for the user.

4. **Database Check:**
- Validate that the newly created user exists in the database.
- Confirm that all user details are accurately stored and retrievable from the database."
Create keyword-driven validation for CustomerProfile update_customer_information,keyword-driven,update_customer_information,"*** Settings ***
Documentation    Validate update_customer_information
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       customeruser
${VALID_PASSWORD}   securepassword

*** Test Cases ***
update_customer_information
[Documentation]    Validate update_customer_information using the following steps
Load Customer Profile Page    customer_id
Verify Customer Information Field Is Editable    field_name
Enter New Customer Information    customer_id, field_name, new_value
Submit Updated Customer Information    nan
Validate Update Confirmation Message    expected_message
Retrieve Updated Customer Information    customer_id
Compare Retrieved Information With Expected    field_name, new_value
Validate Validation Messages For Empty Fields    nan
Validate Update Button Is Disabled When Fields Are Empty    nan

*** Keywords ***
Load Customer Profile Page
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

Verify Customer Information Field Is Editable
[Arguments]    field_name
[Return]    ${boolean}
[Documentation]    Keyword description
Log    field_name

Enter New Customer Information
[Arguments]    customer_id, field_name, new_value
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id, field_name, new_value

Submit Updated Customer Information
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Update Confirmation Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Retrieve Updated Customer Information
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

Compare Retrieved Information With Expected
[Arguments]    field_name, new_value
[Return]    ${boolean}
[Documentation]    Keyword description
Log    field_name, new_value

Validate Validation Messages For Empty Fields
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Update Button Is Disabled When Fields Are Empty
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The test case 'update_customer_information' focuses on validating the system's capability to correctly update and handle customer profile information. The main objectives of this test case are to ensure:

1. **Accessibility of Profile Fields:** The system allows the editing of current customer information fields for updates.
2. **Submission Process:** Ensuring that once new information is inputted, it can be successfully submitted and stored.
3. **Validation and Integrity:** Validating confirmation messages, ensuring fields are not left empty, and the update button is properly disabled when required fields are incomplete.
4. **Consistency Check:** The system retrieves and displays updated customer information correctly, maintaining data integrity and consistency."
Conduct UI checks for PaymentGateway transactions_view,keyword-driven,transactions_view,"*** Settings ***
Documentation    Validate transactions_view
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
transactions_view
[Documentation]    Validate transactions_view using the following steps
Verify Transactions On Specific Date    date
Validate Error For Invalid Transaction    transaction_id
Filter Transactions By Status    status
Validate Transaction Details With Reference    reference_number

*** Keywords ***
Verify Transactions On Specific Date
[Arguments]    date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    date

Validate Error For Invalid Transaction
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Filter Transactions By Status
[Arguments]    status
[Return]    ${list}
[Documentation]    Keyword description
Log    status

Validate Transaction Details With Reference
[Arguments]    reference_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    reference_number

","The purpose of the 'transactions_view' test case is to evaluate and verify the functionality, accuracy, and reliability of a system or application that provides users with the capability to view, filter, and validate financial transactions. This test case aims to ensure that the transaction viewing interface works correctly, covering various scenarios to identify potential issues or discrepancies.

### Key Objectives:"
Validate keyword-driven clientcentral_keywords for Projects project_creation,keyword-driven,project_creation,"*** Settings ***
Documentation    Validate project_creation
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
project_creation
[Documentation]    Validate project_creation using the following steps
Navigate To Project Creation Page    nan
Create Project Header    project_name|description|start_date|end_date|budget
Submit Project Header    nan
Validate Project Header    project_name, description
Create Project Team Members    team_member_names
Assign Team Members To Project    project_name, team_member_names
Create Project Tasks    task_name, task_description, start_date, end_date, assignee
Validate Project Tasks    project_name, task_name, expected_status
Submit Project For Approval    project_name
Validate Project Approval Status    project_name, expected_status

*** Keywords ***
Navigate To Project Creation Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Create Project Header
[Arguments]    project_name|description|start_date|end_date|budget
[Return]    ${string}
[Documentation]    Keyword description
Log    project_name|description|start_date|end_date|budget

Submit Project Header
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Project Header
[Arguments]    project_name, description
[Return]    ${boolean}
[Documentation]    Keyword description
Log    project_name, description

Create Project Team Members
[Arguments]    team_member_names
[Return]    ${string}
[Documentation]    Keyword description
Log    team_member_names

Assign Team Members To Project
[Arguments]    project_name, team_member_names
[Return]    ${string}
[Documentation]    Keyword description
Log    project_name, team_member_names

Create Project Tasks
[Arguments]    task_name, task_description, start_date, end_date, assignee
[Return]    ${string}
[Documentation]    Keyword description
Log    task_name, task_description, start_date, end_date, assignee

Validate Project Tasks
[Arguments]    project_name, task_name, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    project_name, task_name, expected_status

Submit Project For Approval
[Arguments]    project_name
[Return]    ${string}
[Documentation]    Keyword description
Log    project_name

Validate Project Approval Status
[Arguments]    project_name, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    project_name, expected_status

","The purpose of the 'project_creation' test case is to ensure that the project creation functionality within an application is working correctly and efficiently. This includes verifying the critical steps and data pertaining to project management such as:
"
Validate keyword-driven paynow_keywords for API transaction,keyword-driven,transaction,"*** Settings ***
Documentation    Validate transaction
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
transaction
[Documentation]    Validate transaction using the following steps
Validate Transaction Details    transaction_id
Create Transaction Request    transaction_details, amount, payment_method
Send Transaction Request    customer_id, transaction_request
Get Transaction Status    transaction_id
Validate Transaction Receipt    transaction_id, expected_amount

*** Keywords ***
Validate Transaction Details
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Create Transaction Request
[Arguments]    transaction_details, amount, payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_details, amount, payment_method

Send Transaction Request
[Arguments]    customer_id, transaction_request
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id, transaction_request

Get Transaction Status
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Validate Transaction Receipt
[Arguments]    transaction_id, expected_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, expected_amount

","The test case 'transaction' is aimed at verifying the functionality of processing transactions within the system. This includes creating, sending, and validating transactions to ensure that the system handles financial operations correctly and efficiently. Key objectives likely include:
"
Create keyword-driven login_keywords for API userlogin,keyword-driven,userlogin,"*** Settings ***
Documentation    Validate userlogin
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
userlogin
[Documentation]    Validate userlogin using the following steps
Send Request To Authenticate User    username, password
Validate Authentication Response    response_code
Validate User Session Token    token

*** Keywords ***
Send Request To Authenticate User
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Validate Authentication Response
[Arguments]    response_code
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response_code

Validate User Session Token
[Arguments]    token
[Return]    ${boolean}
[Documentation]    Keyword description
Log    token

","The ""userlogin"" test case is designed to ensure the functionality and reliability of a user authentication system within an application. This test case focuses on verifying that the system correctly handles user login processes, including the validation and management of user credentials:
"
Validate keyword-driven clientcentral_keywords for user authentication,keyword-driven,user_authentication,"*** Settings ***
Documentation    Validate user authentication
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_authentication
[Documentation]    Validate user authentication using the following steps
Generate Authentication Token    username|password
Validate Authentication Token    username|token
Refresh Authentication Token    username|old_token
Validate Token Expiry    token|expiry_time

*** Keywords ***
Generate Authentication Token
[Arguments]    username|password
[Return]    ${token}
[Documentation]    Generate an authentication token using username and password
Log    username|password

Validate Authentication Token
[Arguments]    username|token
[Return]    ${boolean}
[Documentation]    Validate the authentication token
Log    username|token

Refresh Authentication Token
[Arguments]    username|old_token
[Return]    ${new_token}
[Documentation]    Refresh the expired authentication token
Log    username|old_token

Validate Token Expiry
[Arguments]    token|expiry_time
[Return]    ${boolean}
[Documentation]    Check if the token has expired
Log    token|expiry_time

","The 'user_authentication' test case is designed to validate the process of authenticating users within a system. It ensures that authentication tokens are correctly generated, validated, refreshed, and checked for expiry. This is essential for maintaining secure access and protecting unauthorized access to the system.

Key components of the 'user_authentication' test case include:
"
Validate user login functionality using mobile app,keyword-driven,mobile_login,"*** Settings ***
Documentation    Validate mobile login functionality
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
mobile_login
[Documentation]    Validate mobile login using the following steps
Launch Mobile Application    app_path
Enter Username And Password    username, password
Tap Login Button    nan
Validate Successful Login    expected_response
Validate Login Error Message For Invalid Details    invalid_username, invalid_password

*** Keywords ***
Launch Mobile Application
[Arguments]    app_path
[Return]    ${boolean}
[Documentation]    Keyword description
Log    app_path

Enter Username And Password
[Arguments]    username, password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, password

Tap Login Button
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Successful Login
[Arguments]    expected_response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_response

Validate Login Error Message For Invalid Details
[Arguments]    invalid_username, invalid_password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invalid_username, invalid_password

","The test case ""mobile_login"" is designed to evaluate the login functionality of a mobile application. The main objectives include ensuring that the system correctly handles user authentication and displays appropriate error messages when invalid credentials are provided. Specifically, the test case covers:
"
Create a new keyword-driven test case for Inventory Management for Products,keyword-driven,inventory_management,"*** Settings ***
Documentation    Validate inventory management for Products
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
inventory_management
[Documentation]    Validate inventory management using the following steps
Add New Product    product_name|product_sku|product_price|product_quantity
Update Existing Product Quantity    product_sku|new_quantity
Validate Product Details Are Displayed    product_sku|expected_product_name|expected_product_price|expected_product_quantity
Delete Product    product_sku
Validate Product Is Deleted    product_sku

*** Keywords ***
Add New Product
[Arguments]    product_name|product_sku|product_price|product_quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    product_name|product_sku|product_price|product_quantity

Update Existing Product Quantity
[Arguments]    product_sku|new_quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_sku|new_quantity

Validate Product Details Are Displayed
[Arguments]    product_sku|expected_product_name|expected_product_price|expected_product_quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_sku|expected_product_name|expected_product_price|expected_product_quantity

Delete Product
[Arguments]    product_sku
[Return]    ${string}
[Documentation]    Keyword description
Log    product_sku

Validate Product Is Deleted
[Arguments]    product_sku
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_sku

","The 'inventory_management' test case is designed to verify the fundamental functionalities of an inventory management system, specifically focusing on the management of product details. The purpose of this test case includes:

1. **Product Addition:** Ensuring that new products can be added successfully to the inventory with valid details such as name, SKU, price, and quantity.

2. **Product Update:** Verifying that product details, particularly the quantity, can be updated accurately in the system.

3. **Product Validation:** Checking that the details of the products can be displayed correctly, including verifying name, price, and quantity against expected values.

4. **Product Deletion:** Confirming that products can be deleted from the inventory without leaving residual data and that the deletion process is validated correctly in the system.

5. **Consistency and Accuracy:** Ensuring that all operations related to product management are consistent and accurate, reflecting changes in real-time."
Generate keyword-driven web for LoyaltyProgram integration_test,keyword-driven,integration_test,"*** Settings ***
Documentation    Validate integration_test
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
integration_test
[Documentation]    Validate integration_test using the following steps
Navigate To Loyalty Program Page    customer_id
Validate Loyalty Points Displayed    customer_id, expected_points
Add Loyalty Points    customer_id, points_to_add
Validate Loyalty Points After Addition    customer_id, expected_points_after_add
Redeem Loyalty Points    customer_id, points_to_redeem
Validate Loyalty Points After Redemption    customer_id, expected_points_after_redeem
Logout From Application    nan

*** Keywords ***
Navigate To Loyalty Program Page
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

Validate Loyalty Points Displayed
[Arguments]    customer_id, expected_points
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id, expected_points

Add Loyalty Points
[Arguments]    customer_id, points_to_add
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id, points_to_add

Validate Loyalty Points After Addition
[Arguments]    customer_id, expected_points_after_add
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id, expected_points_after_add

Redeem Loyalty Points
[Arguments]    customer_id, points_to_redeem
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id, points_to_redeem

Validate Loyalty Points After Redemption
[Arguments]    customer_id, expected_points_after_redeem
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id, expected_points_after_redeem

Logout From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'integration_test' test case for a loyalty program primarily focuses on verifying the proper integration and functionality of the loyalty points system. This includes the following key objectives:
"
Generate keyword-driven scenario for User Registration,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${DEFAULT_PASSWORD}   defaultpass
${MIN_PASSWORD_LENGTH} 8

*** Test Cases ***
user_registration
[Documentation]    Validate user_registration using the following steps
Navigate To Registration Page    nan
Enter User Details    username, email, password
Submit Registration Form    nan
Validate Successful Registration Message    expected_message
Validate User In Database    username, email
Attempt Registration With Existing Email    username, existing_email, password
Validate Error Message For Existing Email    expected_error_message

*** Keywords ***
Navigate To Registration Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter User Details
[Arguments]    username, email, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, email, password

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Successful Registration Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Validate User In Database
[Arguments]    username, email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, email

Attempt Registration With Existing Email
[Arguments]    username, existing_email, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, existing_email, password

Validate Error Message For Existing Email
[Arguments]    expected_error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_error_message

","The 'user_registration' test case is designed to assess the functionality and robustness of the user registration system. Its primary purpose is to ensure that the system accurately handles new user registrations and provides appropriate feedback to users. Key aspects of the test case include:
"
Develop a keyword-driven test for Inventory Management stocklevels,keyword-driven,stocklevels,"*** Settings ***
Documentation    Validate stocklevels
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
stocklevels
[Documentation]    Validate stocklevels using the following steps
Log In To Inventory Management System    ${VALID_USER}    ${VALID_PASSWORD}
Navigate To Stock Level Section    nan
Validate Current Stock Levels Displayed    expected_item_list
Add New Stock Item    item_name, initial_quantity
Remove Stock Item    item_name
Restock Item Quantity    item_name, quantity_to_add
Validate Stock Level After Addition    item_name, expected_quantity
Validate Stock Level After Removal    item_name, expected_quantity

*** Keywords ***
Log In To Inventory Management System
[Arguments]    ${VALID_USER}, ${VALID_PASSWORD}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}, ${VALID_PASSWORD}

Navigate To Stock Level Section
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Current Stock Levels Displayed
[Arguments]    expected_item_list
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_item_list

Add New Stock Item
[Arguments]    item_name, initial_quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    item_name, initial_quantity

Remove Stock Item
[Arguments]    item_name
[Return]    ${string}
[Documentation]    Keyword description
Log    item_name

Restock Item Quantity
[Arguments]    item_name, quantity_to_add
[Return]    ${string}
[Documentation]    Keyword description
Log    item_name, quantity_to_add

Validate Stock Level After Addition
[Arguments]    item_name, expected_quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_name, expected_quantity

Validate Stock Level After Removal
[Arguments]    item_name, expected_quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_name, expected_quantity

","The test case 'stocklevels' is designed to verify the functionality and reliability of the inventory management system in maintaining and displaying accurate stock levels. The primary objectives of this test case include:
"
Build keyword-driven clientcentral for Manage Subscriptions,keyword-driven,manage_subscriptions,"*** Settings ***
Documentation    Validate manage_subscriptions
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
manage_subscriptions
[Documentation]    Validate manage_subscriptions using the following steps
Login To ClientCentral And Navigate To Subscriptions    user_id
Add New Subscription    subscription_details
Update Subscription Details    subscription_id, updated_details
Cancel Subscription    subscription_id
Validate Subscription Details    subscription_id, expected_details
Validate Subscription Is Cancelled    subscription_id
Reactivate Subscription    subscription_id
Validate Reactivated Subscription Details    subscription_id, expected_details

*** Keywords ***
Login To ClientCentral And Navigate To Subscriptions
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Add New Subscription
[Arguments]    subscription_details
[Return]    ${string}
[Documentation]    Keyword description
Log    subscription_details

Update Subscription Details
[Arguments]    subscription_id, updated_details
[Return]    ${string}
[Documentation]    Keyword description
Log    subscription_id, updated_details

Cancel Subscription
[Arguments]    subscription_id
[Return]    ${string}
[Documentation]    Keyword description
Log    subscription_id

Validate Subscription Details
[Arguments]    subscription_id, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    subscription_id, expected_details

Validate Subscription Is Cancelled
[Arguments]    subscription_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    subscription_id

Reactivate Subscription
[Arguments]    subscription_id
[Return]    ${string}
[Documentation]    Keyword description
Log    subscription_id

Validate Reactivated Subscription Details
[Arguments]    subscription_id, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    subscription_id, expected_details

","The 'manage_subscriptions' test case is designed to evaluate the functionality, reliability, and accuracy of the subscription management system within ClientCentral. It primarily aims to ensure that the system properly handles the full lifecycle of subscriptions, from creation to cancellation, and reactivation. Key aspects of the test case include:

1. **Subscription Creation:** Verifying that new subscriptions can be correctly added with all required details.
2. **Subscription Modification:** Ensuring that subscription details can be accurately updated and maintained.
3. **Subscription Cancellation:** Checking that subscriptions can be cancelled when requested and ensuring the system accurately reflects the cancellation.
4. **Subscription Reactivation:** Validating that cancelled subscriptions can be reactivated and the system correctly restores the subscription details.
5. **Error Handling:** Making sure the system appropriately handles errors such as invalid subscription details or attempting to reactivate non-cancelled subscriptions."
Generate keyword-driven web for PayNOW account_management,keyword-driven,account_management,"*** Settings ***
Documentation    Validate account_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
account_management
[Documentation]    Validate account_management using the following steps
Login To AccountManagement And Navigate To Profile    account_id
Update Account Details    account_info
Save Account Changes    nan
Validate Account Details Are Updated    expected_accountinfo
Deactivate Account    reason
Validate Account Is Deactivated    account_id
Reactivate Account    account_id, reactivation_info
Validate Account Is Reactivated    account_id
Delete Account Permanently    account_id
Validate Account Is Deleted    account_id

*** Keywords ***
Login To AccountManagement And Navigate To Profile
[Arguments]    account_id
[Return]    ${string}
[Documentation]    Keyword description
Log    account_id

Update Account Details
[Arguments]    account_info
[Return]    ${string}
[Documentation]    Keyword description
Log    account_info

Save Account Changes
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Account Details Are Updated
[Arguments]    expected_accountinfo
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_accountinfo

Deactivate Account
[Arguments]    reason
[Return]    ${string}
[Documentation]    Keyword description
Log    reason

Validate Account Is Deactivated
[Arguments]    account_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_id

Reactivate Account
[Arguments]    account_id, reactivation_info
[Return]    ${string}
[Documentation]    Keyword description
Log    account_id, reactivation_info

Validate Account Is Reactivated
[Arguments]    account_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_id

Delete Account Permanently
[Arguments]    account_id
[Return]    ${string}
[Documentation]    Keyword description
Log    account_id

Validate Account Is Deleted
[Arguments]    account_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_id

","The test case 'account_management' is designed to verify the correct operation and reliability of account management functionalities within the PayNOW platform. The primary objective is to ensure that users can effectively manage their accounts, including updating details, deactivating, reactivating, and deleting accounts.

The test case covers various scenarios such as:

1. **Account Information Updates:** Ensuring users can update their account details and that these updates are accurately reflected in the system.
2. **Account Deactivation:** Verifying that users can deactivate their accounts for various reasons and that the system correctly processes these deactivations.
3. **Account Reactivation:** Checking that users can reactivate previously deactivated accounts and that the system restores access and functionality as required.
4. **Permanent Deletion:** Confirming that users can permanently delete their accounts and verifying that the system adequately removes all associated data.
5. **Security and Integrity:** Ensuring that all actions are performed securely and that unauthorized access or modifications are prevented.

This test case aims to ensure seamless user experience and robust account management functionalities within PayNOW."
Generate keyword-driven sap for Invoicing invoices,keyword-driven,invoices,"*** Settings ***
Documentation    Validate invoices
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
invoices
[Documentation]    Validate invoices using the following steps
Navigate To Invoices Tab    nan
Validate Invoice Is Displayed    account_number, invoice_date
Create New Invoice    account_number, invoice_amount, invoice_date
Edit Existing Invoice    invoice_id, updated_amount
Delete Invoice    invoice_id
Validate Invoice Status    invoice_id, expected_status
Download Invoice PDF    invoice_id
Send Invoice Via Email    invoice_id, email_address
Validate Invoice Email Sent    email_address, expected_subject
Generate Invoice Report    report_type, start_date, end_date
Validate Invoice Report Is Generated    report_type, expected_report

*** Keywords ***
Navigate To Invoices Tab
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Invoice Is Displayed
[Arguments]    account_number, invoice_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, invoice_date

Create New Invoice
[Arguments]    account_number, invoice_amount, invoice_date
[Return]    ${integer}
[Documentation]    Keyword description
Log    account_number, invoice_amount, invoice_date

Edit Existing Invoice
[Arguments]    invoice_id, updated_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_id, updated_amount

Delete Invoice
[Arguments]    invoice_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_id

Validate Invoice Status
[Arguments]    invoice_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_id, expected_status

Download Invoice PDF
[Arguments]    invoice_id
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_id

Send Invoice Via Email
[Arguments]    invoice_id, email_address
[Return]    ${integer}
[Documentation]    Keyword description
Log    invoice_id, email_address

Validate Invoice Email Sent
[Arguments]    email_address, expected_subject
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email_address, expected_subject

Generate Invoice Report
[Arguments]    report_type, start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    report_type, start_date, end_date

Validate Invoice Report Is Generated
[Arguments]    report_type, expected_report
[Return]    ${boolean}
[Documentation]    Keyword description
Log    report_type, expected_report

","The ""invoices"" test case is used to verify the complete functionality of the invoicing system within an application. This includes creating, editing, deleting, and validating various aspects of invoices.

Key Objectives:

1. **Invoice Management**:
- Verify that users can navigate to the invoices tab and see invoices.
- Ensure users can create new invoices with valid data (account number, amount, date).
- Validate the functionality of editing and deleting invoices.

2. **Invoice Validation**:
- Confirm that the correct invoice status is displayed based on actions taken (e.g., creation, editing).
- Check that invoices can be downloaded as PDFs and sent via email, and validate that emails are received with the correct subject and details.

3. **Reporting**:
- Generate various types of invoice reports and validate that the generated reports are correct and contain expected data.

This test case ensures that the invoicing system is reliable, accurate, and user-friendly."
Validate keyword-driven central_orders for API orders,keyword-driven,orders,"*** Settings ***
Documentation    Validate orders
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
orders
[Documentation]    Validate orders using the following steps
Create Order Body    unique_value|product_id|quantity
Submit Order Request    unique_value|merchant_id
Validate Order Creation    order_id|expected_status
Retrieve Order Details    order_id
Validate Order Details    order_id|expected_details
Update Order Status    order_id|new_status
Validate Order Status Update    order_id|expected_status
Cancel Order    order_id
Validate Order Cancellation    order_id|expected_status

*** Keywords ***
Create Order Body
[Arguments]    unique_value|product_id|quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value|product_id|quantity

Submit Order Request
[Arguments]    unique_value|merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value|merchant_id

Validate Order Creation
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

Retrieve Order Details
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Details
[Arguments]    order_id|expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_details

Update Order Status
[Arguments]    order_id|new_status
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|new_status

Validate Order Status Update
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

Cancel Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Cancellation
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

","The test case 'orders' aims to validate the functionality related to order processing within a system. It ensures that orders can be created, submitted, and managed properly, covering all necessary aspects of the order lifecycle.

### Key Objectives:"
Generate keyword-driven examplecorp_autopay for Customers autopay_schedules,keyword-driven,autopay_schedules,"*** Settings ***
Documentation    Validate autopay_schedules
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
autopay_schedules
[Documentation]    Validate autopay_schedules using the following steps
Login And Navigate To Autopay Section    user_id|password
Setup New Autopay Schedule    customer_id|card_details
Validate Scheduled Payments Are Correct    schedule_date|expected_amount|expected_status
Edit Existing Autopay Schedule    schedule_id|new_schedule_date|new_amount
Enable Autopay Switch    switch_status
Validate Updated Autopay Schedule    schedule_id|expected_new_date|expected_new_amount
Delete Autopay Schedule    schedule_id
Confirm Autopay Schedule Deletion    schedule_id|expected_message
Validate Deletion In Scheduled Payments List    schedule_id|expected_status
Log Out And Verify    nan

*** Keywords ***
Login And Navigate To Autopay Section
[Arguments]    user_id|password
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id|password

Setup New Autopay Schedule
[Arguments]    customer_id|card_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id|card_details

Validate Scheduled Payments Are Correct
[Arguments]    schedule_date|expected_amount|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    schedule_date|expected_amount|expected_status

Edit Existing Autopay Schedule
[Arguments]    schedule_id|new_schedule_date|new_amount
[Return]    ${string}
[Documentation]    Keyword description
Log    schedule_id|new_schedule_date|new_amount

Enable Autopay Switch
[Arguments]    switch_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    switch_status

Validate Updated Autopay Schedule
[Arguments]    schedule_id|expected_new_date|expected_new_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    schedule_id|expected_new_date|expected_new_amount

Delete Autopay Schedule
[Arguments]    schedule_id
[Return]    ${string}
[Documentation]    Keyword description
Log    schedule_id

Confirm Autopay Schedule Deletion
[Arguments]    schedule_id|expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    schedule_id|expected_message

Validate Deletion In Scheduled Payments List
[Arguments]    schedule_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    schedule_id|expected_status

Log Out And Verify
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The 'autopay_schedules' test case aims to verify the correct functionality of a system that handles automatic payment scheduling. This feature allows users to set up, manage, and delete payment schedules automatically processed on set dates. The test case will cover multiple aspects to ensure the system works accurately and reliably:
"
Create payment_invoicing keyword-driven invoice_validation for payments,keyword-driven,invoice_validation,"*** Settings ***
Documentation    Verify invoice_validation
Test Setup       Initialize Payment Environment
Test Teardown    Cleanup Payment Environment
Suite Setup      Launch Payment Application
Suite Teardown   Close Payment Application
Resource         payment_resource_file.robot

*** Variables ***
${VALID_USER}       paymentuser
${VALID_PASSWORD}   paysecret

*** Test Cases ***
invoice_validation
[Documentation]    Verify invoice_validation using the following steps
Generate Invoice Data    unique_id, invoice_id, total_amount, merchant_code, due_date
Input Company Details    nan
Generate Batch Invoices With Various Due Dates    account_id, integrated_payment
Input Product Information    nan
Input Shipping Address    merchant_code
Input Billing Address    merchant_code
Submit Invoice Request For Customer  # robocop:disable=too-many-arguments    unique_id, payment_key, merchant_code, invoice_id, total_amount, invoice_date
Create Batch Invoices via API    account_id, integrated_payment, due_date

*** Keywords ***
Generate Invoice Data
[Arguments]    unique_id, invoice_id, total_amount, merchant_code, due_date
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_id, invoice_id, total_amount, merchant_code, due_date

Input Company Details
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Generate Batch Invoices With Various Due Dates
[Arguments]    account_id, integrated_payment
[Return]    @{list}
[Documentation]    Keyword description
Log    account_id, integrated_payment

Input Product Information
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Input Shipping Address
[Arguments]    merchant_code
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant_code

Input Billing Address
[Arguments]    merchant_code
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant_code

Submit Invoice Request For Customer  # robocop:disable=too-many-arguments
[Arguments]    unique_id, payment_key, merchant_code, invoice_id, total_amount, invoice_date
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_id, payment_key, merchant_code, invoice_id, total_amount, invoice_date

Create Batch Invoices via API
[Arguments]    account_id, integrated_payment, due_date
[Return]    @{list}
[Documentation]    Keyword description
Log    account_id, integrated_payment, due_date

","The test case 'invoice_validation' is designed to verify and confirm the accuracy and integrity of the invoicing functionality within a payment system. This includes ensuring invoices are generated properly, reflect accurate transaction details, and comply with preset business standards."
Conduct keyword-driven validation for UserAuthentication userlogin,keyword-driven,userlogin,"*** Settings ***
Documentation    Validate user authentication for userlogin
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
userlogin
[Documentation]    Validate user authentication for userlogin using the following steps
Enter Username And Password    credentials
Validate Successful Login Message    expected_message
Retry Login On Failure    retry_count|credentials
Validate Error Message For Invalid Credentials    error_message
Logout And Navigate To Home Page    nan

*** Keywords ***
Enter Username And Password
[Arguments]    credentials
[Return]    ${boolean}
[Documentation]    Enter the provided username and password then attempt login.
Log    credentials

Validate Successful Login Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Verify the login was successful using the provided message.
Log    expected_message

Retry Login On Failure
[Arguments]    retry_count|credentials
[Return]    ${integer}
[Documentation]    If login fails, retry the specified number of times with the provided credentials.
Log    retry_count|credentials

Validate Error Message For Invalid Credentials
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Check the displayed error message when invalid credentials are used.
Log    error_message

Logout And Navigate To Home Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Logout the current user and navigate back to the home page.
Log    nan

","The test case titled 'userlogin' is aimed at validating the user authentication process within the application. This test ensures that users can successfully log in with valid credentials, appropriate error messages are displayed for invalid attempts, and the system's retry logic is functioning as expected.

Key Objectives:

1. **Authentication Testing**:
- Verify that users can log in with valid credentials and receive corresponding success messages.
- Validate error handling for invalid login attempts, such as incorrect username or password.
2. **Workflow Verification**:
- Ensure retry logic is correctly implemented, allowing users a specified number of attempts.
- Confirm that users can log out and are redirected to the home page.

By executing this test case, we ensure robust user authentication, crucial for security and user management within the application."
Verify keyword-driven banking app for PayLater deferred_payments,keyword-driven,deferred_payments,"*** Settings ***
Documentation    Validate deferred_payments
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
deferred_payments
[Documentation]    Validate deferred_payments using the following steps
Select Payment Plan    payment_plan
Enter Payment Details    payment_details
Schedule Payment For Future Date    future_date
Validate Payment Plan Selection    expected_payment_plan, expected_amount
Enter Customer Information    customer_info
Validate Payment Date Is Scheduled    nan
Click On Schedule Button    nan
Logout From Payment Page    nan
Navigate To Help Section For More Information    nan
Confirm Surcharge Fee Is Applied    nan
Validate Payment Summary Details    expected_summary
Validate Scheduled Payment Confirmation Screen    nan
Validate Customer Transaction Page Is Accessible    nan
Validate Payment Details In Confirmation Email    payment_type, account_number, payment_plan, amount
Verify Applied Surcharge Percentage    exp_percentage
Ensure All Checkboxes Are Selected By Default    nan
Enter Reason For Deferring Payment    payment_reason
Validate Errors When Required Fields Are Empty    error_message
Enter Postal Code    postal_code
Await Loading To Complete    nan
Confirm Payment Receipt Via Email    transaction_id
Retrieve Transaction ID    nan
Verify Routing Number Tooltip Is Visible    nan
Generate Unique Customer ID    nan
Select Specific Payment And Enter Amount    payment_id, amount
Choose Account Type For Deferred Payment    account_type
Ensure Email Receipt Option Is Checked By Default    nan
Move To Payment Confirmation And Verify Title    nan
Input Lump Sum Payment Amount    amount
Confirm Payment Method And Account Number    expected_method, expected_account_number
Choose State For Shipping Address    state
Enter Card Information    card_number, expiry_date, cvv_code
Confirm Terms And Privacy Policy Has Been Accepted    nan
Check Future Payment Details In Scheduled Payments Tab    future_date
Choose Payment Mode    payment_mode
Process Scheduled Payment    nan
Navigate To Terms And Privacy Policy Section    nan
Confirm Terms And Privacy Policy Screen Is Visible    nan
Verify Payment Receipt Has Been Generated    nan
Submit ACH/ECheck Information    account_number, routing_number

*** Keywords ***
Select Payment Plan
[Arguments]    payment_plan
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_plan

Enter Payment Details
[Arguments]    payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_details

Schedule Payment For Future Date
[Arguments]    future_date
[Return]    ${string}
[Documentation]    Keyword description
Log    future_date

Validate Payment Plan Selection
[Arguments]    expected_payment_plan, expected_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_payment_plan, expected_amount

Enter Customer Information
[Arguments]    customer_info
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_info

Validate Payment Date Is Scheduled
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Click On Schedule Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Logout From Payment Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Navigate To Help Section For More Information
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Confirm Surcharge Fee Is Applied
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Payment Summary Details
[Arguments]    expected_summary
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_summary

Validate Scheduled Payment Confirmation Screen
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Customer Transaction Page Is Accessible
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Payment Details In Confirmation Email
[Arguments]",
Validate keyword-driven system for EmployeeManagementSystem employee_record_update,keyword-driven,employee_record_update,"*** Settings ***
Documentation    Validate employee_record_update
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
employee_record_update
[Documentation]    Validate employee_record_update using the following steps
Enter Employee ID    employee_id
Enter Employee Name    employee_name
Update Employee Address    employee_address
Save Employee Record    employee_details
Validate Employee Record Updated Message    expected_message

*** Keywords ***
Enter Employee ID
[Arguments]    employee_id
[Return]    ${string}
[Documentation]    Keyword description
Log    employee_id

Enter Employee Name
[Arguments]    employee_name
[Return]    ${string}
[Documentation]    Keyword description
Log    employee_name

Update Employee Address
[Arguments]    employee_address
[Return]    ${string}
[Documentation]    Keyword description
Log    employee_address

Save Employee Record
[Arguments]    employee_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    employee_details

Validate Employee Record Updated Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

","The test case 'employee_record_update' validates the functionality of updating employee records within the EmployeeManagementSystem. The purpose of this test case includes:

1. **Data Accuracy:**
- Verify that the system correctly updates the employee record with accurate new data, such as name and address modifications.

2. **Functional Testing:**
- Ensure that each step in updating an employee record (like entering ID, name, and address) works correctly.
- Confirm that the system shows an appropriate message upon successful record update and maintains the integrity of the updated information.

3. **User Experience:**
- Validate that the system provides clear and informative feedback to the user regarding the status of the update process.
- Ensure that error messages, if any, guide the user towards accurate and corrective actions to successfully update employee records."
Generate keyword-driven inventory_management for Inventory Products,keyword-driven,products,"*** Settings ***
Documentation    Validate products
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       inventorymanager
${VALID_PASSWORD}   strongpassword

*** Test Cases ***
products
[Documentation]    Validate products using the following steps
Add New Product    product_name, product_code, price, quantity
Validate Product Is Added    expected_message
Search Product    product_code
Validate Product Details Are Correct    product_code, expected_product_details
Update Product Information    product_code, new_price, new_quantity
Validate Updated Product Information    product_code, expected_updated_details
Delete Product    product_code
Validate Product Is Deleted    product_code, expected_message

*** Keywords ***
Add New Product
[Arguments]    product_name, product_code, price, quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    product_name, product_code, price, quantity

Validate Product Is Added
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Search Product
[Arguments]    product_code
[Return]    ${string}
[Documentation]    Keyword description
Log    product_code

Validate Product Details Are Correct
[Arguments]    product_code, expected_product_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_code, expected_product_details

Update Product Information
[Arguments]    product_code, new_price, new_quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    product_code, new_price, new_quantity

Validate Updated Product Information
[Arguments]    product_code, expected_updated_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_code, expected_updated_details

Delete Product
[Arguments]    product_code
[Return]    ${string}
[Documentation]    Keyword description
Log    product_code

Validate Product Is Deleted
[Arguments]    product_code, expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_code, expected_message

","The test case titled 'products' is specifically created to validate the functionality of product management features in an inventory system. The primary goals include:

1. **Adding New Products**:
- Ensure that new products can be added to the inventory with correct attributes like name, code, price, and quantity.
- Validate that a confirmation message is displayed after successful addition.

2. **Product Search and Verification**:
- Confirm that products can be searched using their unique product code.
- Verify that the retrieved product details match the expected product details.

3. **Updating Product Information**:
- Validate that products can be updated with new price and quantity values.
- Verify that the updated information is correctly reflected in the inventory system.

4. **Deleting Products**:
- Ensure that products can be deleted using their product code.
- Verify that a confirmation message is displayed and the product is no longer available in the inventory after deletion.

This test case is crucial in maintaining an accurate and efficient inventory management system."
Validate keyword-driven web for Dashboard view,keyword-driven,view_dashboard,"*** Settings ***
Documentation    Validate view_dashboard
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
view_dashboard
[Documentation]    Validate dashboard viewing functionality using the following steps
Login To Application    email_address|password
Navigate To Dashboard    section_name
Validate Dashboard Elements    expected_elements
Validate Recent Activity Section    expected_activities
Logout Of Application    nan

*** Keywords ***
Login To Application
[Arguments]    email_address|password
[Return]    ${string}
[Documentation]    Keyword description
Log    email_address|password

Navigate To Dashboard
[Arguments]    section_name
[Return]    ${string}
[Documentation]    Keyword description
Log    section_name

Validate Dashboard Elements
[Arguments]    expected_elements
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_elements

Validate Recent Activity Section
[Arguments]    expected_activities
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_activities

Logout Of Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'view_dashboard' test case is designed to verify the functionality and accuracy of the dashboard interface in a web application. The purpose of this test case includes:

1. **User Authentication**:
- Ensure users can log in with valid credentials.
- Redirect to the dashboard page upon successful login.

2. **Navigation**:
- Check that users can navigate to the dashboard section from different parts of the application.
- Verify that all elements on the dashboard load correctly.

3. **Content Verification**:
- Confirm that important sections, such as recent activities, metrics, and notifications, are accurately displayed.
- Ensure the dashboard updates dynamically with user activities.

4. **User Logout**:
- Validate that users can log out securely from the dashboard.
- Ensure that no dashboard data is accessible after logout.

This test case helps in ensuring that the dashboard provides a comprehensive and accurate overview of the user's activities and other relevant information."
Validate keyword-driven ecommerce for API order,keyword-driven,order,"*** Settings ***
Documentation    Validate order
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order
[Documentation]    Validate order using the following steps
Create Order Body    unique_order_id, customer_id, product_id
Send Request To Place Order    order_body
Validate Order Confirmation    order_response
Check Order Status    order_id
Get Order Details    order_id

*** Keywords ***
Create Order Body
[Arguments]    unique_order_id, customer_id, product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_order_id, customer_id, product_id

Send Request To Place Order
[Arguments]    order_body
[Return]    ${string}
[Documentation]    Keyword description
Log    order_body

Validate Order Confirmation
[Arguments]    order_response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_response

Check Order Status
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Get Order Details
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

","The purpose of the 'order' test case is to validate the entire order placement and management process in an e-commerce application. This test ensures that orders are created, processed, and managed correctly, providing a seamless experience for users. The key aspects typically assessed in the 'order' test case include:

1. **Order Creation**:
- Verify that an order can be created with the correct details, such as products, quantities, customer information.
- Ensure that the order request is sent correctly to the backend system.

2. **Order Confirmation**:
- Validate that the order confirmation is received and contains all required details, such as order ID, items, total cost.
- Confirm the accuracy and completeness of the confirmation data.

3. **Order Status**:
- Check that the order status is correctly updated at various stages, such as processing, shipped, delivered.
- Ensure consistency between the front-end and backend order statuses.

4. **Order Details Retrieval**:
- Verify that detailed information about the placed order can be retrieved correctly.
- Make sure the details match the original order information.

By conducting this test case, we ensure that the e-commerce platform's order functionality is reliable and meets user expectations."
Create keyword-driven clientcentral_keywords for order processing,keyword-driven,order_processing,"*** Settings ***
Documentation    Validate order_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_processing
[Documentation]    Validate order_processing using the following steps
Create New Order    order_details
Validate Order Submission    nan
Fetch Order Confirmation    order_id
Validate Order Confirmation Message    nan
Navigate To Order Details Page    order_id
Validate Order Details    order_id, expected_order_details
Cancel Order    order_id
Validate Order Cancellation    order_id
Create Bulk Orders    bulk_order_details
Validate Bulk Orders Status    bulk_orders
Update Existing Order    order_id, updated_order_details
Validate Updated Order    order_id
Fetch Order History    user_id
Validate Order History Is Displayed    nan
Process Payment For Order    order_id, payment_details
Validate Payment Processing    payment_confirmation
Navigate To Payment History Tab    nan
Validate Payment History Is Displayed    nan
Fetch Invoice For Order    order_id
Validate Invoice Details    invoice_id
Download Invoice PDF    invoice_id

*** Keywords ***
Create New Order
[Arguments]    order_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_details

Validate Order Submission
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Fetch Order Confirmation
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Confirmation Message
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Navigate To Order Details Page
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Details
[Arguments]    order_id, expected_order_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, expected_order_details

Cancel Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Cancellation
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Create Bulk Orders
[Arguments]    bulk_order_details
[Return]    @{list}
[Documentation]    Keyword description
Log    bulk_order_details

Validate Bulk Orders Status
[Arguments]    bulk_orders
[Return]    ${boolean}
[Documentation]    Keyword description
Log    bulk_orders

Update Existing Order
[Arguments]    order_id, updated_order_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id, updated_order_details

Validate Updated Order
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Fetch Order History
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate Order History Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Process Payment For Order
[Arguments]    order_id, payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id, payment_details

Validate Payment Processing
[Arguments]    payment_confirmation
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_confirmation

Navigate To Payment History Tab
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment History Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Fetch Invoice For Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Invoice Details
[Arguments]    invoice_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log",
Create keyword-driven web for PaymentGateway payment_processing,keyword-driven,payment_processing,"*** Settings ***
Documentation    Validate payment_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
payment_processing
[Documentation]    Validate payment_processing using the following steps
Initiate Payment    payment_details
Select Payment Option    payment_option
Enter Payment Details    card_number, expiration_date, cvv
Confirm Payment Amount    total_amount
Validate Payment Confirmation    confirmation_message
Navigate To Payment History    nan
Validate Payment History Entry    payment_entry
Log Out From Application    nan

*** Keywords ***
Initiate Payment
[Arguments]    payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_details

Select Payment Option
[Arguments]    payment_option
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_option

Enter Payment Details
[Arguments]    card_number, expiration_date, cvv
[Return]    ${string}
[Documentation]    Keyword description
Log    card_number, expiration_date, cvv

Confirm Payment Amount
[Arguments]    total_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    total_amount

Validate Payment Confirmation
[Arguments]    confirmation_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    confirmation_message

Navigate To Payment History
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment History Entry
[Arguments]    payment_entry
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_entry

Log Out From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'payment_processing' test case is designed to validate the functionality and reliability of the payment processing feature within a payment gateway system.

### Purpose:
1. **Payment Initiation:**
- Ensure that the payment initiation process is triggered correctly with the provided payment details.

2. **Payment Details:**
- Verify that all required payment details, such as card number, expiration date, and CVV, are entered accurately.
- Ensure that the system securely handles sensitive payment information.

3. **Payment Confirmation:**
- Confirm that the payment amount is correct before processing.
- Validate the payment confirmation message to ensure the transaction was successful.

4. **Payment History:**
- Check that the payment history is updated with the new transaction entry.
- Validate that the payment entry details in the history are accurate.

5. **Session Management:**
- Ensure that the user can log out from the application securely after completing the payment process.

The steps include selecting the payment option, entering details, confirming payment, and validating the entries in payment history, with appropriate logout to conclude the session."
Develop keyword-driven smartmart for Inventory inventory,keyword-driven,inventory,"*** Settings ***
Documentation    Validate inventory
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
inventory
[Documentation]    Validate inventory using the following steps
Add New Inventory Item    item_id|item_name|quantity
Update Inventory Item Quantity    item_id|new_quantity
Validate Inventory Item Exists    item_id
Delete Inventory Item    item_id
Validate Inventory Item Is Deleted    item_id

*** Keywords ***
Add New Inventory Item
[Arguments]    item_id|item_name|quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id|item_name|quantity

Update Inventory Item Quantity
[Arguments]    item_id|new_quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id|new_quantity

Validate Inventory Item Exists
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

Delete Inventory Item
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id

Validate Inventory Item Is Deleted
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

","The 'inventory' test case focuses on verifying the functionality, accuracy, and usability of inventory management within an application. Inventory management is a critical component, especially in applications related to retail, logistics, and supply chain management.

### Key Objectives:
1. **Functionality Testing**:
- Ensure that new inventory items can be added correctly with appropriate item IDs, names, and quantities.
- Verify that inventory quantities can be updated as required.
- Confirm that existing inventory items can be validated against the inventory list.
- Test the deletion of inventory items and ensure they are removed correctly from the inventory list.

2. **Data Integrity**:
- Verify that the information related to inventory items remains consistent and accurate throughout various operations like addition, update, validation, and deletion.

3. **User Experience**:
- Ensure that the workflow for managing inventory items is intuitive and user-friendly.
- Confirm appropriate feedback and confirmation messages for each action performed, such as item addition, update, and deletion."
Validate keyword-driven acme_orders for E-commerce order_processing,keyword-driven,order_processing,"*** Settings ***
Documentation    Validate order_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         acme_ecommerce_resources.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_processing
[Documentation]    Validate order_processing using the following steps
Create New Order    product_id|quantity|user_id
Validate Order Confirmation    order_id
Add Shipping Details    order_id|shipping_address
Update Order Status To Shipped    order_id|new_status
Validate Shipping Confirmation    order_id|expected_status
Get Order Details    order_id
Validate Order Details    order_id|expected_details
Cancel Order    order_id
Validate Order Cancellation    order_id|expected_status

*** Keywords ***
Create New Order
[Arguments]    product_id|quantity|user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id|quantity|user_id

Validate Order Confirmation
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Add Shipping Details
[Arguments]    order_id|shipping_address
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|shipping_address

Update Order Status To Shipped
[Arguments]    order_id|new_status
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|new_status

Validate Shipping Confirmation
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

Get Order Details
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Details
[Arguments]    order_id|expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_details

Cancel Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Cancellation
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

","The 'order_processing' test case is typically designed to verify and validate the workflow associated with processing orders in an e-commerce system. Here is a summary outlining its primary purpose:

**Objective:**
The main objective of the 'order_processing' test case is to ensure that orders are created, processed, and updated correctly within the system. This includes verifying the entire lifecycle of an order from creation to shipment and potential cancellation.

**Purpose:**
1. **Validation of Order Creation:** To ensure that when a new order is created, it is recorded accurately in the system with all relevant details such as product ID, quantity, and user information.

2. **Confirmation of Order Processing:** To validate that the order confirmation is generated correctly and that shipping details can be added without errors.

3. **Status Updates:** To check that the order status can be updated appropriately at different stages, such as changing to shipped or cancelled, and that these updates are reflected accurately in the system.

4. **Detail Verification:** To ensure that the order details displayed are consistent with the information entered during the order creation and update processes.

5. **Cancellation Handling:** To confirm that order cancellations are processed correctly and that the system reflects the cancellation status accurately, providing the expected feedback to the user."
Validate keyword-driven web for OrderProcessing add_items_to_cart,keyword-driven,add_items_to_cart,"*** Settings ***
Documentation    Validate add_items_to_cart
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
add_items_to_cart
[Documentation]    Validate add_items_to_cart using the following steps
Enter User Credentials    username|password
Navigate To Home Page    nan
Search For Item    item_name
Select Item From Results    item_name
Add Item To Cart    item_name|quantity
Validate Item Added To Cart    item_name|quantity
Increase Item Quantity In Cart    item_name|new_quantity
Validate Updated Quantity In Cart    item_name|new_quantity
Remove Item From Cart    item_name
Validate Item Removed From Cart    item_name
Navigate To Checkout Page    nan
Apply Discount Code    discount_code
Validate Discount Applied    expected_discount_amount
Enter Payment Details    payment_info
Validate Total Amount After Discount    expected_total_amount

*** Keywords ***
Enter User Credentials
[Arguments]    username|password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password

Navigate To Home Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Search For Item
[Arguments]    item_name
[Return]    ${string}
[Documentation]    Keyword description
Log    item_name

Select Item From Results
[Arguments]    item_name
[Return]    ${string}
[Documentation]    Keyword description
Log    item_name

Add Item To Cart
[Arguments]    item_name|quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    item_name|quantity

Validate Item Added To Cart
[Arguments]    item_name|quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_name|quantity

Increase Item Quantity In Cart
[Arguments]    item_name|new_quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    item_name|new_quantity

Validate Updated Quantity In Cart
[Arguments]    item_name|new_quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_name|new_quantity

Remove Item From Cart
[Arguments]    item_name
[Return]    ${string}
[Documentation]    Keyword description
Log    item_name

Validate Item Removed From Cart
[Arguments]    item_name
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_name

Navigate To Checkout Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Apply Discount Code
[Arguments]    discount_code
[Return]    ${string}
[Documentation]    Keyword description
Log    discount_code

Validate Discount Applied
[Arguments]    expected_discount_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_discount_amount

Enter Payment Details
[Arguments]    payment_info
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_info

Validate Total Amount After Discount
[Arguments]    expected_total_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_total_amount

","The 'add_items_to_cart' test case aims to validate the functionality of adding items to the shopping cart on an e-commerce website. This involves ensuring that items can be efficiently searched, selected, added to the cart in the correct quantities, and that the cart reflects these changes accurately.

Key testing aspects include:

1. **Adding Items:**
- Verifying that users can successfully add items to the cart.
- Ensuring accurate updates in item quantity within the cart.

2. **Removing Items:**
- Confirming that users can remove items from the cart and that the cart recalculates totals correctly.

3. **Applying Discounts:**
- Testing the functionality of discount codes and ensuring the correct discount is applied to the total amount.

4. **User Interaction and Navigation:**
- Validating that users are seamlessly guided through the process from login, item search, adding items to cart, and"
Validate keyword-driven customer_profile for API common,keyword-driven,common,"*** Settings ***
Documentation    Validate common
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
common
[Documentation]    Validate common using the following steps
Create Customer Profile    profile_data, contact_info
Update Customer Contact Information    customer_id, new_contact_info
Fetch Customer Profile    customer_id
Validate Customer Profile Information    customer_id, expected_profile_data

*** Keywords ***
Create Customer Profile
[Arguments]    profile_data, contact_info
[Return]    ${string}
[Documentation]    Keyword description
Log    profile_data, contact_info

Update Customer Contact Information
[Arguments]    customer_id, new_contact_info
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id, new_contact_info

Fetch Customer Profile
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

Validate Customer Profile Information
[Arguments]    customer_id, expected_profile_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id, expected_profile_data

","The purpose of the test case named ""common"" can be summarized as follows:

The ""common"" test case is designed to verify the fundamental operations and reliability of a customer profile management system. This includes ensuring that the system can accurately create, update, retrieve, and validate customer profiles.

Key objectives include:
"
Create keyword-driven web for UserManagement user_accounts,keyword-driven,user_accounts,"*** Settings ***
Documentation    Validate user_accounts
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${ADMIN_USER}        admin
${ADMIN_PASSWORD}    admin_pass

*** Test Cases ***
user_accounts
[Documentation]    Validate user_accounts using the following steps
Navigate To User Management Page    nan
Validate User Management Page Is Displayed    nan
Create User Account    username|password|email
Validate User Account Creation    username
Edit User Account    username|new_email
Validate User Account Update    username|new_email
Delete User Account    username
Validate User Account Deletion    username
Search User Account    username
Validate User Account Search Results    username

*** Keywords ***
Navigate To User Management Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate User Management Page Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Create User Account
[Arguments]    username|password|email
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password|email

Validate User Account Creation
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Edit User Account
[Arguments]    username|new_email
[Return]    ${string}
[Documentation]    Keyword description
Log    username|new_email

Validate User Account Update
[Arguments]    username|new_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|new_email

Delete User Account
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate User Account Deletion
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Search User Account
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate User Account Search Results
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

","The 'user_accounts' test case is designed to validate the entire lifecycle of user accounts within a User Management system. This includes verifying all functionalities related to the creation, updating, deletion, and searching of user accounts. The goal is to ensure that the system correctly handles user data and performs the required operations without any issues.

Key components of the 'user_accounts' test case include:
"
Generate keyword-driven clientcentral_keywords for API authentication,keyword-driven,authentication,"*** Settings ***
Documentation    Validate authentication
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
authentication
[Documentation]    Validate authentication using the following steps
Create Authentication Request    username|password
Send Authentication Request    request_body
Verify Authentication Response    response
Extract Token From Response    response
Verify Token Expiry    token
Logout Request    token

*** Keywords ***
Create Authentication Request
[Arguments]    username|password
[Return]    ${request_body}
[Documentation]    Keyword description
Log    username|password

Send Authentication Request
[Arguments]    request_body
[Return]    ${response}
[Documentation]    Keyword description
Log    request_body

Verify Authentication Response
[Arguments]    response
[Return]    ${status}
[Documentation]    Keyword description
Log    response

Extract Token From Response
[Arguments]    response
[Return]    ${token}
[Documentation]    Keyword description
Log    response

Verify Token Expiry
[Arguments]    token
[Return]    ${expiry_status}
[Documentation]    Keyword description
Log    token

Logout Request
[Arguments]    token
[Return]    ${logout_response}
[Documentation]    Keyword description
Log    token
","The purpose of the test case 'authentication' is to ensure that the process of authenticating users in a system functions correctly. This involves validating that users can log in using valid credentials, receive a proper authentication token, and that the token is managed correctly throughout its lifecycle. The test case covers multiple aspects:

1. **Creation of Authentication Request:** Ensuring that the system correctly creates the request body using the provided username and password.
2. **Sending Authentication Request:** Verifying that the system sends the request to the authentication endpoint properly and handles the initial response.
3. **Authentication Response Validation:** Checking that the authentication response from the server is valid and includes necessary details such as status codes and user information.
4. **Token Extraction and Verification:** Ensuring that the token is correctly extracted from the response and its expiration time is validated accurately.
5. **Logout Process:** Confirming that the user can log out appropriately and that the token becomes invalid following the logout process.

By leveraging this structured approach, the 'authentication' test case ensures robust and reliable verification of core authentication functionalities."
Create keyword-driven clientcentral_keywords for API login,keyword-driven,login,"*** Settings ***
Documentation    Validate login
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
login
[Documentation]    Validate login using the following steps
Send Request To Login Endpoint    endpoint, username, password
Verify Login Response    response
Extract Token From Response    response
Validate Token    token
Logout User    token

*** Keywords ***
Send Request To Login Endpoint
[Arguments]    endpoint, username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    endpoint, username, password

Verify Login Response
[Arguments]    response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response

Extract Token From Response
[Arguments]    response
[Return]    ${string}
[Documentation]    Keyword description
Log    response

Validate Token
[Arguments]    token
[Return]    ${boolean}
[Documentation]    Keyword description
Log    token

Logout User
[Arguments]    token
[Return]    ${string}
[Documentation]    Keyword description
Log    token
","Below is a summary of a test case labeled 'login':
"
Validate keyword-driven shopping_cart for E-Commerce Plattform,keyword-driven,shopping_cart,"*** Settings ***
Documentation    Validate shopping_cart
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
shopping_cart
[Documentation]    Validate shopping_cart using the following steps
Add Item To Cart    item_id
Validate Item Added To Cart    item_id
Update Item Quantity In Cart    item_id, quantity
Validate Updated Quantity In Cart    item_id, expected_quantity
Remove Item From Cart    item_id
Validate Item Removed From Cart    item_id
Apply Discount Code    discount_code
Validate Discount Applied    discount_code, expected_discount

*** Keywords ***
Add Item To Cart
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id

Validate Item Added To Cart
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

Update Item Quantity In Cart
[Arguments]    item_id, quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id, quantity

Validate Updated Quantity In Cart
[Arguments]    item_id, expected_quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id, expected_quantity

Remove Item From Cart
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id

Validate Item Removed From Cart
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

Apply Discount Code
[Arguments]    discount_code
[Return]    ${string}
[Documentation]    Keyword description
Log    discount_code

Validate Discount Applied
[Arguments]    discount_code, expected_discount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    discount_code, expected_discount

","The 'shopping_cart' test case is designed to validate the functionality and reliability of the shopping cart feature within an E-Commerce platform. This test case ensures that users can manage items in their shopping cart effectively, including adding, updating, and removing items, as well as applying discount codes.

Key aspects of the test case include:"
Validate keyword-driven web for AccountsManagement corpaccounts,keyword-driven,corpaccounts,"*** Settings ***
Documentation    Validate corpaccounts
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
corpaccounts
[Documentation]    Validate corpaccounts using the following steps
Validate User Login    user_credentials
Navigate To Accounts Overview    nan
Validate Accounts List Presence    expected_accounts_list
Filter Accounts By Status    status
Validate Account Status In List    account_number|expected_status
Navigate To Account Details    account_number
Validate Account Information    account_information
Edit Account Details    account_number|new_details
Save Edited Account Details    new_details
Validate Success Message Is Displayed    nan

*** Keywords ***
Validate User Login
[Arguments]    user_credentials
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_credentials

Navigate To Accounts Overview
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Accounts List Presence
[Arguments]    expected_accounts_list
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_accounts_list

Filter Accounts By Status
[Arguments]    status
[Return]    ${integer}
[Documentation]    Keyword description
Log    status

Validate Account Status In List
[Arguments]    account_number|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number|expected_status

Navigate To Account Details
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Validate Account Information
[Arguments]    account_information
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_information

Edit Account Details
[Arguments]    account_number|new_details
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number|new_details

Save Edited Account Details
[Arguments]    new_details
[Return]    ${string}
[Documentation]    Keyword description
Log    new_details

Validate Success Message Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The 'corpaccounts' test case is designed to validate the functionalities associated with the management of corporate accounts within the system. This includes verifying user authentication, navigation, data accuracy, and the overall integrity of account management processes. Key purposes of this test case include:
"
Generate keyword-driven tests for SocialMedia API Tests,keyword-driven,socialmedia_api_tests,"*** Settings ***
Documentation    Validate Social Media API Tests
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${API_KEY}            abcdef12345
${API_SECRET}         secretkey
${USER_NAME}          testuser
${USER_PASSWORD}      password123

*** Test Cases ***
socialmedia_api_tests
[Documentation]    Validate Social Media API functionality using the following steps
Validate API Key Is Valid    ${API_KEY}, ${API_SECRET}
Get List Of User Posts    ${USER_NAME}
Create New Post           ${USER_NAME}, post_content, privacy_settings
Update Existing Post      ${USER_NAME}, post_id, updated_content
Delete Post               ${USER_NAME}, post_id
Like A Post               ${USER_NAME}, post_id
Get List Of Comments      ${USER_NAME}, post_id
Add Comment To Post       ${USER_NAME}, post_id, comment_content
Delete Comment            ${USER_NAME}, post_id, comment_id
Share A Post              ${USER_NAME}, post_id, target_user

*** Keywords ***
Validate API Key Is Valid
[Arguments]    ${API_KEY}, ${API_SECRET}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${API_KEY}, ${API_SECRET}

Get List Of User Posts
[Arguments]    ${USER_NAME}
[Return]    ${list}
[Documentation]    Keyword description
Log    ${USER_NAME}

Create New Post
[Arguments]    ${USER_NAME}, post_content, privacy_settings
[Return]    ${string}
[Documentation]    Keyword description
Log    ${USER_NAME}, post_content, privacy_settings

Update Existing Post
[Arguments]    ${USER_NAME}, post_id, updated_content
[Return]    ${string}
[Documentation]    Keyword description
Log    ${USER_NAME}, post_id, updated_content

Delete Post
[Arguments]    ${USER_NAME}, post_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${USER_NAME}, post_id

Like A Post
[Arguments]    ${USER_NAME}, post_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${USER_NAME}, post_id

Get List Of Comments
[Arguments]    ${USER_NAME}, post_id
[Return]    ${list}
[Documentation]    Keyword description
Log    ${USER_NAME}, post_id

Add Comment To Post
[Arguments]    ${USER_NAME}, post_id, comment_content
[Return]    ${string}
[Documentation]    Keyword description
Log    ${USER_NAME}, post_id, comment_content

Delete Comment
[Arguments]    ${USER_NAME}, post_id, comment_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${USER_NAME}, post_id, comment_id

Share A Post
[Arguments]    ${USER_NAME}, post_id, target_user
[Return]    ${string}
[Documentation]    Keyword description
Log    ${USER_NAME}, post_id, target_user

","The test case 'socialmedia_api_tests' is designed to verify the functionality and reliability of a Social Media API. The primary goal is to ensure that API endpoints related to user posts, comments, and interactions operate correctly. Key objectives include:
"
Verify keyword-driven mobile for PaymentGateway integrated_cardpayments,keyword-driven,integrated_cardpayments,"*** Settings ***
Documentation    Validate integrated_cardpayments
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Mobile Application
Suite Teardown   Close Mobile Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       mobileuser
${VALID_PASSWORD}   securepassword

*** Test Cases ***
integrated_cardpayments
[Documentation]    Validate integrated_cardpayments using the following steps
Initiate Card Payment    card_details
Validate Card Payment Success Message    success_message
Enter Payment Details For Card    card_number, expiry_date, cvv
Select Payment Method    method
Validate Payment Amount And Details    amount, payment_details
Click Proceed To Pay Button    nan
Validate Payment Summary Page Should Display    expected_summary
Enter User Details    user_details, address
Validate Payment Status With Transaction ID    transaction_id
Validate Payment History For The User    user_id
Validate Error Message For Invalid Card Details    invalid_details

*** Keywords ***
Initiate Card Payment
[Arguments]    card_details
[Return]    ${string}
[Documentation]    Keyword description
Log    card_details

Validate Card Payment Success Message
[Arguments]    success_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    success_message

Enter Payment Details For Card
[Arguments]    card_number, expiry_date, cvv
[Return]    ${string}
[Documentation]    Keyword description
Log    card_number, expiry_date, cvv

Select Payment Method
[Arguments]    method
[Return]    ${string}
[Documentation]    Keyword description
Log    method

Validate Payment Amount And Details
[Arguments]    amount, payment_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    amount, payment_details

Click Proceed To Pay Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment Summary Page Should Display
[Arguments]    expected_summary
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_summary

Enter User Details
[Arguments]    user_details, address
[Return]    ${string}
[Documentation]    Keyword description
Log    user_details, address

Validate Payment Status With Transaction ID
[Arguments]    transaction_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id

Validate Payment History For The User
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Validate Error Message For Invalid Card Details
[Arguments]    invalid_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invalid_details

","The test case 'integrated_cardpayments' is designed to validate the behavior and functionality of the card payment process in an integrated PaymentGateway system on a mobile application. This involves the following steps to ensure end-to-end coverage of the process:

1. **Initiating Card Payment:** Simulating a card payment initiation with all required card details and ensuring the details are correctly processed.
2. **Validating Success Messages:** Checking for the appropriate success message upon a successful card payment process.
3. **Entering Payment Details:** Accurately filling in the card payment details, including card number, expiry date, and CVV, to ensure data entry is handled correctly.
4. **Selecting Payment Methods:** Verifying that the correct payment method can be selected and processed.
5. **Payment Details Validation:** Ensuring that the payment amount and related details are correctly displayed and processed.
6. **Proceeding through Payment Flow:** Simulating clicks and user interactions needed to complete the payment process, ensuring smooth flow and proper interface response.
7. **Verification of Payment Status and History:** Ensuring that the payment status is accurately tracked and recorded, including validation against transaction IDs and user-specific payment history.
8. **Handling Errors:** Checking that appropriate error messages are displayed in case of invalid card details or other payment errors."
Validate keyword-driven usermanagement_keywords for API user_registration,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_registration
[Documentation]    Validate user registration using the following steps
Create Registration Request    registration_details
Send Registration Request    registration_payload
Validate Registration Response    registration_response
Verify User In Database    user_id
Send Welcome Email Request    user_email
Log Registration Results    registration_id, status

*** Keywords ***
Create Registration Request
[Arguments]    registration_details
[Return]    ${string}
[Documentation]    Keyword description
Log    registration_details

Send Registration Request
[Arguments]    registration_payload
[Return]    ${json}
[Documentation]    Keyword description
Log    registration_payload

Validate Registration Response
[Arguments]    registration_response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    registration_response

Verify User In Database
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Send Welcome Email Request
[Arguments]    user_email
[Return]    ${string}
[Documentation]    Keyword description
Log    user_email

Log Registration Results
[Arguments]    registration_id, status
[Return]    ${string}
[Documentation]    Keyword description
Log    registration_id, status

","The test case 'user_registration' is designed to verify the functionality and reliability of the user registration process within an application. The purpose is to ensure that new users can successfully create an account, and that their information is correctly processed and stored. Key objectives likely include:
"
Generate keyword-driven web for UserRegistration user_registration_form,keyword-driven,user_registration_form,"*** Settings ***
Documentation    Validate user_registration_form
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_registration_form
[Documentation]    Validate user_registration_form using the following steps
Fill Registration Form With Valid Data    full_name|email|password
Submit Registration Form    nan
Validate Success Message Is Displayed    success_message
Fill Registration Form With Invalid Email    full_name|invalid_email|password
Submit Registration Form    nan
Validate Error Message Is Displayed    error_message
Fill Registration Form With Empty Password    full_name|email|empty_password
Submit Registration Form    nan
Validate Password Required Error Is Displayed    error_message
Submit Registration Form Without Filling    nan
Validate Mandatory Field Errors Are Displayed    error_messages

*** Keywords ***
Fill Registration Form With Valid Data
[Arguments]    full_name|email|password
[Return]    ${string}
[Documentation]    Keyword description
Log    full_name|email|password

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Success Message Is Displayed
[Arguments]    success_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    success_message

Fill Registration Form With Invalid Email
[Arguments]    full_name|invalid_email|password
[Return]    ${string}
[Documentation]    Keyword description
Log    full_name|invalid_email|password

Validate Error Message Is Displayed
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message

Fill Registration Form With Empty Password
[Arguments]    full_name|email|empty_password
[Return]    ${string}
[Documentation]    Keyword description
Log    full_name|email|empty_password

Validate Password Required Error Is Displayed
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message

Submit Registration Form Without Filling
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Mandatory Field Errors Are Displayed
[Arguments]    error_messages
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_messages

","The 'user_registration_form' test case is designed to verify the functionality and validation of a user registration form on a web application. This test case aims to ensure that the registration process works correctly for valid inputs and appropriately handles various invalid input scenarios. Key aspects typically evaluated in this test case include:

1. **Form Submission with Valid Data:** Confirm that the form can be successfully submitted when all fields are filled with valid data, and a success message is displayed.
2. **Validation of Email Format:** Ensure that the form displays an error message when an invalid email format is entered.
3. **Password Requirements:** Check that the form requires a password and displays an appropriate error message if the password field is left empty.
4. **Mandatory Field Checks:** Verify that the form cannot be submitted when required fields are left blank, and that the appropriate mandatory field error messages are displayed."
Develop keyword-driven test case for E-Commerce checkout process,keyword-driven,"checkout_process
","*** Settings ***
Documentation    Validate checkout_process
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
checkout_process
[Documentation]    Validate checkout_process using the following steps
Add Item To Cart    item_id
View Cart Contents    nan
Proceed To Checkout    nan
Enter Shipping Address    address_details
Select Payment Method    payment_type
Review Order    nan
Confirm Order    nan

*** Keywords ***
Add Item To Cart
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Adds a specified item to the shopping cart
Log    item_id

View Cart Contents
[Arguments]    nan
[Return]    @{list}
[Documentation]    Views all items currently in the shopping cart
Log    nan

Proceed To Checkout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Proceed to the checkout page
Log    nan

Enter Shipping Address
[Arguments]    address_details
[Return]    ${string}
[Documentation]    Enters the shipping address details
Log    address_details

Select Payment Method
[Arguments]    payment_type
[Return]    ${string}
[Documentation]    Selects the preferred payment method
Log    payment_type

Review Order
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Reviews the order before confirmation
Log    nan

Confirm Order
[Arguments]    nan
[Return]    ${string}
[Documentation]    Confirms the order and places it
Log    nan

","The ""checkout_process"" test case is designed to validate the functionality and reliability of the e-commerce checkout process. The purpose of this test case includes:
"
Validate keyword-driven web for PayNOW omnicorp_transactionhistory,keyword-driven,omnicorp_transactionhistory,"*** Settings ***
Documentation    Validate omnicorp_transactionhistory
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
omnicorp_transactionhistory
[Documentation]    Validate omnicorp_transactionhistory using the following steps
Login To PayNOW And Navigate To Transaction History    account_number
Validate Transaction List Is Displayed    nan
Filter Transactions By Date Range    start_date, end_date
Validate Filtered Transactions Are Correct    expected_transaction_list
Download Transaction History Report    report_format
Validate Downloaded Report Details    expected_report_details

*** Keywords ***
Login To PayNOW And Navigate To Transaction History
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Validate Transaction List Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Filter Transactions By Date Range
[Arguments]    start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date, end_date

Validate Filtered Transactions Are Correct
[Arguments]    expected_transaction_list
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_transaction_list

Download Transaction History Report
[Arguments]    report_format
[Return]    ${string}
[Documentation]    Keyword description
Log    report_format

Validate Downloaded Report Details
[Arguments]    expected_report_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_report_details

","The test case ""omnicorp_transactionhistory"" focuses on verifying the functionality of the transaction history feature within the Omnicorp PayNOW system. The primary purpose of this test is to ensure that users can accurately view, filter, and download their transaction history, which is crucial for financial tracking and reporting.

Key objectives of the test case include:"
Create keyword-driven sterlingcooper for Orders order_status,keyword-driven,order_status,"*** Settings ***
Documentation    Validate order_status
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_status
[Documentation]    Validate order_status using the following steps
Validate Order Status Is Displayed    order_id
Filter Order By Customer    customer_id
Validate Order Details Are Correct    expected_details
Navigate To Order Details Page    order_id
Cancel Order    order_id
Validate Payment Status In Orders    payment_status
Enter Order Notes    order_id|notes_text
Add Order To Wishlist    order_id
Validate Total Order Amount    expected_amount
Process Order For Payment    order_id|payment_details
Validate Shipping Details Are Correct    expected_shipping_details
Filter With Order Date    order_date
Validate Order Summary Is Displayed    order_id
Validate Discount Applied    discount_code
Select Payment Method    payment_method
Validate Order Items Are Listed    expected_items
Validate Order History    order_id
Send Order Confirmation Email    email_address
Validate Email Notification Is Sent    email_address
Edit Order Details    order_id|new_details
Validate Order Cancellation    order_id
Save New Order    order_data
Validate Tracking Number Is Displayed    order_id
Select Order For Return    order_id
Validate Return Process Is Displayed    order_id

*** Keywords ***
Validate Order Status Is Displayed
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Filter Order By Customer
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

Validate Order Details Are Correct
[Arguments]    expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_details

Navigate To Order Details Page
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Cancel Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Payment Status In Orders
[Arguments]    payment_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_status

Enter Order Notes
[Arguments]    order_id|notes_text
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|notes_text

Add Order To Wishlist
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Total Order Amount
[Arguments]    expected_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_amount

Process Order For Payment
[Arguments]    order_id|payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|payment_details

Validate Shipping Details Are Correct
[Arguments]    expected_shipping_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_shipping_details

Filter With Order Date
[Arguments]    order_date
[Return]    ${integer}
[Documentation]    Keyword description
Log    order_date

Validate Order Summary Is Displayed
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Validate Discount Applied
[Arguments]    discount_code
[Return]    ${boolean}
[Documentation]    Keyword description
Log    discount_code

Select Payment Method
[Arguments]    payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method

Validate Order Items Are Listed
[Arguments]    expected_items
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_items

Validate Order History
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Send Order Confirmation Email
[Arguments]    email_address
[Return]    ${string}
[Documentation]    Keyword description
Log    email_address

Validate Email Notification",
Validate keyword-driven web for PayNOW omnicorp_paymenthistory,keyword-driven,omnicorp_paymenthistory,"*** Settings ***
Documentation    Validate omnicorp_paymenthistory
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
omnicorp_paymenthistory
[Documentation]    Validate omnicorp_paymenthistory using the following steps
Login To PayNOW And Navigate To PaymentHistory    account_number, login_details
Validate Payment History Details    expected_history_details
Filter Payment History By Date    start_date, end_date
Validate Filtered Payment History    expected_filtered_details
Download Payment History Report    nan
Validate Downloaded Report    expected_report_filepath
Validate Error For Empty Payment History    expected_error_message
Logout From PayNOW    nan

*** Keywords ***
Login To PayNOW And Navigate To PaymentHistory
[Arguments]    account_number|login_details
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number|login_details

Validate Payment History Details
[Arguments]    expected_history_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_history_details

Filter Payment History By Date
[Arguments]    start_date|end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date|end_date

Validate Filtered Payment History
[Arguments]    expected_filtered_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_filtered_details

Download Payment History Report
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Downloaded Report
[Arguments]    expected_report_filepath
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_report_filepath

Validate Error For Empty Payment History
[Arguments]    expected_error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_error_message

Logout From PayNOW
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The ""omnicorp_paymenthistory"" test case is designed to verify the integrity and functionality of the payment history feature within the PayNOW application developed by Omnicorp. This test case aims to ensure that users can accurately view, filter, and download their payment history records. Key objectives include:
"
Generate keyword-driven widgetsplus for Reports sales_reports,keyword-driven,sales_reports,"*** Settings ***
Documentation    Validate sales_reports
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
sales_reports
[Documentation]    Validate sales_reports using the following steps
Generate Sales Report For Last Month    start_date, end_date
Validate Sales Report Data Accuracy    sales_data
Validate Sales Report Footer Information    report_footer
Download Sales Report As CSV    nan
Validate Downloaded CSV File    file_path
Validate Sales Report Summary    unique_value, total_sales, total_revenue
Filter Sales Report By Product Category    product_category
Sort Sales Report By Revenue    sort_order
Search Sales Report By Customer Name    customer_name
Validate Sales Report Header Information    report_header
Generate Sales Report For Current Year    start_date, end_date
Send Sales Report Via Email    email_address
Validate Sales Report Graph Is Displayed    graph_data
Validate Sales Report Date Range    expected_date_range

*** Keywords ***
Generate Sales Report For Last Month
[Arguments]    start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date, end_date

Validate Sales Report Data Accuracy
[Arguments]    sales_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    sales_data

Validate Sales Report Footer Information
[Arguments]    report_footer
[Return]    ${boolean}
[Documentation]    Keyword description
Log    report_footer

Download Sales Report As CSV
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Downloaded CSV File
[Arguments]    file_path
[Return]    ${boolean}
[Documentation]    Keyword description
Log    file_path

Validate Sales Report Summary
[Arguments]    unique_value, total_sales, total_revenue
[Return]    ${boolean}
[Documentation]    Keyword description
Log    unique_value, total_sales, total_revenue

Filter Sales Report By Product Category
[Arguments]    product_category
[Return]    ${string}
[Documentation]    Keyword description
Log    product_category

Sort Sales Report By Revenue
[Arguments]    sort_order
[Return]    ${string}
[Documentation]    Keyword description
Log    sort_order

Search Sales Report By Customer Name
[Arguments]    customer_name
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_name

Validate Sales Report Header Information
[Arguments]    report_header
[Return]    ${boolean}
[Documentation]    Keyword description
Log    report_header

Generate Sales Report For Current Year
[Arguments]    start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date, end_date

Send Sales Report Via Email
[Arguments]    email_address
[Return]    ${string}
[Documentation]    Keyword description
Log    email_address

Validate Sales Report Graph Is Displayed
[Arguments]    graph_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    graph_data

Validate Sales Report Date Range
[Arguments]    expected_date_range
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_date_range

","The test case 'sales_reports' is designed to validate the functionality and accuracy of generating and managing sales reports within an application. It focuses on ensuring that all reports are generated correctly, display accurate data, and allow for various user interactions such as downloading, filtering, and sorting.

1. **Report Generation:**
- Verify that sales reports can be generated for specified date ranges, including last month and the current year.

2. **Data Accuracy:**
- Ensure that the sales data within the reports is accurate and matches expected values.

3. **User Interactions:**
- Validate that users can download reports as CSV files, filter reports by product category, sort by revenue, and search by customer name.

4. **Report Validation:**
- Check that the header, footer, and summary information in the reports are correct.
- Confirm that the downloaded CSV matches the on-screen reports.
- Verify that date ranges and graphical representations of the data are accurate"
Construct a keyword-driven test case for the Payment Processing System rental_payment_transactions,keyword-driven,rental_payment_transactions,"*** Settings ***
Documentation    Validate rental_payment_transactions
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
rental_payment_transactions
[Documentation]    Validate rental_payment_transactions using the following steps
Log In To Payment Portal    ${VALID_USER}   ${VALID_PASSWORD}
Select Rent Payment Tab    nan
Validate Rent Transaction Count And Amount    total_transactions|total_amount
Select Apartment Number    apartment_number
Validate Transaction Details Are Displayed    transaction_id
Make Payment Using Credit Card    card_details
Validate Payment Confirmation Message    confirmation_message
Navigate To Payment History    nan
Validate Payment Record Is Added    transaction_id|amount_paid
Validate Email Receipt Is Sent    email_subject
Validate Rent Payment Status In Grid    status
Log Out From Payment Portal    nan

*** Keywords ***
Log In To Payment Portal
[Arguments]    username|password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|password

Select Rent Payment Tab
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Rent Transaction Count And Amount
[Arguments]    total_transactions|total_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    total_transactions|total_amount

Select Apartment Number
[Arguments]    apartment_number
[Return]    ${string}
[Documentation]    Keyword description
Log    apartment_number

Validate Transaction Details Are Displayed
[Arguments]    transaction_id
[Return]    @{list}
[Documentation]    Keyword description
Log    transaction_id

Make Payment Using Credit Card
[Arguments]    card_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    card_details

Validate Payment Confirmation Message
[Arguments]    confirmation_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    confirmation_message

Navigate To Payment History
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment Record Is Added
[Arguments]    transaction_id|amount_paid
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id|amount_paid

Validate Email Receipt Is Sent
[Arguments]    email_subject
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email_subject

Validate Rent Payment Status In Grid
[Arguments]    status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    status

Log Out From Payment Portal
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan
",The test case 'rental_payment_transactions' is designed to validate the process of making and recording rental payments in a payment processing system.
Validate keyword-driven techcentral for User Login,keyword-driven,user_login,"*** Settings ***
Documentation    Validate user login
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_login
[Documentation]    Validate user login using the following steps
Navigate To Login Page    nan
Enter Username    username
Enter Password    password
Click Login Button    nan
Validate User Is Logged In Successfully    expected_message
Logout User    nan
Ensure Logout Is Successful    expected_message
Login With Invalid Credentials    invalid_username|invalid_password
Validate Error Message For Invalid Login    expected_error_message
Test Password Reset Functionality    email
Validate Password Reset Email Sent    expected_email_message

*** Keywords ***
Navigate To Login Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Username
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Enter Password
[Arguments]    password
[Return]    ${string}
[Documentation]    Keyword description
Log    password

Click Login Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate User Is Logged In Successfully
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Logout User
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Ensure Logout Is Successful
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Login With Invalid Credentials
[Arguments]    invalid_username|invalid_password
[Return]    ${string}
[Documentation]    Keyword description
Log    invalid_username|invalid_password

Validate Error Message For Invalid Login
[Arguments]    expected_error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_error_message

Test Password Reset Functionality
[Arguments]    email
[Return]    ${string}
[Documentation]    Keyword description
Log    email

Validate Password Reset Email Sent
[Arguments]    expected_email_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_email_message

","The 'user_login' test case is designed to validate the functionality of the user login system in an application, ensuring that it operates smoothly, securely, and as expected.

Key aspects of the test case include:

1. **Login Process Verification:**
- Checking if the login page is accessible.
- Ensuring that users can enter their credentials and log in successfully.
- Verifying that the appropriate success message is displayed upon successful login.

2. **Security Validation:**
- Testing login with invalid credentials to confirm that the system properly handles and responds to invalid login attempts.
- Ensuring that error messages are informative but not too revealing.

3. **Session Management:**
- Validating that users can log out successfully.
- Ensuring that the session is terminated upon logout.

4. **Password Reset Functionality:**
- Testing the process of initiating a password reset.
- Verifying that a password reset email is sent and contains the correct message.

This test case aims to ensure a robust, user-friendly, and secure user authentication system."
Develop keyword-driven web for PayNOW omnicorp_recurring_payments,keyword-driven,omnicorp_recurring_payments,"*** Settings ***
Documentation    Validate omnicorp_recurring_payments
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
omnicorp_recurring_payments
[Documentation]    Validate omnicorp_recurring_payments using the following steps
Navigate To Recurring Payments Tab    account_number, payment_id
Validate Recurring Payment Schedule Is Displayed    payment_id, expected_schedule
Create Recurring Payment    payment_details
Cancel Recurring Payment    payment_id
Select Recurrence Interval    interval
Validate Recurring Payment Status    account_number, payment_id, expected_status
Get Recurring Payment Id    account_number, payment_id
Send Event To Process Recurring Payment    account_number, payment_id
Validate Recurrence Interval Is Displayed    interval
Accept Terms And Conditions Alert    nan

*** Keywords ***
Navigate To Recurring Payments Tab
[Arguments]    account_number, payment_id
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number, payment_id

Validate Recurring Payment Schedule Is Displayed
[Arguments]    payment_id, expected_schedule
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_id, expected_schedule

Create Recurring Payment
[Arguments]    payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_details

Cancel Recurring Payment
[Arguments]    payment_id
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_id

Select Recurrence Interval
[Arguments]    interval
[Return]    ${string}
[Documentation]    Keyword description
Log    interval

Validate Recurring Payment Status
[Arguments]    account_number, payment_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, payment_id, expected_status

Get Recurring Payment Id
[Arguments]    account_number, payment_id
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number, payment_id

Send Event To Process Recurring Payment
[Arguments]    account_number, payment_id
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number, payment_id

Validate Recurrence Interval Is Displayed
[Arguments]    interval
[Return]    ${boolean}
[Documentation]    Keyword description
Log    interval

Accept Terms And Conditions Alert
[Arguments]    nan
[Return]    ${integer}
[Documentation]    Keyword description
Log    nan

","The test case 'omnicorp_recurring_payments' is designed to validate the functionality of recurring payment setups within the Omnicorp payment system. This involves ensuring that users can configure, manage, and execute recurring payments reliably and accurately. Key objectives of the test case include:

1. **User Interaction Verification:** Ensuring that the user interface correctly facilitates the input and setup of recurring payment details, including payment amounts, intervals, and beneficiary details.
2. **Payment Scheduling Validation:** Verifying that the system accurately records the recurring payment details and appropriately displays them in the user's payment schedules.
3. **Execution of Recurring Payments:** Confirming that the payment system processes recurring payments as per the configured schedule, including handling any modifications or cancellations effectively.
4. **Compliance and Validation:** Ensuring the system adheres to financial regulations and business rules related to recurring transactions, including proper notification and alert mechanisms."
Generate keyword-driven test case for MobileShop orders_management,keyword-driven,orders_management,"*** Settings ***
Documentation    Validate orders_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
orders_management
[Documentation]    Validate orders_management using the following steps
Login To Application    ${VALID_USER}, ${VALID_PASSWORD}
Navigate To Orders Tab    nan
Validate Orders List Is Displayed    nan
Click On Create Order Button    nan
Enter Order Details    order_details
Submit Order    nan
Validate Order Confirmation    expected_order_id
Navigate To Order Details    order_id
Validate Order Status    order_id, expected_status
Edit Order Details    order_id, new_order_details
Validate Updated Order Details    order_id, expected_order_details
Cancel Order    order_id
Validate Order Cancellation    order_id, expected_cancellation_status
Logout From Application    nan

*** Keywords ***
Login To Application
[Arguments]    ${username}, ${password}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${username}

Navigate To Orders Tab
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Orders List Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Click On Create Order Button
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Enter Order Details
[Arguments]    order_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_details

Submit Order
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order Confirmation
[Arguments]    expected_order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_order_id

Navigate To Order Details
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Validate Order Status
[Arguments]    order_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, expected_status

Edit Order Details
[Arguments]    order_id, new_order_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, new_order_details

Validate Updated Order Details
[Arguments]    order_id, expected_order_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, expected_order_details

Cancel Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Cancellation
[Arguments]    order_id, expected_cancellation_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, expected_cancellation_status

Logout From Application
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The test case 'orders_management' is designed to validate the order management system within the MobileShop application. This involves ensuring that the system allows users to create, view, edit, and cancel orders efficiently and accurately. Key objectives of the test case include:

1. **Order Creation:** Ensuring that users can successfully create new orders with complete and accurate details.
2. **Order Status Management:** Verifying that users can check the status of their orders, and that the status updates correctly reflect the current state of the order.
3. **Order Modification:** Allowing users to edit order details and confirming that the changes are correctly saved and displayed.
4. **Order Cancellation:** Ensuring that users can cancel orders and that the system confirms and accurately reflects the cancellation status."
Generate keyword-driven netbilling_keywords for API customeraccount,keyword-driven,customeraccount,"*** Settings ***
Documentation    Validate customeraccount
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
customeraccount
[Documentation]    Validate customeraccount using the following steps
Create Customer Account Request Body    customer_name|customer_email|customer_phone
Send Add Customer Account Request    customer_name|customer_email|customer_password
Get Customer Account Details    customer_email
Validate Customer Account Creation Response    response
Send Update Customer Account Request    customer_email|new_customer_name|new_customer_phone
Validate Customer Account Update Response    response
Get Customer Account Details After Update    customer_email
Delete Customer Account Request    customer_email
Validate Customer Account Deletion Response    response
Get Deleted Customer Account Details    customer_email

*** Keywords ***
Create Customer Account Request Body
[Arguments]    customer_name|customer_email|customer_phone
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_name|customer_email|customer_phone

Send Add Customer Account Request
[Arguments]    customer_name|customer_email|customer_password
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_name|customer_email|customer_password

Get Customer Account Details
[Arguments]    customer_email
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_email

Validate Customer Account Creation Response
[Arguments]    response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response

Send Update Customer Account Request
[Arguments]    customer_email|new_customer_name|new_customer_phone
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_email|new_customer_name|new_customer_phone

Validate Customer Account Update Response
[Arguments]    response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response

Get Customer Account Details After Update
[Arguments]    customer_email
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_email

Delete Customer Account Request
[Arguments]    customer_email
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_email

Validate Customer Account Deletion Response
[Arguments]    response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response

Get Deleted Customer Account Details
[Arguments]    customer_email
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_email

","The purpose of the test case 'customeraccount' is to validate the functionalities related to customer account management within a system. This involves confirming that customer accounts can be created, updated, retrieved, and deleted accurately. Key aspects covered by this test case include:
"
Generate keyword-driven web for PayNOW omnicorp_user_registration,keyword-driven,omnicorp_user_registration,"*** Settings ***
Documentation    Validate omnicorp_user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
omnicorp_user_registration
[Documentation]    Validate omnicorp_user_registration using the following steps
Navigate To User Registration Page    user_registration_url
Enter User Details For Registration    user_details
Submit Registration Form    nan
Validate Registration Success Message    expected_success_message
Validate User Exists In Database    user_email
Resend Confirmation Email    user_email
Validate Confirmation Email Received    user_email
Verify User Can Log In    user_email, user_password
Validate User Log Out    nan

*** Keywords ***
Navigate To User Registration Page
[Arguments]    user_registration_url
[Return]    ${string}
[Documentation]    Keyword description
Log    user_registration_url

Enter User Details For Registration
[Arguments]    user_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_details

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Registration Success Message
[Arguments]    expected_success_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_success_message

Validate User Exists In Database
[Arguments]    user_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_email

Resend Confirmation Email
[Arguments]    user_email
[Return]    ${string}
[Documentation]    Keyword description
Log    user_email

Validate Confirmation Email Received
[Arguments]    user_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_email

Verify User Can Log In
[Arguments]    user_email, user_password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_email, user_password

Validate User Log Out
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The test case 'omnicorp_user_registration' is designed to validate the functional accuracy and robustness of the user registration feature for Omnicorp users. The primary objective is to ensure that new users can create accounts seamlessly and are able to complete the registration process.

Key objectives of the test case include:"
Validate keyword-driven payment_gateway for API CardPayments,keyword-driven,CardPayments,"*** Settings ***
Documentation    Validate CardPayments
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
CardPayments
[Documentation]    Validate CardPayments using the following steps
Send API Request For Card Payment    card_details, payment_amount
Validate Payment Response    response_code, expected_status
Send API Request For Payment History    user_id
Validate Payment History Response    history_response_code, expected_history
Verify Payment Status For Specific Transaction    transaction_id, expected_transaction_status
Trigger Refund For Payment    transaction_id, refund_amount
Validate Refund Status    refund_response_code, expected_refund_status

*** Keywords ***
Send API Request For Card Payment
[Arguments]    card_details, payment_amount
[Return]    ${response}
[Documentation]    Keyword description
Log    card_details, payment_amount

Validate Payment Response
[Arguments]    response_code, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response_code, expected_status

Send API Request For Payment History
[Arguments]    user_id
[Return]    ${response}
[Documentation]    Keyword description
Log    user_id

Validate Payment History Response
[Arguments]    history_response_code, expected_history
[Return]    ${boolean}
[Documentation]    Keyword description
Log    history_response_code, expected_history

Verify Payment Status For Specific Transaction
[Arguments]    transaction_id, expected_transaction_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, expected_transaction_status

Trigger Refund For Payment
[Arguments]    transaction_id, refund_amount
[Return]    ${response}
[Documentation]    Keyword description
Log    transaction_id, refund_amount

Validate Refund Status
[Arguments]    refund_response_code, expected_refund_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    refund_response_code, expected_refund_status

","The test case 'CardPayments' is designed to validate the functionalities and reliability of the card payment process within the payment gateway system. This encompasses multiple aspects including:
"
Develop keyword-driven paynow_keywords for User account_creation,keyword-driven,account_creation,"*** Settings ***
Documentation    Validate account_creation
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       newuser
${VALID_PASSWORD}   newpassword1234

*** Test Cases ***
account_creation
[Documentation]    Validate account_creation using the following steps
Fill Registration Form    first_name, last_name, email, password
Submit Registration Form    nan
Validate Registration Success Message    success_message
Validate New User Is Created In Database    email, user_id
Attempt Duplicate Registration    email, expected_error_msg
Validate Duplicate Registration Error Message    expected_error_msg
Login With New Credentials    email, password
Validate User Dashboard Is Accessible    user_id
Logout User    nan

*** Keywords ***
Fill Registration Form
[Arguments]    first_name, last_name, email, password
[Return]    ${string}
[Documentation]    Keyword description
Log    first_name, last_name, email, password

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Registration Success Message
[Arguments]    success_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    success_message

Validate New User Is Created In Database
[Arguments]    email, user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email, user_id

Attempt Duplicate Registration
[Arguments]    email, expected_error_msg
[Return]    ${string}
[Documentation]    Keyword description
Log    email, expected_error_msg

Validate Duplicate Registration Error Message
[Arguments]    expected_error_msg
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_error_msg

Login With New Credentials
[Arguments]    email, password
[Return]    ${string}
[Documentation]    Keyword description
Log    email, password

Validate User Dashboard Is Accessible
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Logout User
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The ""account_creation"" test case is designed to validate the process of creating a new user account within a system. This test ensures that the user registration functionality works correctly and that new accounts are handled appropriately. Key areas of focus include:
"
Create keyword-driven web for customer_profile management,keyword-driven,customer_profile,"*** Settings ***
Documentation    Validate customer_profile management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
customer_profile
[Documentation]    Validate customer_profile management using the following steps
Navigate To Customer Profile Page    account_number
Create New Customer Profile    customer_details
Validate Customer Profile Creation    account_number, expected_profile_details
Update Customer Profile Information    account_number, updated_details
Validate Customer Profile Update    account_number, expected_profile_details
Delete Customer Profile    account_number
Validate Customer Profile Deletion    account_number

*** Keywords ***
Navigate To Customer Profile Page
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Create New Customer Profile
[Arguments]    customer_details
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_details

Validate Customer Profile Creation
[Arguments]    account_number, expected_profile_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, expected_profile_details

Update Customer Profile Information
[Arguments]    account_number, updated_details
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number, updated_details

Validate Customer Profile Update
[Arguments]    account_number, expected_profile_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, expected_profile_details

Delete Customer Profile
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Validate Customer Profile Deletion
[Arguments]    account_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number
","The 'customer_profile' test case is designed to ensure that the system's customer profile management functionalities are working as intended. This verification process includes several key components:
"
Build keyword-driven web automated_login for Web login,keyword-driven,"automated_login
","*** Settings ***
Documentation    Validate automated_login
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
automated_login
[Documentation]    Validate automated_login using the following steps
Open Login Page    url
Enter Username    username
Enter Password    password
Click Login Button    nan
Validate User Is Logged In    username
Log Out User    nan
Validate User Is Logged Out    nan
Enter Invalid Username    invalid_username
Enter Password    password
Click Login Button    nan
Validate Error Message For Invalid Username Is Displayed    error_message
Enter Username    username
Enter Invalid Password    invalid_password
Click Login Button    nan
Validate Error Message For Invalid Password Is Displayed    error_message
Enter Empty Username    nan
Enter Password    password
Click Login Button    nan
Validate Error Message For Empty Username Is Displayed    error_message
Enter Username    username
Enter Empty Password    nan
Click Login Button    nan
Validate Error Message For Empty Password Is Displayed    error_message
Enter Empty Username And Password    nan
Click Login Button    nan
Validate Error Message For Empty Username And Password Is Displayed    error_message

*** Keywords ***
Open Login Page
[Arguments]    url
[Return]    ${string}
[Documentation]    Keyword description
Log    url

Enter Username
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Enter Password
[Arguments]    password
[Return]    ${string}
[Documentation]    Keyword description
Log    password

Click Login Button
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate User Is Logged In
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Log Out User
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate User Is Logged Out
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Enter Invalid Username
[Arguments]    invalid_username
[Return]    ${string}
[Documentation]    Keyword description
Log    invalid_username

Validate Error Message For Invalid Username Is Displayed
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message

Enter Invalid Password
[Arguments]    invalid_password
[Return]    ${string}
[Documentation]    Keyword description
Log    invalid_password

Validate Error Message For Invalid Password Is Displayed
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message

Enter Empty Username
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Error Message For Empty Username Is Displayed
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message

Enter Empty Password
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Error Message For Empty Password Is Displayed
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message

Enter Empty Username And Password
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Error Message For Empty Username And Password Is Displayed
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message
","The ""automated_login"" test case is designed to validate the functionality and robustness of the login system within a web application. The primary objectives of this test case are:
"
Create keyword-driven mobile for BankingApp transaction,keyword-driven,transaction,"*** Settings ***
Documentation    Validate transaction
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Launch Mobile Application
Suite Teardown   Close Mobile Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
transaction
[Documentation]    Validate transaction using the following steps
Login To BankingApp    username, password
Navigate To Transactions Page    nan
Validate Transactions List Is Displayed    expected_transactions
Filter Transactions By Date    start_date, end_date
Validate Filtered Transactions    expected_filtered_transactions
Export Transactions List    format
Validate Exported Transactions    exported_file
Logout From BankingApp    nan

*** Keywords ***
Login To BankingApp
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Navigate To Transactions Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Transactions List Is Displayed
[Arguments]    expected_transactions
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_transactions

Filter Transactions By Date
[Arguments]    start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date, end_date

Validate Filtered Transactions
[Arguments]    expected_filtered_transactions
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_filtered_transactions

Export Transactions List
[Arguments]    format
[Return]    ${string}
[Documentation]    Keyword description
Log    format

Validate Exported Transactions
[Arguments]    exported_file
[Return]    ${boolean}
[Documentation]    Keyword description
Log    exported_file

Logout From BankingApp
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'transaction' test case for a mobile banking application focuses on verifying the proper functionality of transaction-related features. This test case ensures that users can view, filter, and export their transaction history without errors.

Key aspects of the test case include:
"
Generate keyword-driven web for ECommerce_System product_checkout,keyword-driven,product_checkout,"*** Settings ***
Documentation    Validate product_checkout
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       shopper
${VALID_PASSWORD}   password123

*** Test Cases ***
product_checkout
[Documentation]    Validate product_checkout using the following steps
Login To ECommerce System    username|password
Search For Product    product_name
Add Product To Cart    product_id
Verify Product In Cart    product_name
Proceed To Checkout    nan
Enter Shipping Details    shipping_info
Enter Payment Details    payment_info
Confirm Order    nan
Validate Order Confirmation    expected_order_details
Logout From ECommerce System    nan

*** Keywords ***
Login To ECommerce System
[Arguments]    username|password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password

Search For Product
[Arguments]    product_name
[Return]    ${string}
[Documentation]    Keyword description
Log    product_name

Add Product To Cart
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Verify Product In Cart
[Arguments]    product_name
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_name

Proceed To Checkout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Shipping Details
[Arguments]    shipping_info
[Return]    ${string}
[Documentation]    Keyword description
Log    shipping_info

Enter Payment Details
[Arguments]    payment_info
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_info

Confirm Order
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order Confirmation
[Arguments]    expected_order_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_order_details

Logout From ECommerce System
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'product_checkout' is designed to thoroughly verify the checkout process within an e-commerce platform. Key objectives include:
"
Create keyword-driven web for MyApp user_profile,keyword-driven,user_profile,"*** Settings ***
Documentation    Validate user_profile
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_profile
[Documentation]    Validate user_profile using the following steps
Login To Application    username, password
Access UserProfile Page    user_id
Validate Profile Information    expected_profile_data
Update Profile Information    new_profile_data
Logout From Application    nan

*** Keywords ***
Login To Application
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Access UserProfile Page
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate Profile Information
[Arguments]    expected_profile_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_profile_data

Update Profile Information
[Arguments]    new_profile_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    new_profile_data

Logout From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The purpose of the test case 'user_profile' is to verify the correct functionality of the user profile management feature in a web application. This feature allows users to view and update their personal information such as name, email, and address. The test case checks several aspects to ensure the feature works as intended, including:

1. **Login:** Ensuring that a user can log in with valid credentials to access the application.
2. **Profile Access:** Confirming that users can navigate to their profile page and access their personal information.
3. **Information Validation:** Verifying that the displayed profile information matches the expected data.
4. **Profile Update:** Ensuring that users can successfully update their profile information and that changes are saved correctly.
5. **Logout:** Checking that users can log out from the application securely."
Create keyword-driven sterlingcooper for Payments successful_payment,keyword-driven,successful_payment,"*** Settings ***
Documentation    Validate successful_payment
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
successful_payment
[Documentation]    Validate successful payment using the following steps
Login To PayNOW With Valid Credentials    user_credentials
Select Payment Option Through PayNOW    payment_option
Enter Payment Details    payment_details
Validate Payment Submission    expected_confirmation_message
Validate Payment Status    transaction_id|expected_status
Generate Payment Receipt    transaction_id
Validate Payment Receipt Is Generated    expected_receipt_details

*** Keywords ***
Login To PayNOW With Valid Credentials
[Arguments]    user_credentials
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_credentials

Select Payment Option Through PayNOW
[Arguments]    payment_option
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_option

Enter Payment Details
[Arguments]    payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_details

Validate Payment Submission
[Arguments]    expected_confirmation_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_confirmation_message

Validate Payment Status
[Arguments]    transaction_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id|expected_status

Generate Payment Receipt
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Validate Payment Receipt Is Generated
[Arguments]    expected_receipt_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_receipt_details

","The test case 'successful_payment' is designed to verify the system’s capabilities to process and validate a successful payment transaction. The primary objective is to ensure that payments are executed correctly, and all related activities, from entering payment details to generating payment receipts, are functioning as expected.

### Purpose of the ""successful_payment"" Test Case

1. **Payment Processing**:
- Ensure that the application processes various types of payment methods accurately.
- Validate that all required payment information is correctly captured and submitted.

2. **Confirmation and Status**:
- Verify the correctness of confirmation messages to the user after payment submission.
- Confirm that the payment status is accurately updated and reflected in the system.

3. **Receipt Generation**:
- Check that payment receipts are correctly generated and contain all necessary details.
- Ensure the receipts are stored or provided to users as expected.

Key tests in this case include logging into the payment system, selecting payment options, providing payment details, and verifying confirmation messages and receipt generation."
Create keyword-driven test case for MyApp user_authentication,keyword-driven,user_authentication,"*** Settings ***
Documentation    Validate user_authentication
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_authentication
[Documentation]    Validate user_authentication using the following steps
Enter Username And Password    username|password
Click Login Button    nan
Validate Login Success    expected_message
Logout User    nan
Enter Invalid Username    invalid_username
Enter Invalid Password    invalid_password
Click Login Button    nan
Validate Authentication Failure    expected_error
Reset Password    username|new_password
Validate Password Reset Success    expected_message
Enter New Username And Password    new_username|new_password
Click Login Button    nan
Validate Login Success    expected_message

*** Keywords ***
Enter Username And Password
[Arguments]    username|password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password

Click Login Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Login Success
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Logout User
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Invalid Username
[Arguments]    invalid_username
[Return]    ${string}
[Documentation]    Keyword description
Log    invalid_username

Enter Invalid Password
[Arguments]    invalid_password
[Return]    ${string}
[Documentation]    Keyword description
Log    invalid_password

Validate Authentication Failure
[Arguments]    expected_error
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_error

Reset Password
[Arguments]    username|new_password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|new_password

Validate Password Reset Success
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Enter New Username And Password
[Arguments]    new_username|new_password
[Return]    ${string}
[Documentation]    Keyword description
Log    new_username|new_password

","The purpose of the test case 'user_authentication' is to verify that the authentication functionality within a system operates as intended. This involves ensuring that all steps of the authentication process are executed correctly and that users receive appropriate feedback throughout the authentication process.

Key aspects that the 'user_authentication' test case might cover include:

1. **Validation of Login Input Information:** Checking that all required login details (such as username and password) are entered correctly and validated adequately without errors.

2. **Authentication Success and Failure Handling:** Ensuring the system displays the correct messages for both successful and unsuccessful login attempts.

3. **Password Reset Functionality:** Verifying that the users can reset their passwords successfully and use the new credentials to log in.

4. **Logout Process:** Confirming that the logout functionality works correctly and the user session is terminated as expected."
Validate keyword-driven ecommerce_keywords for Order Processing,keyword-driven,order_processing,"*** Settings ***
Documentation    Validate order_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_processing
[Documentation]    Validate order_processing using the following steps
Add Item To Cart    item_id, quantity
Verify Item Added To Cart    item_id
Proceed To Checkout    nan
Enter Shipping Information    shipping_address
Select Payment Method    payment_method
Complete Order    nan
Verify Order Confirmation    order_id, expected_status

*** Keywords ***
Add Item To Cart
[Arguments]    item_id, quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id, quantity

Verify Item Added To Cart
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

Proceed To Checkout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Shipping Information
[Arguments]    shipping_address
[Return]    ${string}
[Documentation]    Keyword description
Log    shipping_address

Select Payment Method
[Arguments]    payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method

Complete Order
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Verify Order Confirmation
[Arguments]    order_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, expected_status

","The test case 'order_processing' is designed to validate the entire order processing workflow in an e-commerce application. This involves ensuring that items can be added to the cart, checkout can be completed smoothly, and the order is processed and confirmed correctly.

Key objectives of the test case include:
1. **Item Addition to Cart:** Verifying that users can successfully add items to their shopping cart and that the cart reflects these additions accurately.
2. **Checkout Process:** Ensuring that users can navigate the checkout process, including entering shipping information and selecting payment methods without issues.
3. **Order Completion:** Confirming that the order can be completed and that users receive the correct order confirmation with details regarding their purchase."
Create keyword-driven subscription_test for CMS manage_subscriptions,keyword-driven,manage_subscriptions,"*** Settings ***
Documentation    Validate manage_subscriptions
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       cmsuser
${VALID_PASSWORD}   cmssecret

*** Test Cases ***
manage_subscriptions
[Documentation]    Validate manage_subscriptions using the following steps
Navigate To Subscription Management    user_id
Validate Subscription List Is Displayed    user_id, expected_subscription_list
Add New Subscription    user_id, subscription_type
Cancel Subscription    user_id, subscription_id
Update Subscription Details    user_id, subscription_id, new_details
Validate Subscription Status    user_id, subscription_id, expected_status
Fetch Subscription Details    user_id, subscription_id
Send Notification For Subscription Update    user_id, subscription_id
Validate Subscription Update Notification Is Sent    user_id, expected_notification
Accept Terms And Conditions    user_id, agreement_id

*** Keywords ***
Navigate To Subscription Management
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate Subscription List Is Displayed
[Arguments]    user_id, expected_subscription_list
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id, expected_subscription_list

Add New Subscription
[Arguments]    user_id, subscription_type
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, subscription_type

Cancel Subscription
[Arguments]    user_id, subscription_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, subscription_id

Update Subscription Details
[Arguments]    user_id, subscription_id, new_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, subscription_id, new_details

Validate Subscription Status
[Arguments]    user_id, subscription_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id, subscription_id, expected_status

Fetch Subscription Details
[Arguments]    user_id, subscription_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, subscription_id

Send Notification For Subscription Update
[Arguments]    user_id, subscription_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, subscription_id

Validate Subscription Update Notification Is Sent
[Arguments]    user_id, expected_notification
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id, expected_notification

Accept Terms And Conditions
[Arguments]    user_id, agreement_id
[Return]    ${integer}
[Documentation]    Keyword description
Log    user_id, agreement_id

","The test case 'manage_subscriptions' is designed to validate the subscription management functionalities of a CMS (Content Management System). This involves ensuring that users can successfully manage their subscriptions, including adding, updating, and canceling subscriptions. It also checks for accurate status updates and proper notification handling.

Key objectives of the test case include:
1. **User Interaction Verification:** Verifying that the user interface correctly facilitates the management of subscription details.
2. **Subscription Management Validation:** Ensuring that the system accurately handles the creation, modification, and cancellation of subscriptions and reflects these actions correctly in the user interface.
3. **Notification Handling:** Confirming that notifications related to subscription updates are sent and displayed correctly to the user."
Generate keyword-driven bankpro_keywords for API updateaccountdetails,keyword-driven,updateaccountdetails,"*** Settings ***
Documentation    Validate updateaccountdetails
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
updateaccountdetails
[Documentation]    Validate updateaccountdetails using the following steps
Send Request To Get Account Details    account_id
Validate Account Details Response    response
Update Account Information    account_id|update_fields
Confirm Account Update Success    response
Get Updated Account Details    account_id
Validate Updated Account Information    updated_response

*** Keywords ***
Send Request To Get Account Details
[Arguments]    account_id
[Return]    ${string}
[Documentation]    Keyword description
Log    account_id

Validate Account Details Response
[Arguments]    response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response

Update Account Information
[Arguments]    account_id|update_fields
[Return]    ${string}
[Documentation]    Keyword description
Log    account_id|update_fields

Confirm Account Update Success
[Arguments]    response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response

Get Updated Account Details
[Arguments]    account_id
[Return]    ${string}
[Documentation]    Keyword description
Log    account_id

Validate Updated Account Information
[Arguments]    updated_response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    updated_response

","The purpose of the test case 'updateaccountdetails' is to verify the functionality of updating account details in a banking system. This involves ensuring that account details are correctly retrieved, updated, and validated before and after the changes. Key aspects covered in this test case include:

1. **Retrieval of Account Information:** Ensuring that the system can successfully retrieve detailed account information before any updates are made.
2. **Update Mechanism:** Verifying that the system correctly processes the update request, making the necessary changes to the account details as specified.
3. **Validation of Updates:** Confirming that the updated account information is accurate and reflects the changes made, validating both the response from the update request and the subsequent retrieval of account details.

The test case flow includes steps to retrieve current account details, update the information, confirm the update, and validate the updated account details."
Validate keyword-driven clientcentral_openclients for Web clientcentral,keyword-driven,clientcentral_openclients,"*** Settings ***
Documentation    Validate clientcentral_openclients
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
clientcentral_openclients
[Documentation]    Validate clientcentral_openclients using the following steps
Select Client Type    client_type
Navigate To Client Details Page    nan
Enter Client Information    client_info
Process Client Registration    nan
Validate Client Type And Total Clients    expected_client_type, expected_total_clients
Enter Additional Details    additional_info
Validate Client Authorization Is Unchecked By Default    nan
Click On Close Button    nan
Signout From Client Information Page    nan
Navigate To Support Page For More Information    nan
Validate Additional Fees Are Displayed    nan
Validate Total Charges Under Summary Of Clients    expected_charges
Validate Registration Screen Is Closed    nan
Validate Client Referral Page Is Visible    nan
Validate Details In Generated Client Report    client_type, account_number, client_method, total_clients
Validate Fees Percentage Should Be Equal    exp_percentage
Validate Checkboxes Are Unchecked By Default    nan
Add Reason For Discrepancies    report, reason
Validate Errors After Processing Client Registration    error_message
Enter Zip Code    zip_code
Wait Till Loading Text Is Invisible    nan
Validate Client Report Is Received In Email    transaction_id
Get Transaction ID    nan
Validate Help Popover Is Displayed    nan
Generate Random Client Details    nan
Select Specific Client And Enter Amount    client_number, amount
Select Account Type In Client Registration    account_type
Validate Email Receipt Is Checked By Default    nan
Navigate To Client Authorization And Validate Title    nan
Enter Lumpsum Amount    amount
Validate Client Type And Account Number    expected_client_type, expected_account_number
Select State    state
Enter Payment Card Details    card_number, expiration_date, cvv_number
Validate Terms Conditions And Privacy Policy Page Is Closed    nan
Validate Future Client Registrations In Scheduled Client Page    future_date
Select Client Registration Type    registration_type
Process Client Registration Payment    nan
Navigate To Terms Conditions And Privacy Policy Page    nan
Validate Terms Conditions And Privacy Policy Page Is Displayed    nan
Validate Client Report Is Generated    nan
Enter ACH Details    account_number, routing_number

*** Keywords ***
Select Client Type
[Arguments]    client_type
[Return]    ${string}
[Documentation]    Keyword description
Log    client_type

Navigate To Client Details Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Client Information
[Arguments]    client_info
[Return]    ${string}
[Documentation]    Keyword description
Log    client_info

Process Client Registration
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Client Type And Total Clients
[Arguments]    expected_client_type, expected_total_clients
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_client_type, expected_total_clients

Enter Additional Details
[Arguments]    additional_info
[Return]    ${string}
[Documentation]    Keyword description
Log    additional_info

Validate Client Authorization Is Unchecked By Default
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Click On Close Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Signout From Client Information Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Navigate To Support Page For More Information
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Additional Fees Are Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Total Charges Under Summary Of Clients
[Arguments]    expected_charges
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_charges

Validate Registration Screen Is Closed",
Generate keyword-driven test case for PaymentProcessing transactions,keyword-driven,transactions,"*** Settings ***
Documentation    Validate transactions
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Payment Processing Application
Suite Teardown   Close Payment Processing Application
Resource         payment_resource_file.robot

*** Variables ***
${VALID_USER}       validuser
${VALID_PASSWORD}   securepassword

*** Test Cases ***
transactions
[Documentation]    Validate transactions using the following steps
Login To Payment Processing Application    ${VALID_USER}|${VALID_PASSWORD}
Navigate To Transactions Page    transaction_page
Validate Transaction Summary Is Displayed    account_number|transaction_id
Filter Transactions By Date Range    start_date|end_date
Validate Filtered Transactions Are Displayed    start_date|end_date
Initiate New Transaction    account_number|amount|transaction_type
Cancel Pending Transaction    transaction_id
Confirm Final Transaction    transaction_id|expected_confirmation
Validate Completion Status    transaction_id|expected_status
Send Transaction Receipt    account_number|email
Validate Receipt Email Sent    email|transaction_id
Get Transaction Identifier    account_number|expected_identifier
Update Transaction Details    transaction_id|details
Validate Updated Transaction Is Displayed    transaction_id|expected_details
Accept Terms For Large Transactions    nan

*** Keywords ***
Login To Payment Processing Application
[Arguments]    ${user}|${password}
[Return]    ${boolean}
[Documentation]    Logs in to the Payment Processing application with given credentials
Log    ${user}|${password}

Navigate To Transactions Page
[Arguments]    transaction_page
[Return]    ${string}
[Documentation]    Navigates to the Transactions page
Log    transaction_page

Validate Transaction Summary Is Displayed
[Arguments]    account_number|transaction_id
[Return]    ${boolean}
[Documentation]    Validates that the transaction summary is displayed correctly
Log    account_number|transaction_id

Filter Transactions By Date Range
[Arguments]    start_date|end_date
[Return]    ${string}
[Documentation]    Filters transactions based on the given date range
Log    start_date|end_date

Validate Filtered Transactions Are Displayed
[Arguments]    start_date|end_date
[Return]    ${boolean}
[Documentation]    Validates that the filtered transactions are displayed
Log    start_date|end_date

Initiate New Transaction
[Arguments]    account_number|amount|transaction_type
[Return]    ${string}
[Documentation]    Initiates a new transaction with the specified details
Log    account_number|amount|transaction_type

Cancel Pending Transaction
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Cancels a pending transaction
Log    transaction_id

Confirm Final Transaction
[Arguments]    transaction_id|expected_confirmation
[Return]    ${boolean}
[Documentation]    Confirms a transaction with the expected result
Log    transaction_id|expected_confirmation

Validate Completion Status
[Arguments]    transaction_id|expected_status
[Return]    ${boolean}
[Documentation]    Validates the completion status of a transaction
Log    transaction_id|expected_status

Send Transaction Receipt
[Arguments]    account_number|email
[Return]    ${string}
[Documentation]    Sends a receipt for the transaction to the specified email
Log    account_number|email

Validate Receipt Email Sent
[Arguments]    email|transaction_id
[Return]    ${boolean}
[Documentation]    Validates that the transaction receipt email has been sent
Log    email|transaction_id

Get Transaction Identifier
[Arguments]    account_number|expected_identifier
[Return]    ${string}
[Documentation]    Retrieves the transaction identifier
Log    account_number|expected_identifier

Update Transaction Details
[Arguments]    transaction_id|details
[Return]    ${string}
[Documentation]    Updates the specified transaction details
Log    transaction_id|details

Validate Updated Transaction Is Displayed
[Arguments]    transaction_id|expected_details
[Return]    ${boolean}
[Documentation]    Validates that the updated transaction details are correctly displayed
Log    transaction_id|expected_details

Accept Terms For Large Transactions
[Arguments]    nan
[Return]    ${string}
[Documentation]    Accepts terms for large transactions
Log    nan

",The test case 'transactions' is designed to validate the functionality and reliability of the transaction processing feature within the Payment Processing application. It aims to ensure
Create keyword-driven ecommerce_keywords for Shopping Cart shoppingcart,keyword-driven,shoppingcart,"*** Settings ***
Documentation    Validate shoppingcart
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
shoppingcart
[Documentation]    Validate shoppingcart using the following steps
Add Item To Cart    item_id, quantity
Remove Item From Cart    item_id
Update Item Quantity In Cart    item_id, new_quantity
Validate Item Details In Cart    item_id, expected_details
Navigate To Checkout    nan
Apply Discount Code    discount_code
Validate Discount Is Applied    expected_discount
Proceed To Payment    payment_method
Validate Payment Method Selection    expected_payment_method
Validate Total Price Calculation    expected_total
Enter Shipping Address    address_details
Validate Order Summary    expected_summary_details
Submit Order    nan
Validate Order Confirmation    expected_confirmation_message
Signout From Shopping Cart Page    nan
Navigate To Order History    nan
Validate Order Details In History    order_id, expected_order_details
Add Multiple Items To Cart    items_list

*** Keywords ***
Add Item To Cart
[Arguments]    item_id, quantity
[Return]    ${string}
[Documentation]    Add an item to the shopping cart
Log    item_id, quantity

Remove Item From Cart
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Remove an item from the shopping cart
Log    item_id

Update Item Quantity In Cart
[Arguments]    item_id, new_quantity
[Return]    ${string}
[Documentation]    Update the quantity of an item in the cart
Log    item_id, new_quantity

Validate Item Details In Cart
[Arguments]    item_id, expected_details
[Return]    ${boolean}
[Documentation]    Validate details of an item in the cart
Log    item_id, expected_details

Navigate To Checkout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Navigate to the checkout page
Log    nan

Apply Discount Code
[Arguments]    discount_code
[Return]    ${string}
[Documentation]    Apply a discount code to the cart
Log    discount_code

Validate Discount Is Applied
[Arguments]    expected_discount
[Return]    ${boolean}
[Documentation]    Validate that the discount has been applied correctly
Log    expected_discount

Proceed To Payment
[Arguments]    payment_method
[Return]    ${string}
[Documentation]    Proceed to the payment section
Log    payment_method

Validate Payment Method Selection
[Arguments]    expected_payment_method
[Return]    ${boolean}
[Documentation]    Validate the selected payment method
Log    expected_payment_method

Validate Total Price Calculation
[Arguments]    expected_total
[Return]    ${boolean}
[Documentation]    Ensure the total price is calculated correctly
Log    expected_total

Enter Shipping Address
[Arguments]    address_details
[Return]    ${string}
[Documentation]    Enter the shipping address for the order
Log    address_details

Validate Order Summary
[Arguments]    expected_summary_details
[Return]    ${boolean}
[Documentation]    Validate the order summary before submission
Log    expected_summary_details

Submit Order
[Arguments]    nan
[Return]    ${string}
[Documentation]    Submit the final order
Log    nan

Validate Order Confirmation
[Arguments]    expected_confirmation_message
[Return]    ${boolean}
[Documentation]    Validate the order confirmation message
Log    expected_confirmation_message

Signout From Shopping Cart Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Sign out from the shopping cart page
Log    nan

Navigate To Order History
[Arguments]    nan
[Return]    ${string}
[Documentation]    Navigate to the order history page
Log    nan

Validate Order Details In History
[Arguments]    order_id, expected_order_details
[Return]    ${boolean}
[Documentation]    Validate the details of an order in the history
Log    order_id, expected_order_details

Add Multiple Items To Cart
[Arguments]    items_list
[Return]    ${string}
[Documentation]    Add multiple items to the shopping cart
Log    items_list

",The
Validate keyword-driven web for CommonKeywordsForAllMerchants user_registration,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       newuser
${VALID_PASSWORD}   newpassword

*** Test Cases ***
user_registration
[Documentation]    Validate user registration using the following steps
Navigate To Registration Page    nan
Fill In User Details    username, password, email_address
Submit Registration Form    nan
Validate Registration Confirmation Page Is Displayed    confirmation_message
Validate Welcome Email Is Sent    email_address
Validate Username Already Exists Error    username

*** Keywords ***
Navigate To Registration Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Fill In User Details
[Arguments]    username, password, email_address
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password, email_address

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Registration Confirmation Page Is Displayed
[Arguments]    confirmation_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    confirmation_message

Validate Welcome Email Is Sent
[Arguments]    email_address
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email_address

Validate Username Already Exists Error
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

","The 'user_registration' test case ensures that the user registration process functions correctly by validating the creation of new user accounts, handling errors such as duplicate usernames, and sending confirmation or welcome emails. This test case typically includes the following key aspects:

1. **Navigating to Registration Page:**
- Confirm that users can access the registration page from the appropriate entry point.

2. **Filling in User Details:**
- Ensure that all necessary fields such as username, password, and email address are entered correctly.

3. **Submitting Registration Form:**
- Verify the form submission process works without any errors.

4. **Validation of Registration Confirmation:**
- Check that the confirmation page is displayed after successful registration.
- Validate that a confirmation or welcome email is sent to the new user's email address.

5. **Handling Duplicate Usernames:**
- Ensure that an appropriate error message is displayed if a user attempts to register with an already existing username."
Validate keyword-driven charlesagency for CustomerProfileManagement customer_profile,keyword-driven,customer_profile,"*** Settings ***
Documentation    Validate customer_profile
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
customer_profile
[Documentation]    Validate customer_profile using the following steps
Search Customer By ID    customer_id
Validate Customer Details    customer_id|expected_name|expected_email
Update Customer Email    customer_id|new_email
Validate Email Update Success    customer_id|new_email
Add New Address To Customer Profile    customer_id|address
Validate New Address Is Added    customer_id|expected_address
Update Customer Phone Number    customer_id|new_phone_number
Validate Phone Number Update Success    customer_id|new_phone_number

*** Keywords ***
Search Customer By ID
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

Validate Customer Details
[Arguments]    customer_id|expected_name|expected_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id|expected_name|expected_email

Update Customer Email
[Arguments]    customer_id|new_email
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id|new_email

Validate Email Update Success
[Arguments]    customer_id|new_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id|new_email

Add New Address To Customer Profile
[Arguments]    customer_id|address
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id|address

Validate New Address Is Added
[Arguments]    customer_id|expected_address
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id|expected_address

Update Customer Phone Number
[Arguments]    customer_id|new_phone_number
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id|new_phone_number

Validate Phone Number Update Success
[Arguments]    customer_id|new_phone_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id|new_phone_number

","The 'customer_profile' test case evaluates the management functionalities related to customer profiles within a system. This involves searching, validating, updating, and adding customer details, ensuring that all operations are executed correctly and modifications are applied successfully.

Key aspects covered in the 'customer_profile' test case include:

1. **Customer Retrieval and Validation:** Ensuring the system accurately fetches customer details based on a given customer ID and validates the correctness of these details.
2. **Data Modification:** Testing the system's ability to update certain customer profile attributes, such as email, phone number, and address, and confirming that these updates are reflected correctly in the system.
3. **Profile Integrity:** Ensuring that added or modified details do not corrupt existing customer profile information and maintain the integrity and consistency of the customer database."
Validate keyword-driven web for PayNOW condo_fee_invoices,keyword-driven,condo_fee_invoices,"*** Settings ***
Documentation    Validate condo_fee_invoices
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
condo_fee_invoices
[Documentation]    Validate condo_fee_invoices using the following steps
Validate Invoice Creation    invoice_details
Validate Payment Submission    payment_info
Validate Error For Partial Payment    partial_payment_info
Enter Invoice Details    invoice_info
Validate Invoice Deletion    invoice_number
Validate Invoice Update    invoice_update_info
Validate Payment Receipt    payment_receipt_info
Check Invoice Status    invoice_status
Validate Overdue Invoice Handling    overdue_invoice_details

*** Keywords ***
Validate Invoice Creation
[Arguments]    invoice_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_details

Validate Payment Submission
[Arguments]    payment_info
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_info

Validate Error For Partial Payment
[Arguments]    partial_payment_info
[Return]    ${boolean}
[Documentation]    Keyword description
Log    partial_payment_info

Enter Invoice Details
[Arguments]    invoice_info
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_info

Validate Invoice Deletion
[Arguments]    invoice_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number

Validate Invoice Update
[Arguments]    invoice_update_info
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_update_info

Validate Payment Receipt
[Arguments]    payment_receipt_info
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_receipt_info

Check Invoice Status
[Arguments]    invoice_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_status

Validate Overdue Invoice Handling
[Arguments]    overdue_invoice_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    overdue_invoice_details

","The test case 'condo_fee_invoices' aims to thoroughly evaluate the handling and processing of condo fee invoices within the PayNOW system. Ensuring the accurate management of these invoices is crucial for maintaining financial records and ensuring timely payments. The core objectives of this test case include:
"
Create keyword-driven test case for E-commerce web platform item_search,keyword-driven,item_search,"*** Settings ***
Documentation    Validate item_search
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
item_search
[Documentation]    Validate item_search using the following steps
Login To E-Commerce Platform    username, password
Search For Item    search_term
Validate Search Results Are Displayed    expected_item
Filter Search Results    filter_option
Sort Search Results    sort_option
Validate Correct Item Is Displayed    expected_item
Add Item To Cart    item_id
Validate Item Is Added To Cart    item_id, expected_quantity
Remove Item From Cart    item_id
Validate Item Is Removed From Cart    item_id

*** Keywords ***
Login To E-Commerce Platform
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Search For Item
[Arguments]    search_term
[Return]    ${string}
[Documentation]    Keyword description
Log    search_term

Validate Search Results Are Displayed
[Arguments]    expected_item
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_item

Filter Search Results
[Arguments]    filter_option
[Return]    ${string}
[Documentation]    Keyword description
Log    filter_option

Sort Search Results
[Arguments]    sort_option
[Return]    ${string}
[Documentation]    Keyword description
Log    sort_option

Validate Correct Item Is Displayed
[Arguments]    expected_item
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_item

Add Item To Cart
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id

Validate Item Is Added To Cart
[Arguments]    item_id, expected_quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id, expected_quantity

Remove Item From Cart
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id

Validate Item Is Removed From Cart
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

","The ""item_search"" test case is designed to verify the functionality and reliability of the search system in an e-commerce platform. The primary goal is to ensure that users can efficiently find and manage items within the online store through the search feature. Key aspects that this test case aims to validate include:
"
Generate keyword-driven microdream for UserProfile user_settings,keyword-driven,user_settings,"*** Settings ***
Documentation    Validate user_settings
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_settings
[Documentation]    Validate user_settings using the following steps
Update User Profile Information    user_id|new_profile_data
Validate Updated Profile Information    user_id|expected_profile_data
Remove User Account    user_id
Validate User Account Removal    user_id

*** Keywords ***
Update User Profile Information
[Arguments]    user_id|new_profile_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id|new_profile_data

Validate Updated Profile Information
[Arguments]    user_id|expected_profile_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id|expected_profile_data

Remove User Account
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Validate User Account Removal
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

","The purpose of the test case 'user_settings' is to validate the functionality of the user profile and settings management within a web application. This includes ensuring users can update their profile information, validate the updates, and remove their accounts if needed. The main objectives of this test case are:

1. **Profile Update:** To confirm that users can successfully update their personal information such as name, email, address, etc.
2. **Validation of Updates:** To ensure that the updated profile information is accurately reflected in the user interface and stored correctly in the database.
3. **Account Removal:** To verify that the users can remove their account and that the system handles this removal appropriately by deleting all user-related data.
4. **Consistency and Integrity:** To check that all changes made in the user settings are consistent and the integrity of user data is maintained."
Validate keyword-driven finance for Payments payment_validation,keyword-driven,payment_validation,"*** Settings ***
Documentation    Validate payment_validation
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       financeuser
${VALID_PASSWORD}   financepass

*** Test Cases ***
payment_validation
[Documentation]    Validate payment_validation using the following steps
Navigate To Payment Page    finance_id, customer_id
Validate Payment Information Is Displayed    payment_id, expected_information
Initiate Payment Process    nan
Cancel Payment Process    nan
Select Payment Method    method
Validate Payment Status    finance_id, payment_id, expected_status
Get Payment Confirmation Id    finance_id, payment_id
Send Payment Confirmation    finance_id, payment_id
Validate Payment Confirmation Email Is Sent    expected_confirmation_date
Accept Terms And Conditions    nan

*** Keywords ***
Navigate To Payment Page
[Arguments]    finance_id, customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    finance_id, customer_id

Validate Payment Information Is Displayed
[Arguments]    payment_id, expected_information
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_id, expected_information

Initiate Payment Process
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Cancel Payment Process
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Select Payment Method
[Arguments]    method
[Return]    ${string}
[Documentation]    Keyword description
Log    method

Validate Payment Status
[Arguments]    finance_id, payment_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    finance_id, payment_id, expected_status

Get Payment Confirmation Id
[Arguments]    finance_id, payment_id
[Return]    ${string}
[Documentation]    Keyword description
Log    finance_id, payment_id

Send Payment Confirmation
[Arguments]    finance_id, payment_id
[Return]    ${string}
[Documentation]    Keyword description
Log    finance_id, payment_id

Validate Payment Confirmation Email Is Sent
[Arguments]    expected_confirmation_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_confirmation_date

Accept Terms And Conditions
[Arguments]    nan
[Return]    ${integer}
[Documentation]    Keyword description
Log    nan

","The test case 'payment_validation' is designed to validate the payment process within the finance system. This involves:
"
Validate keyword-driven mobile application for signup,keyword-driven,signup,"*** Settings ***
Documentation    Validate signup
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       newuser
${VALID_PASSWORD}   newpassword

*** Test Cases ***
signup
[Documentation]    Validate signup using the following steps
Enter Username Field    username
Enter Password Field    password
Enter Email Address Field    email
Validate Error Message For Invalid Email Address    user_details
Validate Error Message For Weak Password    password
Submit Signup Form    username|password|email
Verify Account Creation    username

*** Keywords ***
Enter Username Field
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Enter Password Field
[Arguments]    password
[Return]    ${string}
[Documentation]    Keyword description
Log    password

Enter Email Address Field
[Arguments]    email
[Return]    ${string}
[Documentation]    Keyword description
Log    email

Validate Error Message For Invalid Email Address
[Arguments]    user_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_details

Validate Error Message For Weak Password
[Arguments]    password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    password

Submit Signup Form
[Arguments]    username|password|email
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password|email

Verify Account Creation
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

","The 'signup' test case is designed to validate the user registration functionality of a mobile application. This test aims to ensure that the signup process is both functional and secure, covering the following aspects:

1. **Input Validation:**
- Verify that the application correctly processes and accepts valid username, password, and email address.
- Ensure that appropriate error messages are displayed for invalid email formats or weak passwords.

2. **Error Handling:**
- Check the application's response to invalid email addresses.
- Confirm that the system prompts users to enter a stronger password when a weak one is provided.
- Ensure that the validation messages do not reveal too much information about the rejected inputs.

3. **Account Creation:**
- Ensure that a new account is successfully created with valid details.
- Verify that the account creation is confirmed and the user can access the application after registration.

By focusing on these aspects, the test case strives to ensure a robust and user-friendly signup process."
Generate keyword-driven paynow_keywords for API user_registration,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_registration
[Documentation]    Validate user_registration using the following steps
Get User Registration Form    nan
Fill User Registration Details    username, password, email
Submit User Registration Form    nan
Validate Registration Success Message    expected_message
Extract User ID After Registration    email
Validate User Registration In Database    email

*** Keywords ***
Get User Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Fill User Registration Details
[Arguments]    username, password, email
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password, email

Submit User Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Registration Success Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Extract User ID After Registration
[Arguments]    email
[Return]    ${string}
[Documentation]    Keyword description
Log    email

Validate User Registration In Database
[Arguments]    email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email

","The test case titled 'user_registration' aims to ensure that the user registration functionality of an API works correctly. It involves verifying that the system successfully registers a new user when valid inputs are provided and appropriately stores the user information.

Key objectives of the test case include:
1. **Form Retrieval:** Ensuring the user registration form is accessible and can be retrieved without errors.
2. **Input Verification:** Validating that the user registration form accepts valid details for username, password, and email.
3. **Form Submission:** Checking that the form can be submitted successfully without server-side errors.
4. **Success Message Verification:** Confirming that a success message is displayed upon successful registration.
5. **Database Validation:** Ensuring that the new user information is accurately stored in the database after registration."
Verify keyword-driven application for UserProfiles create_user_profile,keyword-driven,create_user_profile,"*** Settings ***
Documentation    Validate create_user_profile
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
create_user_profile
[Documentation]    Validate create_user_profile using the following steps
Navigate To User Profile Section    nan
Enter Required Details For User Profile    user_details
Validate Entered Details For User Profile    user_details
Save New User Profile    nan
Validate User Profile Is Created Successfully    user_id
Validate Error Message For Missing Required Fields    field_name

*** Keywords ***
Navigate To User Profile Section
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Required Details For User Profile
[Arguments]    user_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_details

Validate Entered Details For User Profile
[Arguments]    user_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_details

Save New User Profile
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate User Profile Is Created Successfully
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Validate Error Message For Missing Required Fields
[Arguments]    field_name
[Return]    ${boolean}
[Documentation]    Keyword description
Log    field_name

","The purpose of the 'create_user_profile' test case is to ensure that the user creation functionality in the application works correctly and as expected. This includes verifying that all necessary user details can be entered and saved, and that appropriate messages are displayed when required fields are missing. The key aspects assessed in this test case include:

1. **Navigation and Access:**
- Verify that users can access the user profile creation section without issues.

2. **Correct Data Entry:**
- Ensure that users can input all necessary profile details correctly.
- Confirm that the system accepts valid data and displays it correctly before saving.

3. **Profile Creation:**
- Verify that the new user profile is saved properly and assigned a unique user ID.
- Ensure that appropriate success messages are displayed after profile creation.

4. **Error Handling:**
- Test how the system behaves when required fields are missing.
- Confirm that informative error messages are shown to prompt users to fill in the missing details."
Validate keyword-driven clientcentral_keywords for API orders,keyword-driven,orders,"*** Settings ***
Documentation    Validate orders
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
orders
[Documentation]    Validate orders using the following steps
Create Order Body    unique_order_id|customer_id|order_details
Send Request To Create Order    order_request
Validate Order Created    order_response
Retrieve Order Details    order_id
Validate Retrieved Order Details    order_id|expected_details
Update Order Details    order_id|update_details
Validate Updated Order    order_id|expected_details

*** Keywords ***
Create Order Body
[Arguments]    unique_order_id|customer_id|order_details
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_order_id|customer_id|order_details

Send Request To Create Order
[Arguments]    order_request
[Return]    ${string}
[Documentation]    Keyword description
Log    order_request

Validate Order Created
[Arguments]    order_response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_response

Retrieve Order Details
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Retrieved Order Details
[Arguments]    order_id|expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_details

Update Order Details
[Arguments]    order_id|update_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|update_details

Validate Updated Order
[Arguments]    order_id|expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_details

","The test case 'orders' is designed to validate the entire lifecycle of order management within an API-driven system. Specifically, this test case aims to verify the following:

1. **Order Creation:** Ensuring that orders can be created with the required details such as order ID, customer ID, and order specifics. This includes the formation of the correct request body and sending it to the server.
2. **Order Validation:** Confirming that the order is successfully created by the system and validating the response received from the server.
3. **Order Retrieval:** Verifying that the created orders can be retrieved accurately from the system. This includes comparing the retrieved order details with the expected details to ensure data integrity.
4. **Order Update:** Testing the ability to update the details of an existing order and verifying that the updates are successfully reflected in the system. This involves both sending update requests and validating the system's response to these updates."
Create keyword-driven test case for ShopNow authenticate_and_search,keyword-driven,authenticate_and_search,"*** Settings ***
Documentation    Validate authenticate_and_search
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       shopuser
${VALID_PASSWORD}   shopsecret

*** Test Cases ***
authenticate_and_search
[Documentation]    Validate authenticate_and_search using the following steps
Login To Application    ${VALID_USER}, ${VALID_PASSWORD}
Search For Product    product_name
Logout From Application    nan

*** Keywords ***
Login To Application
[Arguments]    ${username}, ${password}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${username}, ${password}

Search For Product
[Arguments]    product_name
[Return]    ${string}
[Documentation]    Keyword description
Log    product_name

Logout From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The purpose of the 'authenticate_and_search' test case is to verify the basic authentication process and product search functionality on the ShopNow platform. The goals of this test case include:
"
Validate keyword-driven techsystems for Users user_management,keyword-driven,user_management,"*** Settings ***
Documentation    Validate user_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_management
[Documentation]    Validate user_management using the following steps
Navigate To User Management Page    nan
Validate User List Is Displayed    expected_user_list
Create New User    user_details
Validate New User Is Created    user_id
Update User Details    user_id|updated_details
Validate User Details Are Updated    user_id
Delete User    user_id
Validate User Is Deleted    user_id
Search User    search_criteria
Validate Searched User Is Displayed    expected_user_details
Assign Roles To User    user_id|roles
Validate Assigned Roles Are Displayed    user_id|expected_roles
Lock User Account    user_id
Validate User Account Is Locked    user_id
Unlock User Account    user_id
Validate User Account Is Unlocked    user_id
Validate Error Message For Duplicate User    user_details|expected_error_message
Validate User Status Filter    expected_statuses

*** Keywords ***
Navigate To User Management Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate User List Is Displayed
[Arguments]    expected_user_list
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_user_list

Create New User
[Arguments]    user_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_details

Validate New User Is Created
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Update User Details
[Arguments]    user_id|updated_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id|updated_details

Validate User Details Are Updated
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Delete User
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate User Is Deleted
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Search User
[Arguments]    search_criteria
[Return]    ${string}
[Documentation]    Keyword description
Log    search_criteria

Validate Searched User Is Displayed
[Arguments]    expected_user_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_user_details

Assign Roles To User
[Arguments]    user_id|roles
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id|roles

Validate Assigned Roles Are Displayed
[Arguments]    user_id|expected_roles
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id|expected_roles

Lock User Account
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate User Account Is Locked
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Unlock User Account
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate User Account Is Unlocked
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Validate Error Message For Duplicate User
[Arguments]    user_details|expected_error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_details|expected_error_message

Validate User Status Filter
[Arguments]    expected_statuses
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_statuses

","The 'user_management' test case is specifically designed to verify the user management functionality within the application. The key objectives of this test case are to:

1. **Add New Users:** Ensure"
Build keyword-driven web for Payments invoice_management,keyword-driven,invoice_management,"*** Settings ***
Documentation    Validate invoice_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
invoice_management
[Documentation]    Validate invoice_management using the following steps
Load Open Invoices    nan
Validate Invoice Details    invoice_id
Apply Payment Filters    filter_name, filter_value
Validate Filtered Results    expected_invoice_count
Export Invoice Data    export_format
Send Invoice Reminder    invoice_id, reminder_type
Validate Payment Status Update    payment_id, expected_status
Generate Invoice Report    report_type, start_date, end_date
Validate Report Data    report_id, expected_data
Update Invoice Details    invoice_id, update_data
Validate Invoice Modification    invoice_id, expected_details
Process Partial Payment    payment_info
Validate Partial Payment Update    invoice_id, expected_amount
Filter Invoices By Date Range    start_date, end_date
Validate Date Range Filter    date_range, expected_count
Validate Overdue Invoices Display    time_frame
Synchronize Invoices With External System    system_name
Confirm Synchronization Status    system_name, expected_status
Validate Invoice Aging Report    report_period, expected_values
Approve Invoice for Payment    invoice_id
Validate Invoice Approval Status    invoice_id, expected_approval_status
Reject Invoice With Reason    invoice_id, reject_reason
Validate Invoice Rejection Status    invoice_id, expected_rejection_status
Navigate To Invoice Audit Log    invoice_id
Validate Audit Log Entry    log_id, expected_entry
Send Invoice to Customer    invoice_id, customer_email
Confirm Invoice Email Delivery    email_id, expected_delivery_status
Validate Email Template    template_id
Validate Email Content    email_id, expected_content
Filter Invoices By Status    status
Validate Status Filter Result    status, expected_count
Reassign Invoice Owner    invoice_id, new_owner
Confirm Reassigned Invoice    invoice_id, expected_owner
Navigate To Invoice Settings    nan
Update Invoice Settings    settings, values
Validate Updated Settings    settings, expected_values
Archive Old Invoices    archive_date
Validate Archived Invoices    archive_date, expected_count
Restore Archived Invoices    invoice_id
Confirm Restored Invoices    invoice_id, expected_status
Validate Invoice System Notifications    notification_type, expected_message
Logout From Invoice Management    nan

*** Keywords ***
Load Open Invoices
[Arguments]    nan
[Return]    @{list}
[Documentation]    Keyword description
Log    nan

Validate Invoice Details
[Arguments]    invoice_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_id

Apply Payment Filters
[Arguments]    filter_name, filter_value
[Return]    ${string}
[Documentation]    Keyword description
Log    filter_name, filter_value

Validate Filtered Results
[Arguments]    expected_invoice_count
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_invoice_count

Export Invoice Data
[Arguments]    export_format
[Return]    ${string}
[Documentation]    Keyword description
Log    export_format

Send Invoice Reminder
[Arguments]    invoice_id, reminder_type
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_id, reminder_type

Validate Payment Status Update
[Arguments]    payment_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_id, expected_status

Generate Invoice Report
[Arguments]    report_type, start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    report_type, start_date, end_date

Validate Report Data
[Arguments]    report_id, expected_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    report_id, expected_data

Update Invoice Details
[Arguments]    invoice_id, update_data
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_id, update_data

Validate Invoice Modification
[Arguments]    invoice_id, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_id, expected_details

Process Partial Payment
[Arguments]",
Create keyword-driven globex for Products inventory_management,keyword-driven,inventory_management,"*** Settings ***
Documentation    Validate inventory_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
inventory_management
[Documentation]    Validate inventory_management using the following steps
Validate Inventory Count    product_id|expected_count
Validate Product Details    product_id
Add New Product    product_name, category, price, quantity
Update Product Quantity    product_id, new_quantity
Remove Product From Inventory    product_id
Validate Product Is Listed In Category    product_id, category
Filter Products By Category    category
Search Product By ID    product_id
Validate Product Price    product_id, expected_price
Validate Out Of Stock Products    nan
Archive Product    product_id
Unarchive Product    product_id
Validate Archived Products Are Not Listed    nan
Check Inventory Summary    expected_summary
Generate Inventory Report    nan

*** Keywords ***
Validate Inventory Count
[Arguments]    product_id|expected_count
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id|expected_count

Validate Product Details
[Arguments]    product_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id

Add New Product
[Arguments]    product_name, category, price, quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    product_name, category, price, quantity

Update Product Quantity
[Arguments]    product_id, new_quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id, new_quantity

Remove Product From Inventory
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Validate Product Is Listed In Category
[Arguments]    product_id, category
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id, category

Filter Products By Category
[Arguments]    category
[Return]    ${string}
[Documentation]    Keyword description
Log    category

Search Product By ID
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Validate Product Price
[Arguments]    product_id, expected_price
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id, expected_price

Validate Out Of Stock Products
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Archive Product
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Unarchive Product
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Validate Archived Products Are Not Listed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Check Inventory Summary
[Arguments]    expected_summary
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_summary

Generate Inventory Report
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'inventory_management' is designed to verify the comprehensive functionality of an inventory management system within a retail or product-centric application. The primary purpose of this test case is to ensure that the system properly handles all aspects of inventory management, including adding, updating, and removing products, as well as verifying accurate inventory counts and other essential details. Key aspects typically evaluated in this test case include:
"
Validate guest checkout for E-commerce platform,keyword-driven,guest_checkout,"*** Settings ***
Documentation    Validate guest_checkout
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
guest_checkout
[Documentation]    Validate guest_checkout using the following steps
Add Item To Cart    item_id
View Shopping Cart    nan
Proceed To Checkout    checkout_as_guest
Enter Shipping Address    shipping_address
Enter Billing Address    billing_address
Select Shipping Method    shipping_method
Enter Payment Details    payment_details
Review Order Summary    nan
Confirm And Place Order    nan
Validate Order Confirmation Page Is Displayed    expected_order_number
Validate Order Details Are Correct    order_number

*** Keywords ***
Add Item To Cart
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id

View Shopping Cart
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Proceed To Checkout
[Arguments]    checkout_as_guest
[Return]    ${string}
[Documentation]    Keyword description
Log    checkout_as_guest

Enter Shipping Address
[Arguments]    shipping_address
[Return]    ${string}
[Documentation]    Keyword description
Log    shipping_address

Enter Billing Address
[Arguments]    billing_address
[Return]    ${string}
[Documentation]    Keyword description
Log    billing_address

Select Shipping Method
[Arguments]    shipping_method
[Return]    ${string}
[Documentation]    Keyword description
Log    shipping_method

Enter Payment Details
[Arguments]    payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_details

Review Order Summary
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Confirm And Place Order
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order Confirmation Page Is Displayed
[Arguments]    expected_order_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_order_number

Validate Order Details Are Correct
[Arguments]    order_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number

","The 'guest_checkout' test case is designed to evaluate the functionality and user experience of the guest checkout process on an E-commerce platform. This involves ensuring that users can purchase items without needing to create an account, thereby streamlining the buying process and potentially increasing conversion rates.

**Key Objectives:**
1. **Shopping Cart Interaction**:
- Validate that items can be added to the shopping cart.
- Ensure that the shopping cart accurately displays the selected items and their details.

2. **Guest Checkout Process**:
- Test the option to proceed to checkout as a guest.
- Verify that users can enter shipping and billing addresses accurately.
- Validate the selection of shipping methods and the input of payment details.
- Confirm that the order summary is correctly presented for review.

3. **Order Placement and Confirmation**:
- Ensure that the order can be placed successfully without errors.
- Validate that an order confirmation page is displayed, containing all relevant details.
- Verify the accuracy of order details against the expected results."
Validate keyword-driven usermanagement_keywords for API user_profile,keyword-driven,user_profile,"*** Settings ***
Documentation    Validate user_profile
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_profile
[Documentation]    Validate user_profile using the following steps
Create User Profile Body    user_id|merchant_id
Send Request To Create User Profile    user_id|merchant_key|merchant_id
Update User Profile Body    user_id|merchant_id
Send Request To Update User Profile    user_id|merchant_key|merchant_id
Delete User Profile Body    user_id|merchant_id
Send Request To Delete User Profile    user_id|merchant_key|merchant_id

*** Keywords ***
Create User Profile Body
[Arguments]    user_id|merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id|merchant_id

Send Request To Create User Profile
[Arguments]    user_id|merchant_key|merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id|merchant_key|merchant_id

Update User Profile Body
[Arguments]    user_id|merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id|merchant_id

Send Request To Update User Profile
[Arguments]    user_id|merchant_key|merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id|merchant_key|merchant_id

Delete User Profile Body
[Arguments]    user_id|merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id|merchant_id

Send Request To Delete User Profile
[Arguments]    user_id|merchant_key|merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id|merchant_key|merchant_id

","The purpose of the test case 'user_profile' is to ensure the correct functionality of user profile management within a software application or system. This involves several critical operations, each of which corresponds to an essential aspect of user profile handling. Below are the main objectives:

1. **Creating User Profiles:** Verify that new user profiles can be created correctly, incorporating details like user ID and merchant ID.
2. **Updating User Profiles:** Confirm that existing user profiles can be updated with new information such as changes in user details.
3. **Deleting User Profiles:** Ensure that user profiles can be safely and completely deleted from the system.
4. **Request Handling:** Validate that the system appropriately handles requests for creating, updating, and deleting user profiles, including proper error and success responses.
5. **Data Integrity:** Check that all operations maintain the integrity of user data, ensuring no loss or corruption during profile creation, modification, or deletion.
6. **API Communication:** Validate the proper functioning of communication between the application and the backend via API requests for user profile management.
"
Validate keyword-driven rhodes_industry for InventoryManagement product_inventory,keyword-driven,product_inventory,"*** Settings ***
Documentation    Validate product_inventory
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
product_inventory
[Documentation]    Validate product_inventory using the following steps
Search Product By SKU    sku
Validate Product Details Are Correct    product_details
Update Inventory Quantity    sku|new_quantity
Validate Inventory Update Message    expected_message
Check Inventory Threshold Notification    sku|threshold
Validate Low Stock Notification    expected_notification
Perform Bulk Inventory Update    update_list
Validate Bulk Update Success    expected_status

*** Keywords ***
Search Product By SKU
[Arguments]    sku
[Return]    ${string}
[Documentation]    Keyword description
Log    sku

Validate Product Details Are Correct
[Arguments]    product_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_details

Update Inventory Quantity
[Arguments]    sku|new_quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    sku|new_quantity

Validate Inventory Update Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Check Inventory Threshold Notification
[Arguments]    sku|threshold
[Return]    ${boolean}
[Documentation]    Keyword description
Log    sku|threshold

Validate Low Stock Notification
[Arguments]    expected_notification
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_notification

Perform Bulk Inventory Update
[Arguments]    update_list
[Return]    ${string}
[Documentation]    Keyword description
Log    update_list

Validate Bulk Update Success
[Arguments]    expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_status

","The test case 'product_inventory' is designed to validate the functionality of the inventory management system within the Rhodes Industry platform. The purpose of this test case is to ensure that the features related to product inventory management operate correctly and efficiently. This includes:
"
Create keyword-driven web for CommonKeywordsForAllMerchants user_management,keyword-driven,user_management,"*** Settings ***
Documentation    Validate user management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_management
[Documentation]    Validate user management using the following steps
Create New User    username, password, email
Assign Role To User    username, role
Deactivate User Account    username
Validate UserRole Is Assigned    username, role
Load User Details    username
Update User Email    username, new_email
Delete User Account    username
Validate User Should Not Exist    username
Log Out From User Account    nan

*** Keywords ***
Create New User
[Arguments]    username, password, email
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password, email

Assign Role To User
[Arguments]    username, role
[Return]    ${string}
[Documentation]    Keyword description
Log    username, role

Deactivate User Account
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate UserRole Is Assigned
[Arguments]    username, role
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, role

Load User Details
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Update User Email
[Arguments]    username, new_email
[Return]    ${string}
[Documentation]    Keyword description
Log    username, new_email

Delete User Account
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate User Should Not Exist
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Log Out From User Account
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'user_management' test case focuses on validating the user management functionalities within an application. Key objectives and purposes of this test case include:

1. **User Account Creation:** Ensure new user accounts can be created with the necessary information (username, password, email) and that the creation process works smoothly.

2. **Role Assignment:** Verify that roles can be assigned to users correctly, and ensure the system reflects these roles for access control and permissions management.

3. **Account Deactivation:** Check that user accounts can be deactivated, preventing the user from accessing the system.

4. **Data Validation:** Confirm that changes in user details, such as updating the user’s email address, are accurately captured and reflected in the system.

5. **Account Deletion:** Test the ability to delete user accounts and validate that deleted accounts no longer exist in the system.

6. **Session Management:** Ensure that users can successfully log out from their accounts, preserving security and preventing unauthorized access."
Create browser-driven authentication for UserManagement user_auth,keyword-driven,user_auth,"*** Settings ***
Documentation    Validate user authentication
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       valid_user
${VALID_PASSWORD}   valid_password

*** Test Cases ***
user_auth
[Documentation]    Validate user authentication using the following steps
Open Browser    browser_name|url
Enter Username    username_field|${VALID_USER}
Enter Password    password_field|${VALID_PASSWORD}
Click Login Button    login_button
Validate User Is Logged In    expected_user    actual_user
Logout User    nan
Validate User Is Logged Out    expected_message|actual_message

*** Keywords ***
Open Browser
[Arguments]    browser_name|url
[Return]    ${string}
[Documentation]    Keyword description
Log    browser_name|url

Enter Username
[Arguments]    username_field|username
[Return]    ${string}
[Documentation]    Keyword description
Log    username_field|username

Enter Password
[Arguments]    password_field|password
[Return]    ${string}
[Documentation]    Keyword description
Log    password_field|password

Click Login Button
[Arguments]    login_button
[Return]    ${string}
[Documentation]    Keyword description
Log    login_button

Validate User Is Logged In
[Arguments]    expected_user|actual_user
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_user|actual_user

Logout User
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate User Is Logged Out
[Arguments]    expected_message|actual_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message|actual_message

","The purpose of the ""user_auth"" test case is to validate the authentication mechanism of an application. This involves testing the login and logout functionality to ensure that users can securely access and exit the application. Here’s a summarized explanation:

1. **Login Verification**:
- Ensure that valid credentials allow a user to log in successfully.
- Check that the login interface processes input correctly and transitions to the user's account page.

2. **User Experience**:
- Confirm that users receive appropriate feedback upon logging in or out.
- Verify that the UI elements associated with login (e.g., buttons and fields) are working as expected.

3. **Security**:
- Validate that authentication processes adhere to security standards, preventing unauthorized access.
- Ensure secure handling of user credentials during the login process.

This test case helps in maintaining a secure and user-friendly authentication system, which is critical for the overall security and user experience of the application."
Validate keyword-driven secureaccess for User Authentication authentication,keyword-driven,authentication,"*** Settings ***
Documentation    Validate authentication
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USERNAME}   testuser
${VALID_PASSWORD}   secretpassword

*** Test Cases ***
authentication
[Documentation]    Validate authentication using the following steps
Open Login Page    nan
Enter Username    ${VALID_USERNAME}
Enter Password    ${VALID_PASSWORD}
Click Login Button    nan
Validate User Is Redirected To Dashboard    nan
Validate Welcome Message Is Displayed On Dashboard    testuser
Logout From Application    nan

*** Keywords ***
Open Login Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Username
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Enter Password
[Arguments]    password
[Return]    ${string}
[Documentation]    Keyword description
Log    password

Click Login Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate User Is Redirected To Dashboard
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Welcome Message Is Displayed On Dashboard
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Logout From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'authentication' is designed to validate the authentication process for user logins within an application. Its purpose is to:
"
Create keyword-driven web for CustomerSupport request_status,keyword-driven,request_status,"*** Settings ***
Documentation    Validate request_status
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       customersupportuser
${VALID_PASSWORD}   securepass

*** Test Cases ***
request_status
[Documentation]    Validate request_status using the following steps
Login To Customer Support Portal    nan
Navigate To Support Requests Page    nan
Filter Requests By Status    status
Validate Request Status Is Displayed    support_request_id|expected_status
Open Request Details    support_request_id
Validate Detailed Request Status    support_request_id|expected_detailed_status
Close Request Details    support_request_id

*** Keywords ***
Login To Customer Support Portal
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Navigate To Support Requests Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Filter Requests By Status
[Arguments]    status
[Return]    @{list}
[Documentation]    Keyword description
Log    status

Validate Request Status Is Displayed
[Arguments]    support_request_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    support_request_id|expected_status

Open Request Details
[Arguments]    support_request_id
[Return]    ${string}
[Documentation]    Keyword description
Log    support_request_id

Validate Detailed Request Status
[Arguments]    support_request_id|expected_detailed_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    support_request_id|expected_detailed_status

Close Request Details
[Arguments]    support_request_id
[Return]    ${string}
[Documentation]    Keyword description
Log    support_request_id

","The 'request_status' test case is intended to validate the functionality of a customer support system with respect to handling and displaying the status of support requests submitted by users. The primary objective is to ensure that the system accurately reflects the current status of support requests and provides detailed information when required. Specific aspects tested include:
"
Validate keyword-driven paycheck_deposit for PayrollSystems auto_deposit,keyword-driven,auto_deposit,"*** Settings ***
Documentation    Validate auto_deposit for PayrollSystems
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       payroll_user
${VALID_PASSWORD}   payroll_secret

*** Test Cases ***
auto_deposit
[Documentation]    Validate auto_deposit using the following steps
Login To PayrollSystems And Navigate To AutoDeposit    user_id, company_id
Enter Employee Details For AutoDeposit    employee_id, account_number
Save AutoDeposit    nan
Validate Created AutoDeposit Details    expected_depositday, expected_accounttype
Enter Employer Details For AutoDeposit    employer_details
Validate AutoDeposit Details Are Deleted    nan
Validate AutoDeposit Process In Payroll Runs    run_id, expected_status
Delete AutoDeposit Details    nan
Select Specific Day For AutoDeposit    day_of_month
Validate Created AutoDeposit Details For Each Pay Period    expected_payperiod, expected_accounttype
Validate Created AutoDeposit Details For Specific Pay Period    expected_payperiod, expected_accounttype, expected_weekday
Select Invoices To Be Included For AutoDeposit    invoice_group
Validate AutoDeposit Requests    nan
Select Specific Weekday    weekday
Close Delete AutoDeposit Confirmation Popup    nan
Select Invoices Beyond Due Date    outstanding_invoices
Validate Delete AutoDeposit Confirmation Popup Is Closed    nan
Select Pay Period As Payment Option    nan

*** Keywords ***
Login To PayrollSystems And Navigate To AutoDeposit
[Arguments]    user_id, company_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, company_id

Enter Employee Details For AutoDeposit
[Arguments]    employee_id, account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    employee_id, account_number

Save AutoDeposit
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Created AutoDeposit Details
[Arguments]    expected_depositday, expected_accounttype
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_depositday, expected_accounttype

Enter Employer Details For AutoDeposit
[Arguments]    employer_details
[Return]    ${string}
[Documentation]    Keyword description
Log    employer_details

Validate AutoDeposit Details Are Deleted
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate AutoDeposit Process In Payroll Runs
[Arguments]    run_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    run_id, expected_status

Delete AutoDeposit Details
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Select Specific Day For AutoDeposit
[Arguments]    day_of_month
[Return]    ${string}
[Documentation]    Keyword description
Log    day_of_month

Validate Created AutoDeposit Details For Each Pay Period
[Arguments]    expected_payperiod, expected_accounttype
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_payperiod, expected_accounttype

Validate Created AutoDeposit Details For Specific Pay Period
[Arguments]    expected_payperiod, expected_accounttype, expected_weekday
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_payperiod, expected_accounttype, expected_weekday

Select Invoices To Be Included For AutoDeposit
[Arguments]    invoice_group
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_group

Validate AutoDeposit Requests
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Select Specific Weekday
[Arguments]    weekday
[Return]    ${string}
[Documentation]    Keyword description
Log    weekday

Close Delete AutoDeposit Confirmation Popup
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Select Invoices Beyond Due Date
[Arguments]    outstanding_invoices
[Return]    ${string}
[Documentation]    Keyword description
Log    outstanding_invoices

Validate Delete AutoDeposit Confirmation Popup Is Closed
",
Build keyword-driven web for CommonKeywordsForAllMerchants login,keyword-driven,login,"*** Settings ***
Documentation    Validate login
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
login
[Documentation]    Validate login using the following steps
Fail And Take Screenshot    message
Validate String Should Be Equal    expected, actual
Enter Username    username
Enter Password    password
Click Login Button    button_locator
Wait For Dashboard To Load    dashboard_locator
Validate Successful Login Message Is Displayed    success_message, time_out

*** Keywords ***
Fail And Take Screenshot
[Arguments]    message
[Return]    ${string}
[Documentation]    Keyword description
Log    message

Validate String Should Be Equal
[Arguments]    expected, actual
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected, actual

Enter Username
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Enter Password
[Arguments]    password
[Return]    ${string}
[Documentation]    Keyword description
Log    password

Click Login Button
[Arguments]    button_locator
[Return]    ${string}
[Documentation]    Keyword description
Log    button_locator

Wait For Dashboard To Load
[Arguments]    dashboard_locator
[Return]    ${string}
[Documentation]    Keyword description
Log    dashboard_locator

Validate Successful Login Message Is Displayed
[Arguments]    success_message, time_out
[Return]    ${boolean}
[Documentation]    Keyword description
Log    success_message, time_out

","The ""login"" test case involves several critical steps to verify that the login functionality of a web application is working correctly. This includes:
"
Create keyword-driven sterlingcooper for Orders orders,keyword-driven,orders,"*** Settings ***
Documentation    Validate orders
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
orders
[Documentation]    Validate orders using the following steps
Create New Order    customer_id|order_details
Validate Order Confirmation    order_id|expected_confirmation
Update Order Details    order_id|new_order_details
Validate Order Shipping Info    order_id|expected_shipping_info
Cancel Order    order_id
Validate Order Status    order_id|expected_status
Add Item To Order    order_id|item_details
Remove Item From Order    order_id|item_id
Validate Order Total Amount    order_id|expected_total
Apply Discount To Order    order_id|discount_code
Validate Discount Applied    order_id|expected_discount_amount
Navigate To Order Summary Page    customer_id
Validate Order Summary    order_id|expected_summary
Process Order Refund    order_id|refund_amount
Validate Refund Processed    order_id|expected_refund_status
Generate Order Invoice    order_id
Validate Invoice Details    order_id|expected_invoice_details

*** Keywords ***
Create New Order
[Arguments]    customer_id|order_details
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id|order_details

Validate Order Confirmation
[Arguments]    order_id|expected_confirmation
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_confirmation

Update Order Details
[Arguments]    order_id|new_order_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|new_order_details

Validate Order Shipping Info
[Arguments]    order_id|expected_shipping_info
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_shipping_info

Cancel Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Status
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

Add Item To Order
[Arguments]    order_id|item_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|item_details

Remove Item From Order
[Arguments]    order_id|item_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|item_id

Validate Order Total Amount
[Arguments]    order_id|expected_total
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_total

Apply Discount To Order
[Arguments]    order_id|discount_code
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|discount_code

Validate Discount Applied
[Arguments]    order_id|expected_discount_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_discount_amount

Navigate To Order Summary Page
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

Validate Order Summary
[Arguments]    order_id|expected_summary
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_summary

Process Order Refund
[Arguments]    order_id|refund_amount
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|refund_amount

Validate Refund Processed
[Arguments]    order_id|expected_refund_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_refund_status

Generate Order Invoice
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Invoice Details
[Arguments]    order_id|expected_invoice_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_invoice_details

",The test case 'orders' is designed to thoroughly validate the functionality and reliability of the order processing system within
Validate keyword-driven web for PayNOW customer_payments,keyword-driven,customer_payments,"*** Settings ***
Documentation    Validate customer_payments
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
customer_payments
[Documentation]    Validate customer_payments using the following steps
Enter Login Credentials    ${VALID_USER}    ${VALID_PASSWORD}
Navigate To Customer Payments Page    nan
Select Customer From List    customer_id
Validate Customer Details Are Displayed    expected_customer_name|expected_customer_id
Enter Payment Amount    payment_amount
Choose Payment Method    payment_method
Validate Payment Details    expected_payment_method|expected_amount
Process Payment    nan
Validate Payment Confirmation Message    expected_confirmation_message
Sign Out    nan

*** Keywords ***
Enter Login Credentials
[Arguments]    username, password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, password

Navigate To Customer Payments Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Select Customer From List
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

Validate Customer Details Are Displayed
[Arguments]    expected_customer_name|expected_customer_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_customer_name|expected_customer_id

Enter Payment Amount
[Arguments]    payment_amount
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_amount

Choose Payment Method
[Arguments]    payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method

Validate Payment Details
[Arguments]    expected_payment_method|expected_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_payment_method|expected_amount

Process Payment
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment Confirmation Message
[Arguments]    expected_confirmation_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_confirmation_message

Sign Out
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'customer_payments' test case is designed to ensure the functionality and accuracy of customer payment processing within the PayNOW system. It focuses on verifying that the system can handle various aspects of customer payments efficiently and correctly.

Key aspects include:

1. **User Authentication:** Ensures that users can log in with valid credentials.
2. **Navigation:** Confirms that the application can navigate to the customer payments page.
3. **Customer Interaction:** Validates that customer details are correctly displayed and selected.
4. **Payment Processing:** Tests the entry and validation of payment details and the successful processing of payments.
5. **Confirmation:** Ensures that the system provides appropriate confirmation messages upon successful payment.
6. **Security:** Verifies that users can securely sign out after completing transactions."
Validate keyword-driven login_functionality for User Authentication,keyword-driven,login_functionality,"*** Settings ***
Documentation    Validate login_functionality
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       validuser
${VALID_PASSWORD}   validpassword
${INVALID_USER}     invaliduser
${INVALID_PASSWORD} invalidpassword

*** Test Cases ***
login_functionality
[Documentation]    Validate login_functionality using the following steps
Navigate To Login Page    nan
Enter Valid Credentials    validuser, validpassword
Click Login Button    nan
Validate Successful Login    welcome_message
Enter Invalid Credentials    invaliduser, invalidpassword
Click Login Button    nan
Validate Login Error Message    error_message

*** Keywords ***
Navigate To Login Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Valid Credentials
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Enter Invalid Credentials
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Click Login Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Successful Login
[Arguments]    welcome_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    welcome_message

Validate Login Error Message
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message

","The 'login_functionality' test case verifies the User Authentication feature, focusing particularly on the login process within a software application. This test case aims to ensure that users can log in with valid credentials and are appropriately blocked with invalid credentials.

Key components that the 'login_functionality' test case validates include:
"
Create keyword-driven web for UserManagement user_roles,keyword-driven,user_roles,"*** Settings ***
Documentation    Validate user_roles
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       admin
${VALID_PASSWORD}   admin_secret

*** Test Cases ***
user_roles
[Documentation]    Validate user_roles using the following steps
Navigate To User Management Page    nan
Create New User Role    role_name|permissions
Assign Role To User    username|role_name
Validate Role Assignment    username|role_name
Edit User Role Permissions    role_name|new_permissions
Validate Edited Role Permissions    role_name|new_permissions
Delete User Role    role_name
Validate Role Deletion    role_name

*** Keywords ***
Navigate To User Management Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Create New User Role
[Arguments]    role_name|permissions
[Return]    ${boolean}
[Documentation]    Keyword description
Log    role_name|permissions

Assign Role To User
[Arguments]    username|role_name
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|role_name

Validate Role Assignment
[Arguments]    username|role_name
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|role_name

Edit User Role Permissions
[Arguments]    role_name|new_permissions
[Return]    ${boolean}
[Documentation]    Keyword description
Log    role_name|new_permissions

Validate Edited Role Permissions
[Arguments]    role_name|new_permissions
[Return]    ${boolean}
[Documentation]    Keyword description
Log    role_name|new_permissions

Delete User Role
[Arguments]    role_name
[Return]    ${boolean}
[Documentation]    Keyword description
Log    role_name

Validate Role Deletion
[Arguments]    role_name
[Return]    ${boolean}
[Documentation]    Keyword description
Log    role_name
","The 'user_roles' test case ensures that the user role management functionality within an application is working correctly. User roles are crucial for defining permissions and access levels for different users.

### Key Objectives:

1. **Navigation and UI Verification**:
- Ensure access to the user management page.

2. **Creation and Assignment**:
- Validate the creation of new user roles with specific permissions.
- Verify the assignment of these roles to users.

3. **Editing and Validating Roles**:
- Ensure permissions for a role can be edited.
- Verify that the changes are correctly reflected.

4. **Deletion and Cleanup**:
- Validate that roles can be deleted.
- Confirm that the deletion process works and the role is no longer available.
"
Create keyword-driven quickcommerce for OrderManagement order_summary,keyword-driven,order_summary,"*** Settings ***
Documentation    Validate order_summary
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_summary
[Documentation]    Validate order_summary using the following steps
Initiate Order Summary    order_id
Validate Customer Details In Order Summary    customer_info
Update Order Status    status
Validate Product Details In Order Summary    expected_product
Add Special Instructions To Order    instructions
Finalize Order Summary    nan
Validate Order Total And Tax Amounts    total_amount|tax_amount
Cancel Order    order_id|reason

*** Keywords ***
Initiate Order Summary
[Arguments]    order_id
[Return]    ${integer}
[Documentation]    Keyword description
Log    order_id

Validate Customer Details In Order Summary
[Arguments]    customer_info
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_info

Update Order Status
[Arguments]    status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    status

Validate Product Details In Order Summary
[Arguments]    expected_product
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_product

Add Special Instructions To Order
[Arguments]    instructions
[Return]    ${string}
[Documentation]    Keyword description
Log    instructions

Finalize Order Summary
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order Total And Tax Amounts
[Arguments]    total_amount|tax_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    total_amount|tax_amount

Cancel Order
[Arguments]    order_id|reason
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|reason

","The purpose of the test case 'order_summary' is to verify the correct functionality of the Order Management's order summary feature within the QuickCommerce system. This feature provides a comprehensive view of an order’s details, including customer information, product specifics, and financial totals, and allows for certain manipulations such as status updates and cancellations. The test case includes several key aspects:

1. **Initiating Order Summary:** Ensuring that an order summary can be properly initiated using a valid order ID.
2. **Customer Details Validation:** Checking that the customer’s information is accurately displayed within the order summary.
3. **Updating Order Status:** Validating that users can update the order's status successfully.
4. **Product Details Validation:** Confirming that all product details within the order summary are correctly displayed.
5. **Adding Instructions:** Allowing users to add special instructions for an order and ensuring these instructions are saved.
6. **Finalizing Order:** Ensuring that the order summary finalizes correctly.
7. **Financial Validation:** Verifying the accuracy of the total amount and applicable taxes for the order.
8. **Order Cancellation:** Testing the capability to cancel an order with a specified reason."
Generate keyword-driven globexcorporation for UserManagement user_registration,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_registration
[Documentation]    Validate user_registration using the following steps
Open Registration Page    url
Fill User Details    username|password|email|phonenumber
Submit Registration Form    nan
Validate Registration Success Message    expected_message
Check Verification Email    email
Verify Account Through Email Link    validation_link
Attempt Duplicate Registration    username|email
Validate Error Message For Duplicate Registration    expected_error_message
Logout And Attempt Login For New User    username|password
Validate User Login    username|expected_status

*** Keywords ***
Open Registration Page
[Arguments]    url
[Return]    ${boolean}
[Documentation]    Keyword description
Log    url

Fill User Details
[Arguments]    username|password|email|phonenumber
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password|email|phonenumber

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Registration Success Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Check Verification Email
[Arguments]    email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email

Verify Account Through Email Link
[Arguments]    validation_link
[Return]    ${string}
[Documentation]    Keyword description
Log    validation_link

Attempt Duplicate Registration
[Arguments]    username|email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|email

Validate Error Message For Duplicate Registration
[Arguments]    expected_error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_error_message

Logout And Attempt Login For New User
[Arguments]    username|password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|password

Validate User Login
[Arguments]    username|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|expected_status

","The purpose of the test case 'user_registration' is to verify the correct functionality and user experience of the user registration feature in a web application. Key aspects covered in this test case include:

1. **Accessing Registration Page:** Ensure users can open and navigate to the registration page successfully.

2. **Filling and Submitting Registration Forms:** Validate that users can input their details (username, password, email, etc.) and submit the registration form without any issues.

3. **Registration Success Confirmation:** Verify that an appropriate success message is shown to the user upon successful registration.

4. **Email Verification:** Confirm that users receive a verification email and can use the link provided to verify their accounts.

5. **Handling Duplicate Registrations:** Ensure the system correctly handles attempts to register with duplicate usernames or email addresses, displaying relevant error messages.

6. **Login Verification:** Validate that newly registered users can successfully log in, ensuring their credentials and user status are correctly updated in the system.

This ensures a smooth and secure user registration process, which is crucial for user acquisition and platform security."
Build keyword-driven financepro for Report generation,keyword-driven,report_generation,"*** Settings ***
Documentation    Validate report generation
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret
${REPORT_TYPE}      Summary

*** Test Cases ***
report_generation
[Documentation]    Validate report generation using the following steps
Generate Financial Report    report_type|date_range
Validate Report Header    expected_header
Check Report Balance    report_balance|expected_balance
Save Report As PDF    report_name
Email Generated Report    report_name|email_address
Validate Email Sent    email_address

*** Keywords ***
Generate Financial Report
[Arguments]    report_type|date_range
[Return]    ${string}
[Documentation]    Keyword description
Log    report_type|date_range

Validate Report Header
[Arguments]    expected_header
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_header

Check Report Balance
[Arguments]    report_balance|expected_balance
[Return]    ${boolean}
[Documentation]    Keyword description
Log    report_balance|expected_balance

Save Report As PDF
[Arguments]    report_name
[Return]    ${string}
[Documentation]    Keyword description
Log    report_name

Email Generated Report
[Arguments]    report_name|email_address
[Return]    ${string}
[Documentation]    Keyword description
Log    report_name|email_address

Validate Email Sent
[Arguments]    email_address
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email_address

","The test case named 'report_generation' aims to assess the capabilities of a financial reporting module within a software application. The objectives of this test case could include:
"
Create keyword-driven web for PaymentProcessing payments,keyword-driven,payments,"*** Settings ***
Documentation    Validate payments
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
payments
[Documentation]    Validate payments using the following steps
Navigate To Payments Page From Dashboard    nan
Enter Payment Information    account_number|payment_amount|payment_method
Confirm Payment Details    account_number|payment_date|expected_total
Submit Payment    account_number|confirmation_code
Validate Payment Confirmation Screen    expected_message
Validate Transaction History Updates    transaction_id|expected_details
Validate Email Confirmation Is Sent    email_address|expected_email_subject

*** Keywords ***
Navigate To Payments Page From Dashboard
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Payment Information
[Arguments]    account_number|payment_amount|payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number|payment_amount|payment_method

Confirm Payment Details
[Arguments]    account_number|payment_date|expected_total
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number|payment_date|expected_total

Submit Payment
[Arguments]    account_number|confirmation_code
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number|confirmation_code

Validate Payment Confirmation Screen
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Validate Transaction History Updates
[Arguments]    transaction_id|expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id|expected_details

Validate Email Confirmation Is Sent
[Arguments]    email_address|expected_email_subject
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email_address|expected_email_subject

","The 'payments' test case is designed to verify and validate the payment processing functionality of a system or application. This includes ensuring secure and accurate handling of payment information, proper update of transaction history, and confirmation notifications.

Key objectives of the 'payments' test case include:
"
Create keyword-driven automation for BillingSystem verify_paymentprocess,keyword-driven,verify_paymentprocess,"*** Settings ***
Documentation    Validate verify_paymentprocess
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
verify_paymentprocess
[Documentation]    Validate verify_paymentprocess using the following steps
Initialize Payment Process    payment_type|amount
Validate Payment Initialization    payment_id
Process Payment Through Gateway    gateway_details
Confirm Payment Status    payment_id
Generate Payment Receipt    payment_id|receipt_format
Validate Payment Receipt Details    receipt_id
Validate Payment History Entry    user_id
Revert Payment And Confirm Status    payment_id
Validate Payment Reversal Details    payment_id

*** Keywords ***
Initialize Payment Process
[Arguments]    payment_type|amount
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_type|amount

Validate Payment Initialization
[Arguments]    payment_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_id

Process Payment Through Gateway
[Arguments]    gateway_details
[Return]    ${string}
[Documentation]    Keyword description
Log    gateway_details

Confirm Payment Status
[Arguments]    payment_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_id

Generate Payment Receipt
[Arguments]    payment_id|receipt_format
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_id|receipt_format

Validate Payment Receipt Details
[Arguments]    receipt_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    receipt_id

Validate Payment History Entry
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Revert Payment And Confirm Status
[Arguments]    payment_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_id

Validate Payment Reversal Details
[Arguments]    payment_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_id

","The 'verify_paymentprocess' test case in the BillingSystem is designed to ensure the correctness and robustness of the payment processing functionalities. This involves several key objectives:
"
Create keyword-driven clientcentral_keywords for API authentication,keyword-driven,authentication,"*** Settings ***
Documentation    Validate authentication
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
authentication
[Documentation]    Validate authentication using the following steps
Create Login Request Body    username, password
Send Login Request To API    username, password
Validate Login Response    response_status
Extract Token From Response    response_body
Create Token Validation Request Body    token
Send Token Validation Request To API    token
Validate Token Response    validation_response

*** Keywords ***
Create Login Request Body
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Send Login Request To API
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Validate Login Response
[Arguments]    response_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response_status

Extract Token From Response
[Arguments]    response_body
[Return]    ${string}
[Documentation]    Keyword description
Log    response_body

Create Token Validation Request Body
[Arguments]    token
[Return]    ${string}
[Documentation]    Keyword description
Log    token

Send Token Validation Request To API
[Arguments]    token
[Return]    ${string}
[Documentation]    Keyword description
Log    token

Validate Token Response
[Arguments]    validation_response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    validation_response

","The ""authentication"" test case verifies the authentication mechanism of an application, ensuring that users can securely log in and that the system validates their credentials appropriately. This involves generating a token upon login, validating this token, and ensuring secure transmission of user data.

Key objectives of the test case include:"
Generate keyword-driven phoenixcorp for Invoice invoice_validation,keyword-driven,invoice_validation,"*** Settings ***
Documentation    Validate invoice_validation
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
invoice_validation
[Documentation]    Validate PhoenixCorp invoice_validation using the following steps
Create New Invoice    unique_value|invoice_number|due_amount|invoice_due_date|invoice_description
Validate Invoice Number    invoice_number
Update Invoice Details    invoice_number|new_due_amount|new_invoice_date|new_description
Delete Invoice    invoice_number
Verify Invoice Deleted    invoice_number
Validate Invoice Entry Date    invoice_entry_date
Fetch Invoice By ID    invoice_id
Validate Invoice Data    invoice_number|due_amount|invoice_due_date|invoice_description
Generate Invoice Report    customer_id|start_date|end_date

*** Keywords ***
Create New Invoice
[Arguments]    unique_value|invoice_number|due_amount|invoice_due_date|invoice_description
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value|invoice_number|due_amount|invoice_due_date|invoice_description

Validate Invoice Number
[Arguments]    invoice_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number

Update Invoice Details
[Arguments]    invoice_number|new_due_amount|new_invoice_date|new_description
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_number|new_due_amount|new_invoice_date|new_description

Delete Invoice
[Arguments]    invoice_number
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_number

Verify Invoice Deleted
[Arguments]    invoice_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number

Validate Invoice Entry Date
[Arguments]    invoice_entry_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_entry_date

Fetch Invoice By ID
[Arguments]    invoice_id
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_id

Validate Invoice Data
[Arguments]    invoice_number|due_amount|invoice_due_date|invoice_description
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number|due_amount|invoice_due_date|invoice_description

Generate Invoice Report
[Arguments]    customer_id|start_date|end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id|start_date|end_date

","The test case 'invoice_validation' is designed to ensure the accuracy and integrity of the invoicing system in the PhoenixCorp application. This includes verifying that new invoices can be created, updated, fetched, and deleted correctly, and that all relevant invoice data is accurate and properly formatted.

Key objectives include:
1. **Invoice Creation:** Ensuring the system supports creating new invoices with all necessary details, including invoice number, due amount, and due date.
2. **Invoice Validation:** Verifying that each invoice contains the correct data and validation can be performed on unique fields like invoice number.
3. **Invoice Management:** Confirming update and delete operations work as expected and that deleted invoices are properly removed from the system.
4. **Reporting:** Checking the system can generate accurate reports based on the invoice data within specified date ranges."
Validate keyword-driven greenenergycorp for Billing invoice_management,keyword-driven,invoice_management,"*** Settings ***
Documentation    Validate invoice_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
invoice_management
[Documentation]    Validate invoice_management using the following steps
Generate New Invoice Number    account_id
Validate Invoice Data    invoice_number
Send Invoice To Customer    invoice_number, email
Check Payment Status For Invoice    invoice_number
Update Invoice Information    invoice_number, new_data

*** Keywords ***
Generate New Invoice Number
[Arguments]    account_id
[Return]    ${integer}
[Documentation]    Keyword description
Log    account_id

Validate Invoice Data
[Arguments]    invoice_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number

Send Invoice To Customer
[Arguments]    invoice_number, email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number, email

Check Payment Status For Invoice
[Arguments]    invoice_number
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_number

Update Invoice Information
[Arguments]    invoice_number, new_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number, new_data

","The ""invoice_management"" test case is designed to verify and validate the complete lifecycle management of invoices within the GreenEnergyCorp billing system. The primary objectives and purposes of this test case include:
"
Create keyword-driven system for InventoryManagement system_update,keyword-driven,system_update,"*** Settings ***
Documentation    Validate system_update
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${ADMIN_USER}       admin
${ADMIN_PASSWORD}   admin123

*** Test Cases ***
system_update
[Documentation]    Validate system_update using the following steps
Login To Inventory System    admin_user, admin_password
Navigate To System Settings    nan
Select System Update Option    nan
Upload New Software Version    software_version
Verify Upload Completion    nan
Validate Update Installation Process    nan
Validate System Restart After Update    nan
Validate Updated Version Information    expected_version
Check All System Functionalities Post Update    nan
Logout From Inventory System    nan

*** Keywords ***
Login To Inventory System
[Arguments]    admin_user, admin_password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    admin_user, admin_password

Navigate To System Settings
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Select System Update Option
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Upload New Software Version
[Arguments]    software_version
[Return]    ${string}
[Documentation]    Keyword description
Log    software_version

Verify Upload Completion
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Update Installation Process
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate System Restart After Update
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Updated Version Information
[Arguments]    expected_version
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_version

Check All System Functionalities Post Update
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Logout From Inventory System
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The test case 'system_update' is designed to verify the proper functioning and reliability of the system update process within the Inventory Management system. The primary purpose of this test case is to ensure that the system can successfully apply software updates and maintain its functionalities without any disruption.

Key aspects evaluated in this test case include:
"
Generate keyword-driven test case for API userauthentication,keyword-driven,userauthentication,"*** Settings ***
Documentation    Validate userauthentication
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
userauthentication
[Documentation]    Validate userauthentication using the following steps
Create Authentication Body    username, password
Get Authentication Token    body
Verify Token Validity    token
Authenticate User    username, password
Refresh Authentication Token    token

*** Keywords ***
Create Authentication Body
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Get Authentication Token
[Arguments]    body
[Return]    ${string}
[Documentation]    Keyword description
Log    body

Verify Token Validity
[Arguments]    token
[Return]    ${string}
[Documentation]    Keyword description
Log    token

Authenticate User
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Refresh Authentication Token
[Arguments]    token
[Return]    ${string}
[Documentation]    Keyword description
Log    token

","The 'userauthentication' test case is designed to validate the authentication process within a system. This includes verifying the correctness and reliability of user authentication mechanisms.

Key aspects usually covered in 'userauthentication' test cases include:

1. **Credentials Validation:** Ensuring that usernames and passwords are correctly validated and that proper error messages are displayed for invalid attempts.

2. **Token Generation:** Verifying that authentication tokens are generated correctly upon successful login and that they conform to security standards.

3. **Token Usage:** Ensuring that authentication tokens can be used for subsequent requests and that their validity is accurately verified.

4. **Token Refresh:** Validating the process of refreshing authentication tokens, ensuring seamless user experience without re-login.

5. **User Authentication:** Confirming that the entire process of user login, token generation, and further interactions using the token works reliably."
Validate keyword-driven web for PayNOW transaction_history,keyword-driven,transaction_history,"*** Settings ***
Documentation    Validate transaction_history
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
transaction_history
[Documentation]    Validate transaction_history using the following steps
Login To Application With Valid Credentials    ${VALID_USER}, ${VALID_PASSWORD}
Access Transaction History Page    account_id
Verify Transaction History Details    account_id, start_date, end_date

*** Keywords ***
Login To Application With Valid Credentials
[Arguments]    valid_user, valid_password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    valid_user, valid_password

Access Transaction History Page
[Arguments]    account_id
[Return]    ${string}
[Documentation]    Keyword description
Log    account_id

Verify Transaction History Details
[Arguments]    account_id, start_date, end_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_id, start_date, end_date

","The 'transaction_history' test case is designed to ensure the accurate retrieval and validation of transaction history within the PayNOW application. Its primary purposes include:
"
Create keyword-driven web for CompanyPortal user_management,keyword-driven,user_management,"*** Settings ***
Documentation    Validate user_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       adminuser
${VALID_PASSWORD}   adminpassword

*** Test Cases ***
user_management
[Documentation]    Validate user_management using the following steps
Login To Portal And Navigate To UserManagement    admin_username, admin_password
Add New User    user_details
Validate New User Details    expected_username, expected_email
Edit User Details    username, new_email
Validate Edited User Details    username, expected_new_email
Delete User    username
Validate User Is Deleted    username
Logout From Application    nan

*** Keywords ***
Login To Portal And Navigate To UserManagement
[Arguments]    admin_username, admin_password
[Return]    ${string}
[Documentation]    Keyword description
Log    admin_username, admin_password

Add New User
[Arguments]    user_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_details

Validate New User Details
[Arguments]    expected_username, expected_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_username, expected_email

Edit User Details
[Arguments]    username, new_email
[Return]    ${string}
[Documentation]    Keyword description
Log    username, new_email

Validate Edited User Details
[Arguments]    username, expected_new_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, expected_new_email

Delete User
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate User Is Deleted
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Logout From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'user_management' is crafted to verify the functionalities related to user management within a company's internal portal. The objectives of this test case include:
"
Generate keyword-driven web for PayNOW manage_payments,keyword-driven,manage_payments,"*** Settings ***
Documentation    Validate manage_payments
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
manage_payments
[Documentation]    Validate manage_payments using the following steps
Login To PayNOW And Navigate To Payments    account_number
Enter Payment Details    payment_amount, payment_method
Save Payment    nan
Validate Payment Details For Specific Payment Method    expected_method, expected_amount
Retrieve Payment History    account_number
Validate Payment History Details    account_number, expected_history
Delete Payment Record    payment_id
Validate Payment Deletion    payment_id
Select Payment Method For History    payment_method
Validate Payment Summary For Account    account_number, expected_summary
Select Specific Payment Date Range    start_date, end_date
Validate Payments Within Date Range    account_number, start_date, end_date
Generate Payments Report    account_number
Validate Generated Report Details    account_number, expected_details
Navigate To Payment Reports Page    nan
Signout From Payments Page    nan

*** Keywords ***
Login To PayNOW And Navigate To Payments
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Enter Payment Details
[Arguments]    payment_amount, payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_amount, payment_method

Save Payment
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment Details For Specific Payment Method
[Arguments]    expected_method, expected_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_method, expected_amount

Retrieve Payment History
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Validate Payment History Details
[Arguments]    account_number, expected_history
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, expected_history

Delete Payment Record
[Arguments]    payment_id
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_id

Validate Payment Deletion
[Arguments]    payment_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_id

Select Payment Method For History
[Arguments]    payment_method
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_method

Validate Payment Summary For Account
[Arguments]    account_number, expected_summary
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, expected_summary

Select Specific Payment Date Range
[Arguments]    start_date, end_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    start_date, end_date

Validate Payments Within Date Range
[Arguments]    account_number, start_date, end_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, start_date, end_date

Generate Payments Report
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Validate Generated Report Details
[Arguments]    account_number, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, expected_details

Navigate To Payment Reports Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Signout From Payments Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'manage_payments' is designed to ensure the effective management of payment transactions within the PayNOW system. Its primary purpose is to validate the following aspects:
"
Develop keyword-driven suite for User Registration,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_registration
[Documentation]    Validate user registration using the following steps
Navigate To Registration Page    nan
Enter User Details    username|email|password
Submit Registration Form    nan
Validate Registration Success Message    expected_message
Validate User In Database    username|email
Navigate To Login Page After Registration    nan
Attempt To Login With New Credentials    username|password
Validate Successful Login    username

*** Keywords ***
Navigate To Registration Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter User Details
[Arguments]    username|email|password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|email|password

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Registration Success Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Validate User In Database
[Arguments]    username|email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|email

Navigate To Login Page After Registration
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Attempt To Login With New Credentials
[Arguments]    username|password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password

Validate Successful Login
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

","The 'user_registration' test case is designed to validate the functionality and user experience of the user registration process in an application. Its primary purpose is to ensure that users can successfully create new accounts and subsequently gain access to the application using their new credentials.

Key aspects of the test case include:

1. **Form Navigation and Submission**:
- Verifies that users can navigate to the registration page, enter valid details, and submit the form without issues.

2. **Success Verification**:
- Confirms that a success message is displayed and the user is entered into the database correctly after registration.

3. **Login Verification**:
- Ensures that after registration, users can navigate to the login page and successfully access the application with their new credentials."
Create keyword-driven test case for user authentication,keyword-driven,user_authentication,"*** Settings ***
Documentation    Validate user authentication
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret
${INVALID_USER}     invaliduser
${INVALID_PASSWORD} wrongpassword

*** Test Cases ***
user_authentication
[Documentation]    Validate user authentication using the following steps
Login With Valid Credentials    ${VALID_USER}    ${VALID_PASSWORD}
Validate Login Success    ${VALID_USER}
Logout
Login With Invalid Credentials    ${INVALID_USER}    ${INVALID_PASSWORD}
Validate Login Failure    error_message

*** Keywords ***
Login With Valid Credentials
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description","The test case ""user_authentication"" is designed to validate the process of user authentication within an application. This involves checking both successful and unsuccessful login attempts. The main focus areas covered by this test case include:
"
Validate keyword-driven web for RoutingSystem deliver_package,keyword-driven,deliver_package,"*** Settings ***
Documentation    Validate deliver_package
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
deliver_package
[Documentation]    Validate deliver_package using the following steps
Login To RoutingSystem And Navigate To Delivery Section    username, password
Enter Package Details For Delivery    package_id, destination
Save Delivery Details    nan
Validate Scheduled Delivery Date And Time    expected_date, expected_time
Enter Recipient Details For Delivery    recipient_name, address
Validate Package Delivery Status    package_id, expected_status
Validate Delivery Confirmation    delivery_confirmation
Change Delivery Address    package_id, new_address
Validate Address Update Confirmation    update_confirmation

*** Keywords ***
Login To RoutingSystem And Navigate To Delivery Section
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Enter Package Details For Delivery
[Arguments]    package_id, destination
[Return]    ${string}
[Documentation]    Keyword description
Log    package_id, destination

Save Delivery Details
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Scheduled Delivery Date And Time
[Arguments]    expected_date, expected_time
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_date, expected_time

Enter Recipient Details For Delivery
[Arguments]    recipient_name, address
[Return]    ${string}
[Documentation]    Keyword description
Log    recipient_name, address

Validate Package Delivery Status
[Arguments]    package_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    package_id, expected_status

Validate Delivery Confirmation
[Arguments]    delivery_confirmation
[Return]    ${boolean}
[Documentation]    Keyword description
Log    delivery_confirmation

Change Delivery Address
[Arguments]    package_id, new_address
[Return]    ${string}
[Documentation]    Keyword description
Log    package_id, new_address

Validate Address Update Confirmation
[Arguments]    update_confirmation
[Return]    ${boolean}
[Documentation]    Keyword description
Log    update_confirmation

","The ""deliver_package"" test case is designed to verify the functionality and reliability of the package delivery feature within the RoutingSystem. This test case ensures that the system properly handles the end-to-end delivery process, from package details entry to confirmation of successful delivery. Key aspects typically assessed during the ""deliver_package"" test case include:
"
Validate keyword-driven web for eShopProductManagement system add_product,keyword-driven,add_product,"*** Settings ***
Documentation    Validate add_product
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${ADMIN_USER}       adminuser
${ADMIN_PASSWORD}   adminsecret

*** Test Cases ***
add_product
[Documentation]    Validate add_product using the following steps
Navigate To Product Management    admin_credentials
Enter Product Details    product_info
Submit Product Form    product_info
Validate Confirmation Message    confirmation_message
Check Product In Inventory    product_id

*** Keywords ***
Navigate To Product Management
[Arguments]    admin_credentials
[Return]    ${boolean}
[Documentation]    Keyword description
Log    admin_credentials

Enter Product Details
[Arguments]    product_info
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_info

Submit Product Form
[Arguments]    product_info
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_info

Validate Confirmation Message
[Arguments]    confirmation_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    confirmation_message

Check Product In Inventory
[Arguments]    product_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id

","The purpose of the 'add_product' test case is to ensure that the product addition functionality in the eShopProductManagement system is working as expected. This test case validates several key aspects including:
"
Validate keyword-driven sterlingcooper for User Management user_management,keyword-driven,user_management,"*** Settings ***
Documentation    Validate user_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testadmin
${VALID_PASSWORD}   adminpassword

*** Test Cases ***
user_management
[Documentation]    Validate user_management using the following steps
Create New User    user_info
Validate User Created    expected_username
Update User Details    user_info
Validate User Details Updated    expected_username
Delete User    username
Validate User Deleted    expected_username
Search User    username
Validate Searched User Details    expected_username
Assign Role To User    username, role
Validate Assigned Role    expected_username, expected_role
Remove Role From User    username, role
Validate Removed Role    expected_username, expected_role
Deactivate User    username
Validate User Deactivated    expected_username
Reactivate User    username
Validate User Reactivated    expected_username

*** Keywords ***
Create New User
[Arguments]    user_info
[Return]    ${string}
[Documentation]    Keyword description
Log    user_info

Validate User Created
[Arguments]    expected_username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_username

Update User Details
[Arguments]    user_info
[Return]    ${string}
[Documentation]    Keyword description
Log    user_info

Validate User Details Updated
[Arguments]    expected_username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_username

Delete User
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate User Deleted
[Arguments]    expected_username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_username

Search User
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate Searched User Details
[Arguments]    expected_username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_username

Assign Role To User
[Arguments]    username, role
[Return]    ${string}
[Documentation]    Keyword description
Log    username, role

Validate Assigned Role
[Arguments]    expected_username, expected_role
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_username, expected_role

Remove Role From User
[Arguments]    username, role
[Return]    ${string}
[Documentation]    Keyword description
Log    username, role

Validate Removed Role
[Arguments]    expected_username, expected_role
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_username, expected_role

Deactivate User
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Validate User Deactivated
[Arguments]    expected_username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_username

Reactivate User
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Validate User Reactivated
[Arguments]    expected_username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_username

","The 'user_management' test case is designed to evaluate the functionality and performance of the user management module within a software application. The key objectives of this test case are to ensure that the following operations are handled correctly by the system:
"
Generate a keyword-driven web for ECommerceSystem customer_order_management,keyword-driven,customer_order_management,"*** Settings ***
Documentation    Validate customer_order_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         ecommerce_resources.robot

*** Variables ***
${VALID_USER}       customer_user
${VALID_PASSWORD}   password123

*** Test Cases ***
customer_order_management
[Documentation]    Validate customer_order_management using the following steps
Navigate To Orders Page    nan
Validate Orders Page Is Displayed    nan
Create New Order    order_details
Validate Order Confirmation Is Shown    expected_confirmation_message
Navigate To Order History    nan
Validate Order In History    order_number, expected_order_status
Cancel Order    order_number
Validate Order Cancellation    order_number, expected_status
Reactivate Cancelled Order    order_number
Validate Order Reactivation    order_number, expected_status
Update Order Details    order_number, new_order_details
Validate Order Update    order_number, expected_updated_details

*** Keywords ***
Navigate To Orders Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Orders Page Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Create New Order
[Arguments]    order_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_details

Validate Order Confirmation Is Shown
[Arguments]    expected_confirmation_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_confirmation_message

Navigate To Order History
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order In History
[Arguments]    order_number, expected_order_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number, expected_order_status

Cancel Order
[Arguments]    order_number
[Return]    ${string}
[Documentation]    Keyword description
Log    order_number

Validate Order Cancellation
[Arguments]    order_number, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number, expected_status

Reactivate Cancelled Order
[Arguments]    order_number
[Return]    ${string}
[Documentation]    Keyword description
Log    order_number

Validate Order Reactivation
[Arguments]    order_number, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number, expected_status

Update Order Details
[Arguments]    order_number, new_order_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_number, new_order_details

Validate Order Update
[Arguments]    order_number, expected_updated_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number, expected_updated_details

","The test case 'customer_order_management' aims to validate the comprehensive management of customer orders within the ECommerceSystem. The test's goal is to assure that users can efficiently create, modify, and cancel their orders.

Key aspects of the test case include:"
Create keyword-driven web for Orders OrderProcessing,keyword-driven,OrderProcessing,"*** Settings ***
Documentation    Validate OrderProcessing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
OrderProcessing
[Documentation]    Validate OrderProcessing using the following steps
Validate Order Creation    order_id|expected_status
Expand Order Details    nan
Validate Customer Information    customer_id|customer_name
Validate Order Items And Total Price    expected_items|expected_total
Select Shipping Method    shipping_method
Send Order Confirmation    order_id
Validate Order Confirmation Email    order_id|expected_email_subject
Validate Order Status In Customer Account    order_id|expected_status
Enable Order Notifications    option
Validate Order Notifications Are Enabled    nan
Validate Shipping Address    expected_address
Navigate To Order Details Page    order_id
Collapse Order Details    nan
Validate Order Payment Status    order_id|expected_payment_status
Filter Orders By Status    status
Validate Filtered Orders Are Displayed    status
Filter Order Details By Customer    order_id|customer_id
Validate Invoice Generation    order_id|expected_invoice_status
Validate Shipment Tracking Details    shipment_id|expected_tracking_details
Validate Order Summary For Last 30 Days    date
Validate Line Items For Order    order_id
Navigate To Payment History From Orders    order_id
Validate Payment History Details Are Displayed    payment_date|payment_amount|payment_method
Validate Order Summary Details    order_id|order_date|expected_total
Validate Order Document Type And Order Date    order_id|document_type|order_date
Validate Email Subject And Sender Address    expected_subject|expected_sender_email
Select Alternate Shipping Address    address
Navigate To Payment Status    order_id|payment_status
Validate Payment Status After Transaction Completion    order_id|expected_status|expected_amount
Navigate To Customer Account From Order Summary    order_id
Validate Email Open Date And Count    expected_open_date|expected_open_count
Validate Order History Page Is Displayed    nan
Send a Copy of Order Summary    email|sendcopy_emailid
Validate Order Tracking Information Is Displayed    nan
Filter Orders By Customer And Date    customer_id|order_date|filter_By
Validate Order Date For Last Month And This Month    date

*** Keywords ***
Validate Order Creation
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

Expand Order Details
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Customer Information
[Arguments]    customer_id|customer_name
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id|customer_name

Validate Order Items And Total Price
[Arguments]    expected_items|expected_total
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_items|expected_total

Select Shipping Method
[Arguments]    shipping_method
[Return]    ${string}
[Documentation]    Keyword description
Log    shipping_method

Send Order Confirmation
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Confirmation Email
[Arguments]    order_id|expected_email_subject
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_email_subject

Validate Order Status In Customer Account
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

Enable Order Notifications
[Arguments]    option
[Return]    ${string}
[Documentation]    Keyword description
Log    option

Validate Order Notifications Are Enabled
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Shipping Address
[Arguments]    expected_address
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_address

Navigate To Order Details Page
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Collapse Order Details
[Arguments]    nan
[Return]    ${string}
",
Validate keyword-driven web for CommonKeywordsForAllMerchants cart_checkout,keyword-driven,cart_checkout,"*** Settings ***
Documentation    Validate cart_checkout
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
cart_checkout
[Documentation]    Validate cart_checkout using the following steps
Add Item To Cart    item_id
Validate Item Added To Cart    item_id
Proceed To Checkout    nan
Enter Shipping Information    shipping_details
Select Payment Method    payment_method
Validate Shipping Information    shipping_details
Complete Checkout    nan
Validate Order Confirmation    order_id

*** Keywords ***
Add Item To Cart
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

Validate Item Added To Cart
[Arguments]    item_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id

Proceed To Checkout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Shipping Information
[Arguments]    shipping_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    shipping_details

Select Payment Method
[Arguments]    payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method

Validate Shipping Information
[Arguments]    shipping_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    shipping_details

Complete Checkout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order Confirmation
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

","The 'cart_checkout' test case aims to ensure the completeness and accuracy of the checkout process in an e-commerce application. This involves verifying that items can be added to the cart, shipping information is correctly entered and validated, payment methods are selectable, and orders are successfully completed and confirmed.

Key objectives include:

1. **Add Items to Cart:**
- Verify that users can add and view items in their cart.
- Ensure updated cart reflects the added items accurately.

2. **Checkout Process:**
- Validate the ability to proceed to checkout from the cart.
- Ensure shipping information forms are correctly populated and validated.
- Confirm payment methods selection functionality works as expected.

3. **Order Confirmation:**
- Ensure that the application provides a proper order confirmation after the checkout is completed.
- Validate that the order details match the input provided during the checkout process.

4. **Error Handling:**
- Validate proper handling and messaging for incorrect or incomplete shipping information.
- Ensure system returns to cart in case of payment failure or other checkout issues."
Create keyword-driven web for PayNOW featureX verify_featureX,keyword-driven,verify_featureX,"*** Settings ***
Documentation    Validate verify_featureX
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
verify_featureX
[Documentation]    Validate verify_featureX using the following steps
Login Into PayNOW App    username, password
Navigate To FeatureX Tab    nan
Create New Record In FeatureX    record_details
Validate Record Creation.    record_id
Update Record In FeatureX    record_id, updated_details
Validate Record Update    record_id, expected_details
Delete Record From FeatureX    record_id
Validate Record Deletion    record_id
Check Record Not Present In List    record_id
Search For Record In FeatureX    search_criteria
Validate Search Results    search_criteria, expected_results

*** Keywords ***
Login Into PayNOW App
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Navigate To FeatureX Tab
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Create New Record In FeatureX
[Arguments]    record_details
[Return]    ${string}
[Documentation]    Keyword description
Log    record_details

Validate Record Creation
[Arguments]    record_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    record_id

Update Record In FeatureX
[Arguments]    record_id, updated_details
[Return]    ${string}
[Documentation]    Keyword description
Log    record_id, updated_details

Validate Record Update
[Arguments]    record_id, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    record_id, expected_details

Delete Record From FeatureX
[Arguments]    record_id
[Return]    ${string}
[Documentation]    Keyword description
Log    record_id

Validate Record Deletion
[Arguments]    record_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    record_id

Check Record Not Present In List
[Arguments]    record_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    record_id

Search For Record In FeatureX
[Arguments]    search_criteria
[Return]    ${string}
[Documentation]    Keyword description
Log    search_criteria

Validate Search Results
[Arguments]    search_criteria, expected_results
[Return]    ${boolean}
[Documentation]    Keyword description
Log    search_criteria, expected_results
","The test case 'verify_featureX' aims to validate the functionality and integration of the FeatureX within PayNOW. This feature is essential for ensuring that users can create, update, and delete records accurately, and search for records effectively.

Key objectives include:
1. Ensuring that records are correctly created based on user input.
2. Verifying the accuracy of search results.
3. Confirming that updates to records reflect immediately.
4. Validating that deleted records no longer appear in the list.
5. Ensuring a seamless user interaction with FeatureX functionalities."
Generate keyword-driven web for PayNOW omnicorp_notifications,keyword-driven,omnicorp_notifications,"*** Settings ***
Documentation    Validate omnicorp_notifications
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
omnicorp_notifications
[Documentation]    Validate omnicorp_notifications using the following steps
Navigate To Notification Settings Tab    account_number, user_id
Enable Notifications For Payment Reminders    nan
Validate Notification Is Enabled    notification_type
Disable Notifications For Payment Reminders    nan
Validate Notification Is Disabled    notification_type
Set Notification Preferences    preferences
Validate Notification Preferences    expected_preferences
Trigger Payment Due Notification    account_number, due_date
Validate Payment Due Notification Received    account_number, expected_message

*** Keywords ***
Navigate To Notification Settings Tab
[Arguments]    account_number, user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number, user_id

Enable Notifications For Payment Reminders
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Notification Is Enabled
[Arguments]    notification_type
[Return]    ${boolean}
[Documentation]    Keyword description
Log    notification_type

Disable Notifications For Payment Reminders
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Notification Is Disabled
[Arguments]    notification_type
[Return]    ${boolean}
[Documentation]    Keyword description
Log    notification_type

Set Notification Preferences
[Arguments]    preferences
[Return]    ${string}
[Documentation]    Keyword description
Log    preferences

Validate Notification Preferences
[Arguments]    expected_preferences
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_preferences

Trigger Payment Due Notification
[Arguments]    account_number, due_date
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number, due_date

Validate Payment Due Notification Received
[Arguments]    account_number, expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, expected_message

","The test case 'omnicorp_notifications' aims to verify the functionality and reliability of the notification system within Omnicorp's PayNOW platform. This test ensures that users receive timely and accurate notifications related to their payment activities, and that the system properly manages their notification preferences.

Key validation aspects include:"
Validate keyword-driven web for PayNOW omnicorp_paymentprocessing,keyword-driven,omnicorp_paymentprocessing,"*** Settings ***
Documentation    Validate omnicorp_paymentprocessing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
omnicorp_paymentprocessing
[Documentation]    Validate omnicorp_paymentprocessing using the following steps
Login To PayNOW And Navigate To Payment Processing    account_number, payment_details
Enter Payment Details    payment_data
Save Payment    nan
Validate Payment Confirmation Message    expected_message
Validate Payment Records In Database    record_id, expected_status
Delete Payment Details    nan
Validate Payment Deletion Message    expected_deletion_message

*** Keywords ***
Login To PayNOW And Navigate To Payment Processing
[Arguments]    account_number, payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number, payment_details

Enter Payment Details
[Arguments]    payment_data
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_data

Save Payment
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment Confirmation Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Validate Payment Records In Database
[Arguments]    record_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    record_id, expected_status

Delete Payment Details
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment Deletion Message
[Arguments]    expected_deletion_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_deletion_message

","The ""omnicorp_paymentprocessing"" test case focuses on verifying the functionality and reliability of the payment processing system within Omnicorp's financial platform, PayNOW. The primary goals of this test case include:
"
Validate keyword-driven ecomm for API orderprocessing,keyword-driven,orderprocessing,"*** Settings ***
Documentation    Validate orderprocessing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
orderprocessing
[Documentation]    Validate orderprocessing using the following steps
Create Order Body    order_id|customer_id|order_date|order_amount|shipping_address
Send Order Creation Request    merchant|order_id|customer_id|order_date|order_amount
Verify Order Creation Response    order_id
Create Shipping Details Body    shipping_address
Send Shipping Details Request    order_id|shipping_address
Confirm Shipping    order_id
Send Order Confirmation Request    merchant|order_id|order_amount
Validate Order Processing Results    order_id|order_amount|shipping_status

*** Keywords ***
Create Order Body
[Arguments]    order_id|customer_id|order_date|order_amount|shipping_address
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|customer_id|order_date|order_amount|shipping_address

Send Order Creation Request
[Arguments]    merchant|order_id|customer_id|order_date|order_amount
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant|order_id|customer_id|order_date|order_amount

Verify Order Creation Response
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Create Shipping Details Body
[Arguments]    shipping_address
[Return]    ${string}
[Documentation]    Keyword description
Log    shipping_address

Send Shipping Details Request
[Arguments]    order_id|shipping_address
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id|shipping_address

Confirm Shipping
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Send Order Confirmation Request
[Arguments]    merchant|order_id|order_amount
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant|order_id|order_amount

Validate Order Processing Results
[Arguments]    order_id|order_amount|shipping_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|order_amount|shipping_status

","The ""orderprocessing"" test case is created to ensure the efficiency and correctness of the order processing system within an application. This involves checking different functional aspects including:
"
Build keyword-driven clientcentral_keywords for API transaction,keyword-driven,transaction,"*** Settings ***
Documentation    Validate transaction
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
transaction
[Documentation]    Validate transaction using the following steps
Create Transaction Body    unique_value|transaction_id|transaction_amount|transaction_date
Send Request To Create Transaction For Customer    merchant|unique_value|transaction_id|transaction_amount|transaction_date
Create Customer Details Body    nan","The purpose of the 'transaction' test case is to ensure the transaction processing system of an application works correctly and reliably. This involves:
"
Validate functionality for billing_system monthly_billing_report,keyword-driven,monthly_billing_report,"*** Settings ***
Documentation    Validate monthly_billing_report
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       billing_user
${VALID_PASSWORD}   billing_secret

*** Test Cases ***
monthly_billing_report
[Documentation]    Validate monthly_billing_report using the following steps
Navigate To Billing Reports Tab    user_id
Select Report Month    report_month
Generate Billing Report    nan
Validate Report Generated Successfully    report_month
Export Billing Report    format
Validate Exported Report Format And Content    format, expected_content
Filter Report By Customer    customer_id
Validate Report Filtered By Customer    customer_id, report_month
Send Report Via Email    recipient_email
Validate Report Received In Email    recipient_email, expected_subject
Validate Report Summary Information    report_month, expected_summary

*** Keywords ***
Navigate To Billing Reports Tab
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Select Report Month
[Arguments]    report_month
[Return]    ${string}
[Documentation]    Keyword description
Log    report_month

Generate Billing Report
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Report Generated Successfully
[Arguments]    report_month
[Return]    ${boolean}
[Documentation]    Keyword description
Log    report_month

Export Billing Report
[Arguments]    format
[Return]    ${string}
[Documentation]    Keyword description
Log    format

Validate Exported Report Format And Content
[Arguments]    format, expected_content
[Return]    ${boolean}
[Documentation]    Keyword description
Log    format, expected_content

Filter Report By Customer
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

Validate Report Filtered By Customer
[Arguments]    customer_id, report_month
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id, report_month

Send Report Via Email
[Arguments]    recipient_email
[Return]    ${string}
[Documentation]    Keyword description
Log    recipient_email

Validate Report Received In Email
[Arguments]    recipient_email, expected_subject
[Return]    ${boolean}
[Documentation]    Keyword description
Log    recipient_email, expected_subject

Validate Report Summary Information
[Arguments]    report_month, expected_summary
[Return]    ${boolean}
[Documentation]    Keyword description
Log    report_month, expected_summary

","The test case 'monthly_billing_report' is intended to validate the functionality and completeness of the monthly billing report generation feature within the billing system. The objectives of this test case are to:

1. **Report Generation Accuracy:** Ensure that the billing report generated accurately reflects all transactions and billing details for the selected month.
2. **Format and Content Verification:** Confirm that the exported report is in the correct format and contains the expected content.
3. **Filtering Functionality:** Verify that the billing report can be correctly filtered by customer and that the filtered results are accurate.
4. **Email Functionality:** Validate that the generated report can be sent via email and is received correctly by the intended recipient, with all necessary details included.
5. **Summary Validation:** Ensure that the summary information in the report, such as total billing amount and number of transactions, is accurate and matches expected values."
Develop keyword-driven testing for SmartPay transaction_validation,keyword-driven,transaction_validation,"*** Settings ***
Documentation    Validate transaction_validation
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testagent
${VALID_PASSWORD}   smartpay123

*** Test Cases ***
transaction_validation
[Documentation]    Validate transaction_validation using the following steps
Initiate Payment Gateway Connection    gateway_details
Perform Transaction Authorization    auth_details
Verify Transaction Status    transaction_id
Validate Payment Gateway Connection Closed    nan
Validate Authorization Code Is Correct    auth_code
Check Transaction Amount    expected_amount|actual_amount
Logout From Payment Gateway    nan
Verify Transaction Receipt Is Generated    receipt_details
Validate Transaction Timestamp    timestamp
Reauthorize Transaction    transaction_details
Navigate To Transaction History Page    nan
Validate Transaction Is Listed In History    transaction_id

*** Keywords ***
Initiate Payment Gateway Connection
[Arguments]    gateway_details
[Return]    ${string}
[Documentation]    Keyword description
Log    gateway_details

Perform Transaction Authorization
[Arguments]    auth_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    auth_details

Verify Transaction Status
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Validate Payment Gateway Connection Closed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Authorization Code Is Correct
[Arguments]    auth_code
[Return]    ${boolean}
[Documentation]    Keyword description
Log    auth_code

Check Transaction Amount
[Arguments]    expected_amount|actual_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_amount|actual_amount

Logout From Payment Gateway
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Verify Transaction Receipt Is Generated
[Arguments]    receipt_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    receipt_details

Validate Transaction Timestamp
[Arguments]    timestamp
[Return]    ${boolean}
[Documentation]    Keyword description
Log    timestamp

Reauthorize Transaction
[Arguments]    transaction_details
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_details

Navigate To Transaction History Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Transaction Is Listed In History
[Arguments]    transaction_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id

","The test case ""transaction_validation"" for SmartPay is designed to ensure the robustness, accuracy, and reliability of transaction processes within a payment system. Here's a summary of its purpose:

### Purpose:
1. **Validation of Transaction Integrity:**
- Ensure that each transaction is correctly processed, authorized, and recorded in the system.
- Verify the accuracy of transaction details, including the amount, authorization code, and timestamp.

2. **Functional Testing:**
- Confirm that the payment gateway connection is successfully initiated and closed after transactions.
- Verify the appearance of transactions in the transaction history and the generation of transaction receipts."
Validate keyword-driven web for PayNOW instant_payment,keyword-driven,instant_payment,"*** Settings ***
Documentation    Validate instant_payment
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
instant_payment
[Documentation]    Validate instant_payment using the following steps
Login To PayNOW And Navigate To Payment    account_number
Enter Payment Details    payment_amount, payment_method
Confirm Payment    nan
Validate Payment Confirmation    transaction_id, expected_amount, expected_status
Enter Invalid Payment Details    payment_amount, invalid_payment_method
Validate Error Message For Invalid Payment    expected_error_message
Navigate To Payment History    account_number
Validate Recent Payment Record    transaction_id, expected_amount, expected_status
Logout From PayNOW    nan

*** Keywords ***
Login To PayNOW And Navigate To Payment
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Enter Payment Details
[Arguments]    payment_amount, payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_amount, payment_method

Confirm Payment
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment Confirmation
[Arguments]    transaction_id, expected_amount, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, expected_amount, expected_status

Enter Invalid Payment Details
[Arguments]    payment_amount, invalid_payment_method
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_amount, invalid_payment_method

Validate Error Message For Invalid Payment
[Arguments]    expected_error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_error_message

Navigate To Payment History
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Validate Recent Payment Record
[Arguments]    transaction_id, expected_amount, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, expected_amount, expected_status

Logout From PayNOW
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan
","The 'instant_payment' test case is designed to verify the functionality and reliability of the instant payment feature within the PayNOW platform. This test case ensures that payments are processed immediately and accurately, with comprehensive validation of payment entries and error handling.

Key objectives of the test case include:
1. **Successful Payment Transactions:** Verify that instant payments are processed correctly and recorded accurately.
2. **Error Handling:** Ensure appropriate error messages are shown for invalid payment details.
3. **Payment Confirmation:** Confirm that the payment confirmation is accurate and contains correct details.
4. **Payment History:** Validate that recent payment transactions are correctly reflected in the payment history.
5. **User Interaction:** Ensure smooth navigation and logout functionality throughout the payment process."
Validate keyword-driven ecomm_keywords for ECommerceApp add_to_cart,keyword-driven,add_to_cart,"*** Settings ***
Documentation    Validate add_to_cart
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
add_to_cart
[Documentation]    Validate add_to_cart using the following steps
Login To ECommerce Application    username|password
Search For Product    product_name
Add Product To Cart    product_id
Validate Cart Contains Product    product_id
Remove Product From Cart    product_id
Validate Cart Is Empty

*** Keywords ***
Login To ECommerce Application
[Arguments]    username|password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password

Search For Product
[Arguments]    product_name
[Return]    ${string}
[Documentation]    Keyword description
Log    product_name

Add Product To Cart
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Validate Cart Contains Product
[Arguments]    product_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id

Remove Product From Cart
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Validate Cart Is Empty
[Return]    ${boolean}
[Documentation]    Keyword description
Log    Cart is empty

","The 'add_to_cart' test case aims to validate the operation of adding items to the shopping cart in an eCommerce application, ensuring it works seamlessly for the user. The test case covers several critical aspects, including:

1. **User Login:** Confirming that a user can log in successfully with valid credentials before adding items to the cart.
2. **Product Search:** Verifying that a user can search for a product using specific keywords or identifiers.
3. **Adding to Cart:** Ensuring the system correctly handles a user's request to add a selected product to their shopping cart.
4. **Cart Validation:** Checking that the product appears in the cart as expected, including correct quantity and details.
5. **Removing from Cart:** Validating that a user can remove items from the cart and that the system properly updates the cart contents.
6. **Empty Cart State:** Ensuring the cart can be emptied and displays correctly when no items are present.

These steps collectively ensure that the add-to-cart functionality is robust, intuitive, and reliable, providing a positive user experience in an eCommerce environment."
Develop keyword-driven tests for user profile management in a web application,keyword-driven,user_profile_management,"*** Settings ***
Documentation    Validate user_profile_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_profile_management
[Documentation]    Validate user_profile_management using the following steps
Login User    ${VALID_USER}    ${VALID_PASSWORD}
Navigate To Profile Page    nan
Update Profile Information    username    new_email    new_phone    new_address
Validate Updated Profile Information    expected_username    expected_email    expected_phone    expected_address
Change Profile Picture    picture_path
Validate Profile Picture Updated    nan
Logout User    nan

*** Keywords ***
Login User
[Arguments]    username    password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username    password

Navigate To Profile Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Update Profile Information
[Arguments]    username    email    phone    address
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username    email    phone    address

Validate Updated Profile Information
[Arguments]    expected_username    expected_email    expected_phone    expected_address
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_username    expected_email    expected_phone    expected_address

Change Profile Picture
[Arguments]    picture_path
[Return]    ${string}
[Documentation]    Keyword description
Log    picture_path

Validate Profile Picture Updated
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Logout User
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The 'user_profile_management' test case is designed to evaluate the functioning of a web application's user profile management features. This test case ensures that users can effectively manage their profile information, including updating personal details and changing profile pictures. The objectives are to verify:
"
Validate keyword-driven clientportal accountmanagement_keywords for API customerprofiles,keyword-driven,"customerprofiles
","
*** Settings ***
Documentation    Validate customerprofiles
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
customerprofiles
[Documentation]    Validate customerprofiles using the following steps
Create Customer Profile    profile_data
Update Customer Profile    profile_id, updated_data
Delete Customer Profile    profile_id
Retrieve Customer Profile    profile_id
Search Customer Profiles    search_criteria
Validate Customer Profile Exists    profile_id
Validate Customer Profile Update    profile_id, field, expected_value
Validate Deleted Customer Profile    profile_id

*** Keywords ***
Create Customer Profile
[Arguments]    profile_data
[Return]    ${string}
[Documentation]    Keyword description
Log    profile_data

Update Customer Profile
[Arguments]    profile_id, updated_data
[Return]    ${string}
[Documentation]    Keyword description
Log    profile_id, updated_data

Delete Customer Profile
[Arguments]    profile_id
[Return]    ${string}
[Documentation]    Keyword description
Log    profile_id

Retrieve Customer Profile
[Arguments]    profile_id
[Return]    ${string}
[Documentation]    Keyword description
Log    profile_id

Search Customer Profiles
[Arguments]    search_criteria
[Return]    ${string}
[Documentation]    Keyword description
Log    search_criteria

Validate Customer Profile Exists
[Arguments]    profile_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    profile_id

Validate Customer Profile Update
[Arguments]    profile_id, field, expected_value
[Return]    ${boolean}
[Documentation]    Keyword description
Log    profile_id, field, expected_value

Validate Deleted Customer Profile
[Arguments]    profile_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    profile_id

","The ""customerprofiles"" test case is designed to verify the functionality and reliability of the customer profiles management system within the client portal. Its primary purpose is to ensure that the system accurately handles various operations related to customer profile creation, updating, deletion, retrieval, and searching.

Key objectives of the test case include:"
Validate keyword-driven accounting for Vendor Management vendor_validation,keyword-driven,vendor_validation,"*** Settings ***
Documentation    Validate vendor_validation
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
vendor_validation
[Documentation]    Validate vendor_validation using the following steps
Add New Vendor    vendor_details
Validate Vendor Creation    vendor_id
Update Vendor Information    vendor_id|update_details
Delete Vendor    vendor_id
Validate Vendor Deletion    vendor_id
Search Vendor By Name    vendor_name
Validate Vendor Search Results    vendor_name|expected_results
Generate Vendor Report    report_criteria
Validate Vendor Report Generated    report_id

*** Keywords ***
Add New Vendor
[Arguments]    vendor_details
[Return]    ${integer}
[Documentation]    Keyword description
Log    vendor_details

Validate Vendor Creation
[Arguments]    vendor_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    vendor_id

Update Vendor Information
[Arguments]    vendor_id|update_details
[Return]    ${string}
[Documentation]    Keyword description
Log    vendor_id|update_details

Delete Vendor
[Arguments]    vendor_id
[Return]    ${integer}
[Documentation]    Keyword description
Log    vendor_id

Validate Vendor Deletion
[Arguments]    vendor_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    vendor_id

Search Vendor By Name
[Arguments]    vendor_name
[Return]    ${string}
[Documentation]    Keyword description
Log    vendor_name

Validate Vendor Search Results
[Arguments]    vendor_name|expected_results
[Return]    ${boolean}
[Documentation]    Keyword description
Log    vendor_name|expected_results

Generate Vendor Report
[Arguments]    report_criteria
[Return]    ${string}
[Documentation]    Keyword description
Log    report_criteria

Validate Vendor Report Generated
[Arguments]    report_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    report_id

","The purpose of the 'vendor_validation' test case is to evaluate and verify the functionality, accuracy, and reliability of a system or application that handles vendor management processes within an accounting framework. This includes ensuring the proper addition, update, deletion, search, and reporting of vendor information.

### Key Objectives:"
Create keyword-driven web test for ShoppingCart application,keyword-driven,shopping_cart,"*** Settings ***
Documentation    Validate ShoppingCart application
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
shopping_cart
[Documentation]    Validate ShoppingCart application using the following steps
Login To ShoppingCart And Navigate To Cart    account_number
Add Item To Cart    item_id
Validate Item Is Added To Cart    item_id, expected_item_details
Remove Item From Cart    item_id
Validate Cart Is Empty    nan
Apply Discount Code    discount_code
Validate Discount Is Applied    expected_discount
Proceed To Checkout    nan
Enter Shipping Details    shipping_details
Validate Shipping Details    expected_shipping_details
Enter Billing Information    billing_information
Validate Billing Information    expected_billing_information
Place Order    nan
Validate Order Confirmation    expected_order_confirmation

*** Keywords ***
Login To ShoppingCart And Navigate To Cart
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Add Item To Cart
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id

Validate Item Is Added To Cart
[Arguments]    item_id, expected_item_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    item_id, expected_item_details

Remove Item From Cart
[Arguments]    item_id
[Return]    ${string}
[Documentation]    Keyword description
Log    item_id

Validate Cart Is Empty
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Apply Discount Code
[Arguments]    discount_code
[Return]    ${string}
[Documentation]    Keyword description
Log    discount_code

Validate Discount Is Applied
[Arguments]    expected_discount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_discount

Proceed To Checkout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Shipping Details
[Arguments]    shipping_details
[Return]    ${string}
[Documentation]    Keyword description
Log    shipping_details

Validate Shipping Details
[Arguments]    expected_shipping_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_shipping_details

Enter Billing Information
[Arguments]    billing_information
[Return]    ${string}
[Documentation]    Keyword description
Log    billing_information

Validate Billing Information
[Arguments]    expected_billing_information
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_billing_information

Place Order
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order Confirmation
[Arguments]    expected_order_confirmation
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_order_confirmation
","The test case 'shopping_cart' is designed to verify the functionality and reliability of the ShoppingCart application. The main goal is to ensure the application correctly handles the process of adding items to the cart, applying discounts, and completing a purchase. Key objectives include:
"
Create keyword-driven sterlingcooper for Users user_profiles,keyword-driven,user_profiles,"*** Settings ***
Documentation    Validate user_profiles
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_profiles
[Documentation]    Validate user_profiles using the following steps
Navigate To User Profiles    account_id
Validate User Profile Details Is Displayed    expected_profile_id
Update User Information In Profile    user_information
Validate Updated Information Is Displayed    expected_information
Upload Profile Picture    picture
Validate Profile Picture Is Uploaded    expected_picture_status
Enable Access Permissions    permissions
Validate Access Permissions Are Enabled    expected_permission_status
Delete User Profile    profile_id
Validate User Profile Is Deleted    expected_deletion_status
Archive User Profile    profile_id
Validate User Profile Is Archived    expected_archive_status
Restore Archived Profile    profile_id
Validate Restored Profile Is Active    expected_restore_status

*** Keywords ***
Navigate To User Profiles
[Arguments]    account_id
[Return]    ${string}
[Documentation]    Keyword description
Log    account_id

Validate User Profile Details Is Displayed
[Arguments]    expected_profile_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_profile_id

Update User Information In Profile
[Arguments]    user_information
[Return]    ${string}
[Documentation]    Keyword description
Log    user_information

Validate Updated Information Is Displayed
[Arguments]    expected_information
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_information

Upload Profile Picture
[Arguments]    picture
[Return]    ${string}
[Documentation]    Keyword description
Log    picture

Validate Profile Picture Is Uploaded
[Arguments]    expected_picture_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_picture_status

Enable Access Permissions
[Arguments]    permissions
[Return]    ${string}
[Documentation]    Keyword description
Log    permissions

Validate Access Permissions Are Enabled
[Arguments]    expected_permission_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_permission_status

Delete User Profile
[Arguments]    profile_id
[Return]    ${string}
[Documentation]    Keyword description
Log    profile_id

Validate User Profile Is Deleted
[Arguments]    expected_deletion_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_deletion_status

Archive User Profile
[Arguments]    profile_id
[Return]    ${string}
[Documentation]    Keyword description
Log    profile_id

Validate User Profile Is Archived
[Arguments]    expected_archive_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_archive_status

Restore Archived Profile
[Arguments]    profile_id
[Return]    ${string}
[Documentation]    Keyword description
Log    profile_id

Validate Restored Profile Is Active
[Arguments]    expected_restore_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_restore_status

","The purpose of the 'user_profiles' test case is to evaluate and verify the functionality, accuracy, and reliability of a system or application that manages user profiles. This test case aims to ensure that all aspects of user profile management are working as intended, covering various scenarios and edge cases to identify potential issues or bugs.

### Key Objectives:"
Create keyword-driven web for SecurePay payment_processing_errors,keyword-driven,payment_processing_errors,"*** Settings ***
Documentation    Validate payment_processing_errors
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
payment_processing_errors
[Documentation]    Validate payment_processing_errors using the following steps
Navigate To Payment Page    nan
Enter Valid Payment Details    payment_details
Submit Payment    nan
Validate Payment Error Message Displayed    error_message
Retry Payment After Error    nan
Validate Payment Succeeded After Retry    transaction_id
Log Out    nan

*** Keywords ***
Navigate To Payment Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Valid Payment Details
[Arguments]    payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_details

Submit Payment
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment Error Message Displayed
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message

Retry Payment After Error
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment Succeeded After Retry
[Arguments]    transaction_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id

Log Out
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'payment_processing_errors' test case is designed to verify the system's behavior when encountering errors during the payment process. The primary goal is to ensure that the system can gracefully handle payment errors and allow users to retry the process successfully.

Key components of the 'payment_processing_errors' test case include:
"
Validate keyword-driven platform for SubscriptionManagement purchase_subscription,keyword-driven,purchase_subscription,"*** Settings ***
Documentation    Validate purchase_subscription
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
purchase_subscription
[Documentation]    Validate purchase_subscription using the following steps
Login To Subscription Management Platform    user_id, password
Select Subscription Plan    plan_id
Enter Payment Details    card_number, expiry_date, cvv
Confirm Subscription Purchase    nan
Validate Subscription Confirmation Screen    nan
Validate Subscription Details In User Profile    plan_id
Logout From Platform    nan

*** Keywords ***
Login To Subscription Management Platform
[Arguments]    user_id, password
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, password

Select Subscription Plan
[Arguments]    plan_id
[Return]    ${string}
[Documentation]    Keyword description
Log    plan_id

Enter Payment Details
[Arguments]    card_number, expiry_date, cvv
[Return]    ${string}
[Documentation]    Keyword description
Log    card_number, expiry_date, cvv

Confirm Subscription Purchase
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Subscription Confirmation Screen
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Subscription Details In User Profile
[Arguments]    plan_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    plan_id

Logout From Platform
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'purchase_subscription' aims to verify the functionality of purchasing a subscription through a subscription management platform. The primary purpose of this test case is to ensure that users can successfully navigate the system to choose a subscription plan, enter payment details, and confirm their subscription.
"
Validate keyword-driven paynow_keywords for API usermanagement,keyword-driven,usermanagement,"*** Settings ***
Documentation    Validate usermanagement
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
usermanagement
[Documentation]    Validate usermanagement using the following steps
Create New User    username, password, email
Validate User Created Successfully    username
Update User Information    username, updated_email
Validate User Information Updated    username, updated_email
Assign Roles To User    username, roles
Validate Assigned Roles    username, roles
Delete User    username
Validate User Deletion    username

*** Keywords ***
Create New User
[Arguments]    username, password, email
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password, email

Validate User Created Successfully
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Update User Information
[Arguments]    username, updated_email
[Return]    ${string}
[Documentation]    Keyword description
Log    username, updated_email

Validate User Information Updated
[Arguments]    username, updated_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, updated_email

Assign Roles To User
[Arguments]    username, roles
[Return]    ${string}
[Documentation]    Keyword description
Log    username, roles

Validate Assigned Roles
[Arguments]    username, roles
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, roles

Delete User
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate User Deletion
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

","The test case 'usermanagement' is created to verify the various functionalities involved in managing user accounts within an application. The primary purpose of this test case is to ensure that user-related operations, such as creation, updating, role assignment, and deletion, are functioning correctly. Key objectives include:
"
Validate keyword-driven web for MerchantCentral profile_update,keyword-driven,profile_update,"*** Settings ***
Documentation    Validate profile_update
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
profile_update
[Documentation]    Validate profile_update using the following steps
Login To Merchant Central    email, password
Navigate To Profile Section    nan
Enter New Profile Data    profile_data
Save Profile Information    nan
Validate Profile Is Updated    profile_data
Logout From Merchant Central    nan

*** Keywords ***
Login To Merchant Central
[Arguments]    email, password
[Return]    ${string}
[Documentation]    Keyword description
Log    email, password

Navigate To Profile Section
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter New Profile Data
[Arguments]    profile_data
[Return]    ${string}
[Documentation]    Keyword description
Log    profile_data

Save Profile Information
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Profile Is Updated
[Arguments]    profile_data
[Return]    ${boolean}
[Documentation]    Keyword description
Log    profile_data

Logout From Merchant Central
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The purpose of the 'profile_update' test case is to verify the functionality and correctness of the user profile update feature within the Merchant Central application. This test case ensures that users can successfully log into their account, update their profile data, and save the changes accurately. Important aspects typically validated during the 'profile_update' test case include:

1. **Login Verification:**
- Ensure users can log in with valid credentials to access the profile section.
- Verify that the system redirects users to the profile section successfully.

2. **Profile Data Entry:**
- Check the system's ability to accept and handle new profile data inputs.
- Confirm the user is able to enter and save new profile information correctly.

3. **Data Persistence & Validation:**
- Ensure the new profile data is saved and updated in the system.
- Validate that the updated profile information is accurately reflected in the user's account.
- Verify that the system provides feedback or confirmation of a successful profile update."
Generate keyword-driven web for PayNOW apexbank_deposit,keyword-driven,apexbank_deposit,"*** Settings ***
Documentation    Validate apexbank_deposit
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
apexbank_deposit
[Documentation]    Validate apexbank_deposit using the following steps
Login To ApexBank Web Portal    user_credentials
Navigate To Deposit Section    nan
Validate Deposit Page Is Displayed    nan
Enter Deposit Amount And Account Details    deposit_amount, account_number
Validate Maximum Deposit Limit    deposit_amount, expected_max_limit
Select Deposit Method    method
Confirm Deposit Details    nan
Validate Deposit Confirmation Message    nan
Validate Deposit Amount In Account Summary    account_number, expected_balance
Enter Invalid Deposit Amount    invalid_amount
Validate Error Message For Invalid Amount    invalid_amount, expected_error_message
Validate Deposit Transaction History    account_number
Select Scheduled Deposit Option    schedule_details
Validate Scheduled Deposit Is Active    schedule_details
Logout From ApexBank Web Portal    nan

*** Keywords ***
Login To ApexBank Web Portal
[Arguments]    user_credentials
[Return]    ${string}
[Documentation]    Keyword description
Log    user_credentials

Navigate To Deposit Section
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Deposit Page Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Enter Deposit Amount And Account Details
[Arguments]    deposit_amount, account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    deposit_amount, account_number

Validate Maximum Deposit Limit
[Arguments]    deposit_amount, expected_max_limit
[Return]    ${boolean}
[Documentation]    Keyword description
Log    deposit_amount, expected_max_limit

Select Deposit Method
[Arguments]    method
[Return]    ${string}
[Documentation]    Keyword description
Log    method

Confirm Deposit Details
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Deposit Confirmation Message
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Deposit Amount In Account Summary
[Arguments]    account_number, expected_balance
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, expected_balance

Enter Invalid Deposit Amount
[Arguments]    invalid_amount
[Return]    ${string}
[Documentation]    Keyword description
Log    invalid_amount

Validate Error Message For Invalid Amount
[Arguments]    invalid_amount, expected_error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invalid_amount, expected_error_message

Validate Deposit Transaction History
[Arguments]    account_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number

Select Scheduled Deposit Option
[Arguments]    schedule_details
[Return]    ${string}
[Documentation]    Keyword description
Log    schedule_details

Validate Scheduled Deposit Is Active
[Arguments]    schedule_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    schedule_details

Logout From ApexBank Web Portal
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'apexbank_deposit' aims to verify the deposit functionality within the ApexBank web portal. Key objectives of this test case include:
"
Generate keyword-driven web for PayNOW secure_payment_process,keyword-driven,secure_payment_process,"*** Settings ***
Documentation    Validate secure_payment_process
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
secure_payment_process
[Documentation]    Validate secure_payment_process using the following steps
Login To PayNOW    username, password
Navigate To Secure Payment Page    nan
Enter Payment Details    payment_method, card_details, amount
Submit Payment    nan
Validate Payment Confirmation    confirmation_message
Validate Payment Receipt    receipt_details
Validate Security Message    security_message
Logout From PayNOW    nan

*** Keywords ***
Login To PayNOW
[Arguments]    username, password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, password

Navigate To Secure Payment Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Payment Details
[Arguments]    payment_method, card_details, amount
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method, card_details, amount

Submit Payment
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment Confirmation
[Arguments]    confirmation_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    confirmation_message

Validate Payment Receipt
[Arguments]    receipt_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    receipt_details

Validate Security Message
[Arguments]    security_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    security_message

Logout From PayNOW
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'secure_payment_process' is designed to validate the secure payment processing functionality within the PayNOW platform. The primary goal of this test case is to ensure that the system securely handles and processes user payments, while safeguarding sensitive payment information. Key aspects evaluated in this test case include:
"
Generate keyword-driven mobile for MyBank recent_transactions,keyword-driven,recent_transactions,"*** Settings ***
Documentation    Validate recent_transactions
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
recent_transactions
[Documentation]    Validate recent_transactions using the following steps
Navigate To Recent Transactions    user_id, account_number
Validate Transactions List Is Displayed    account_number, expected_transactions
Filter Transactions By Date    start_date, end_date
Validate Transaction Details    transaction_id, expected_details
Download Transaction Report    start_date, end_date, format
Validate Report Is Downloaded    format
Search Transaction By Amount    amount
Validate Searched Transaction Is Displayed    transaction_id, expected_amount
Select Transaction To View Details    transaction_id
Validate Transaction Date    transaction_id, expected_date, actual_date

*** Keywords ***
Navigate To Recent Transactions
[Arguments]    user_id, account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, account_number

Validate Transactions List Is Displayed
[Arguments]    account_number, expected_transactions
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, expected_transactions

Filter Transactions By Date
[Arguments]    start_date, end_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    start_date, end_date

Validate Transaction Details
[Arguments]    transaction_id, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, expected_details

Download Transaction Report
[Arguments]    start_date, end_date, format
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date, end_date, format

Validate Report Is Downloaded
[Arguments]    format
[Return]    ${boolean}
[Documentation]    Keyword description
Log    format

Search Transaction By Amount
[Arguments]    amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    amount

Validate Searched Transaction Is Displayed
[Arguments]    transaction_id, expected_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, expected_amount

Select Transaction To View Details
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Validate Transaction Date
[Arguments]    transaction_id, expected_date, actual_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, expected_date, actual_date

","The test case 'recent_transactions' is designed to validate the functionality and accuracy of the recent transactions feature within the MyBank mobile application. The primary purpose is to ensure that the application correctly displays and handles transaction data for users.

Key aspects of the test case include:"
Validate keyword-driven systemadmin login for Authentication authenticate_user,keyword-driven,authenticate_user,"*** Settings ***
Documentation    Validate authenticate_user
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       systemadmin
${VALID_PASSWORD}   adminpass

*** Test Cases ***
authenticate_user
[Documentation]    Validate authenticate_user using the following steps
Enter Username And Password    username|password
Click Login Button    nan
Validate Successful Login    username
Navigate To Dashboard    nan
Logout From Application    nan

*** Keywords ***
Enter Username And Password
[Arguments]    username|password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password

Click Login Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Successful Login
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Navigate To Dashboard
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Logout From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'authenticate_user' test case is designed to ensure that user authentication mechanisms work correctly for a system admin attempting to log into an application. This process includes validating the following key aspects:
"
Validate keyword-driven web for FastPay system_transactions,keyword-driven,system_transactions,"*** Settings ***
Documentation    Validate system_transactions
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
system_transactions
[Documentation]    Validate system_transactions using the following steps
Login To FastPay And Navigate To Transactions    account_number, transaction_id
Verify Transaction Details Are Displayed Correctly    transaction_details
Validate Total Count And Amount Of Transactions    count, amount
Filter Transactions By Date Range    start_date, end_date
Validate Filtered Transactions Are Displayed Correctly    filtered_results
Download Transactions Report    report_type
Validate Report Download    expected_file, report_type
Upload Transactions File    file_path
Validate Uploaded Transactions    uploaded_results
Delete A Transaction    transaction_id
Validate Transaction Deletion    transaction_id
Logout From FastPay    nan

*** Keywords ***
Login To FastPay And Navigate To Transactions
[Arguments]    account_number, transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number, transaction_id

Verify Transaction Details Are Displayed Correctly
[Arguments]    transaction_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_details

Validate Total Count And Amount Of Transactions
[Arguments]    count, amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    count, amount

Filter Transactions By Date Range
[Arguments]    start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date, end_date

Validate Filtered Transactions Are Displayed Correctly
[Arguments]    filtered_results
[Return]    ${boolean}
[Documentation]    Keyword description
Log    filtered_results

Download Transactions Report
[Arguments]    report_type
[Return]    ${string}
[Documentation]    Keyword description
Log    report_type

Validate Report Download
[Arguments]    expected_file, report_type
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_file, report_type

Upload Transactions File
[Arguments]    file_path
[Return]    ${string}
[Documentation]    Keyword description
Log    file_path

Validate Uploaded Transactions
[Arguments]    uploaded_results
[Return]    ${boolean}
[Documentation]    Keyword description
Log    uploaded_results

Delete A Transaction
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Validate Transaction Deletion
[Arguments]    transaction_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id

Logout From FastPay
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'system_transactions' is designed to validate the complete lifecycle management of transactions within the FastPay system. The objectives of this test case include:
"
Validate keyword-driven ecommerce_platform for Order Processing,keyword-driven,order_processing,"*** Settings ***
Documentation    Validate order_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_processing
[Documentation]    Validate order_processing using the following steps
Initiate New Order    customer_id|product_id|quantity
Validate Order Details    order_id
Process Payment For Order    payment_method|total_amount
Confirm Order     order_id
Validate Payment Confirmation    payment_status
Validate Order Status    order_id|expected_status
Generate Invoice    order_id
Validate Invoice Details    invoice_id|expected_amount
Ship Order    order_id|shipping_details
Validate Shipping Status    order_id|expected_status

*** Keywords ***
Initiate New Order
[Arguments]    customer_id|product_id|quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id|product_id|quantity

Validate Order Details
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Process Payment For Order
[Arguments]    payment_method|total_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_method|total_amount

Confirm Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Payment Confirmation
[Arguments]    payment_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_status

Validate Order Status
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

Generate Invoice
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Invoice Details
[Arguments]    invoice_id|expected_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_id|expected_amount

Ship Order
[Arguments]    order_id|shipping_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|shipping_details

Validate Shipping Status
[Arguments]    order_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id|expected_status

","This test case 'order_processing' is designed to validate the entire order processing workflow in an e-commerce platform. Here is an overview of its purpose:

**Objective:**
The primary objective of the 'order_processing' test case is to ensure that the e-commerce platform can accurately handle and process customer orders from initiation to shipping. This includes validating order details, processing payments, confirming orders, and ensuring correct invoicing and shipping status updates.

**Purpose:**
1. **End-to-End Functionality:** Ensure that every step in the order processing workflow is functioning correctly, including order initiation, payment processing, and shipping.

2. **Accuracy of Information:** Validate that all details such as order information, payment confirmations, and invoices are accurately generated and reflected in the system.

3. **Status Verification:** Confirm that the system correctly updates and displays the status at each stage of the order processing lifecycle, including order confirmation, payment confirmation, and shipping status."
Create keyword-driven web for PaymentGatewayIntegrationFidelity custom_payments,keyword-driven,custom_payments,"*** Settings ***
Documentation    Validate custom_payments
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
custom_payments
[Documentation]    Validate custom_payments using the following steps
Login And Navigate To Payment Section    user_credentials
Enter Payment Details    payment_info
Submit Payment    nan
Validate Payment Confirmation    expected_confirmation_message
View Transaction Details    transaction_id
Validate Transaction Status    expected_status
Validate Payment History For User    user_id
Void Payment Transaction    transaction_id, void_reason
Validate Voided Transaction Status    transaction_id, expected_void_status

*** Keywords ***
Login And Navigate To Payment Section
[Arguments]    user_credentials
[Return]    ${string}
[Documentation]    Keyword description
Log    user_credentials

Enter Payment Details
[Arguments]    payment_info
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_info

Submit Payment
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment Confirmation
[Arguments]    expected_confirmation_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_confirmation_message

View Transaction Details
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Validate Transaction Status
[Arguments]    expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_status

Validate Payment History For User
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Void Payment Transaction
[Arguments]    transaction_id, void_reason
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id|void_reason

Validate Voided Transaction Status
[Arguments]    transaction_id, expected_void_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id|expected_void_status

","The 'custom_payments' test case is designed to ensure the robustness and accuracy of a custom payment integration within a fidelity system. It seeks to verify that users can successfully perform and manage payment transactions.

Key objectives include:"
Verify user authentication for SecureApp successful_login,keyword-driven,successful_login,"*** Settings ***
Documentation    Validate successful_login
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
successful_login
[Documentation]    Validate successful_login using the following steps
Navigate To Login Page    nan
Enter Username And Password    ${VALID_USER}    ${VALID_PASSWORD}
Click Login Button    nan
Validate User Is Redirected To Dashboard   nan
Validate Welcome Message Is Displayed    ${VALID_USER}

*** Keywords ***
Navigate To Login Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    Navigating to login page

Enter Username And Password
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}
[Return]    ${string}
[Documentation]    Keyword description
Log    Entered username and password

Click Login Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    Clicked login button

Validate User Is Redirected To Dashboard
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    Verified user redirection to dashboard

Validate Welcome Message Is Displayed
[Arguments]    ${VALID_USER}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    Welcome message displayed for ${VALID_USER}

","The test case 'successful_login' is designed to validate the user authentication process within the SecureApp system, specifically focusing on a successful login scenario. The main objectives of this test case include:
"
Validate keyword-driven sterlingcooper for User Registration register_user,keyword-driven,register_user,"*** Settings ***
Documentation    Validate register_user
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}        testuser
${VALID_PASSWORD}    secret

*** Test Cases ***
register_user
[Documentation]    Validate register_user using the following steps
Navigate To Registration Page    nan
Enter Registration Details    username|password|email
Submit Registration Form    nan
Validate Welcome Page Is Displayed    expected_username
Validate Confirmation Email Sent    email
Validate User Is Added In Database    username

*** Keywords ***
Navigate To Registration Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Registration Details
[Arguments]    username|password|email
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password|email

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Welcome Page Is Displayed
[Arguments]    expected_username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_username

Validate Confirmation Email Sent
[Arguments]    email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email

Validate User Is Added In Database
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

","The 'register_user' test case is designed to evaluate the functionality and reliability of the user registration feature within a system. This test case ensures that new users can successfully register, their details are appropriately recorded, and confirmation processes are working as expected.

Key aspects of the test case include:

1. **Form Navigation and Submission:** Ensuring that users can navigate to the registration page and submit their details without issues.
2. **Data Validation:** Verifying that the user-provided data, such as username and email, are correctly stored and displayed.
3. **Confirmation Email:** Checking that a confirmation email is sent as part of the registration process.
4. **Database Update:** Ensuring that the new user's information is correctly added to the database."
Validate keyword-driven primeinvest bank_transfer_operations,keyword-driven,bank_transfer_operations,"*** Settings ***
Documentation    Validate bank_transfer_operations
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
bank_transfer_operations
[Documentation]    Validate bank_transfer_operations using the following steps
Login To PrimeInvest And Navigate To Bank Transfer    account_number, transfer_id
Enter Transfer Details For Bank Transfer    transfer_details
Save Bank Transfer    nan
Validate Created Bank Transfer Details    expected_transfer_details
Enter Beneficiary Details For Bank Transfer    beneficiary_details
Validate Bank Transfer Details Are Deleted    nan
Validate Bank Transfer Origin In Scheduled Transfers    account_number, transfer_id, expected_origin
Delete Bank Transfer Details    nan
Select Specific Transfer Date    nan
Validate Created Bank Transfer Details For Each Day Of Week    expected_scheduleday
Validate Created Bank Transfer Details For Specific Day Of Week    expected_scheduleday, expected_dayofweek
Select Transfers That Are Within Due Date    due
Select Transfers Due For Processing    nan
Select Specific Day Of The Week    day
Close Delete Bank Transfer Confirmation Popup    nan
Select Transfers That Are Past The Due Date    due_date
Validate Delete Bank Transfer Confirmation Popup Is Closed    nan
Select Each Day As Transfer Option    nan

*** Keywords ***
Login To PrimeInvest And Navigate To Bank Transfer
[Arguments]    account_number, transfer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number, transfer_id

Enter Transfer Details For Bank Transfer
[Arguments]    transfer_details
[Return]    ${string}
[Documentation]    Keyword description
Log    transfer_details

Save Bank Transfer
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Created Bank Transfer Details
[Arguments]    expected_transfer_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_transfer_details

Enter Beneficiary Details For Bank Transfer
[Arguments]    beneficiary_details
[Return]    ${string}
[Documentation]    Keyword description
Log    beneficiary_details

Validate Bank Transfer Details Are Deleted
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Bank Transfer Origin In Scheduled Transfers
[Arguments]    account_number, transfer_id, expected_origin
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, transfer_id, expected_origin

Delete Bank Transfer Details
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Select Specific Transfer Date
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Created Bank Transfer Details For Each Day Of Week
[Arguments]    expected_scheduleday
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_scheduleday

Validate Created Bank Transfer Details For Specific Day Of Week
[Arguments]    expected_scheduleday, expected_dayofweek
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_scheduleday, expected_dayofweek

Select Transfers That Are Within Due Date
[Arguments]    due
[Return]    ${string}
[Documentation]    Keyword description
Log    due

Select Transfers Due For Processing
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Select Specific Day Of The Week
[Arguments]    day
[Return]    ${string}
[Documentation]    Keyword description
Log    day

Close Delete Bank Transfer Confirmation Popup
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Select Transfers That Are Past The Due Date
[Arguments]    due_date
[Return]    ${string}
[Documentation]    Keyword description
Log    due_date

Validate Delete Bank Transfer Confirmation Popup Is Closed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Select Each Day As Transfer Option
[Arguments]    nan
",
Develop keyword-driven analytics_keywords for API trackuseractivity,keyword-driven,trackuseractivity,"*** Settings ***
Documentation    Validate trackuseractivity
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
trackuseractivity
[Documentation]    Validate trackuseractivity using the following steps
Create User Activity Request Payload    user_id, activity_details
Send Activity Tracking Request    user_id, activity_payload
Validate Response Status Code    response_code
Validate Activity is Logged Correctly    user_id, activity_details
Fetch User Activity Log    user_id
Validate Fetched Activity Details Match Sent Data    user_id, activity_details

*** Keywords ***
Create User Activity Request Payload
[Arguments]    user_id, activity_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, activity_details

Send Activity Tracking Request
[Arguments]    user_id, activity_payload
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, activity_payload

Validate Response Status Code
[Arguments]    response_code
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response_code

Validate Activity is Logged Correctly
[Arguments]    user_id, activity_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id, activity_details

Fetch User Activity Log
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate Fetched Activity Details Match Sent Data
[Arguments]    user_id, activity_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id, activity_details

","The test case 'trackuseractivity' is crafted to evaluate the capability and robustness of an API designed to track and log user activities within an application. The primary objectives of this test case are as follows:
"
Create keyword-driven serviceapp for User Management user_list,keyword-driven,user_list,"*** Settings ***
Documentation    Validate user_list
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_list
[Documentation]    Validate user_list using the following steps
Expand User Details    user_id
Validate User Email Is Displayed    user_email
Validate User Role Is Correct    user_id, expected_role
Search User By Username    username
Filter User By Role    role_name
Validate Search Results Are Displayed    nan
Update User Status    user_id, status
Validate User Status Is Updated    user_id, expected_status
Delete User By ID    user_id
Validate User Is Deleted    user_id
Navigate To User Details Page    user_id
Validate User Creation Date    user_id, expected_date
Reset User Filters    nan
Validate Reset Filters    nan
Validate Total Number Of Users    expected_count
Create New User    username, email, role
Validate New User Is Created    username, expected_email
Change User Password    user_id, new_password
Validate Password Change    user_id
Assign Role To User    user_id, new_role
Validate Role Assignment    user_id, expected_role
Search User By Email    email
Filter Users By Status    status
Validate Filtered Users Are Displayed    status

*** Keywords ***
Expand User Details
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate User Email Is Displayed
[Arguments]    user_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_email

Validate User Role Is Correct
[Arguments]    user_id, expected_role
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id, expected_role

Search User By Username
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Filter User By Role
[Arguments]    role_name
[Return]    ${list}
[Documentation]    Keyword description
Log    role_name

Validate Search Results Are Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Update User Status
[Arguments]    user_id, status
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, status

Validate User Status Is Updated
[Arguments]    user_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id, expected_status

Delete User By ID
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate User Is Deleted
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Navigate To User Details Page
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate User Creation Date
[Arguments]    user_id, expected_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id, expected_date

Reset User Filters
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Reset Filters
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Total Number Of Users
[Arguments]    expected_count
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_count

Create New User
[Arguments]    username, email, role
[Return]    ${string}
[Documentation]    Keyword description
Log    username, email, role

Validate New User Is Created
[Arguments]    username, expected_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, expected_email

Change User Password
[Arguments]    user_id, new_password
[Return]    ${string}
[Documentation]    Keyword",
Validate keyword-driven web for PayNOW omnicorp_invoicereport,keyword-driven,omnicorp_invoicereport,"*** Settings ***
Documentation    Validate omnicorp_invoicereport
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
omnicorp_invoicereport
[Documentation]    Validate omnicorp_invoicereport using the following steps
Login And Navigate To Invoice Report    username, password
Generate Invoice Report    start_date, end_date
Validate Invoice Report Data    unique_value, expected_amount
Download Invoice Report    report_format
Validate Downloaded Report    file_path, expected_content

*** Keywords ***
Login And Navigate To Invoice Report
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Generate Invoice Report
[Arguments]    start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date, end_date

Validate Invoice Report Data
[Arguments]    unique_value, expected_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    unique_value, expected_amount

Download Invoice Report
[Arguments]    report_format
[Return]    ${string}
[Documentation]    Keyword description
Log    report_format

Validate Downloaded Report
[Arguments]    file_path, expected_content
[Return]    ${boolean}
[Documentation]    Keyword description
Log    file_path, expected_content

","The test case 'omnicorp_invoicereport' is designed to ensure accurate generation, validation, and download functionality of the invoice report within the Omnicorp system. This test case primarily focuses on verifying that the invoice report feature operates correctly and produces reliable and accurate financial data over the specified date ranges.

Key verification aspects include:
"
Validate keyword-driven web for PayNOW omnicorp_payment_processing,keyword-driven,omnicorp_payment_processing,"*** Settings ***
Documentation    Validate omnicorp_payment_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
omnicorp_payment_processing
[Documentation]    Validate omnicorp_payment_processing using the following steps
Initialize Payment Processing Module    user_credentials
Enter Payment Details    payment_information
Validate Payment Confirmation    expected_confirmation_message
Submit Payment    no_args
Validate Payment Receipt    expected_receipt_details
Log Out From Payment Module    no_args

*** Keywords ***
Initialize Payment Processing Module
[Arguments]    user_credentials
[Return]    ${string}
[Documentation]    Keyword description
Log    user_credentials

Enter Payment Details
[Arguments]    payment_information
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_information

Validate Payment Confirmation
[Arguments]    expected_confirmation_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_confirmation_message

Submit Payment
[Arguments]    no_args
[Return]    ${string}
[Documentation]    Keyword description
Log    no_args

Validate Payment Receipt
[Arguments]    expected_receipt_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_receipt_details

Log Out From Payment Module
[Arguments]    no_args
[Return]    ${string}
[Documentation]    Keyword description
Log    no_args

","The test case 'omnicorp_payment_processing' is designed to validate the complete payment processing workflow within the Omnicorp payment system. Its primary objectives are to ensure that the system handles payment transactions correctly, from initialization to confirmation and receipt generation.

Key aspects of the test case include:
"
Validate keyword-driven web for GlobalTrade order_processing,keyword-driven,order_processing,"*** Settings ***
Documentation    Validate order_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_processing
[Documentation]    Validate order_processing using the following steps
Validate Order Creation    order_details
Validate Order Amount    order_number, expected_amount
Validate Customer Details    customer_id
Validate Order Payment Status    order_number
Validate Shipping Information    order_number, expected_shipping_info
Validate Order Modification    order_number, updated_order_details
Validate Order Deletion    order_number

*** Keywords ***
Validate Order Creation
[Arguments]    order_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_details

Validate Order Amount
[Arguments]    order_number, expected_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number, expected_amount

Validate Customer Details
[Arguments]    customer_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id

Validate Order Payment Status
[Arguments]    order_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number

Validate Shipping Information
[Arguments]    order_number, expected_shipping_info
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number, expected_shipping_info

Validate Order Modification
[Arguments]    order_number, updated_order_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number, updated_order_details

Validate Order Deletion
[Arguments]    order_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number

","The test case 'order_processing' aims to validate the correct handling, processing, and management of orders within the GlobalTrade system. Through a series of verification steps, this test case ensures that orders can be created, modified, tracked, and deleted while maintaining data integrity and functional accuracy.

Here are the primary objectives:"
Create keyword-driven web for PayNOW user_registration,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       newuser
${VALID_EMAIL}      testuser@example.com
${VALID_PASSWORD}   securepassword

*** Test Cases ***
user_registration
[Documentation]    Validate user_registration using the following steps
Navigate To Registration Page    nan
Enter Username    username
Enter Email Address    email
Enter Password    password
Confirm Password    confirm_password
Accept Terms And Conditions    nan
Submit Registration Form    nan
Validate Registration Success Message Is Displayed    nan
Validate Welcome Email Is Received    email

*** Keywords ***
Navigate To Registration Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Username
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Enter Email Address
[Arguments]    email
[Return]    ${string}
[Documentation]    Keyword description
Log    email

Enter Password
[Arguments]    password
[Return]    ${string}
[Documentation]    Keyword description
Log    password

Confirm Password
[Arguments]    confirm_password
[Return]    ${string}
[Documentation]    Keyword description
Log    confirm_password

Accept Terms And Conditions
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Registration Success Message Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Welcome Email Is Received
[Arguments]    email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email

","The test case 'user_registration' is designed to validate the process of registering a new user on the PayNOW platform. This includes ensuring all necessary steps are completed accurately and the expected outcomes are achieved. The primary objectives include:

1. **Navigating to Registration Page:** Verifying the ability to reach the registration page.
2. **Entering User Details:** Ensuring the correct entry of username, email, and password.
3. **Form Submission:** Confirming the registration form is submitted successfully.
4. **Email Verification:** Checking that a welcome email is received upon successful registration.
5. **Validation of Success Messages:** Ensuring that appropriate success messages are displayed during the registration process."
Create a new keyword-driven test case for LoginFeature UserAuthentication,keyword-driven,UserAuthentication,"*** Settings ***
Documentation    Validate UserAuthentication
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
UserAuthentication
[Documentation]    Validate UserAuthentication using the following steps
Enter Username and Password    username, password
Click Login Button    nan
Validate Login Success Message    expected_message
Validate Invalid Login Message    expected_invalid_message
Navigate To Login Page    nan
Check Remember Me Checkbox    nan
Wait For Login Page To Load    timeout
Verify User Is Redirected To Homepage    expected_url
Capture Screenshot On Failure    nan

*** Keywords ***
Enter Username and Password
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Click Login Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Login Success Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Validate Invalid Login Message
[Arguments]    expected_invalid_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_invalid_message

Navigate To Login Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Check Remember Me Checkbox
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Wait For Login Page To Load
[Arguments]    timeout
[Return]    ${string}
[Documentation]    Keyword description
Log    timeout

Verify User Is Redirected To Homepage
[Arguments]    expected_url
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_url

Capture Screenshot On Failure
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'UserAuthentication' is designed to validate the login functionality within a web application. This ensures that users can successfully log in and the system appropriately handles different login scenarios, including successful login, invalid credentials, and the ""remember me"" feature.

Key objectives of the test case include:
1. **Correct Credential Verification:** Ensuring that the system correctly verifies and processes valid login credentials.
2. **Error Message Validation:** Checking that the system provides accurate and clear error messages for invalid login attempts.
3. **UI Interaction Checks:** Confirming that all UI elements related to login (such as the login button, remember me checkbox, etc.) function as expected.
4. **Navigation Validation:** Ensuring the user is redirected to the correct homepage upon successful login and appropriate actions are taken on failures."
Create keyword-driven web for CommonKeywordsForAllMerchants user_login,keyword-driven,user_login,"*** Settings ***
Documentation    Validate user_login
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_login
[Documentation]    Validate user_login using the following steps
Navigate To Login Page    url
Enter Username    locator|username
Enter Password    locator|password
Click Login Button    button_locator
Validate Login Is Successful    expected_message
Validate Error Message For Invalid Login    error_message

*** Keywords ***
Navigate To Login Page
[Arguments]    url
[Return]    ${string}
[Documentation]    Keyword description
Log    url

Enter Username
[Arguments]    locator|username
[Return]    ${string}
[Documentation]    Keyword description
Log    locator|username

Enter Password
[Arguments]    locator|password
[Return]    ${string}
[Documentation]    Keyword description
Log    locator|password

Click Login Button
[Arguments]    button_locator
[Return]    ${string}
[Documentation]    Keyword description
Log    button_locator

Validate Login Is Successful
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Validate Error Message For Invalid Login
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message

","The 'user_login' test case is essential for verifying the functionality and security of the user authentication process within an application. This test case covers the following key components:
"
Validate keyword-driven buildtrack for Application onboarding,keyword-driven,onboarding,"*** Settings ***
Documentation    Validate onboarding
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
onboarding
[Documentation]    Validate onboarding using the following steps
Fill Personal Information Form    first_name|last_name|email
Submit Personal Information Form    first_name|last_name|email
Validate Personal Information Submission    email
Fill Address Details Form    address|city|state|zip_code
Submit Address Details Form    address|city|state|zip_code
Validate Address Details Submission    address
Upload Required Documents    document_path
Submit Onboarding Application    nan

*** Keywords ***
Fill Personal Information Form
[Arguments]    first_name|last_name|email
[Return]    ${string}
[Documentation]    Keyword description
Log    first_name|last_name|email

Submit Personal Information Form
[Arguments]    first_name|last_name|email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    first_name|last_name|email

Validate Personal Information Submission
[Arguments]    email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    email

Fill Address Details Form
[Arguments]    address|city|state|zip_code
[Return]    ${string}
[Documentation]    Keyword description
Log    address|city|state|zip_code

Submit Address Details Form
[Arguments]    address|city|state|zip_code
[Return]    ${boolean}
[Documentation]    Keyword description
Log    address|city|state|zip_code

Validate Address Details Submission
[Arguments]    address
[Return]    ${boolean}
[Documentation]    Keyword description
Log    address

Upload Required Documents
[Arguments]    document_path
[Return]    ${boolean}
[Documentation]    Keyword description
Log    document_path

Submit Onboarding Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'onboarding' test case is designed to validate the onboarding process for an application. An effective onboarding process ensures that users can efficiently and successfully complete the necessary steps to begin using the application. Key areas tested include:
"
Validate keyword-driven data for PayNOW invoice_verification,keyword-driven,invoice_verification,"*** Settings ***
Documentation    Validate invoice_verification
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
invoice_verification
[Documentation]    Validate invoice_verification using the following steps
Enter Invoice Number    invoice
Validate Invoice Amount    expected_amount, actual_amount
Validate Due Date Displayed    due_date
Launch Invoice Management Application    browser_name, url
Search For Invoice    invoice_number
Validate Invoice Details    invoice_details
Validate Payment Status    expected_status

*** Keywords ***
Enter Invoice Number
[Arguments]    invoice
[Return]    ${integer}
[Documentation]    Keyword description
Log    invoice

Validate Invoice Amount
[Arguments]    expected_amount, actual_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_amount, actual_amount

Validate Due Date Displayed
[Arguments]    due_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    due_date

Launch Invoice Management Application
[Arguments]    browser_name, url
[Return]    ${string}
[Documentation]    Keyword description
Log    browser_name, url

Search For Invoice
[Arguments]    invoice_number
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_number

Validate Invoice Details
[Arguments]    invoice_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_details

Validate Payment Status
[Arguments]    expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_status

","The 'invoice_verification' test case is primarily designed to ensure the accuracy and integrity of invoices within the PayNOW system. This involves verifying all elements related to an invoice, including their amounts, due dates, and statuses. Key aspects typically assessed during the 'invoice_verification' test case include:

1. **Invoice Number Validation:**
- Confirm that the invoice number entered exists and is correctly recorded in the system.

2. **Invoice Amount Verification:**
- Ensure that the amount displayed matches the expected value.

3. **Due Date Accuracy:**
- Validate that the due date shown is correct.

4. **Invoice Details:**
- Verify all other relevant details, such as items listed, quantities, and prices.

5. **Payment Status:**
- Check whether the payment status of the invoice (paid, pending, overdue, etc.) is accurately reflected.

6. **System Integration:**
- Ensure that these verifications correctly integrate and interact with other modules of the application, such as payment processing and user management."
Create keyword-driven tests for API user_management,keyword-driven,"user_management
response:
*** Settings ***
Documentation    Validate user_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_management
[Documentation]    Validate user_management using the following steps
Create New User    username, password, role
Update User Role    username, new_role
Delete User    username
Get User Details    username
Validate User Creation    username, expected_role
Reset User Password    username, new_password
Validate User Deletion    username

*** Keywords ***
Create New User
[Arguments]    username, password, role
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password, role

Update User Role
[Arguments]    username, new_role
[Return]    ${string}
[Documentation]    Keyword description
Log    username, new_role

Delete User
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Get User Details
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate User Creation
[Arguments]    username, expected_role
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, expected_role

Reset User Password
[Arguments]    username, new_password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, new_password

Validate User Deletion
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

",,"The test case 'user_management' is developed to validate the operations for managing user accounts within a system. Its key goal is to ensure that all functionalities related to creating and maintaining user accounts are working correctly and securely.

Key aspects of the test case include:"
Validate keyword-driven web for UserAccountManagement password_recovery,keyword-driven,password_recovery,"*** Settings ***
Documentation    Validate password_recovery
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_EMAIL}      testuser@example.com
${VALID_SECURITY_ANSWER}   myPetName

*** Test Cases ***
password_recovery
[Documentation]    Validate password_recovery using the following steps
Navigate To Password Recovery Page    nan
Enter Registered Email    email_address
Validate Email Field Exists    nan
Submit Email For Password Recovery    nan
Validate Security Question Is Displayed    nan
Enter Security Answer    security_answer
Validate Security Answer Input    nan
Click On Submit Button    nan
Validate Password Recovery Email Sent    nan
Open Password Recovery Email    nan
Click Password Recovery Link    nan
Enter New Password    new_password
Confirm New Password    confirm_password
Submit New Password    nan
Validate Password Changed Successfully    nan

*** Keywords ***
Navigate To Password Recovery Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Registered Email
[Arguments]    email_address
[Return]    ${string}
[Documentation]    Keyword description
Log    email_address

Validate Email Field Exists
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Submit Email For Password Recovery
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Security Question Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Enter Security Answer
[Arguments]    security_answer
[Return]    ${string}
[Documentation]    Keyword description
Log    security_answer

Validate Security Answer Input
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Click On Submit Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Password Recovery Email Sent
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Open Password Recovery Email
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Click Password Recovery Link
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter New Password
[Arguments]    new_password
[Return]    ${string}
[Documentation]    Keyword description
Log    new_password

Confirm New Password
[Arguments]    confirm_password
[Return]    ${string}
[Documentation]    Keyword description
Log    confirm_password

Submit New Password
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Password Changed Successfully
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The purpose of the 'password_recovery' test case is to ensure that users can recover their password securely and efficiently. This test case verifies the entire password recovery process, from initiating the recovery request to successfully updating the password. Key aspects assessed include:

1. **Email Verification:**
- Check if the registered email input field exists and can be submitted successfully.
- Confirm that the system displays the appropriate security question after email submission.

2. **Security Question Verification:**
- Test the handling of the user's security answer.
- Validate that submitting the correct answer triggers the sending of the password recovery email.

3. **Email Handling:**
- Verify the receipt of the password recovery email.
- Ensure that the email contains a functional password recovery link.

4. **Password Reset:**
- Confirm the ability to set and confirm a new password.
- Validate that the system accepts the new password and provides feedback on successful password change."
Create keyword-driven techsol for User account_management,keyword-driven,account_management,"*** Settings ***
Documentation    Validate account_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
account_management
[Documentation]    Validate account_management using the following steps
Create New User Account    username|password|email
Update User Profile    user_id|profile_details
Activate User Account    user_id
Deactivate User Account    user_id
Delete User Account    user_id
Retrieve User Account Details    user_id
Validate User Account Status    user_id|expected_status
List All User Accounts    nan

*** Keywords ***
Create New User Account
[Arguments]    username|password|email
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password|email

Update User Profile
[Arguments]    user_id|profile_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id|profile_details

Activate User Account
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Deactivate User Account
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Delete User Account
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Retrieve User Account Details
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate User Account Status
[Arguments]    user_id|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id|expected_status

List All User Accounts
[Arguments]    nan
[Return]    ${list}
[Documentation]    Keyword description
Log    nan

","The 'account_management' test case aims to validate the functionalities associated with managing user accounts within a system or application. The comprehensive goal is to ensure all processes related to user account creation, updating, activation, deactivation, deletion, and retrieval operate correctly and reliably.

### Key Objectives:"
Validate keyword-driven paynow_keywords for API refundpayment,keyword-driven,refundpayment,"*** Settings ***
Documentation    Validate refundpayment
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
refundpayment
[Documentation]    Validate refundpayment using the following steps
Create Refund Request Body    payment_id, amount, reason
Send Request To Refund Payment    payment_id, amount
Validate Refund Response    response_body

*** Keywords ***
Create Refund Request Body
[Arguments]    payment_id, amount, reason
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_id, amount, reason

Send Request To Refund Payment
[Arguments]    payment_id, amount
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_id, amount

Validate Refund Response
[Arguments]    response_body
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response_body

","The test case 'refundpayment' is designed to evaluate the functionality and reliability of the refund processing system within an application. Its primary purpose is to ensure that the system successfully handles different aspects of a refund transaction, including:
"
Validate keyword-driven API for UserRegistration,keyword-driven,UserRegistration,"*** Settings ***
Documentation    Validate User Registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
UserRegistration
[Documentation]    Validate User Registration using the following steps
Send Request To Create New User    user_details
Send Request To Validate User Creation    user_id
Send Request To Create Duplicate User    user_details
Validate Error Message For Duplicate User    user_details
Send Request To Create User With Invalid Data    user_details_invalid
Validate Error Message For Invalid Data    error_message

*** Keywords ***
Send Request To Create New User
[Arguments]    user_details
[Return]    ${response}
[Documentation]    Keyword description
Log    user_details

Send Request To Validate User Creation
[Arguments]    user_id
[Return]    ${response}
[Documentation]    Keyword description
Log    user_id

Send Request To Create Duplicate User
[Arguments]    user_details
[Return]    ${response}
[Documentation]    Keyword description
Log    user_details

Validate Error Message For Duplicate User
[Arguments]    user_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_details

Send Request To Create User With Invalid Data
[Arguments]    user_details_invalid
[Return]    ${response}
[Documentation]    Keyword description
Log    user_details_invalid

Validate Error Message For Invalid Data
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message

","The test case 'UserRegistration' is designed to validate the functionality and reliability of the user registration system via the API. The main objective is to ensure users can successfully register and handle cases where issues might occur during registration. The key objectives are likely to include:

1. **Valid User Registration:** Verify that new users can successfully register with valid data and that the system assigns a unique user ID.
2. **Duplicate User Handling:** Test the system's behavior when attempting to register a duplicate user, ensuring appropriate error messages are returned.
3. **Invalid Data Handling:** Check how the system handles user registration with invalid data inputs, validating that error messages are precise and informative.
4. **User Data Validation:** Ensure the newly created user's details are stored accurately and can be retrieved for verification purposes."
Validate keyword-driven paynow_keywords for API order_processing,keyword-driven,"order_processing
","
*** Settings ***
Documentation    Validate order_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_processing
[Documentation]    Validate order_processing using the following steps
Create Order Body    customer_id, order_items
Send Order Request    customer_id, order_id
Validate Order Confirmation    customer_id, order_id, expected_confirmation_status
Log Order Details    customer_id, order_id
Cancel Order    customer_id, order_id
Validate Order Cancellation    customer_id, order_id, expected_cancellation_status

*** Keywords ***
Create Order Body
[Arguments]    customer_id, order_items
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id, order_items

Send Order Request
[Arguments]    customer_id, order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id, order_id

Validate Order Confirmation
[Arguments]    customer_id, order_id, expected_confirmation_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id, order_id, expected_confirmation_status

Log Order Details
[Arguments]    customer_id, order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id, order_id

Cancel Order
[Arguments]    customer_id, order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id, order_id

Validate Order Cancellation
[Arguments]    customer_id, order_id, expected_cancellation_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id, order_id, expected_cancellation_status

","The test case 'order_processing' primarily focuses on validating the entire lifecycle of an order within an application, from creation to cancellation. This ensures that the order processing system is working as expected and handles various scenarios accurately.

Key objectives of the test case include:
1. **Order Creation:** Verifying the creation of an order with necessary details like customer ID and order items.
2. **Order Confirmation:** Ensuring that the order confirmation is accurately received and reflects the correct status.
3. **Order Cancellation:** Confirming that the order can be successfully canceled and the system accurately records the cancellation status.
4. **Order Logging:** Logging the order details for tracking and auditing purposes."
Create keyword-driven clientcentral_keywords for API userAuthentication,keyword-driven,userAuthentication,"*** Settings ***
Documentation    Validate userAuthentication
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
userAuthentication
[Documentation]    Validate userAuthentication using the following steps
Create User Login Request    username, password
Send Login Request To Authentication     username, password
Get Authentication Token    response
Validate Authentication Response    response

*** Keywords ***
Create User Login Request
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Send Login Request To Authentication
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Get Authentication Token
[Arguments]    response
[Return]    ${string}
[Documentation]    Keyword description
Log    response

Validate Authentication Response
[Arguments]    response
[Return]    ${string}
[Documentation]    Keyword description
Log    response

","The test case 'userAuthentication' aims to verify the proper functionality of the user authentication system within an application. The focus is on ensuring that the process of logging in and validating user credentials works correctly and securely. 
"
Validate keyword-driven marketingforge for Reports financial_report,keyword-driven,financial_report,"*** Settings ***
Documentation    Validate financial_report
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
financial_report
[Documentation]    Validate financial_report using the following steps
Generate Report For Specified Date Range    start_date|end_date
Verify Financial Summary Is Accurate    expected_summary
Validate Detailed Transactions Are Listed    expected_transaction_list
Filter Report By Account Type    account_type
Export Report To PDF    nan
Validate PDF Contains Correct Summary    expected_summary
Validate PDF Contains Correct Transactions    expected_transaction_list
Email Report To Stakeholders    email_list

*** Keywords ***
Generate Report For Specified Date Range
[Arguments]    start_date|end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date|end_date

Verify Financial Summary Is Accurate
[Arguments]    expected_summary
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_summary

Validate Detailed Transactions Are Listed
[Arguments]    expected_transaction_list
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_transaction_list

Filter Report By Account Type
[Arguments]    account_type
[Return]    ${string}
[Documentation]    Keyword description
Log    account_type

Export Report To PDF
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate PDF Contains Correct Summary
[Arguments]    expected_summary
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_summary

Validate PDF Contains Correct Transactions
[Arguments]    expected_transaction_list
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_transaction_list

Email Report To Stakeholders
[Arguments]    email_list
[Return]    ${string}
[Documentation]    Keyword description
Log    email_list

","The purpose of the 'financial_report' test case is to ensure that the financial reporting system of an application operates accurately and efficiently. This involves verifying various functional aspects such as:
"
Validate keyword-driven web for PayNOW active_recurringpayments,keyword-driven,active_recurringpayments,"*** Settings ***
Documentation    Validate active_recurringpayments
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
active_recurringpayments
[Documentation]    Validate active_recurringpayments using the following steps
Login To PayNOW And Validate Recurring Payments    account_number, expected_activepayments
Validate Recurring Payment Amount    expected_amount
Modify Recurring Payment Schedule    new_schedule_date
Validate Modified Payment Schedule    expected_schedule_date
Delete Active Recurring Payment    account_number, payment_method
Validate Payment Deletion    account_number
Create New Recurring Payment    customer_details, payment_method, schedule_date, amount
Validate New Recurring Payment    expected_schedule_date, expected_amount
Validate Customer Email Notification For Recurring Payments    nan
Validate Payment Processing On Scheduled Date    account_number, expected_process_date
Update Recurring Payment Amount    account_number, new_amount
Validate Updated Recurring Payment Amount    account_number, expected_new_amount

*** Keywords ***
Login To PayNOW And Validate Recurring Payments
[Arguments]    account_number, expected_activepayments
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, expected_activepayments

Validate Recurring Payment Amount
[Arguments]    expected_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_amount

Modify Recurring Payment Schedule
[Arguments]    new_schedule_date
[Return]    ${string}
[Documentation]    Keyword description
Log    new_schedule_date

Validate Modified Payment Schedule
[Arguments]    expected_schedule_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_schedule_date

Delete Active Recurring Payment
[Arguments]    account_number, payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number, payment_method

Validate Payment Deletion
[Arguments]    account_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number

Create New Recurring Payment
[Arguments]    customer_details, payment_method, schedule_date, amount
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_details, payment_method, schedule_date, amount

Validate New Recurring Payment
[Arguments]    expected_schedule_date, expected_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_schedule_date, expected_amount

Validate Customer Email Notification For Recurring Payments
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Payment Processing On Scheduled Date
[Arguments]    account_number, expected_process_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, expected_process_date

Update Recurring Payment Amount
[Arguments]    account_number, new_amount
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number, new_amount

Validate Updated Recurring Payment Amount
[Arguments]    account_number, expected_new_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, expected_new_amount

","The test case named 'active_recurringpayments' is designed to validate the functionality of recurring payment processes within the PayNOW application. The main goals of this test case include:
"
Generate keyword-driven order management for API create_order,keyword-driven,create_order,"*** Settings ***
Documentation    Validate create_order
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
create_order
[Documentation]    Validate create_order using the following steps
Create Order Body    unique_value, order_number, product_details, customer_id, order_date
Add Shipping Information    address, city, state, postal_code
Add Billing Information    address, city, state, postal_code
Add Payment Details    payment_method, payment_status
Validate Order Details Are Stored    expected_order_details
Validate Order Status Is Correct    order_number, expected_order_status
Send Request To Create Order Through API  # robocop:disable=too-many-arguments    unique_value, api_key, customer_id, order_number, product_details, order_date

*** Keywords ***
Create Order Body
[Arguments]    unique_value, order_number, product_details, customer_id, order_date
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value, order_number, product_details, customer_id, order_date

Add Shipping Information
[Arguments]    address, city, state, postal_code
[Return]    ${string}
[Documentation]    Keyword description
Log    address, city, state, postal_code

Add Billing Information
[Arguments]    address, city, state, postal_code
[Return]    ${string}
[Documentation]    Keyword description
Log    address, city, state, postal_code

Add Payment Details
[Arguments]    payment_method, payment_status
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method, payment_status

Validate Order Details Are Stored
[Arguments]    expected_order_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_order_details

Validate Order Status Is Correct
[Arguments]    order_number, expected_order_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number, expected_order_status

Send Request To Create Order Through API  # robocop:disable=too-many-arguments
[Arguments]    unique_value, api_key, customer_id, order_number, product_details, order_date
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value, api_key, customer_id, order_number, product_details, order_date
","The test case 'create_order' is designed to validate the functionality of the order creation process through an API. The primary purpose of this test case is to ensure that orders are created accurately and that all the necessary details are included and stored correctly. 
"
Validate business-logic awesomecorp for UserManagement user_profile,keyword-driven,user_profile,"*** Settings ***
Documentation    Validate user_profile
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_profile
[Documentation]    Validate user_profile using the following steps
Navigate To User Profile Page    user_id
Validate User Details Are Displayed Correctly    user_details
Select Edit User Profile Option    nan
Update User Profile Information    new_user_details
Validate Updated User Profile Information    updated_user_details
Upload Profile Picture    image_path
Validate Profile Picture Is Uploaded    nan
Change User Password    old_password|new_password
Validate Password Change Success Message    success_message
Logout From User Profile Page    nan

*** Keywords ***
Navigate To User Profile Page
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate User Details Are Displayed Correctly
[Arguments]    user_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_details

Select Edit User Profile Option
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Update User Profile Information
[Arguments]    new_user_details
[Return]    ${string}
[Documentation]    Keyword description
Log    new_user_details

Validate Updated User Profile Information
[Arguments]    updated_user_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    updated_user_details

Upload Profile Picture
[Arguments]    image_path
[Return]    ${string}
[Documentation]    Keyword description
Log    image_path

Validate Profile Picture Is Uploaded
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Change User Password
[Arguments]    old_password|new_password
[Return]    ${string}
[Documentation]    Keyword description
Log    old_password|new_password

Validate Password Change Success Message
[Arguments]    success_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    success_message

Logout From User Profile Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan
","The test case 'user_profile' is designed to validate the functionality and ensure the accuracy and completeness of the user profile management feature within a system. Its primary objectives include:
"
Generate keyword-driven useraccount_keywords for API useraccount,keyword-driven,"useraccount
","*** Settings ***
Documentation    Validate useraccount
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
useraccount
[Documentation]    Validate useraccount using the following steps
Create User Account Body    user_name, email, password, account_type, user_id
Update User Account Details    user_id, email, account_type
Delete User Account    user_id
Get User Account Details    user_id
Verify User Account Status    user_id, status
Send Request To Create User Account    user_name, email, password, account_type
Send Request To Update User Account    user_id, email, account_type
Send Request To Delete User Account    user_id
Send Request To Get User Account Details    user_id
Send Request To Verify User Account Status    user_id, status

*** Keywords ***
Create User Account Body
[Arguments]    user_name, email, password, account_type, user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_name, email, password, account_type, user_id

Update User Account Details
[Arguments]    user_id, email, account_type
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, email, account_type

Delete User Account
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Get User Account Details
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Verify User Account Status
[Arguments]    user_id, status
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, status

Send Request To Create User Account
[Arguments]    user_name, email, password, account_type
[Return]    ${string}
[Documentation]    Keyword description
Log    user_name, email, password, account_type

Send Request To Update User Account
[Arguments]    user_id, email, account_type
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, email, account_type

Send Request To Delete User Account
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Send Request To Get User Account Details
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Send Request To Verify User Account Status
[Arguments]    user_id, status
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id, status

","The 'useraccount' test case is intended to verify the functionalities related to user account management within a system. These tests ensure that user account operations are correctly implemented and function as required.

Key aspects that the 'useraccount' test case might cover include:

1. **User Account Creation:** Ensuring new user accounts can be successfully created with valid input details, and that all necessary information is correctly stored.
2. **User Account Updates:** Verifying that existing user accounts can be updated as required, with changes duly reflected in relevant data fields.
3. **User Account Deletion:** Confirming that user accounts can be deleted as needed, and verifying the system handles the deletion process appropriately.
4. **Fetching User Details:** Ensuring that user account details can be retrieved correctly using a unique identifier.
5. **Account Status Verification:** Validating that the status of a user account (such as active, inactive, or banned) can be accurately checked and verified within the system."
Create keyword-driven web for OnlineOrderingSystem checkout_process,keyword-driven,checkout_process,"*** Settings ***
Documentation    Validate checkout_process
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
checkout_process
[Documentation]    Validate checkout_process using the following steps
Navigate To Checkout Page    nan
Validate Cart Contents    cart_items
Apply Discount Code    discount_code
Enter Shipping Information    shipping_details
Select Payment Method    payment_method
Submit Order    nan
Validate Order Confirmation    order_id
Navigate To Order History    nan
Validate Order In History    order_id

*** Keywords ***
Navigate To Checkout Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Cart Contents
[Arguments]    cart_items
[Return]    ${boolean}
[Documentation]    Keyword description
Log    cart_items

Apply Discount Code
[Arguments]    discount_code
[Return]    ${boolean}
[Documentation]    Keyword description
Log    discount_code

Enter Shipping Information
[Arguments]    shipping_details
[Return]    ${string}
[Documentation]    Keyword description
Log    shipping_details

Select Payment Method
[Arguments]    payment_method
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_method

Submit Order
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order Confirmation
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

Navigate To Order History
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order In History
[Arguments]    order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id

","The test case 'checkout_process' aims to validate the entire checkout process within the Online Ordering System, ensuring that customers can seamlessly complete their purchases. This covers navigating to the checkout page, verifying the cart contents, applying any discount codes, entering the shipping information, selecting a payment method, and submitting the order.

Key objectives of the test case include:"
Develop keyword-driven test case for API manageprofile,keyword-driven,manageprofile,"*** Settings ***
Documentation    Validate manageprofile
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
manageprofile
[Documentation]    Validate manageprofile using the following steps
Fetch Existing User Profile    user_id
Update User Profile Information    user_id|updated_info
Validate Updated User Profile Information    user_id|expected_info
Add Profile Photo To User    user_id|photo
Remove Profile Photo From User    user_id
Fetch User Profile Photo    user_id
Validate Profile Photo Presence    user_id
Log Out User    user_id

*** Keywords ***
Fetch Existing User Profile
[Arguments]    user_id
[Return]    ${profile}
[Documentation]    Keyword description
Log    user_id

Update User Profile Information
[Arguments]    user_id|updated_info
[Return]    ${status}
[Documentation]    Keyword description
Log    user_id|updated_info

Validate Updated User Profile Information
[Arguments]    user_id|expected_info
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id|expected_info

Add Profile Photo To User
[Arguments]    user_id|photo
[Return]    ${status}
[Documentation]    Keyword description
Log    user_id|photo

Remove Profile Photo From User
[Arguments]    user_id
[Return]    ${status}
[Documentation]    Keyword description
Log    user_id

Fetch User Profile Photo
[Arguments]    user_id
[Return]    ${photo}
[Documentation]    Keyword description
Log    user_id

Validate Profile Photo Presence
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Log Out User
[Arguments]    user_id
[Return]    ${status}
[Documentation]    Keyword description
Log    user_id

","The test case 'manageprofile' is designed to verify the functionality of user profile management within a system. Its primary objective is to ensure users can effectively view, update, and manage their profile information while maintaining the integrity and security of their data.

Key aspects the 'manageprofile' test case covers include:
"
Validate keyword-driven electronics order_keywords for API order,keyword-driven,order,"*** Settings ***
Documentation    Validate order
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order
[Documentation]    Validate order using the following steps
Initiate Order Request    unique_id, product_id
Create Order Body    unique_id, product_id, quantity, customer_id
Send Request To Process Order    order_id, payment_method
Validate Order Confirmation    order_id, customer_id
Send Notification For Order Dispatch    order_id, customer_id, carrier_service

*** Keywords ***
Initiate Order Request
[Arguments]    unique_id, product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_id, product_id

Create Order Body
[Arguments]    unique_id, product_id, quantity, customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_id, product_id, quantity, customer_id

Send Request To Process Order
[Arguments]    order_id, payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id, payment_method

Validate Order Confirmation
[Arguments]    order_id, customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id, customer_id

Send Notification For Order Dispatch
[Arguments]    order_id, customer_id, carrier_service
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id, customer_id, carrier_service

","The test case 'order' is tailored to validate the process of placing and managing an order within an electronics sales system. The objectives of this test case are:
"
Create keyword-driven web for UserAccountManagement profile_page,keyword-driven,profile_page,"*** Settings ***
Documentation    Validate profile_page
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
profile_page
[Documentation]    Validate profile_page using the following steps
Navigate To User Profile    user_id
Validate User Details Are Displayed    user_details
Edit User Information    user_info
Validate Changes Are Saved Successfully    nan
Logout From Application    nan

*** Keywords ***
Navigate To User Profile
[Arguments]    user_id
[Return]    ${string}
[Documentation]    Keyword description
Log    user_id

Validate User Details Are Displayed
[Arguments]    user_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_details

Edit User Information
[Arguments]    user_info
[Return]    ${string}
[Documentation]    Keyword description
Log    user_info

Validate Changes Are Saved Successfully
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Logout From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The ""profile_page"" test case is designed to verify the functionality and accuracy of a user account management system's profile page. This test case aims to ensure that users can view, edit, and save their profile information correctly and securely.

### Key Objectives:"
Generate keyword-driven web for LoginFunctionality login_functionality,keyword-driven,login_functionality,"*** Settings ***
Documentation    Validate login_functionality
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
login_functionality
[Documentation]    Validate login_functionality using the following steps
Launch Web Application    browser_name|url
Enter Username    username_field|${VALID_USER}
Enter Password    password_field|${VALID_PASSWORD}
Click Login Button    login_button
Validate User Is Logged In    expected_message
Validate Error Message For Incorrect Login    error_message
Validate Remember Me Checkbox Is Checked    nan
Validate Forgot Password Link    expected_link
Validate Logout Button Is Displayed    logout_button
Verify User Is Redirected To HomePage    homepage_url
Check Session Persistence After Login    session_key
Validate Error Message For Empty Fields    nan

*** Keywords ***
Launch Web Application
[Arguments]    browser_name|url
[Return]    ${string}
[Documentation]    Keyword description
Log    browser_name|url

Enter Username
[Arguments]    username_field|username
[Return]    ${string}
[Documentation]    Keyword description
Log    username_field|username

Enter Password
[Arguments]    password_field|password
[Return]    ${string}
[Documentation]    Keyword description
Log    password_field|password

Click Login Button
[Arguments]    login_button
[Return]    ${string}
[Documentation]    Keyword description
Log    login_button

Validate User Is Logged In
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Validate Error Message For Incorrect Login
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message

Validate Remember Me Checkbox Is Checked
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Forgot Password Link
[Arguments]    expected_link
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_link

Validate Logout Button Is Displayed
[Arguments]    logout_button
[Return]    ${boolean}
[Documentation]    Keyword description
Log    logout_button

Verify User Is Redirected To HomePage
[Arguments]    homepage_url
[Return]    ${boolean}
[Documentation]    Keyword description
Log    homepage_url

Check Session Persistence After Login
[Arguments]    session_key
[Return]    ${boolean}
[Documentation]    Keyword description
Log    session_key

Validate Error Message For Empty Fields
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The test case 'login_functionality' is designed to validate and ensure the correctness and completeness of the login functionality within a web application. Its primary purposes include:
"
Develop keyword-driven sterlingcooper for Billing billing_summary,keyword-driven,billing_summary,"*** Settings ***
Documentation    Validate billing_summary
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
billing_summary
[Documentation]    Validate billing_summary using the following steps
Validate Billing Summary Load Time    load_time
Check Billing Summary Data Accuracy    account_number|expected_values
Validate Billing Summary Navigation    navigation_path
Apply Filters On Billing Summary    filter_criteria
Export Billing Summary Report    report_format
Validate Exported Billing Summary Report    expected_report_content

*** Keywords ***
Validate Billing Summary Load Time
[Arguments]    load_time
[Return]    ${boolean}
[Documentation]    Keyword description
Log    load_time

Check Billing Summary Data Accuracy
[Arguments]    account_number|expected_values
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number|expected_values

Validate Billing Summary Navigation
[Arguments]    navigation_path
[Return]    ${boolean}
[Documentation]    Keyword description
Log    navigation_path

Apply Filters On Billing Summary
[Arguments]    filter_criteria
[Return]    ${integer}
[Documentation]    Keyword description
Log    filter_criteria

Export Billing Summary Report
[Arguments]    report_format
[Return]    ${string}
[Documentation]    Keyword description
Log    report_format

Validate Exported Billing Summary Report
[Arguments]    expected_report_content
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_report_content
","The test case 'Billing Summary' is designed to verify and validate the key functions and data integrity of the billing summary feature of an application. The main objectives of this test case include:

1. **Performance Testing**:
- Measure the load time of the billing summary page to ensure it meets performance benchmarks.

2. **Data Verification**:
- Ensure the data displayed in the billing summary is accurate and corresponds to the expected values for given account numbers.

3. **Navigation Testing**:
- Validate that navigation within the billing summary page works as intended and users can move through the sections seamlessly.

4. **Filter Application**:
- Test the functionality of various filters that can be applied to the billing summary to ensure they yield the correct results.

5. **Report Export**:
- Verify the process of exporting billing summary reports in different formats and ensure the content of the exported reports is correct.

By covering these core aspects, the 'billing_summary' test case aims to provide a comprehensive validation of the billing summary feature."
Generate keyword-driven web for PayNOW purchase_history,keyword-driven,purchase_history,"*** Settings ***
Documentation    Validate purchase_history
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
purchase_history
[Documentation]    Validate purchase_history using the following steps
Expand Purchase History Section    nan
Validate Purchase Items Are Displayed    purchase_list
Validate Total Purchase Amount    account_number|expected_total
Filter Purchase History By Date Range    start_date|end_date
Validate Filtered Purchase Items Are Displayed    purchase_list
Sort Purchase History By Date    nan
Validate Purchase Details Are Available    purchase_id
Click On Purchase Detail Link    purchase_id
Validate Selected Purchase Is Expanded    purchase_id
Collapse Purchase Details Section    nan
Navigate To Purchase History Tab    nan
Validate Purchase Item Is Collapsed    purchase_id
Validate Purchase Summary Is Displayed    nan
Use Valid Credit Card For New Purchase    amount, card_no, expired_date, cvv_number
Validate New Purchase Entry Is Added    new_purchase_entry
Select Specific Purchase Items    purchase_list
Validate Selected Purchase Items Are Highlighted    purchase_list
Unselect All Purchase Items    nan
Validate Total Purchase Amount After Selection    nan
Apply Discount And Validate Total Amount    discount_code, expected_total
Pay For Selected Purchases Using Credit Card    integrated_merchant, card_no, expired_date, cvv_number
Save Payment Method For Future Use    payment_method, nickname
Delete Saved Payment Method    cardno_or_checkno
Validate Deleted Payment Method Is Removed    cardno_or_checkno
Expand Specific Purchase Item    purchase_id
Validate Discount Applied To Specific Purchase Item    purchase_id, discount_code
Validate Surcharge Is Updated    nan
Validate Error Message For Invalid Payment Details    nan
Validate PDF Download Of Purchase History    nan
Export Purchase History To Excel    nan
Validate Purchase History Exported Successfully    file_path
Clear Filters In Purchase History    nan
Search Purchase History By Invoice Number    invoice_number
Validate Search Results Are Displayed    search_results
Choose Filter Option And Enter Value    filter_option, value
Validate Filtered Results Are Displayed Correctly    filter_option, value

*** Keywords ***
Expand Purchase History Section
[Arguments]    nan
[Return]    @{list}
[Documentation]    Keyword description
Log    nan

Validate Purchase Items Are Displayed
[Arguments]    purchase_list
[Return]    ${boolean}
[Documentation]    Keyword description
Log    purchase_list

Validate Total Purchase Amount
[Arguments]    account_number|expected_total
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number|expected_total

Filter Purchase History By Date Range
[Arguments]    start_date|end_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    start_date|end_date

Validate Filtered Purchase Items Are Displayed
[Arguments]    purchase_list
[Return]    ${boolean}
[Documentation]    Keyword description
Log    purchase_list

Sort Purchase History By Date
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Purchase Details Are Available
[Arguments]    purchase_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    purchase_id

Click On Purchase Detail Link
[Arguments]    purchase_id
[Return]    ${string}
[Documentation]    Keyword description
Log    purchase_id

Validate Selected Purchase Is Expanded
[Arguments]    purchase_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    purchase_id

Collapse Purchase Details Section
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Navigate To Purchase History Tab
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Purchase Item Is Collapsed
[Arguments]    purchase_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    purchase_id

Validate Purchase Summary Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log",
Develop keyword-driven scripts for Product product,keyword-driven,product,"*** Settings ***
Documentation    Validate product
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
product
[Documentation]    Validate product using the following steps
Add Product To Cart    product_id|quantity
Validate Product In Cart    product_id|expected_quantity
Checkout Product    cart_id|payment_method
Validate Product Details Page Is Displayed    product_id
Validate Product Inventory Is Updated    product_id|expected_inventory
Add Review For Product    product_id|review_body
Validate Review Is Displayed    product_id|expected_review
Navigate To Product Category Page    category_id
Filter Products By Category    category_id
Validate Products Are Displayed In Category    category_id|expected_product_list
Search Product By Name    product_name
Validate Product Search Results    product_name|expected_product_list
Sort Products By Price    sort_order
Validate Products Are Sorted By Price    sort_order|expected_sorted_list
Apply Discount Code    cart_id|discount_code
Validate Applied Discount    cart_id|expected_discount
Remove Product From Cart    cart_id|product_id
Validate Cart Is Empty    cart_id

*** Keywords ***
Add Product To Cart
[Arguments]    product_id|quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id|quantity

Validate Product In Cart
[Arguments]    product_id|expected_quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id|expected_quantity

Checkout Product
[Arguments]    cart_id|payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    cart_id|payment_method

Validate Product Details Page Is Displayed
[Arguments]    product_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id

Validate Product Inventory Is Updated
[Arguments]    product_id|expected_inventory
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id|expected_inventory

Add Review For Product
[Arguments]    product_id|review_body
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id|review_body

Validate Review Is Displayed
[Arguments]    product_id|expected_review
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id|expected_review

Navigate To Product Category Page
[Arguments]    category_id
[Return]    ${string}
[Documentation]    Keyword description
Log    category_id

Filter Products By Category
[Arguments]    category_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    category_id

Validate Products Are Displayed In Category
[Arguments]    category_id|expected_product_list
[Return]    ${boolean}
[Documentation]    Keyword description
Log    category_id|expected_product_list

Search Product By Name
[Arguments]    product_name
[Return]    ${string}
[Documentation]    Keyword description
Log    product_name

Validate Product Search Results
[Arguments]    product_name|expected_product_list
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_name|expected_product_list

Sort Products By Price
[Arguments]    sort_order
[Return]    ${string}
[Documentation]    Keyword description
Log    sort_order

Validate Products Are Sorted By Price
[Arguments]    sort_order|expected_sorted_list
[Return]    ${boolean}
[Documentation]    Keyword description
Log    sort_order|expected_sorted_list

Apply Discount Code
[Arguments]    cart_id|discount_code
[Return]    ${string}
[Documentation]    Keyword description
Log    cart_id|discount_code

Validate Applied Discount
[Arguments]    cart_id|expected_discount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    cart_id|expected_discount

Remove Product From Cart
[Arguments]    cart_id|product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    cart_id|product_id

Validate Cart Is Empty
[Arguments]    cart_id",
Validate keyword-driven web app for ShoppingCart,keyword-driven,ShoppingCart,"*** Settings ***
Documentation    Validate ShoppingCart
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       shopper
${VALID_PASSWORD}   securePass

*** Test Cases ***
ShoppingCart
[Documentation]    Validate ShoppingCart functionalities using the following steps
Login to Shopping Site    username, password
Search Product By Name    product_name
Add Product To Cart    product_id
Validate Product Is In Cart    product_id
Update Product Quantity In Cart    product_id, new_quantity
Validate Updated Quantity In Cart    product_id, expected_quantity
Remove Product From Cart    product_id
Validate Cart Is Empty    nan
Signout From Shopping Site    nan

*** Keywords ***
Login to Shopping Site
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Search Product By Name
[Arguments]    product_name
[Return]    ${string}
[Documentation]    Keyword description
Log    product_name

Add Product To Cart
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Validate Product Is In Cart
[Arguments]    product_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id

Update Product Quantity In Cart
[Arguments]    product_id, new_quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id, new_quantity

Validate Updated Quantity In Cart
[Arguments]    product_id, expected_quantity
[Return]    ${boolean}
[Documentation]    Keyword description
Log    product_id, expected_quantity

Remove Product From Cart
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Validate Cart Is Empty
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Signout From Shopping Site
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The ""ShoppingCart"" test case is designed to validate the core functionalities related to managing a shopping cart in a web application. The primary aim of this test case includes:
"
Create keyword-driven web for CommonKeywordsForAllMerchants login,keyword-driven,login,"*** Settings ***
Documentation    Validate login
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
login
[Documentation]    Validate login using the following steps
Enter Username    ${VALID_USER}
Enter Password    ${VALID_PASSWORD}
Click Login Button    nan
Validate User Is Logged In    ${VALID_USER}

*** Keywords ***
Enter Username
[Arguments]    username
[Return]    ${string}
[Documentation]    Enter the provided username into the username field
Log    username

Enter Password
[Arguments]    password
[Return]    ${string}
[Documentation]    Enter the provided password into the password field
Log    password

Click Login Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Click the login button to submit the credentials
Log    nan

Validate User Is Logged In
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Confirm that the provided username is logged in successfully
Log    username

","The 'login' test case aims to verify and validate the login functionality of a system, ensuring that users can authenticate successfully using valid credentials and appropriate actions are taken for invalid inputs.

Key aspects include:
"
Validate keyword-driven web for CommonKeywordsForAllMerchants checkout,keyword-driven,checkout,"*** Settings ***
Documentation    Validate checkout
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret
${CREDIT_CARD}      1234123412341234
${EXPIRATION_DATE}  12/25
${CVV}              123

*** Test Cases ***
checkout
[Documentation]    Validate checkout using the following steps
Enter Credit Card Details    credit_card|expiration_date|cvv
Validate Billing Information    billing_info
Confirm Checkout Process    credit_card|billing_info
Validate Success Message    order_details
Validate Error On Incorrect Details    incorrect_card|expiration_date|cvv

*** Keywords ***
Enter Credit Card Details
[Arguments]    credit_card|expiration_date|cvv
[Return]    ${string}
[Documentation]    Keyword description
Log    credit_card|expiration_date|cvv

Validate Billing Information
[Arguments]    billing_info
[Return]    ${boolean}
[Documentation]    Keyword description
Log    billing_info

Confirm Checkout Process
[Arguments]    credit_card|billing_info
[Return]    ${string}
[Documentation]    Keyword description
Log    credit_card|billing_info

Validate Success Message
[Arguments]    order_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_details

Validate Error On Incorrect Details
[Arguments]    incorrect_card|expiration_date|cvv
[Return]    ${boolean}
[Documentation]    Keyword description
Log    incorrect_card|expiration_date|cvv
","The purpose of the 'checkout' test case is to verify the functionality and reliability of the checkout process in an e-commerce system. This test case ensures that a user can successfully complete a purchase using valid payment details, and identifies how the system reacts to invalid details. Key aspects typically assessed during the 'checkout' test case include:

1. **Valid Payment Details:**
- Verify that users can complete a purchase with correct credit card information.
- Ensure that the system redirects to a success page and provides a confirmation message.

2. **Invalid Payment Details:**
- Test how the system handles incorrect credit card numbers, expiration dates, or CVV codes.
- Confirm error messages are clear and prompt appropriate user action.
- Ensure the system does not process payments or hold funds when invalid details are provided."
Create keyword-driven web for PayNOW transaction_refund,keyword-driven,transaction_refund,"*** Settings ***
Documentation    Validate transaction_refund
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
transaction_refund
[Documentation]    Validate transaction_refund using the following steps
Login To PayNOW And Navigate To Refunds    account_number, transaction_id
Select Transaction To Refund    transaction_id
Enter Refund Details    refund_amount, refund_reason
Submit Refund Request    nan
Validate Refund Is Processed    transaction_id, expected_status
Navigate To Transaction History    nan
Verify Refund Entry In Transaction History    transaction_id, refund_amount
Log Out Of Application    nan

*** Keywords ***
Login To PayNOW And Navigate To Refunds
[Arguments]    account_number, transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number, transaction_id

Select Transaction To Refund
[Arguments]    transaction_id
[Return]    ${string}
[Documentation]    Keyword description
Log    transaction_id

Enter Refund Details
[Arguments]    refund_amount, refund_reason
[Return]    ${string}
[Documentation]    Keyword description
Log    refund_amount, refund_reason

Submit Refund Request
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Refund Is Processed
[Arguments]    transaction_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, expected_status

Navigate To Transaction History
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Verify Refund Entry In Transaction History
[Arguments]    transaction_id, refund_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, refund_amount

Log Out Of Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","
The test case 'transaction_refund' is designed to verify the functionality and reliability of the refund processing system within the PayNOW application. The primary purpose is to ensure that the system accurately handles refund transactions, updates relevant records, and reflects changes properly in the transaction history.

Key objectives include:
1. Ensuring that valid refund requests are processed without errors.
2. Verifying that the system handles various refund scenarios, including partial and full refunds.
3. Checking the accuracy of transaction status updates post-refund.
4. Ensuring that refunds are correctly logged in the transaction history for audit purposes.
5. Assessing the consistency and reliability of the refund feature under different conditions, including various payment methods and refund reasons."
Create keyword-driven aztech for Orders validateorderdetails,keyword-driven,validateorderdetails,"*** Settings ***
Documentation    Validate order details
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
validateorderdetails
[Documentation]    Validate order details using the following steps
Validate Order Number    order_number
Filter Orders By Customer Name    customer_name
Validate Order Status    order_number|expected_status
Navigate To Order Details Page    nan
Validate Order Date    order_date|expected_date
Validate Shipping Address    order_number|expected_address
Validate Billing Information    order_number|expected_billinginfo
Validate Payment Method    order_number|expected_paymentmethod
Enter Tracking Number    order_number|tracking_number
Validate Order Total Amount    order_number|expected_totalamount
Validate Discount Applied    order_number|expected_discount

*** Keywords ***
Validate Order Number
[Arguments]    order_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number

Filter Orders By Customer Name
[Arguments]    customer_name
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_name

Validate Order Status
[Arguments]    order_number|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number|expected_status

Navigate To Order Details Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Order Date
[Arguments]    order_date|expected_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_date|expected_date

Validate Shipping Address
[Arguments]    order_number|expected_address
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number|expected_address

Validate Billing Information
[Arguments]    order_number|expected_billinginfo
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number|expected_billinginfo

Validate Payment Method
[Arguments]    order_number|expected_paymentmethod
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number|expected_paymentmethod

Enter Tracking Number
[Arguments]    order_number|tracking_number
[Return]    ${string}
[Documentation]    Keyword description
Log    order_number|tracking_number

Validate Order Total Amount
[Arguments]    order_number|expected_totalamount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number|expected_totalamount

Validate Discount Applied
[Arguments]    order_number|expected_discount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number|expected_discount

","The 'validateorderdetails' test case aims to ensure the accurate functionality and reliability of the order management system by validating several key aspects of orders placed by customers. Key objectives include:

1. **Order Confirmation:** Verifying that the order number is correctly assigned and visible.
2. **Order Filtering:** Ensuring that orders can be filtered by customer's demographic details such as name.
3. **Order Status Verification:** Checking the order status against expected results to confirm accurate processing.
4. **Navigation:** Ensuring easy navigation to detailed order information for further verification steps.
5. **Date Validation:** Confirming that the order date is accurately displayed.
6. **Address Verification:** Appropriately verifying the shipping address associated with the order.
7. **Billing and Payment Information:** Ensuring the billing details and the payment method used are correctly displayed.
8. **Shipment Tracking:** Verifying that the tracking number is correctly entered and displayed.
9. **Order Total:** Ensuring the total order amount, including any discounts applied, is accurately calculated and displayed.

Overall, this comprehensive test case aims to validate the integrity and correctness of the order details displayed within the order management system to ensure a seamless user experience for both customers and administrative staff."
Generate keyword-driven ordermanagement_keywords for API order,keyword-driven,order,"*** Settings ***
Documentation    Validate order
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order
[Documentation]    Validate order using the following steps
Create Order Body    order_id, customer_id, product_id, quantity, price
Create Payment Details Body    payment_id, card_number
Send Request To Create Order For Customer    order_id, customer_id, product_id, quantity, price, payment_id
Send Request To Update Order    order_id, product_id, quantity
Send Request To Get Order Details    order_id
Send Request To Cancel Order    order_id

*** Keywords ***
Create Order Body
[Arguments]    order_id, customer_id, product_id, quantity, price
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id, customer_id, product_id, quantity, price

Create Payment Details Body
[Arguments]    payment_id, card_number
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_id, card_number

Send Request To Create Order For Customer
[Arguments]    order_id, customer_id, product_id, quantity, price, payment_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id, customer_id, product_id, quantity, price, payment_id

Send Request To Update Order
[Arguments]    order_id, product_id, quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id, product_id, quantity

Send Request To Get Order Details
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Send Request To Cancel Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

","The test case 'order' is intended to verify the functional correctness and robustness of an API order management system. The key objectives likely include:
"
Validate keyword-driven paynow_keywords for User Account Management,keyword-driven,user_account_management,"*** Settings ***
Documentation    Validate user_account_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_account_management
[Documentation]    Validate user_account_management using the following steps
Create User Account    username, password
Validate User Login    username, password
Update User Email    username, new_email
Delete User Account    username

*** Keywords ***
Create User Account
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Validate User Login
[Arguments]    username, password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, password

Update User Email
[Arguments]    username, new_email
[Return]    ${string}
[Documentation]    Keyword description
Log    username, new_email

Delete User Account
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

","The test case 'user_account_management' is designed to verify and validate the complete lifecycle management of user accounts within a system. Its primary purpose is to ensure that all functionalities related to user accounts work as intended. This includes:
"
Create keyword-driven web for InvoicingSystem invoice_approval,keyword-driven,invoice_approval,"*** Settings ***
Documentation    Validate invoice_approval
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
invoice_approval
[Documentation]    Validate invoice_approval using the following steps
Navigate To Invoice Approval Page    nan
Approve Pending Invoice    invoice_id
Deny Pending Invoice    invoice_id, reason
Validate Approved Invoice Status    invoice_id
Validate Denied Invoice Status    invoice_id
Validate Invoice Status Is Updated    invoice_id, expected_status
Logout User From The System    nan

*** Keywords ***
Navigate To Invoice Approval Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Approve Pending Invoice
[Arguments]    invoice_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_id

Deny Pending Invoice
[Arguments]    invoice_id, reason
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_id, reason

Validate Approved Invoice Status
[Arguments]    invoice_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_id

Validate Denied Invoice Status
[Arguments]    invoice_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_id

Validate Invoice Status Is Updated
[Arguments]    invoice_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_id, expected_status

Logout User From The System
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan
","The 'invoice_approval' test case is designed to verify the functionality and integrity of the invoice approval process within an invoicing system. The primary objectives are:
"
Create keyword-driven web for CommonKeywordsForAllMerchants user_authentication,keyword-driven,user_authentication,"*** Settings ***
Documentation    Validate user authentication
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_authentication
[Documentation]    Validate user authentication using the following steps
Navigate To Login Page    nan
Enter Username    username
Enter Password    password
Click Login Button    nan
Validate Successful Login    expected_message
Validate Error Message For Invalid Login    error_message

*** Keywords ***
Navigate To Login Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Username
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Enter Password
[Arguments]    password
[Return]    ${string}
[Documentation]    Keyword description
Log    password

Click Login Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Successful Login
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Validate Error Message For Invalid Login
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message

","The 'user_authentication' test case is designed to evaluate the login functionality of an application, ensuring that users can securely access their accounts and any potential error messages are handled correctly.

Key components of the 'user_authentication' test case include:
"
Validate keyword-driven widgetcorp for Order Processing order_status,keyword-driven,order_status,"*** Settings ***
Documentation    Validate order_status
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_status
[Documentation]    Validate order_status using the following steps
Validate Order ID Is Displayed    expected_order_id
Validate Order Status Information    nan
Validate Order Status    order_number|expected_status
Filter With Order Number In Order Status    order_number
Navigate To Order Details Page From Order Status    order_id
Select Order Status Type    order_status_type
Validate Filtered Order Number Is Displayed    order_number
Navigate To Product Details Page From Order Status    product_id

*** Keywords ***
Validate Order ID Is Displayed
[Arguments]    expected_order_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_order_id

Validate Order Status Information
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate Order Status
[Arguments]    order_number|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number|expected_status

Filter With Order Number In Order Status
[Arguments]    order_number
[Return]    ${integer}
[Documentation]    Keyword description
Log    order_number

Navigate To Order Details Page From Order Status
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Select Order Status Type
[Arguments]    order_status_type
[Return]    ${string}
[Documentation]    Keyword description
Log    order_status_type

Validate Filtered Order Number Is Displayed
[Arguments]    order_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_number

Navigate To Product Details Page From Order Status
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

","The test case 'order_status' is developed to ensure that the widgetcorp's order processing system accurately reflects the current status of orders. It covers several critical aspects of order processing:

**Objective:**
The main objective of the 'order_status' test case is to validate that the system accurately updates and displays the status of orders at different stages, such as 'Pending', 'Processed', 'Shipped', 'Delivered', or 'Cancelled'.

**Purpose:**
1. **Accuracy Verification:** To confirm that the order status is correctly updated after each action or event in the order processing workflow. This includes different conditions and scenarios.

2. **Consistency Check:** To ensure that the status shown to users is consistent and reflects the real-time state of the order as it moves through various stages."
Validate keyword-driven web for ECommerceUserRegistration ecommerce_registration,keyword-driven,ecommerce_registration,"*** Settings ***
Documentation    Validate ecommerce_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
ecommerce_registration
[Documentation]    Validate ecommerce_registration using the following steps
Launch ECommerce Website    browser_name, url
Fill User Registration Form    username, email, password
Submit Registration Form    nan
Confirm Registration Success Message    expected_message
Navigate To Login Page    nan
Login With Registered User    email, password
Verify User Is Logged In    expected_username
Logout User    nan
Validate User Is Logged Out    nan

*** Keywords ***
Launch ECommerce Website
[Arguments]    browser_name, url
[Return]    ${string}
[Documentation]    Keyword description
Log    browser_name, url

Fill User Registration Form
[Arguments]    username, email, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, email, password

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Confirm Registration Success Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Navigate To Login Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Login With Registered User
[Arguments]    email, password
[Return]    ${string}
[Documentation]    Keyword description
Log    email, password

Verify User Is Logged In
[Arguments]    expected_username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_username

Logout User
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate User Is Logged Out
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan
","The ""ecommerce_registration"" test case focuses on verifying the entire workflow of user registration in an e-commerce application. The objective is to ensure that new users can successfully create accounts, login, and logout, thus enabling them to use the e-commerce platform as intended.

Key objectives:
"
Generate keyword-driven web for PayNOW API_monetary_transactions,keyword-driven,API_monetary_transactions,"*** Settings ***
Documentation    Validate API_monetary_transactions
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
API_monetary_transactions
[Documentation]    Validate API_monetary_transactions using the following steps
Send Request To Get Transaction Details    transaction_id
Validate Transaction Status    transaction_id, expected_status
Initiate Transaction    transaction_data
Validate Account Balance After Transaction    account_number, expected_balance
Cancel Transaction    transaction_id
Validate Transaction Is Canceled    transaction_id, expected_status

*** Keywords ***
Send Request To Get Transaction Details
[Arguments]    transaction_id
[Return]    ${json}
[Documentation]    Keyword description
Log    transaction_id

Validate Transaction Status
[Arguments]    transaction_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, expected_status

Initiate Transaction
[Arguments]    transaction_data
[Return]    ${json}
[Documentation]    Keyword description
Log    transaction_data

Validate Account Balance After Transaction
[Arguments]    account_number, expected_balance
[Return]    ${boolean}
[Documentation]    Keyword description
Log    account_number, expected_balance

Cancel Transaction
[Arguments]    transaction_id
[Return]    ${json}
[Documentation]    Keyword description
Log    transaction_id

Validate Transaction Is Canceled
[Arguments]    transaction_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, expected_status
","The 'API_monetary_transactions' test case is designed to ensure the functionality and accuracy of API-based monetary transactions. By validating multiple steps in the transaction lifecycle, this test case aims to verify the system’s ability to handle financial transactions securely and effectively.

Key focus areas of the test case include:"
Generate keyword-driven paynow_keywords for API payment_processing,keyword-driven,payment_processing,"*** Settings ***
Documentation    Validate payment_processing
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
payment_processing
[Documentation]    Validate payment_processing using the following steps
Create Payment Body    unique_value, payment_id, amount, merchant_id, payment_date
Create Customer Details Body    nan
Create Multiple Payments With Different Dates    account_number, integrated_merchant
Create Payment Details Body    nan
Create Billing Address Body    merchant_id
Create Shipping Address Body    merchant_id
Send Request To Process Payment For Customer  # robocop:disable=too-many-arguments    unique_value, merchant_key, merchant_id, payment_id, amount, date
Create Multiple Payments Through API    account_number, integrated_merchant, payment_date

*** Keywords ***
Create Payment Body
[Arguments]    unique_value, payment_id, amount, merchant_id, payment_date
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value, payment_id, amount, merchant_id, payment_date

Create Customer Details Body
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Create Multiple Payments With Different Dates
[Arguments]    account_number, integrated_merchant
[Return]    @{list}
[Documentation]    Keyword description
Log    account_number, integrated_merchant

Create Payment Details Body
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Create Billing Address Body
[Arguments]    merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant_id

Create Shipping Address Body
[Arguments]    merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant_id

Send Request To Process Payment For Customer  # robocop:disable=too-many-arguments
[Arguments]    unique_value, merchant_key, merchant_id, payment_id, amount, date
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value, merchant_key, merchant_id, payment_id, amount, date

Create Multiple Payments Through API
[Arguments]    account_number, integrated_merchant, payment_date
[Return]    @{list}
[Documentation]    Keyword description
Log    account_number, integrated_merchant, payment_date

","Certainly! Below is a summarization of the test case typically labeled as 'payment_processing':
"
Generate keyword-driven web for ProductManagementSystem product page,keyword-driven,product_page,"*** Settings ***
Documentation    Validate product page
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
product_page
[Documentation]    Validate product page using the following steps
Navigate To Product Section    product_page
Validate Product Details    product_id
Add Product To Cart    product_id|quantity
Logout From Application    nan

*** Keywords ***
Navigate To Product Section
[Arguments]    product_page
[Return]    ${string}
[Documentation]    Keyword description
Log    product_page

Validate Product Details
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Add Product To Cart
[Arguments]    product_id|quantity
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id|quantity

Logout From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'product_page' test case aims to validate the proper functioning and reliability of the product page within a Product Management System. The key areas tested are:
"
Create keyword-driven web for UserAccountManagement user_registration,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user_registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_registration
[Documentation]    Validate user_registration using the following steps
Enter User Details    user_details
Validate Confirmation Message    expected_message
Logout From Application    nan

*** Keywords ***
Enter User Details
[Arguments]    user_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_details

Validate Confirmation Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Logout From Application
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The purpose of the test case ""user_registration"" is to verify the functionality of user registration within a User Account Management system. This test specifically aims to ensure that users can successfully register on the platform, and that the system provides appropriate feedback throughout the registration process. The test case includes:

1. **Input Validation:**
- Check that all mandatory user details (like name, email, password) are entered correctly and validated properly without any errors.

2. **Confirmation Handling:**
- Ensure the system returns a proper confirmation message upon successful registration.

3. **User Experience:**
- Validate that the user can logout after the registration process concludes successfully.

Key focus points include testing the user interface for registration, handling and displaying errors for invalid inputs, and confirming that user registration data is correctly processed and stored."
Build keyword-driven navigate_to_dashboard for UserDashboard project,keyword-driven,navigate_to_dashboard,"*** Settings ***
Documentation    Validate navigate_to_dashboard
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
navigate_to_dashboard
[Documentation]    Validate navigate_to_dashboard using the following steps
Open Main Menu    nan
Select Dashboard From Menu    nan
Validate Dashboard Is Displayed    expected_dashboard_title
Check For Recent Activities Panel    nan
Validate User Statistics    user_id
Logout From Dashboard    nan
Verify User Is Logged Out    nan

*** Keywords ***
Open Main Menu
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Select Dashboard From Menu
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Dashboard Is Displayed
[Arguments]    expected_dashboard_title
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_dashboard_title

Check For Recent Activities Panel
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Validate User Statistics
[Arguments]    user_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id

Logout From Dashboard
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Verify User Is Logged Out
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The test case 'navigate_to_dashboard' is designed to validate the navigation and display functionalities of a user dashboard within an application. The purpose of this test case can be summarized as follows:

1. **Navigation Verification**:
- Ensure that users can successfully navigate to the dashboard from the main menu.
- Validate that the correct dashboard screen is displayed after navigation.

2. **Content Validation**:
- Check for the presence and accuracy of critical dashboard components such as the recent activities panel and user statistics.
- Ensure that all dashboard elements are loaded correctly and reflect the latest data.

3. **User Experience**:
- Confirm that the dashboard is user-friendly and that all interactive elements (e.g., logout button) function as expected.
- Validate that users can log out from the dashboard and that the system properly handles the logout process.

This test case thereby ensures that the user dashboard is functional, responsive, and provides the necessary information and features to the end-user."
Generate keyword-driven test for SecureLoginFeature secure_login,keyword-driven,secure_login,"*** Settings ***
Documentation    Validate secure_login
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
secure_login
[Documentation]    Validate secure_login using the following steps
Open Login Page    url
Enter Username And Password    username, password
Click Login Button    nan
Verify Successful Login    username
Validate Session Token Is Returned    expected_token
Logout From Application    nan
Verify Logout Successful    nan
Navigate To Login Page    url
Attempt Login With Invalid Password    username, invalid_password
Verify Login Error Message    error_message

*** Keywords ***
Open Login Page
[Arguments]    url
[Return]    ${string}
[Documentation]    Keyword description
Log    url

Enter Username And Password
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Click Login Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Verify Successful Login
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Validate Session Token Is Returned
[Arguments]    expected_token
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_token

Logout From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Verify Logout Successful
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Navigate To Login Page
[Arguments]    url
[Return]    ${string}
[Documentation]    Keyword description
Log    url

Attempt Login With Invalid Password
[Arguments]    username, invalid_password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, invalid_password

Verify Login Error Message
[Arguments]    error_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    error_message

","The 'secure_login' test case aims to ensure the integrity and security of the login functionality within an application. This case verifies that only valid users can successfully login and that any invalid attempts are properly handled with error messages. The key objectives include:

1. **Verification of Correct Login:** Ensures that users can login with valid credentials and that a session token is generated.
2. **Error Handling:** Checks that appropriate error messages are displayed for invalid login attempts.
3. **Session Management:** Validates that session tokens are managed and returned correctly.
4. **Logout Functionality:** Ensures the logout process works as expected and that users are properly navigated back to the login page.

By focusing on these core aspects, the test case helps maintain the application's security standards and provides a reliable user experience concerning the login functionality."
Build keyword-driven accountmanagement_keywords for API createuseraccount,keyword-driven,createuseraccount,"*** Settings ***
Documentation    Validate createuseraccount
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
createuseraccount
[Documentation]    Validate createuseraccount using the following steps
Generate User Data    username|email|password
Send Create Account Request    username|email|password
Validate Account Creation Response    response
Get Created User Details    response
Validate User Details    user_id|expected_username|expected_email

*** Keywords ***
Generate User Data
[Arguments]    username|email|password
[Return]    ${dict}
[Documentation]    Keyword description
Log    username|email|password

Send Create Account Request
[Arguments]    username|email|password
[Return]    ${response}
[Documentation]    Keyword description
Log    username|email|password

Validate Account Creation Response
[Arguments]    response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response

Get Created User Details
[Arguments]    response
[Return]    ${dict}
[Documentation]    Keyword description
Log    response

Validate User Details
[Arguments]    user_id|expected_username|expected_email
[Return]    ${boolean}
[Documentation]    Keyword description
Log    user_id|expected_username|expected_email

","The ""createuseraccount"" test case is designed to ensure the functionality and reliability of a system that manages user account creation. The purpose of this test case includes:
"
Create keyword-driven test case for UserProfileManagement userprofile_keywords,keyword-driven,userprofile_keywords,"*** Settings ***
Documentation    Validate userprofile_keywords
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
userprofile_keywords
[Documentation]    Validate userprofile_keywords using the following steps
Login To UserProfile Management    username|password
Navigate To User Profile Page    username
Update User Email Address    username|new_email
Validate Email Update Success Message    expected_message
Change User Password    username|new_password
Validate Password Change Confirmation    expected_message
Logout From UserProfile Management    username
Validate User Is Logged Out    username
Delete User Profile    username
Validate User Deletion Message    expected_message
Create New User Profile    new_user_details
Validate New User Profile    new_user_details

*** Keywords ***
Login To UserProfile Management
[Arguments]    username|password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password

Navigate To User Profile Page
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Update User Email Address
[Arguments]    username|new_email
[Return]    ${string}
[Documentation]    Keyword description
Log    username|new_email

Validate Email Update Success Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Change User Password
[Arguments]    username|new_password
[Return]    ${string}
[Documentation]    Keyword description
Log    username|new_password

Validate Password Change Confirmation
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Logout From UserProfile Management
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate User Is Logged Out
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Delete User Profile
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate User Deletion Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Create New User Profile
[Arguments]    new_user_details
[Return]    ${string}
[Documentation]    Keyword description
Log    new_user_details

Validate New User Profile
[Arguments]    new_user_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    new_user_details

","The test case 'userprofile_keywords' is designed to verify the functionality and reliability of user profile management within a system. The primary purpose of this test case is to ensure that the features related to user profile modifications, such as updating email addresses, changing passwords, and deleting profiles, work as expected without errors.

This test case covers following aspects:

1. **User Login and Navigation**:
- Ensure users can log in correctly and navigate to the user profile page.

2. **Updating User Information**:
- Verify that email addresses can be updated and confirm successful changes.

3. **Password Management**:
- Confirm that users can change their passwords and that the system handles it correctly.

4. **Logout and Session Management**:
- Ensure that users can log out safely and that their session ends correctly.

5. **User Creation and Deletion**:
- Validate that new user profiles can be created and existing ones can be deleted without issues.

Overall, this test guarantees that all the essential functionalities concerning user profile management are thoroughly tested and reliable."
Create keyword-driven system for FinancePlus invoice_management,keyword-driven,invoice_management,"*** Settings ***
Documentation    Validate invoice_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         financeplus_resource.robot

*** Variables ***
${VALID_USER}       financeuser
${VALID_PASSWORD}   fin@123

*** Test Cases ***
invoice_management
[Documentation]    Validate invoice_management using the following steps
Load Invoice Page    nan
Validate Invoice Page Title    expected_title
Add New Invoice    invoice_details
Save Invoice Without Submission    nan
Submit Invoice For Approval    nan
Validate Invoice Submission Status    expected_status
Select Specific Invoice For Editing    invoice_number
Update Invoice Details    updated_invoice_details
Save Updated Invoice    nan
Validate Invoice Updated Status    invoice_number, expected_status
Delete Invoice    invoice_number
Validate Invoice Deleted Status    invoice_number
Navigate To Invoice History    nan
Validate Invoice History Records    nan
Filter Invoices By Date Range    start_date, end_date
Validate Filtered Invoices    nan
Navigate To Reports Section    nan
Download Invoice Report    report_type, date_range
Validate Report Downloaded    expected_filename
Logout From Application    nan

*** Keywords ***
Load Invoice Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Invoice Page Title
[Arguments]    expected_title
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_title

Add New Invoice
[Arguments]    invoice_details
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_details

Save Invoice Without Submission
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Submit Invoice For Approval
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Invoice Submission Status
[Arguments]    expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_status

Select Specific Invoice For Editing
[Arguments]    invoice_number
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_number

Update Invoice Details
[Arguments]    updated_invoice_details
[Return]    ${string}
[Documentation]    Keyword description
Log    updated_invoice_details

Save Updated Invoice
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Invoice Updated Status
[Arguments]    invoice_number, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number, expected_status

Delete Invoice
[Arguments]    invoice_number
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_number

Validate Invoice Deleted Status
[Arguments]    invoice_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number

Navigate To Invoice History
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Invoice History Records
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Filter Invoices By Date Range
[Arguments]    start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date, end_date

Validate Filtered Invoices
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Navigate To Reports Section
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Download Invoice Report
[Arguments]    report_type, date_range
[Return]    ${string}
[Documentation]    Keyword description
Log    report_type, date_range

Validate Report Downloaded
[Arguments]    expected_filename
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_filename

Logout From Application
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

",The test case 'invoice_management' is designed to validate
Create keyword-driven test case for user management system,keyword-driven,user_management,"*** Settings ***
Documentation    Validate user_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_management
[Documentation]    Validate user_management using the following steps
Create New User    username, email, password
Activate User Account    username, activation_code
Login User Account    username, password
Update User Details    username, new_email, new_phone
Validate Updated User Details    username, expected_email, expected_phone
Deactivate User Account    username
Delete User Account    username
Validate User Account Is Deleted    username
Get User Details    username

*** Keywords ***
Create New User
[Arguments]    username, email, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, email, password

Activate User Account
[Arguments]    username, activation_code
[Return]    ${string}
[Documentation]    Keyword description
Log    username, activation_code

Login User Account
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Update User Details
[Arguments]    username, new_email, new_phone
[Return]    ${string}
[Documentation]    Keyword description
Log    username, new_email, new_phone

Validate Updated User Details
[Arguments]    username, expected_email, expected_phone
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, expected_email, expected_phone

Deactivate User Account
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Delete User Account
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate User Account Is Deleted
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Get User Details
[Arguments]    username
[Return]    ${dictionary}
[Documentation]    Keyword description
Log    username

","The 'user_management' test case is designed to evaluate the functionality and reliability of a user management system. It ensures that the system can handle various aspects of user operations smoothly.

Key scenarios covered in this test case include:

1. **User Creation:** Verifying that new users can be created successfully with valid details.
2. **Account Activation:** Ensuring that user accounts can be activated through the appropriate methods.
3. **Authentication:** Testing user login functionality to confirm that it is secure and reliable.
4. **Profile Update:** Checking if user details, such as email and phone number, can be updated and validated accurately.
5. **Account Deactivation and Deletion:** Ensuring that user accounts can be deactivated and deleted as per user actions or administrative requirements.
6. **Data Validation:** Making sure that user information is accurately reflected and retrievable from the system."
Develop keyword-driven test case for user login API,keyword-driven,user_login,"*** Settings ***
Documentation    Validate user_login
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_login
[Documentation]    Validate user_login using the following steps
Create Login Request Payload    username, password
Send Login Request    payload
Get Login Response Code    response
Validate Login Response    response_code
Extract Auth Token From Response    response
Validate Auth Token Format    auth_token
Store Auth Token For Future Use    auth_token
Invalidate Auth Token    auth_token
Validate Session Termination    response

*** Keywords ***
Create Login Request Payload
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Send Login Request
[Arguments]    payload
[Return]    ${string}
[Documentation]    Keyword description
Log    payload

Get Login Response Code
[Arguments]    response
[Return]    ${integer}
[Documentation]    Keyword description
Log    response

Validate Login Response
[Arguments]    response_code
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response_code

Extract Auth Token From Response
[Arguments]    response
[Return]    ${string}
[Documentation]    Keyword description
Log    response

Validate Auth Token Format
[Arguments]    auth_token
[Return]    ${boolean}
[Documentation]    Keyword description
Log    auth_token

Store Auth Token For Future Use
[Arguments]    auth_token
[Return]    ${string}
[Documentation]    Keyword description
Log    auth_token

Invalidate Auth Token
[Arguments]    auth_token
[Return]    ${string}
[Documentation]    Keyword description
Log    auth_token

Validate Session Termination
[Arguments]    response
[Return]    ${boolean}
[Documentation]    Keyword description
Log    response

","The test case 'user_login' is designed to validate the functionality of a user login process within an application, ensuring the system handles the login and authentication procedures correctly. Its primary objectives and purposes are summarized as follows:
"
Design keyword-driven web for PayLATER omnicorp_paymenthistory,keyword-driven,omnicorp_paymenthistory,"*** Settings ***
Documentation    Validate omnicorp_paymenthistory
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
omnicorp_paymenthistory
[Documentation]    Validate omnicorp_paymenthistory using the following steps
Login To PayLATER And Navigate To Payment History    account_details
Filter Payment History By Date Range    start_date, end_date
Validate Filtered Payment History Is Displayed    expected_entries
Download Payment History Report    format_type
Validate Payment History Report Download    expected_reportstatus
Enter Customer Account Number For Payment History    account_number
Validate Payment Details For Specific Transaction    transaction_id, expected_details
Sort Payment History By Amount    nan
Validate Sorted Payment History    expected_sorted_entries
Logout From PayLATER    nan

*** Keywords ***
Login To PayLATER And Navigate To Payment History
[Arguments]    account_details
[Return]    ${string}
[Documentation]    Keyword description
Log    account_details

Filter Payment History By Date Range
[Arguments]    start_date, end_date
[Return]    ${list}
[Documentation]    Keyword description
Log    start_date, end_date

Validate Filtered Payment History Is Displayed
[Arguments]    expected_entries
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_entries

Download Payment History Report
[Arguments]    format_type
[Return]    ${string}
[Documentation]    Keyword description
Log    format_type

Validate Payment History Report Download
[Arguments]    expected_reportstatus
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_reportstatus

Enter Customer Account Number For Payment History
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Validate Payment Details For Specific Transaction
[Arguments]    transaction_id, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    transaction_id, expected_details

Sort Payment History By Amount
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Sorted Payment History
[Arguments]    expected_sorted_entries
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_sorted_entries

Logout From PayLATER
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The test case 'omnicorp_paymenthistory' is designed to verify the functionality and usability of the payment history feature within Omnicorp's PayLATER system. The main objectives of this test case are to ensure that users can effectively navigate, filter, sort, and download payment history data without issues.

Specifically, this test case aims to:

1. Validate user login and navigation to the payment history section.
2. Verify the correctness of payment history records filtered by different date ranges.
3. Ensure the system supports downloading payment history reports in various formats.
4. Confirm the ability to input a customer’s account number and access their corresponding payment details.
5. Check for accurate sorting of payment records by various criteria such as amount.
6. Validate that specific transaction details within the payment history match expected results.
7. Ensure smooth logout process from the PayLATER system.

By achieving these objectives, the test case ensures that the payment history functionality meets business requirements and user expectations."
Validate keyword-driven web for PayNOW invoice_filtering,keyword-driven,invoice_filtering,"*** Settings ***
Documentation    Validate invoice_filtering
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
invoice_filtering
[Documentation]    Validate invoice_filtering using the following steps
Open Invoice Page    nan
Apply Date Filter    start_date, end_date
Choose Status Filter    status
Validate Filtered Invoices Displayed    nan
Clear All Filters    nan
Validate Filters Are Cleared    nan
Select Value From Dropdown    dropdown_value
Validate Selected Value In Dropdown    dropdown_value
Search Invoice By Number    invoice_number
Validate Search Results Displayed    invoice_number
Validate Error Message For Invalid Date Range    start_date, end_date
Validate No Results Message For No Matches    search_criteria
Export Filtered Invoices    filter_criteria

*** Keywords ***
Open Invoice Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Apply Date Filter
[Arguments]    start_date, end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date, end_date

Choose Status Filter
[Arguments]    status
[Return]    ${string}
[Documentation]    Keyword description
Log    status

Validate Filtered Invoices Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Clear All Filters
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Filters Are Cleared
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Select Value From Dropdown
[Arguments]    dropdown_value
[Return]    ${string}
[Documentation]    Keyword description
Log    dropdown_value

Validate Selected Value In Dropdown
[Arguments]    dropdown_value
[Return]    ${boolean}
[Documentation]    Keyword description
Log    dropdown_value

Search Invoice By Number
[Arguments]    invoice_number
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_number

Validate Search Results Displayed
[Arguments]    invoice_number
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number

Validate Error Message For Invalid Date Range
[Arguments]    start_date, end_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    start_date, end_date

Validate No Results Message For No Matches
[Arguments]    search_criteria
[Return]    ${boolean}
[Documentation]    Keyword description
Log    search_criteria

Export Filtered Invoices
[Arguments]    filter_criteria
[Return]    ${string}
[Documentation]    Keyword description
Log    filter_criteria
","The test case 'invoice_filtering' aims to verify the functionality and usability of filter options provided within an invoicing system. This test case ensures that users can effectively apply and manipulate filters to view specific sets of invoices based on various criteria.

Key objectives include:
1. **Date Filtering:** Verify that invoices can be filtered by specifying a date range.
2. **Status Filtering:** Ensure that invoices can be filtered based on their status (e.g., paid, unpaid).
3. **Search Functionality:** Test the ability to search invoices by their number and validate that the search results are correctly displayed.
4. **Dropdown Selection:** Validate that selecting values from dropdowns filters invoices accordingly.
5. **Error Handling:** Ensure that the system appropriately handles invalid date ranges and displays relevant error messages.
6. **Clearing Filters:** Confirm that applied filters can be cleared, and the system returns to its default view.
7. **Export Functionality:** Validate that filtered invoices can be exported according to the selected criteria."
Perform keyword-driven verification for user registration,keyword-driven,user_registration,"*** Settings ***
Documentation    Validate user registration
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
user_registration
[Documentation]    Validate user registration using the following steps
Load Registration Page    nan
Enter Username    username
Enter Password    password
Confirm Password Match    password, confirm_password
Enter Email Address    email
Submit Registration Form    nan
Validate Registration Success    username
Navigate To Login Page    nan
Attempt Login With New User    username, password
Validate Login Success    username

*** Keywords ***
Load Registration Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Username
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Enter Password
[Arguments]    password
[Return]    ${string}
[Documentation]    Keyword description
Log    password

Confirm Password Match
[Arguments]    password, confirm_password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    password, confirm_password

Enter Email Address
[Arguments]    email
[Return]    ${string}
[Documentation]    Keyword description
Log    email

Submit Registration Form
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Registration Success
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

Navigate To Login Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Attempt Login With New User
[Arguments]    username, password
[Return]    ${string}
[Documentation]    Keyword description
Log    username, password

Validate Login Success
[Arguments]    username
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username

","The 'user_registration' test case is designed to validate the functionality and reliability of a user registration system. Its primary goal is to ensure that new users can successfully register, and that the system correctly manages user credentials and provides appropriate feedback.

Key aspects of the test case include:

1. **Page Navigation:** Ensuring that the user can navigate to the registration page without issues.
2. **Data Entry:** Verifying that all required fields (e.g., username, password, email) are correctly filled and validated.
3. **Password Confirmation:** Checking that the password and its confirmation match without errors.
4. **Form Submission:** Ensuring that the registration form submits successfully and that the user receives appropriate confirmation.
5. **Login Verification:** Validating that the new user can log in with the provided credentials after registration.
6. **Error Handling:** Ensuring clear and useful feedback is provided in cases of input errors or other issues."
Develop keyword-driven mysalesportal for Sales Dashboard,keyword-driven,dashboard,"*** Settings ***
Documentation    Validate dashboard
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       salesperson
${VALID_PASSWORD}   password123

*** Test Cases ***
dashboard
[Documentation]    Validate dashboard using the following steps
Navigate To Sales Dashboard    nan
Validate Sales Figures Are Displayed    expected_sales|expected_growth
Filter Sales By Date Range    start_date|end_date
Export Sales Data To CSV    nan
Generate Sales Report    report_parameters
Get Total Sales Value    nan
Get Top Performing Employees    nan
Validate Sales Data Exported Correctly    file_path
Upload Corrected Sales Data    corrected_file_path

*** Keywords ***
Navigate To Sales Dashboard
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Sales Figures Are Displayed
[Arguments]    expected_sales|expected_growth
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_sales|expected_growth

Filter Sales By Date Range
[Arguments]    start_date|end_date
[Return]    ${string}
[Documentation]    Keyword description
Log    start_date|end_date

Export Sales Data To CSV
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Generate Sales Report
[Arguments]    report_parameters
[Return]    ${string}
[Documentation]    Keyword description
Log    report_parameters

Get Total Sales Value
[Arguments]    nan
[Return]    ${decimal}
[Documentation]    Keyword description
Log    nan

Get Top Performing Employees
[Arguments]    nan
[Return]    ${list}
[Documentation]    Keyword description
Log    nan

Validate Sales Data Exported Correctly
[Arguments]    file_path
[Return]    ${boolean}
[Documentation]    Keyword description
Log    file_path

Upload Corrected Sales Data
[Arguments]    corrected_file_path
[Return]    ${string}
[Documentation]    Keyword description
Log    corrected_file_path

","The 'dashboard' test case aims to assess the functionality and reliability of the Sales Dashboard within the mysalesportal application. This involves verifying that critical components of the dashboard, such as sales figures, reports, and data exports, work as expected.

Key aspects of the test case include:

1. **Data Accuracy:** Ensuring that the sales figures displayed on the dashboard are accurate and consistent with backend data.
2. **Filtering:** Verifying that users can filter sales data by date ranges and other criteria effectively.
3. **Export Functionality:** Checking that sales data can be exported to CSV files accurately, including validating the integrity of the exported data.
4. **Reporting:** Confirming that users can generate comprehensive sales reports based on various parameters.
5. **User Interaction:** Making sure that the dashboard interface supports user actions such as navigation, data filtering, and data entry without errors or disruptions."
Validate keyword-driven paynow_keywords for API product,keyword-driven,product,"*** Settings ***
Documentation    Validate product
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
product
[Documentation]    Validate product using the following steps
Create Product Body    product_id, product_name, product_price
Update Product Body    product_id, product_name, product_price
Delete Product Body    product_id
Send Request To Manage Product    product_id, product_name, product_price

*** Keywords ***
Create Product Body
[Arguments]    product_id, product_name, product_price
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id, product_name, product_price

Update Product Body
[Arguments]    product_id, product_name, product_price
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id, product_name, product_price

Delete Product Body
[Arguments]    product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id

Send Request To Manage Product
[Arguments]    product_id, product_name, product_price
[Return]    ${string}
[Documentation]    Keyword description
Log    product_id, product_name, product_price

","The test case 'product' aims to validate the functionality and performance of a system or application for managing products. This includes creating, updating, and deleting product entries to ensure the system handles product data correctly from creation through to deletion. Key aspects often examined in such a test case include:

1. **CRUD Operations**:"
Create a keyword-driven rocketmanagement for API create_account,keyword-driven,create_account,"*** Settings ***
Documentation    Validate create_account
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
create_account
[Documentation]    Validate create_account using the following steps
Create Account Request Body    username|password|email|account_type
Send Request To Create Account    username|password|email|account_type
Verify Account Creation Status    username|expected_status
Get Account Details    username
Validate Account Details    username|expected_details
Send Request To Create Account With Invalid Data    invalid_username|invalid_password|invalid_email|account_type
Verify Account Creation Failure    invalid_username|expected_failure_status
Get Error Message For Failed Account Creation    invalid_username|expected_error_message

*** Keywords ***
Create Account Request Body
[Arguments]    username|password|email|account_type
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password|email|account_type

Send Request To Create Account
[Arguments]    username|password|email|account_type
[Return]    ${string}
[Documentation]    Keyword description
Log    username|password|email|account_type

Verify Account Creation Status
[Arguments]    username|expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|expected_status

Get Account Details
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Validate Account Details
[Arguments]    username|expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username|expected_details

Send Request To Create Account With Invalid Data
[Arguments]    invalid_username|invalid_password|invalid_email|account_type
[Return]    ${string}
[Documentation]    Keyword description
Log    invalid_username|invalid_password|invalid_email|account_type

Verify Account Creation Failure
[Arguments]    invalid_username|expected_failure_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invalid_username|expected_failure_status

Get Error Message For Failed Account Creation
[Arguments]    invalid_username|expected_error_message
[Return]    ${string}
[Documentation]    Keyword description
Log    invalid_username|expected_error_message
","The test case 'create_account' is meant to validate the process of creating user accounts via an API. It includes steps to ensure that the account creation functionality works correctly with valid data and behaves as expected with invalid data. Key elements typically verified in this test case are:
"
Create keyword-driven Payment System for Process_Payments,keyword-driven,Process_Payments,"*** Settings ***
Documentation    Validate Process_Payments
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
Process_Payments
[Documentation]    Validate Process_Payments using the following steps
Select Payment Method    payment_method
Enter Payment Details    payment_details
Validate Payment Authorization Is Required    nan
Process Payment With Authorization    authorization_type
Validate Payment Method And Amount    expected_payment_method, expected_amount
Enter User Details    user_details
Validate Authorization Checkbox Is Displayed    nan
Click Confirm Payment Button    nan
Signout From Payment Confirmation Page    nan
Navigate To Payment History For More Information    nan
Validate Total Payment Amount Is Correct    expected_total_amount
Validate Payment Summary Display    summary_details
Validate Payment Authorization Dialog Is Closed    nan
Validate Payment Confirmation Page Is Visible    nan
Validate Data In Generated Payment Confirmation    payment_type, payment_method, amount
Validate Applied Discounts Should Be Correct    exp_discount
Validate Checkboxes Are Properly Set    nan
Provide Reason For Payment Modification    modification_reason
Validate Errors After Submit Payment    error_message
Enter Billing Zip Code    zip_code
Wait Till Processing Completes    nan
Validate Payment Confirmation Email Is Received    transaction_id
Get Payment Transaction ID    nan
Validate Support Contact Popover Is Displayed    nan
Generate Random Payment Details    nan
Select Specific Payment And Enter Amount    payment_id, amount
Select Account Type For Payment    account_type
Validate Email Receipt Option Is Visible    nan
Navigate To Payment Authorization And Validate Other Details    nan
Enter Total Payment Amount    amount
Validate Payment Type And Payment Method    expected_payment_method, expected_account_type
Select Country    country
Validate Credit Card Expiration Date    card_number, expiration_date
Validate Terms And Conditions Page Is Closed    nan
Validate Scheduled Payments In Payment History Page    schedule_date
Select Payment Type In Dropdown    payment_type
Initiate Invoice Payment Process    nan
Navigate To Terms And Conditions Page    nan
Validate Terms And Conditions Page Is Visible    nan
Validate Payment Confirmation Is Generated    nan
Enter ECheck Payment Details    account_number, routing_number

*** Keywords ***
Select Payment Method
[Arguments]    payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_method

Enter Payment Details
[Arguments]    payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_details

Validate Payment Authorization Is Required
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Process Payment With Authorization
[Arguments]    authorization_type
[Return]    ${string}
[Documentation]    Keyword description
Log    authorization_type

Validate Payment Method And Amount
[Arguments]    expected_payment_method, expected_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_payment_method, expected_amount

Enter User Details
[Arguments]    user_details
[Return]    ${string}
[Documentation]    Keyword description
Log    user_details

Validate Authorization Checkbox Is Displayed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

Click Confirm Payment Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Signout From Payment Confirmation Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Navigate To Payment History For More Information
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Total Payment Amount Is Correct
[Arguments]    expected_total_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_total_amount

Validate Payment Summary Display
[Arguments]    summary_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    summary_details

Validate Payment Authorization Dialog Is Closed
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description",
Create keyword-driven transaction_keywords for API transaction,keyword-driven,transaction,"*** Settings ***
Documentation    Validate transaction
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
transaction
[Documentation]    Validate transaction using the following steps
Create Transaction Request Body    unique_value, transaction_id, amount, merchant_id, transaction_date
Create Merchant Details Body    nan
Create Multiple Transactions With Multiple Amounts    account_number, integrated_merchant
Create Product Info Body    nan
Create Sell To Address Body    merchant_id
Create Buy To Address Body    merchant_id
Send Request To Create Transaction For Customer  # robocop:disable=too-many-arguments    unique_value, merchant_key, merchant_id, transaction_id, amount, date
Create Multiple Transactions Through API    account_number, integrated_merchant, amount

*** Keywords ***
Create Transaction Request Body
[Arguments]    unique_value, transaction_id, amount, merchant_id, transaction_date
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value, transaction_id, amount, merchant_id, transaction_date

Create Merchant Details Body
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Create Multiple Transactions With Multiple Amounts
[Arguments]    account_number, integrated_merchant
[Return]    @{list}
[Documentation]    Keyword description
Log    account_number, integrated_merchant

Create Product Info Body
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Create Sell To Address Body
[Arguments]    merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant_id

Create Buy To Address Body
[Arguments]    merchant_id
[Return]    ${string}
[Documentation]    Keyword description
Log    merchant_id

Send Request To Create Transaction For Customer  # robocop:disable=too-many-arguments
[Arguments]    unique_value, merchant_key, merchant_id, transaction_id, amount, date
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value, merchant_key, merchant_id, transaction_id, amount, date

Create Multiple Transactions Through API
[Arguments]    account_number, integrated_merchant, amount
[Return]    @{list}
[Documentation]    Keyword description
Log    account_number, integrated_merchant, amount

","The test case 'transaction' focuses on verifying the transaction functionalities of an API system. The purpose of this test case involves ensuring the accuracy, reliability, and integrity of transaction processing, including creating, validating, and managing transactions.

Key objectives of the 'transaction' test case include:
1. **Transaction Creation and Validation**:
- Verify that transaction requests are properly formatted and contain all necessary information, such as transaction ID, amount, merchant details, and transaction date.
- Ensure that transactions can be successfully created and processed through the API, reflecting the correct amount and details.
2. **Merchant and Product Details**:
- Validate that merchant and product information is accurately associated with each transaction, ensuring correct mapping and display.
3. **Multiple Transactions Handling**:
- Confirm that the system can handle and process multiple transactions with various amounts and integrated merchants, maintaining data consistency and correctness."
Build keyword-driven paynow_keywords for API paymentvalidation,keyword-driven,"paymentvalidation
","*** Settings ***
Documentation    Validate paymentvalidation
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
paymentvalidation
[Documentation]    Validate paymentvalidation using the following steps
Send Payment Validation Request    payment_id
Validate Payment Status    payment_id, expected_status
Validate Payment Amount    payment_id, expected_amount
Validate Payment Date    payment_id, expected_date
Send Refund Request    payment_id, refund_amount

*** Keywords ***
Send Payment Validation Request
[Arguments]    payment_id
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_id

Validate Payment Status
[Arguments]    payment_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_id, expected_status

Validate Payment Amount
[Arguments]    payment_id, expected_amount
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_id, expected_amount

Validate Payment Date
[Arguments]    payment_id, expected_date
[Return]    ${boolean}
[Documentation]    Keyword description
Log    payment_id, expected_date

Send Refund Request
[Arguments]    payment_id, refund_amount
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_id, refund_amount

","The ""paymentvalidation"" test case is designed to ensure the validation and integrity of payment transactions within a system. Its main purposes include:
"
Validate keyword-driven paynow_keywords for API createcustomer,keyword-driven,createcustomer,"*** Settings ***
Documentation    Validate createcustomer
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
createcustomer
[Documentation]    Validate createcustomer using the following steps
Create Customer Request    customer_details
Validate Customer Creation Response    customer_id
Send Request To Create Customer    customer_details
Send Request To Get Customer Token    customer_id, customer_token
Verify Customer Details In System    customer_id, customer_name

*** Keywords ***
Create Customer Request
[Arguments]    customer_details
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_details

Validate Customer Creation Response
[Arguments]    customer_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    customer_id

Send Request To Create Customer
[Arguments]    customer_details
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_details

Send Request To Get Customer Token
[Arguments]    customer_id, customer_token
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id, customer_token

Verify Customer Details In System
[Arguments]    customer_id, customer_name
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id, customer_name

","The test case 'createcustomer' aims to evaluate the robustness and accuracy of the customer creation functionality within a given application. The primary objectives are:
"
Create keyword-driven test for UserManagement login_functionality,keyword-driven,login_functionality,"*** Settings ***
Documentation    Validate login_functionality
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   password123
${INVALID_USER}     invaliduser
${INVALID_PASSWORD} wrongpass

*** Test Cases ***
login_functionality
[Documentation]    Validate login_functionality using the following steps
Open Login Page    nan
Enter Username    username
Enter Password    password
Click Login Button    nan
Validate Login Success Message    expected_message
Validate User Is Redirected To Dashboard    nan
Perform Logout    nan

*** Keywords ***
Open Login Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    Open Login Page

Enter Username
[Arguments]    username
[Return]    ${string}
[Documentation]    Keyword description
Log    username

Enter Password
[Arguments]    password
[Return]    ${string}
[Documentation]    Keyword description
Log    password

Click Login Button
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    Click Login Button

Validate Login Success Message
[Arguments]    expected_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_message

Validate User Is Redirected To Dashboard
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    Validate User Is Redirected To Dashboard

Perform Logout
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    Perform Logout

","The test case 'login_functionality' is designed to verify the correctness of the login process within a user management system. The key aspects of this functionality include:

1. **Opening the Login Page:** Ensures that the login page can be accessed without any issues.
2. **Entering Credentials:** Tests both valid and invalid user credentials to check the robustness of the login mechanism.
3. **Authentication Process:** Validates whether the entered credentials are correctly processed, and appropriate error messages are displayed for wrong credentials.
4. **Redirection:** Ensures that a successful login redirects the user to the dashboard, indicating that the system recognizes the authenticated user.
5. **Logout:** Confirms that a user can log out successfully, and the session is properly terminated.

This comprehensive validation is crucial to ensuring the security and usability of the application's login functionality."
Create keyword-driven zapcompany for Invoices invoice_handling,keyword-driven,invoice_handling,"*** Settings ***
Documentation    Validate invoice_handling
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
invoice_handling
[Documentation]    Validate invoice_handling using the following steps
Navigate To Invoice Tab    account_number
Validate Invoice Status    invoice_number, expected_status
Create New Invoice    invoice_details
Cancel Invoice Creation    nan
Select Invoice Date    date
Validate Invoice Displayed    expected_invoice_id
Update Invoice Details    invoice_id, updated_details
Validate Invoice Update Status    invoice_id, expected_status
Delete Invoice    invoice_id
Validate Invoice Deletion    invoice_id, expected_status

*** Keywords ***
Navigate To Invoice Tab
[Arguments]    account_number
[Return]    ${string}
[Documentation]    Keyword description
Log    account_number

Validate Invoice Status
[Arguments]    invoice_number, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_number, expected_status

Create New Invoice
[Arguments]    invoice_details
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_details

Cancel Invoice Creation
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Select Invoice Date
[Arguments]    date
[Return]    ${string}
[Documentation]    Keyword description
Log    date

Validate Invoice Displayed
[Arguments]    expected_invoice_id
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_invoice_id

Update Invoice Details
[Arguments]    invoice_id, updated_details
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_id, updated_details

Validate Invoice Update Status
[Arguments]    invoice_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_id, expected_status

Delete Invoice
[Arguments]    invoice_id
[Return]    ${string}
[Documentation]    Keyword description
Log    invoice_id

Validate Invoice Deletion
[Arguments]    invoice_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    invoice_id, expected_status

","The test case named 'invoice_handling' is designed to validate functionalities related to invoice management within the Zapcompany application. Key objectives of this test include:

1. **Invoice Creation and Management:** Ensuring that the application allows users to create, update, and delete invoices effectively.
2. **Invoice Status Validation:** Verifying that the system accurately displays and updates the status of invoices.
3. **User Interaction Checks:** Confirming the user interface supports necessary invoice-related actions, including navigation, date selection, and form submission."
Generate keyword-driven regression tests for PayNOW payment_process,keyword-driven,payment_process,"*** Settings ***
Documentation    Validate payment_process
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
payment_process
[Documentation]    Validate payment_process using the following steps
Login User    username, password
Navigate To Payment Page    nan
Enter Payment Details    amount, account_number, payment_method
Submit Payment    nan
Validate Payment Confirmation    expected_confirmation_message
Logout User    nan

*** Keywords ***
Login User
[Arguments]    username, password
[Return]    ${boolean}
[Documentation]    Keyword description
Log    username, password

Navigate To Payment Page
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Enter Payment Details
[Arguments]    amount, account_number, payment_method
[Return]    ${string}
[Documentation]    Keyword description
Log    amount, account_number, payment_method

Submit Payment
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Validate Payment Confirmation
[Arguments]    expected_confirmation_message
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_confirmation_message

Logout User
[Arguments]    nan
[Return]    ${boolean}
[Documentation]    Keyword description
Log    nan

","The 'payment_process' test case is designed to evaluate the end-to-end procedure of making a payment within the PayNOW system. Its primary goal is to ensure that the user can smoothly navigate through the payment process, input necessary details, and successfully complete the transaction.

Key aspects covered in this test case include:
1. **Authentication:** Ensuring users can log in with valid credentials.
2. **Navigation:** Verifying that users can navigate to the payment page.
3. **Data Input:** Testing the ability to input payment details such as amount, account number, and payment method.
4. **Transaction Completion:** Ensuring that the payment is successfully submitted and that a confirmation message is displayed.
5. **Session Management:** Confirming that users can log out after the payment process is completed."
Generate keyword-driven testing web for UserPayment_Transactions,keyword-driven,userpayment_transactions,"*** Settings ***
Documentation    Validate userpayment_transactions
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
userpayment_transactions
[Documentation]    Validate userpayment_transactions using the following steps
Login To User Account    account_id
Select Payment History    nan
Verify Payment Records    expected_records
Make New Payment    payment_details
Validate Payment Confirmation    expected_confirmation
Logout User Account    nan

*** Keywords ***
Login To User Account
[Arguments]    account_id
[Return]    ${string}
[Documentation]    Keyword description
Log    account_id

Select Payment History
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

Verify Payment Records
[Arguments]    expected_records
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_records

Make New Payment
[Arguments]    payment_details
[Return]    ${string}
[Documentation]    Keyword description
Log    payment_details

Validate Payment Confirmation
[Arguments]    expected_confirmation
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_confirmation

Logout User Account
[Arguments]    nan
[Return]    ${string}
[Documentation]    Keyword description
Log    nan

","The 'userpayment_transactions' test case is created to validate the entire lifecycle of user payment transactions within the application. It ensures that users can successfully log into their accounts, view transaction histories, make new payments, and confirm payment processes. Critical checks included in this test case are:

1. **User Login**:
- Validate if the user can log in using a valid account ID.
- Ensure secure authentication and proper session handling.

2. **Payment History**:
- Confirm the presence and accuracy of historical payment records.
- Verify that records are correctly displayed and match user expectations.

3. **New Payments**:
- Test the process of making new payments with complete and accurate details.
- Validate confirmation messages or notifications indicating successful transactions.

4. **Logout**:
- Ensure that users can safely and correctly log out of their accounts.
- Check that session data is appropriately cleared upon logout.

By ensuring these functionalities, the 'userpayment_transactions' test case plays a vital role in maintaining the integrity and reliability of the user payment functionalities within the application."
Validate keyword-driven clientcentral_keywords for API order_management,keyword-driven,order_management,"*** Settings ***
Documentation    Validate order_management
Test Setup       Initialize Environment
Test Teardown    Cleanup Environment
Suite Setup      Open Application
Suite Teardown   Close Application
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
order_management
[Documentation]    Validate order_management using the following steps
Create Order Body    unique_value|customer_id|product_id
Send Request To Create Order    customer_id
Validate Order Creation Response    order_id, expected_status
Create Order With Invalid Data    error_case, invalid_data
Validate Error Response For Invalid Order    expected_error
Update Order Details    order_id, update_details
Validate Updated Order Details    order_id, expected_details
Cancel Order    order_id
Validate Order Cancellation Response    order_id, expected_status

*** Keywords ***
Create Order Body
[Arguments]    unique_value|customer_id|product_id
[Return]    ${string}
[Documentation]    Keyword description
Log    unique_value|customer_id|product_id

Send Request To Create Order
[Arguments]    customer_id
[Return]    ${string}
[Documentation]    Keyword description
Log    customer_id

Validate Order Creation Response
[Arguments]    order_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, expected_status

Create Order With Invalid Data
[Arguments]    error_case, invalid_data
[Return]    ${string}
[Documentation]    Keyword description
Log    error_case, invalid_data

Validate Error Response For Invalid Order
[Arguments]    expected_error
[Return]    ${boolean}
[Documentation]    Keyword description
Log    expected_error

Update Order Details
[Arguments]    order_id, update_details
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id, update_details

Validate Updated Order Details
[Arguments]    order_id, expected_details
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, expected_details

Cancel Order
[Arguments]    order_id
[Return]    ${string}
[Documentation]    Keyword description
Log    order_id

Validate Order Cancellation Response
[Arguments]    order_id, expected_status
[Return]    ${boolean}
[Documentation]    Keyword description
Log    order_id, expected_status

","The test case 'order_management' is tailored to evaluate the functionality and reliability of a system managing customer orders through an API. The primary goal of this test case is to ensure that orders are created, updated, and managed correctly, as well as verify the proper handling of error scenarios.

Key objectives of the 'order_management' test case include:"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_65 Validate Amount Due Is Appropriately Updated In Over 90 Days Past Due,data-driven,TC_65 Validate Amount Due Is Appropriately Updated In Over 90 Days Past Due,"*** Settings ***
Documentation    Validate TC_65 Validate Amount Due Is Appropriately Updated In Over 90 Days Past Due
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_65 Validate Amount Due Is Appropriately Updated In Over 90 Days Past Due
[Documentation]    Validate TC_65 Validate Amount Due Is Appropriately Updated In Over 90 Days Past Due using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Validate Amount Due Is Displayed In Days Past Due    Over 90 Days    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Validate Amount Due Is Displayed In Days Past Due
[Arguments]    Over 90 Days    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    Over 90 Days    ${nan}    ${nan}

","The test case 'TC_65 Validate Amount Due Is Appropriately Updated In Over 90 Days Past Due' ensures the system accurately updates the amount a customer owes when their account surpasses the 90 days past due mark.

**Purpose:**

1. **Validation of Correct Amount Calculation:** Verify that the system correctly calculates and displays the outstanding balance for accounts that are more than 90 days overdue.

2. **Interest and Fees Inclusion:** Ensure that any applicable interest charges, late fees, or penalties are correctly applied and reflected in the amount due.

3. **Consistency in Past Due Classification:** Confirm that the overdue status is correctly classified as ""Over 90 Days"", ensuring proper categorization for collection efforts."
Generate data-driven clientcentral_testcases for orders Testcases TC_45 Validate Merchant Can Track Order Status In Real-Time,data-driven,TC_45 Validate Merchant Can Track Order Status In Real-Time,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Can Track Order Status In Real-Time
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Can Track Order Status In Real-Time
[Documentation]    Validate TC_45 Validate Merchant Can Track Order Status In Real-Time using the following steps
Send Request To Create Order    ${STERLING_COOPER}    ${product_id}    ${quantity}
Confirm Order Creation    ${order_id}    ${true}    ${nan}
Navigate To Orders Page    ${nan}    ${nan}    ${nan}
Filter Order    ${order_id}    ${nan}    ${nan}
Select Order From List    ${order_id}    ${nan}    ${nan}
Validate Order Status    ${order_status}    ${Processing}    ${nan}
Change Order Status Manually    ${order_id}    ${Shipped}    ${nan}
Validate Order Status Update    ${order_status}    ${Shipped}    ${nan}
Change Order Status Automatically    ${order_id}    ${Delivered}    ${nan}
Validate Final Order Status    ${order_status}    ${Delivered}    ${nan}

*** Keywords ***
Send Request To Create Order
[Arguments]    ${STERLING_COOPER}    ${product_id}    ${quantity}
[Return]    ${order_id}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${product_id}    ${quantity}

Confirm Order Creation
[Arguments]    ${order_id}    ${true}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_id}    ${true}    ${nan}

Navigate To Orders Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Filter Order
[Arguments]    ${order_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_id}    ${nan}    ${nan}

Select Order From List
[Arguments]    ${order_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_id}    ${nan}    ${nan}

Validate Order Status
[Arguments]    ${order_status}    ${Processing}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_status}    ${Processing}    ${nan}

Change Order Status Manually
[Arguments]    ${order_id}    ${Shipped}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_id}    ${Shipped}    ${nan}

Validate Order Status Update
[Arguments]    ${order_status}    ${Shipped}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_status}    ${Shipped}    ${nan}

Change Order Status Automatically
[Arguments]    ${order_id}    ${Delivered}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_id}    ${Delivered}    ${nan}

Validate Final Order Status
[Arguments]    ${order_status}    ${Delivered}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_status}    ${Delivered}    ${nan}

","**Test Case: TC_45 - Validate Merchant Can Track Order Status In Real-Time**

**Purpose:**
The primary objective of this test case is to ensure that merchants can track the status of their orders in real-time, allowing them to monitor and manage order processing efficiently. This involves verifying that:
"
Generate a new data-driven test case for AcmeCorporation Testcases TC_62 Validate Partial Payment Through Paypal Option,data-driven,TC_62 Validate Partial Payment Through Paypal Option,"*** Settings ***
Documentation    Validate TC_62 Validate Partial Payment Through Paypal Option
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser_acme
${VALID_PASSWORD}   password123

*** Test Cases ***
TC_62 Validate Partial Payment Through Paypal Option
[Documentation]    Validate TC_62 Validate Partial Payment Through Paypal Option using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}
Launch AcmeCorporation Application    ${ACME_INTEGRATED_MERCHANT}    ${nan}    ${}
Enter Customer Details    ${customer_details}    ${ACME_INTEGRATED_MERCHANT}    ${}
Select Payment Type    ${Partial Payment}    ${nan}    ${}
Enter Partial Payment Amount    ${50}    ${nan}    ${}
Select Payment Method    ${PayPal}    ${nan}    ${}
Enter PayPal Details    ${PAYPAL_DETAILS}    ${nan}    ${}
Validate Errors After Clicking On Process Invoice    ${customer_details.Error_Message}    ${nan}    ${}
Process Invoice Payment    ${nan}    ${nan}    ${}
Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch AcmeCorporation Application
[Arguments]    ${ACME_INTEGRATED_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
[Arguments]    ${customer_details}    ${ACME_INTEGRATED_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${ACME_INTEGRATED_MERCHANT}    ${}

Select Payment Type
[Arguments]    ${Partial Payment}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Partial Payment}    ${nan}    ${}

Enter Partial Payment Amount
[Arguments]    ${50}    ${nan}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${50}    ${nan}    ${}

Select Payment Method
[Arguments]    ${PayPal}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PayPal}    ${nan}    ${}

Enter PayPal Details
[Arguments]    ${PAYPAL_DETAILS}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PAYPAL_DETAILS}    ${nan}    ${}

Validate Errors After Clicking On Process Invoice
[Arguments]    ${customer_details.Error_Message}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_details.Error_Message}    ${nan}    ${}

Process Invoice Payment
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate Payment Receipt Is Generated
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

","The test case 'TC_62 Validate Partial Payment Through Paypal Option' aims to verify the functionality of processing partial payments through the PayPal payment method within the AcmeCorporation application.

**Purpose:**

1. **Payment Flexibility:**
- To ensure that customers can opt to make partial payments on their invoices, providing flexibility in payment options.

2. **Payment Method Integration:**
- To check the integration of the PayPal payment method and confirm that it works seamlessly for processing partial payments.

3. **Error Handling:**
- To validate that the system handles any errors or issues that may arise during the payment process and provides appropriate feedback to the"
Create data-driven paynow test cases for Autorespond Testcases TC_10 Validate Customer Can Set Up Automatic Email Response For Failed Payments,data-driven,TC_10 Validate Customer Can Set Up Automatic Email Response For Failed Payments,"*** Settings ***
Documentation    Validate TC_10 Validate Customer Can Set Up Automatic Email Response For Failed Payments
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Customer Can Set Up Automatic Email Response For Failed Payments
[Documentation]    Validate TC_10 Validate Customer Can Set Up Automatic Email Response For Failed Payments using the following steps
Send Request To Create Customer    ${AUTORESPOND_MERCHANT}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${account_number}    ${AUTORESPOND_MERCHANT}    ${}
Login To PayNOW    ${account_number}    ${invoice_number}    ${}
Navigate To Email Response Settings    ${nan}    ${nan}    ${}
Set Up Failed Payment Response    ${Fail_Email_Template}    ${nan}    ${}
Save Email Response Settings    ${nan}    ${nan}    ${}
Simulate Payment Failure    ${account_number}    ${invoice_number}    ${Fail}
Verify Automatic Email Response    ${Fail_Email_Template}    ${account_email}    ${}
Logout From PayNOW    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${AUTORESPOND_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${AUTORESPOND_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${AUTORESPOND_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${AUTORESPOND_MERCHANT}    ${}

Login To PayNOW
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Navigate To Email Response Settings
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Set Up Failed Payment Response
[Arguments]    ${Fail_Email_Template}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Fail_Email_Template}    ${nan}    ${}

Save Email Response Settings
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Simulate Payment Failure
[Arguments]    ${account_number}    ${invoice_number}    ${Fail}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${Fail}

Verify Automatic Email Response
[Arguments]    ${Fail_Email_Template}    ${account_email}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Fail_Email_Template}    ${account_email}    ${}

Logout From PayNOW
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

","**Test Case: TC_10 Validate Customer Can Set Up Automatic Email Response For Failed Payments**

**Purpose:**
The primary goal of Test Case TC_10 is to verify that customers can configure an automatic email response to be sent in case of payment failures. This ensures effective communication with the customer, informing them promptly when a payment attempt is unsuccessful, thus allowing them to take corrective action and maintain a positive experience with the service.

**Summary:**

- **Setup:** The customer must be able to access PayNOW and navigate to the email response settings.
- **Action:** Configure an email response template specifically for failed payments, save the settings, and simulate a payment failure to test the functionality.
- **Verification:** The test confirms that the configured email response is sent automatically to the customer's email in case of a payment failure."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_09 Validate Correct Transaction Timestamps,data-driven,TC_09 Validate Correct Transaction Timestamps,"*** Settings ***
Documentation    Validate TC_09 Validate Correct Transaction Timestamps
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_09 Validate Correct Transaction Timestamps
[Documentation]    Validate TC_09 Validate Correct Transaction Timestamps using the following steps
Select Module    ${All Transactions}    ${}    ${}
Select Time Range    ${Today}    ${nan}    ${}
Get All Transaction Timestamps    ${nan}    ${}    ${}
Validate Timestamps In Time Range    ${timestamps}    ${Today}    ${}

*** Keywords ***
Select Module
[Arguments]    ${All Transactions}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${All Transactions}    ${}    ${}

Select Time Range
[Arguments]    ${Today}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Today}    ${nan}    ${}

Get All Transaction Timestamps
[Arguments]    ${nan}    ${}    ${}
[Return]    ${list}
[Documentation]    Keyword description
Log    ${nan}    ${}    ${}

Validate Timestamps In Time Range
[Arguments]    ${timestamps}    ${Today}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${timestamps}    ${Today}    ${}
","The test case 'TC_09 Validate Correct Transaction Timestamps' is designed to ensure that timestamps of transactions logged within the system are accurate and fall within the specified time range.

**Purpose:**

The primary objective of this test case is to verify the correctness of transaction timestamps. Ensuring that transactions are correctly timestamped is critical for auditing, reporting, and overall data integrity.

**Context:**

1. **All Transactions Module:** This is a consolidated view of all transactions within the application.
2. **Time Range Selection:** Users can filter transactions by various time ranges (e.g., Today, This Week, This Month) to focus the dataset.
3. **Timestamp Accuracy:** Each transaction must have an accurate timestamp reflecting when the transaction actually occurred, within the selected time range.

By verifying that the timestamps match the expected criteria, this test case helps in maintaining the reliability and correctness of the system's transaction logging mechanism."
Generate data-driven clientcentral_testcases for customers Testcases TC_25 Validate Merchant Can Generate Transaction Reports,data-driven,TC_25 Validate Merchant Can Generate Transaction Reports,"*** Settings ***
Documentation    Validate TC_25 Validate Merchant Can Generate Transaction Reports
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_25 Validate Merchant Can Generate Transaction Reports
[Documentation]    Validate TC_25 Validate Merchant Can Generate Transaction Reports using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Reports Section    ${nan}    ${nan}    ${nan}
Generate Transaction Report    ${merchant_id}    ${start_date}    ${end_date}    ${nan}
Validate Transaction Report Is Generated    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Reports Section
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Generate Transaction Report
[Arguments]    ${merchant_id}    ${start_date}    ${end_date}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${merchant_id}    ${start_date}    ${end_date}    ${nan}

Validate Transaction Report Is Generated
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_25 Validate Merchant Can Generate Transaction Reports' aims to verify that merchants can successfully generate transaction reports through the merchant interface. The primary purpose of this test case is to ensure that the system allows merchants to compile and retrieve a detailed report of all transactions processed within a specified timeframe. This feature is crucial for financial tracking, auditing, and insights into business performance.

The test case ensures the following:
"
Generate data-driven clientcentral_testcases for invoicing Testcases TC_15 Validate Merchant Is Able To Generate And Send Invoice To Customer,data-driven,TC_15 Validate Merchant Is Able To Generate And Send Invoice To Customer,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Is Able To Generate And Send Invoice To Customer
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Is Able To Generate And Send Invoice To Customer
[Documentation]    Validate TC_15 Validate Merchant Is Able To Generate And Send Invoice To Customer using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Generate Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${amount}
Verify Invoice Generated    ${account_number}    ${invoice_id}    ${nan}
Send Invoice To Customer Via Email    ${account_number}    ${invoice_id}    ${customer_email}
Validate Invoice Received In Email    ${customer_email}    ${invoice_id}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Generate Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${amount}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${amount}

Verify Invoice Generated
[Arguments]    ${account_number}    ${invoice_id}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_id}    ${nan}

Send Invoice To Customer Via Email
[Arguments]    ${account_number}    ${invoice_id}    ${customer_email}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_id}    ${customer_email}

Validate Invoice Received In Email
[Arguments]    ${customer_email}    ${invoice_id}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_email}    ${invoice_id}    ${nan}

","The test case 'TC_15 Validate Merchant Is Able To Generate And Send Invoice To Customer' is designed to ensure that merchants have the capability to generate and send invoices to customers via email through their system. The process includes creating a customer record, generating an invoice with the appropriate details, verifying that the invoice is correctly generated, and sending the invoice to the customer's email address. Finally, it confirms that the customer successfully receives the invoice. Ensuring this functionality works correctly is crucial for merchants to maintain efficient billing processes and improve customer service."
Generate data-driven paynow test cases for Hawthorne Testcases TC_11 Validate Customer Can Disable Notifications for Overdue Invoices,data-driven,TC_11 Validate Customer Can Disable Notifications for Overdue Invoices,"*** Settings ***
Documentation    Validate TC_11 Validate Customer Can Disable Notifications for Overdue Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_11 Validate Customer Can Disable Notifications for Overdue Invoices
[Documentation]    Validate TC_11 Validate Customer Can Disable Notifications for Overdue Invoices using the following steps
Send Request To Create Customer    ${HAWTHORNE_MERCHANT}    ${testuser}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${HAWTHORNE_MERCHANT}    ${testuser}
Login To PayNOW And Navigate To Notifications    ${account_number}    ${invoice_number}    ${nan}
Disable Overdue Invoice Notifications    ${nan}    ${nan}    ${nan}
Validate Notification Settings    ${Disabled}    ${nan}    ${nan}
Logout From PayNOW Application    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${HAWTHORNE_MERCHANT}    ${testuser}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${HAWTHORNE_MERCHANT}    ${testuser}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${HAWTHORNE_MERCHANT}    ${testuser}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${HAWTHORNE_MERCHANT}    ${testuser}

Login To PayNOW And Navigate To Notifications
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Disable Overdue Invoice Notifications
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Notification Settings
[Arguments]    ${Disabled}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Disabled}    ${nan}    ${nan}

Logout From PayNOW Application
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

","### Summary of Test Case 'TC_11: Validate Customer Can Disable Notifications for Overdue Invoices':

**Purpose:**
The primary objective of this test case is to verify that customers have the ability to disable notifications specifically related to overdue invoices. This is crucial to ensure customers have control over the kind of notifications they wish to receive, thereby improving their user experience and reducing unnecessary alerts.

**Key Points:**
1. **Functionality Check:** This test case checks whether the feature to disable overdue invoice notifications is present and works as intended.
2. **User Interaction:** Ensures that the process of disabling the notifications is straightforward and easy for the user to complete.
3. **Setting Validation:** Validates that once the notifications are disabled, the settings reflect the change accurately, and no overdue invoice notifications are sent."
Create data-driven clientcentral_testcases for users Testcases TC_05 Validate Merchant Can Update User Profile Information,data-driven,TC_05 Validate Merchant Can Update User Profile Information,"*** Settings ***
Documentation    Validate TC_05 Validate Merchant Can Update User Profile Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       merchantuser
${VALID_PASSWORD}   secretpass

*** Test Cases ***
TC_05 Validate Merchant Can Update User Profile Information
[Documentation]    Validate TC_05 Validate Merchant Can Update User Profile Information using the following steps
Login As Merchant User    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To User Profile Page    ${VALID_USER}    ${nan}    ${nan}
Update User Name    ${new_user_name}    ${nan}    ${nan}
Update User Email    ${new_user_email}    ${nan}    ${nan}
Update User Phone Number    ${new_user_phone}    ${nan}    ${nan}
Save User Profile Changes    ${nan}    ${nan}    ${nan}
Validate User Profile Update    ${new_user_name}    ${new_user_email}    ${new_user_phone}

*** Keywords ***
Login As Merchant User
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Navigate To User Profile Page
[Arguments]    ${VALID_USER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${nan}    ${nan}

Update User Name
[Arguments]    ${new_user_name}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_user_name}    ${nan}    ${nan}

Update User Email
[Arguments]    ${new_user_email}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_user_email}    ${nan}    ${nan}

Update User Phone Number
[Arguments]    ${new_user_phone}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_user_phone}    ${nan}    ${nan}

Save User Profile Changes
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate User Profile Update
[Arguments]    ${new_user_name}    ${new_user_email}    ${new_user_phone}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_user_name}    ${new_user_email}    ${new_user_phone}

","**Summary of Test Case TC_05:**

The test case titled ""TC_05 Validate Merchant Can Update User Profile Information"" aims to verify that a merchant user can successfully update their profile information such as their name, email, and phone number within the merchant portal or user management system. This functionality is essential for maintaining accurate and up-to-date user records, ensuring smooth communication, and personalizing user experience.

### Purpose:
1. **Ensure Proper Functionality:**
- To verify that the user interface elements related to updating the profile are functioning correctly and that the user can successfully save changes without errors.

2. **Accuracy of Updated Information:**
- To confirm that the changes made to the user profile are accurately reflected in the system database and user interface, providing consistent and correct user information.

3. **Permissions and Security:**
- To validate that only authorized users (merchants in this case) can update profile information, ensuring that the functionality is secure and properly restricted to authenticated users.

By ensuring that user profile updates are handled correctly, this test case helps maintain user satisfaction and efficiency in managing personal information within the system."
Create data-driven clientcentral_testcases for all transactions Testcases TC_45 Validate Customer Can Download Transaction Report,data-driven,TC_45 Validate Customer Can Download Transaction Report,"*** Settings ***
Documentation    Validate TC_45 Validate Customer Can Download Transaction Report
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Customer Can Download Transaction Report
[Documentation]    Validate TC_45 Validate Customer Can Download Transaction Report using the following steps
Send Request To Create Customer    ${CLIENT_CENTRAL}    ${nan}    ${}
Send Request To Create Transaction For Customer    ${CLIENT_CENTRAL}    ${account_number}    ${}
Login To Client Central    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Navigate To Transaction History    ${client_id}    ${nan}    ${}
Initiate Report Download    ${transaction_id}    ${report_format}    ${}
Validate Report Download Is Successful    ${expected_file}    ${download_path}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${CLIENT_CENTRAL}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CLIENT_CENTRAL}    ${nan}    ${}

Send Request To Create Transaction For Customer
[Arguments]    ${CLIENT_CENTRAL}    ${account_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CLIENT_CENTRAL}    ${account_number}    ${}

Login To Client Central
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Navigate To Transaction History
[Arguments]    ${client_id}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${client_id}    ${nan}    ${}

Initiate Report Download
[Arguments]    ${transaction_id}    ${report_format}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${report_format}    ${}

Validate Report Download Is Successful
[Arguments]    ${expected_file}    ${download_path}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${expected_file}    ${download_path}    ${}

","**Summary of Test Case TC_45: Validate Customer Can Download Transaction Report**

**Purpose:**
The purpose of this test case is to ensure that customers can successfully download a transaction report from the client portal. The ability to download reports is essential for customers to maintain records, perform audits, and review transaction histories.

**Key Objectives:**

1. **Authentication Verification:**
- Ensure that a valid customer can log in to the client central portal using correct credentials.

2. **Navigation to Transaction History:**
- Verify that the customer can navigate to the transaction history page without errors.

3. **Report Download Functionality:**
- Confirm that the customer can initiate the download of a transaction report in the specified format and that the file is downloaded correctly.

4. **Successful Download Verification:**
- Validate that the downloaded report matches the expected file format and is successfully saved to the designated download path."
Generate data-driven paynow test cases for integrated Testcases TC_12 Validate User Is Able To Add And Save New Bank Account Information,data-driven,TC_12 Validate User Is Able To Add And Save New Bank Account Information,"*** Settings ***
Documentation    Validate TC_12 Validate User Is Able To Add And Save New Bank Account Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate User Is Able To Add And Save New Bank Account Information
[Documentation]    Validate TC_12 Validate User Is Able To Add And Save New Bank Account Information using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
Navigate To Bank Account Section    ${nan}    ${nan}    ${nan}
Add New Bank Account Information    ${new_bank_account_details}    ${nan}    ${nan}
Save Bank Account Information    ${nan}    ${nan}    ${nan}
Validate Bank Account Information Is Saved    ${new_bank_account_details}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}

Navigate To Bank Account Section
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Add New Bank Account Information
[Arguments]    ${new_bank_account_details}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_bank_account_details}    ${nan}    ${nan}

Save Bank Account Information
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Bank Account Information Is Saved
[Arguments]    ${new_bank_account_details}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_bank_account_details}    ${nan}    ${nan}

","**Test Case Summary: TC_12 Validate User Is Able To Add And Save New Bank Account Information**

**Purpose**:
The goal of this test case, TC_12, is to ensure that users are able to add and save new bank account information successfully within the PayNow application. This functionality is crucial for enabling users to manage their payment methods efficiently.

**Key Goals:**

1. **User Experience:** Confirm that the process for adding and saving bank account details is intuitive and user-friendly.
2. **Data Integrity:** Validate that the new bank account information entered by the user is saved correctly in the system.
3. **System Behavior:** Ensure that no errors occur during the process and that appropriate confirmation messages are displayed to the user."
Build data-driven clientcentral_testcases for refunds Testcases TC_15 Validate Merchant Is Able To Process Full Refund For Credit Card Payment,data-driven,TC_15 Validate Merchant Is Able To Process Full Refund For Credit Card Payment,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Is Able To Process Full Refund For Credit Card Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Is Able To Process Full Refund For Credit Card Payment
[Documentation]    Validate TC_15 Validate Merchant Is Able To Process Full Refund For Credit Card Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Process Full Payment Through Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Get PaymentID    ${response}    ${nan}    ${nan}
Navigate To Refund Page    ${account_number}    ${nan}    ${nan}
Select Refund Option    ${Full Refund}    ${nan}    ${nan}
Confirm Refund    ${nan}    ${nan}    ${nan}
Validate Refund Is Processed    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Process Full Payment Through Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get PaymentID
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Navigate To Refund Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Refund Option
[Arguments]    ${Full Refund}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Full Refund}    ${nan}    ${nan}

Confirm Refund
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Refund Is Processed
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

","**Test Case Summary:**

**Title:**
TC_15 Validate Merchant Is Able To Process Full Refund For Credit Card Payment

**Purpose:**
The purpose of Test Case TC_15 is to ensure that a merchant using the payment system can successfully process a full refund for a payment made using a credit card. This test case aims to verify the functionality and reliability of the refund process, ensuring that the full amount billed to a customer can be returned effectively.

**Objectives:**
1. Validate the system's ability to generate a new customer and create an invoice linked to the customer account.
2. Confirm that a full payment can be processed through a credit card.
3. Check if the system retrieves the correct payment ID.
4. Ensure the merchant can navigate to the refund page and select the full refund option.
5. Verify that the refund is processed correctly and the system reflects the refunded status for the respective invoice."
Create data-driven clientcentral_testcases for customers Testcases TC_79 Validate Merchant Can Apply And Remove Discounts From An Invoice,data-driven,TC_79 Validate Merchant Can Apply And Remove Discounts From An Invoice,"*** Settings ***
Documentation    Validate TC_79 Validate Merchant Can Apply And Remove Discounts From An Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_79 Validate Merchant Can Apply And Remove Discounts From An Invoice
[Documentation]    Validate TC_79 Validate Merchant Can Apply And Remove Discounts From An Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Apply Discount To Invoice    ${invoice_number}    ${10}    ${Percentage}
Validate Discount Applied    ${invoice_number}    ${nan}    ${nan}
Remove Discount From Invoice    ${invoice_number}    ${nan}    ${nan}
Validate Discount Removed    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Apply Discount To Invoice
[Arguments]    ${invoice_number}    ${10}    ${Percentage}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${10}    ${Percentage}

Validate Discount Applied
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Remove Discount From Invoice
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Validate Discount Removed
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

","The test case 'TC_79 Validate Merchant Can Apply And Remove Discounts From An Invoice' is designed to ensure that a merchant can correctly apply and subsequently remove discounts from customer invoices. This is a crucial feature for merchants who want to offer promotional discounts or correct invoice amounts after initially adding discounts.

By validating this functionality, the test case aims to confirm that:

1. **Discount Application:** The system allows the merchant to apply a discount (specified in percentage or fixed amount) to a selected invoice.
2. **Accuracy:** The discount is accurately applied and reflected in the invoice total.
3. **Discount Removal:** The merchant can remove an applied discount and the invoice total reverts accordingly.
4. **User Interface:** The steps to apply and remove a discount are intuitive and provide necessary feedback, such as updates to the invoice total and confirmation messages.

Overall, this test aims to ensure the flexibility and correctness of the discount management feature, which is essential for effective invoice handling and customer satisfaction."
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_45 Validate Customer Can Add and Remove Payment Methods From Their Account,data-driven,TC_45 Validate Customer Can Add and Remove Payment Methods From Their Account,"*** Settings ***
Documentation    Validate TC_45 Validate Customer Can Add and Remove Payment Methods From Their Account
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Customer Can Add and Remove Payment Methods From Their Account
[Documentation]    Validate TC_45 Validate Customer Can Add and Remove Payment Methods From Their Account using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number    ${account_number}    ${nan}    ${nan}
Add New Payment Method    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}
Validate Payment Method Is Added    ${Visa card}    ${nan}    ${nan}
Remove Payment Method    ${41111}    ${nan}    ${nan}
Validate Payment Method Is Removed    ${Visa card}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Add New Payment Method
[Arguments]    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}

Validate Payment Method Is Added
[Arguments]    ${Visa card}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Visa card}    ${nan}    ${nan}

Remove Payment Method
[Arguments]    ${41111}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${41111}    ${nan}    ${nan}

Validate Payment Method Is Removed
[Arguments]    ${Visa card}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Visa card}    ${nan}    ${nan}
","The test case 'TC_45 Validate Customer Can Add and Remove Payment Methods From Their Account' is designed to ensure that users can successfully add new payment methods to their account as well as remove them when they choose. This test case validates two critical functionalities: the addition and removal of payment methods, ensuring that the application is capable of handling both processes without any issues. It checks that the added payment method appears correctly in the user's account and that it can be removed without any residual data left behind. This test case enhances the overall user experience by allowing for transparent and efficient management of payment methods."
Build data-driven clientcentral_testcases for customer profile updates Testcases TC_62 Validate Customer Profile Can Be Updated Including Address Details,data-driven,TC_62 Validate Customer Profile Can Be Updated Including Address Details,"*** Settings ***
Documentation    Validate TC_62 Validate Customer Profile Can Be Updated Including Address Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_62 Validate Customer Profile Can Be Updated Including Address Details
[Documentation]    Validate TC_62 Validate Customer Profile Can Be Updated Including Address Details using the following steps
Send Request To Create Customer    ${GADGET_INCORP}    ${99}    ${}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Profile}    ${nan}    ${nan}
Update Customer Profile    ${new_firstname}    ${new_lastname}    ${new_email}    ${new_address}    ${new_phone}
Validate Customer Profile Update    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${GADGET_INCORP}    ${99}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GADGET_INCORP}    ${99}    ${}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Profile}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Profile}    ${nan}    ${nan}

Update Customer Profile
[Arguments]    ${new_firstname}    ${new_lastname}    ${new_email}    ${new_address}    ${new_phone}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_firstname}    ${new_lastname}    ${new_email}    ${new_address}    ${new_phone}

Validate Customer Profile Update
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

","The test case 'TC_62 Validate Customer Profile Can Be Updated Including Address Details' is designed to confirm that the customer profile management functionality of the system allows for complete and accurate updates, especially focusing on address details. This ensures that merchants can maintain up-to-date and correct information for their customers, which is essential for communications, shipping, and personalized services. Successful execution of this test case includes verification of the following aspects:
"
Generate data-driven clientcentral_testcases for payments Testcases TC_12 Validate Merchant Can Refund a Payment Using Credit Card,data-driven,TC_12 Validate Merchant Can Refund a Payment Using Credit Card,"*** Settings ***
Documentation    Validate TC_12 Validate Merchant Can Refund a Payment Using Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Merchant Can Refund a Payment Using Credit Card
[Documentation]    Validate TC_12 Validate Merchant Can Refund a Payment Using Credit Card using the following steps
Login As Merchant    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Navigate To Transactions Page    ${nan}    ${}    ${}
Search For Transaction    ${transaction_id}    ${}    ${}
Select Transaction    ${transaction_id}    ${}    ${}
Initiate Refund Process    ${refund_amount}    ${}    ${}
Confirm Refund    ${refund_amount}    ${}    ${}
Validate Refund Status    ${transaction_id}    ${REFUNDED}    ${}

*** Keywords ***
Login As Merchant
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    Logging in with user ${VALID_USER} and password ${VALID_PASSWORD}    ${}    ${}

Navigate To Transactions Page
[Arguments]    ${nan}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    Navigating to transactions page    ${nan}    ${}    ${}

Search For Transaction
[Arguments]    ${transaction_id}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    Searching for transaction ${transaction_id}    ${}    ${}

Select Transaction
[Arguments]    ${transaction_id}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    Selecting transaction ${transaction_id}    ${}    ${}

Initiate Refund Process
[Arguments]    ${refund_amount}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    Initiating refund of amount ${refund_amount}    ${}    ${}

Confirm Refund
[Arguments]    ${refund_amount}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    Confirming refund of amount ${refund_amount}    ${}    ${}

Validate Refund Status
[Arguments]    ${transaction_id}    ${REFUNDED}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    Transaction ${transaction_id} status is now ${REFUNDED}    ${}    ${}

","The test case 'TC_12 Validate Merchant Can Refund a Payment Using Credit Card' aims to verify that a merchant is capable of processing refunds through credit card payments within the system.

**Purpose:**
- To ensure that the refund process can be initiated and completed successfully by the merchant.
- To validate that the system reflects the refund in the transaction ledger.
- To confirm that the refund amount is accurately processed and the transaction status is updated to 'REFUNDED'.

**Objectives:**
- Improve customer satisfaction by enabling seamless and accurate refund processing.
- Ensure that the merchant’s interface for processing refunds is functional, user-friendly, and reliable.
- Validate the integrity of the transaction details post-refund to maintain accurate financial records."
Create data-driven clientcentral_testcases for invoice processing Testcases TC_55 Validate Merchant Is Able To Cancel An Invoice Successfully,data-driven,TC_55 Validate Merchant Is Able To Cancel An Invoice Successfully,"*** Settings ***
Documentation    Validate TC_55 Validate Merchant Is Able To Cancel An Invoice Successfully
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_55 Validate Merchant Is Able To Cancel An Invoice Successfully
[Documentation]    Validate TC_55 Validate Merchant Is Able To Cancel An Invoice Successfully using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}
Cancel Invoice    ${invoice_number}    ${nan}    ${nan}
Validate Invoice Cancellation    ${invoice_number}    ${Cancelled}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Invoices}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Invoices}    ${nan}    ${nan}

Cancel Invoice
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Validate Invoice Cancellation
[Arguments]    ${invoice_number}    ${Cancelled}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${Cancelled}    ${nan}

","**Test Case Summary: TC_55 - Validate Merchant Is Able To Cancel An Invoice Successfully**
"
Generate data-driven clientcentral_testcases for orders Testcases TC_45 Validate Merchant Can View Order History,data-driven,TC_45 Validate Merchant Can View Order History,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Can View Order History
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Can View Order History
[Documentation]    Validate TC_45 Validate Merchant Can View Order History using the following steps
Select Module    ${Orders}    ${}    ${}
Navigate To Order History Page    ${month}    ${}    ${}
Validate Order Entries Are Displayed    ${order_id}    ${}    ${}
Filter Orders By Status    ${Completed}    ${}    ${}
Validate Filtered Orders    ${order_id}    ${Completed}    ${}

*** Keywords ***
Select Module
[Arguments]    ${Orders}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Orders}    ${}    ${}

Navigate To Order History Page
[Arguments]    ${month}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${month}    ${}    ${}

Validate Order Entries Are Displayed
[Arguments]    ${order_id}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_id}    ${}    ${}

Filter Orders By Status
[Arguments]    ${Completed}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Completed}    ${}    ${}

Validate Filtered Orders
[Arguments]    ${order_id}    ${Completed}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_id}    ${Completed}    ${}
","The test case 'TC_45 Validate Merchant Can View Order History' is designed to ensure that a merchant can access and view their order history within the system. The purpose of this test case extends to verifying both the navigation functionality and data retrieval pertaining to order history. Specifically, the goals include:
"
Generate data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker TC_09 Validate Merchant Is Able To Cancel Scheduled Payment,data-driven,TC_09 Validate Merchant Is Able To Cancel Scheduled Payment,"*** Settings ***
Documentation    Validate TC_09 Validate Merchant Is Able To Cancel Scheduled Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_09 Validate Merchant Is Able To Cancel Scheduled Payment
[Documentation]    Validate TC_09 Validate Merchant Is Able To Cancel Scheduled Payment using the following steps
Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Navigate To Scheduled Payments    ${nan}    ${nan}    ${nan}
Select Scheduled Payment    ${scheduled_payment_id}    ${nan}    ${nan}
Click Cancel Payment    ${nan}    ${nan}    ${nan}
Confirm Cancellation    ${nan}    ${nan}    ${nan}
Validate Payment Status Is Cancelled    ${scheduled_payment_id}    ${Scheduled_Payments.Status}    ${Cancelled}

*** Keywords ***
Launch PayNow Application
[Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Scheduled Payments
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Select Scheduled Payment
[Arguments]    ${scheduled_payment_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${scheduled_payment_id}    ${nan}    ${nan}

Click Cancel Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Confirm Cancellation
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Payment Status Is Cancelled
[Arguments]    ${scheduled_payment_id}    ${Scheduled_Payments.Status}    ${Cancelled}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${scheduled_payment_id}    ${Scheduled_Payments.Status}    ${Cancelled}

","The test case 'TC_09 Validate Merchant Is Able To Cancel Scheduled Payment' is designed to ensure that merchants have the capability to cancel previously scheduled payments within the PayNOW application. The test aims to verify that the system accurately processes cancellation requests, updates the payment status accordingly, and confirms that the scheduled payment has been effectively cancelled. The purpose is to provide merchants with a dependable and intuitive way to manage their scheduled payments, promoting flexibility and control over their financial transactions."
Build data-driven paynow test cases for Subscription Management Testcases TC_20 Verify Customer Can Update Credit Card Information for Subscription,data-driven,TC_20 Verify Customer Can Update Credit Card Information for Subscription,"*** Settings ***
Documentation    Verify TC_20 Verify Customer Can Update Credit Card Information for Subscription
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_20 Verify Customer Can Update Credit Card Information for Subscription
[Documentation]    Verify TC_20 Verify Customer Can Update Credit Card Information for Subscription using the following steps
Send Request To Create Customer    ${SUBSCRIPTION_MERCHANT}    ${nan}    ${nan}
Send Request To Create Subscription For Customer    ${account_number}    ${SUBSCRIPTION_MERCHANT}    ${nan}
Login To PayNow And Navigate To Subscription    ${account_number}    ${nan}    ${nan}
Update Credit Card Information    ${account_number}    ${NEW_CREDIT_CARD_DETAILS}    ${nan}
Validate Updated Credit Card Information    ${account_number}    ${NEW_CREDIT_CARD_DETAILS}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${SUBSCRIPTION_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${SUBSCRIPTION_MERCHANT}    ${nan}    ${nan}

Send Request To Create Subscription For Customer
[Arguments]    ${account_number}    ${SUBSCRIPTION_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${SUBSCRIPTION_MERCHANT}    ${nan}

Login To PayNow And Navigate To Subscription
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Update Credit Card Information
[Arguments]    ${account_number}    ${NEW_CREDIT_CARD_DETAILS}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${NEW_CREDIT_CARD_DETAILS}    ${nan}

Validate Updated Credit Card Information
[Arguments]    ${account_number}    ${NEW_CREDIT_CARD_DETAILS}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${NEW_CREDIT_CARD_DETAILS}    ${nan}

","The test case ""TC_20 Verify Customer Can Update Credit Card Information for Subscription"" is designed to ensure that customers have the ability to successfully update their credit card information for ongoing subscriptions through the application. This test case focuses on verifying that the system accurately captures and processes new credit card details, ensuring that subsequent subscription charges are made using the updated information. It involves steps like logging into the customer account, navigating to the subscription management section, updating the credit card details, and validating that these updates have been correctly reflected in the system. Successful completion of this test case confirms that the platform provides the necessary functionality for customers to manage their subscription payment methods effectively, ensuring a smooth and uninterrupted service experience."
Build data-driven clientcentral_testcases for transactions Testcases TC_15 Validate User Is Able To Download Transaction Report,data-driven,TC_15 Validate User Is Able To Download Transaction Report,"*** Settings ***
Documentation    Validate TC_15 Validate User Is Able To Download Transaction Report
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate User Is Able To Download Transaction Report
[Documentation]    Validate TC_15 Validate User Is Able To Download Transaction Report using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}
Generate Transactions For Customer    ${STERLING_COOPER}    ${account_number}    ${}
Navigate To Transactions Module    ${Transactions}    ${nan}    ${}
Apply Filters On Transactions    ${account_number}    ${date_range}    ${}
Select Transaction Report Option    ${Report_Download}    ${nan}    ${}
Validate Transaction Report Is Downloaded    ${download_path}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Generate Transactions For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
[Return]    ${list}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${}

Navigate To Transactions Module
[Arguments]    ${Transactions}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Transactions}    ${nan}    ${}

Apply Filters On Transactions
[Arguments]    ${account_number}    ${date_range}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${date_range}    ${}

Select Transaction Report Option
[Arguments]    ${Report_Download}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Report_Download}    ${nan}    ${}

Validate Transaction Report Is Downloaded
[Arguments]    ${download_path}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${download_path}    ${nan}    ${}

","**Test Case: TC_15 Validate User Is Able To Download Transaction Report**

**Purpose:**

The main goal of this test case is to validate that a user can successfully download a comprehensive transaction report from the clientcentral system. This feature is essential for users to have access to detailed transaction data for auditing, analysis, and record-keeping purposes. The test will ensure that when the user navigates to the transactions module, applies the necessary filters, and selects the report download option, the system generates and downloads the report at the specified path. This process aids in verifying the accuracy and reliability of the reporting functionality in the clientcentral application."
Create data-driven paynow test cases for SchedulePayment Testcases TC_04 Validate Customer Is Able To Reschedule Payment Before Due Date,data-driven,TC_04 Validate Customer Is Able To Reschedule Payment Before Due Date,"*** Settings ***
Documentation    Validate TC_04 Validate Customer Is Able To Reschedule Payment Before Due Date
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate Customer Is Able To Reschedule Payment Before Due Date
[Documentation]    Validate TC_04 Validate Customer Is Able To Reschedule Payment Before Due Date using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
Select Payment Method    ${Credit Card}    ${nan}    ${nan}
Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
Select Payment Date    ${today+5}    ${nan}    ${nan}
Create Schedule Payment    ${nan}    ${nan}    ${nan}
Reschedule Payment Date    ${today+10}    ${account_number}    ${invoice_number}
Send Event To Process Rescheduled Payment    ${account_number}    ${invoice_number}    ${nan}
Validate Rescheduled Payment Status    ${account_number}    ${invoice_number}    ${Rescheduled}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
[Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Select Payment Date
[Arguments]    ${today+5}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${today+5}    ${nan}    ${nan}

Create Schedule Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
",
Validate data-driven paynow test cases for integrated Testcases TC_12 Validate Integrated Customer Is Able To Generate Recurring Invoice Payments Using CreditCard,data-driven,TC_12 Validate Integrated Customer Is Able To Generate Recurring Invoice Payments Using CreditCard,"*** Settings ***
Documentation    Validate TC_12 Validate Integrated Customer Is Able To Generate Recurring Invoice Payments Using CreditCard
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Integrated Customer Is Able To Generate Recurring Invoice Payments Using CreditCard
[Documentation]    Validate TC_12 Validate Integrated Customer Is Able To Generate Recurring Invoice Payments Using CreditCard using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch Paynow Application    ${INTEGRATED_MERCHANT}    ${nan}    ${nan}
Enter Customer Details    ${customer_details}    ${INTEGRATED_MERCHANT}    ${nan}
Create Recurring Invoice    ${account_number}    ${invoice_number}    ${recurrence_details}
Select Payment Method    ${Credit Card}    ${nan}    ${nan}
Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
Validate Created Recurring Invoice    ${account_number}    ${invoice_number}    ${nan}
Process Recurring Payment    ${nan}    ${nan}    ${nan}
Validate Details In Generated Payment Receipt    ${Recurring Invoice}    ${52*****52}    ${Credit Card}

*** Keywords ***
Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch Paynow Application
[Arguments]    ${INTEGRATED_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${INTEGRATED_MERCHANT}    ${nan}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${INTEGRATED_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${INTEGRATED_MERCHANT}    ${nan}

Create Recurring Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${recurrence_details}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${recurrence_details}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
[Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Validate Created Recurring Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Process Recurring Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Details In Generated Payment Receipt
[Arguments]    ${Recurring Invoice}    ${52*****52}    ${Credit Card}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Recurring Invoice}    ${52*****52}    ${Credit Card}
","The test case ""TC_12 Validate Integrated Customer Is Able To Generate Recurring Invoice Payments Using CreditCard"" aims to verify that an integrated customer can successfully create and process recurring invoice payments using a credit card.

**Purpose**:"
Build data-driven clientcentral_testcases for customers Testcases TC_42 Validate Bulk Payment Processing By Merchant,data-driven,TC_42 Validate Bulk Payment Processing By Merchant,"*** Settings ***
Documentation    Validate TC_42 Validate Bulk Payment Processing By Merchant
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_42 Validate Bulk Payment Processing By Merchant
[Documentation]    Validate TC_42 Validate Bulk Payment Processing By Merchant using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Multiple Invoices    ${STERLING_COOPER}    ${account_number}    ${nan}
Login As Merchant User    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To Bulk Payment Page    ${nan}    ${nan}    ${nan}
Upload Invoice File    ${invoice_file_path}    ${nan}    ${nan}
Validate Uploaded Invoices Details    ${invoice_numbers}    ${nan}    ${nan}
Process Bulk Payment    ${nan}    ${nan}    ${nan}
Validate Bulk Payment Confirmation Page Is Displayed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Multiple Invoices
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Login As Merchant User
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Navigate To Bulk Payment Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Upload Invoice File
[Arguments]    ${invoice_file_path}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_file_path}    ${nan}    ${nan}

Validate Uploaded Invoices Details
[Arguments]    ${invoice_numbers}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_numbers}    ${nan}    ${nan}

Process Bulk Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Bulk Payment Confirmation Page Is Displayed
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_42 Validate Bulk Payment Processing By Merchant' aims to ensure that a merchant can successfully process multiple invoices in a bulk payment upload. The main goal is to confirm that the system supports bulk payment transactions efficiently and accurately. This involves verifying that the user can upload a file containing multiple invoice details, that the system correctly reads and processes this information, and that it completes the payment processing accurately. It also ensures that a confirmation page for the bulk payment is displayed, indicating the successful completion of the transaction. Successful execution of this test case would validate that the bulk payment processing functionality is robust, user-friendly, and capable of handling large payment volumes effectively for the merchant."
Generate data-driven clientcentral_testcases for customers Testcases TC_45 Validate Customer Profile Update Reflects Correctly In System,data-driven,TC_45 Validate Customer Profile Update Reflects Correctly In System,"*** Settings ***
Documentation    Validate TC_45 Validate Customer Profile Update Reflects Correctly In System
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Customer Profile Update Reflects Correctly In System
[Documentation]    Validate TC_45 Validate Customer Profile Update Reflects Correctly In System using the following steps
Send Request To Create Customer    ${NEW_CUSTOMER}    ${nan}    ${nan}
Send Request To Update Customer Profile    ${NEW_CUSTOMER}    ${updated_details}    ${nan}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Validate Customer Profile Is Updated    ${account_number}    ${updated_details}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${NEW_CUSTOMER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_CUSTOMER}    ${nan}    ${nan}

Send Request To Update Customer Profile
[Arguments]    ${NEW_CUSTOMER}    ${updated_details}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_CUSTOMER}    ${updated_details}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Validate Customer Profile Is Updated
[Arguments]    ${account_number}    ${updated_details}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${updated_details}    ${nan}
","The test case 'TC_45 Validate Customer Profile Update Reflects Correctly In System' aims to verify the functionality and reliability of customer profile updates within the system. The primary goal is to ensure that when a customer's profile information is updated, the changes are accurately reflected in the system as expected. This test is essential in confirming that all updates to customer data are properly captured and displayed, ensuring that the system remains consistent and reliable in terms of customer information management. This verification is crucial for maintaining data integrity and providing accurate information to users who rely on the system for customer-related operations."
Create a data-driven test case for login Testcases TC_05 Validate User Login With Invalid Credentials,data-driven,TC_05 Validate User Login With Invalid Credentials,"*** Settings ***
Documentation    Validate TC_05 Validate User Login With Invalid Credentials
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${INVALID_PASSWORD} invalidpwd

*** Test Cases ***
TC_05 Validate User Login With Invalid Credentials
[Documentation]    Validate TC_05 Validate User Login With Invalid Credentials using the following steps
Launch Application    ${VALID_USER}    ${INVALID_PASSWORD}    ${nan}
Enter Login Details    ${VALID_USER}    ${INVALID_PASSWORD}    ${nan}
Attempt Login    ${VALID_USER}    ${INVALID_PASSWORD}    ${nan}
Validate Error Message After Login Attempt    ${error_message}    ${nan}    ${nan}

*** Keywords ***
Launch Application
[Arguments]    ${VALID_USER}    ${INVALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${INVALID_PASSWORD}    ${nan}

Enter Login Details
[Arguments]    ${VALID_USER}    ${INVALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${INVALID_PASSWORD}    ${nan}

Attempt Login
[Arguments]    ${VALID_USER}    ${INVALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${INVALID_PASSWORD}    ${nan}

Validate Error Message After Login Attempt
[Arguments]    ${error_message}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${error_message}    ${nan}    ${nan}

","The test case 'TC_05 Validate User Login With Invalid Credentials' aims to ensure that the login functionality correctly identifies and handles attempts to log in with invalid credentials. The primary purpose is to verify that the system adheres to security best practices by rejecting unauthorized access attempts.

Primary objectives include:"
Generate data-driven testing scenarios for tokens Testcases TC_23 Validate Merchant Can Add New Product to Inventory,data-driven,TC_23 Validate Merchant Can Add New Product to Inventory,"*** Settings ***
Documentation    Validate TC_23 Validate Merchant Can Add New Product to Inventory
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_23 Validate Merchant Can Add New Product to Inventory
[Documentation]    Validate TC_23 Validate Merchant Can Add New Product to Inventory using the following steps
Login To Inventory Management System    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To Add Product Page    ${nan}    ${nan}    ${nan}
Enter Product Details    ${PRODUCT_NAME}    ${PRODUCT_CODE}    ${PRODUCT_PRICE}
Submit New Product Form    ${nan}    ${nan}    ${nan}
Validate New Product Is Added To Inventory    ${PRODUCT_NAME}    ${PRODUCT_CODE}    ${PRODUCT_PRICE}

*** Keywords ***
Login To Inventory Management System
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Navigate To Add Product Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Enter Product Details
[Arguments]    ${PRODUCT_NAME}    ${PRODUCT_CODE}    ${PRODUCT_PRICE}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${PRODUCT_NAME}    ${PRODUCT_CODE}    ${PRODUCT_PRICE}

Submit New Product Form
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate New Product Is Added To Inventory
[Arguments]    ${PRODUCT_NAME}    ${PRODUCT_CODE}    ${PRODUCT_PRICE}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${PRODUCT_NAME}    ${PRODUCT_CODE}    ${PRODUCT_PRICE}

","The test case ""TC_23 Validate Merchant Can Add New Product to Inventory"" aims to verify that a merchant can successfully add a new product to their inventory using the inventory management system. The purpose of this test case is to ensure that all functionalities, such as logging in, navigating to the add product page, entering product details, submitting the form, and verifying the addition of the new product, work seamlessly. This is crucial for maintaining accurate and up-to-date product records in the inventory system. Through this test, any discrepancies or failures in the process could be identified and addressed, ensuring smooth and efficient inventory management."
Generate data-driven clientcentral_testcases for refund processes Testcases TC_23 Validate Merchant Is Able To Issue Partial Refund On Credit Card,data-driven,TC_23 Validate Merchant Is Able To Issue Partial Refund On Credit Card,"*** Settings ***
Documentation    Validate TC_23 Validate Merchant Is Able To Issue Partial Refund On Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_23 Validate Merchant Is Able To Issue Partial Refund On Credit Card
[Documentation]    Validate TC_23 Validate Merchant Is Able To Issue Partial Refund On Credit Card using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Send Request To Issue Partial Refund    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    ${partial_refund_amount}
Validate Refund In Transaction Grid    ${account_number}    ${partial_refund_amount}    ${refund_status}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Send Request To Issue Partial Refund
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    ${partial_refund_amount}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    ${partial_refund_amount}

Validate Refund In Transaction Grid
[Arguments]    ${account_number}    ${partial_refund_amount}    ${refund_status}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${partial_refund_amount}    ${refund_status}
","The test case 'TC_23 Validate Merchant Is Able To Issue Partial Refund On Credit Card' is designed to verify the functionality that allows a merchant to issue a partial refund on a credit card payment. The primary objectives are to:

1. Ensure that the system allows the merchant to initiate a partial refund request.
2. Confirm that the partial refund amount is correctly processed and accurately reflected in the transaction records.
3. Verify that the partial refund status is updated correctly in the transaction grid.
4. Check that no errors occur during the partial refund process.

The overall purpose is to ensure a smooth, reliable, and user-friendly experience for merchants when handling partial refunds on credit card transactions, maintaining accurate transaction records and reflecting the correct status post-refund."
Build data-driven paynow test cases for Sterlingcooper Testcases TC_55 Validate Captured Payments Are Reflected In Customer Account History,data-driven,TC_55 Validate Captured Payments Are Reflected In Customer Account History,"*** Settings ***
Documentation    Validate TC_55 Validate Captured Payments Are Reflected In Customer Account History
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_55 Validate Captured Payments Are Reflected In Customer Account History
[Documentation]    Validate TC_55 Validate Captured Payments Are Reflected In Customer Account History using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${customer_data}    ${nan}
Create An Invoice For Customer    ${account_number}    ${amount}    ${nan}
Capture Payment    ${account_number}    ${amount}    ${payment_method}
Update Customer History    ${account_number}    ${payment_details}    ${nan}
Launch Customer Account History    ${VALID_USER}    ${VALID_PASSWORD}    ${account_number}
Validate Payment Is Reflected In History    ${account_number}    ${amount}    ${payment_date}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${customer_data}    ${nan}
[Return]    ${response}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${customer_data}    ${nan}

Create An Invoice For Customer
[Arguments]    ${account_number}    ${amount}    ${nan}
[Return]    ${invoice_id}
[Documentation]    Keyword description
Log    ${account_number}    ${amount}    ${nan}

Capture Payment
[Arguments]    ${account_number}    ${amount}    ${payment_method}
[Return]    ${payment_confirmation}
[Documentation]    Keyword description
Log    ${account_number}    ${amount}    ${payment_method}

Update Customer History
[Arguments]    ${account_number}    ${payment_details}    ${nan}
[Return]    ${response}
[Documentation]    Keyword description
Log    ${account_number}    ${payment_details}    ${nan}

Launch Customer Account History
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${account_number}
[Return]    ${history_page}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${account_number}

Validate Payment Is Reflected In History
[Arguments]    ${account_number}    ${amount}    ${payment_date}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${amount}    ${payment_date}
","The test case 'TC_55 Validate Captured Payments Are Reflected In Customer Account History' aims to ensure that payments captured via the PayNOW system are accurately recorded and displayed in the customer's account history.

**Purpose:**
1. **Verify Payment Capturing:** Ensure that the system can capture payments made by customers and record them against their accounts.
2. **Update History:** Validate that the customer's payment history is updated with the captured payment details.
3. **UI Verification:** Confirm that the payment is correctly displayed in the customer’s account history page.
4. **Accuracy:** Ensure that the correct payment amount and date are recorded, maintaining accurate customer account records.
5. **User Experience:** Guarantee that customers can easily see their recent transactions, providing transparency and trust in the billing system."
Validate data-driven clientcentral_testcases for refunds Testcases TC_21 Validate Refund Process For Completed Transaction,data-driven,TC_21 Validate Refund Process For Completed Transaction,"*** Settings ***
Documentation    Validate TC_21 Validate Refund Process For Completed Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_21 Validate Refund Process For Completed Transaction
[Documentation]    Validate TC_21 Validate Refund Process For Completed Transaction using the following steps
Send Request To Create Customer    ${RADIO_SHACK}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${RADIO_SHACK}    ${account_number}    ${nan}
Send Request To Process Payment Through Credit Card    ${RADIO_SHACK}    ${account_number}    ${invoice_number}
Get TransactionId    ${response}    ${nan}    ${nan}
Navigate To Transaction Details Page    ${transaction_id}    ${nan}    ${nan}
Initiate Refund Process    ${transaction_id}    ${nan}    ${amount}
Confirm Refund Completion    ${transaction_id}    ${amount}    ${nan}
Validate Refund Status In Transaction Summary    ${transaction_id}    ${Refunded}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${RADIO_SHACK}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${RADIO_SHACK}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${RADIO_SHACK}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${RADIO_SHACK}    ${account_number}    ${nan}

Send Request To Process Payment Through Credit Card
[Arguments]    ${RADIO_SHACK}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${RADIO_SHACK}    ${account_number}    ${invoice_number}

Get TransactionId
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Initiate Refund Process
[Arguments]    ${transaction_id}    ${nan}    ${amount}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${amount}

Confirm Refund Completion
[Arguments]    ${transaction_id}    ${amount}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${amount}    ${nan}

Validate Refund Status In Transaction Summary
[Arguments]    ${transaction_id}    ${Refunded}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${Refunded}    ${nan}

","**Test Case: TC_21 Validate Refund Process For Completed Transaction**

**Purpose:**
The purpose of this test case is to validate the refund process for a successfully completed transaction. The focus is to ensure that a merchant can properly initiate and complete a refund, and that the transaction record accurately reflects the change in status. This is crucial for maintaining accurate financial records and providing transparency to both the merchant and the customer.

**Key Points:**
1. **Transaction Completion Verification:** Ensure that the initial transaction is successfully completed before the refund process is initiated.
2. **Refund Process Execution:** Confirm that the refund can be correctly initiated and processed by capturing the transaction ID and specifying the amount to be refunded.
3. **Status Update:** Validate that the transaction status is updated to ""Refunded"" once the refund process is completed."
Generate data-driven paynow test cases for Autopay Testcases TC_11 Validate Customer Is Able To Update AutoPay Schedule,data-driven,TC_11 Validate Customer Is Able To Update AutoPay Schedule,"*** Settings ***
Documentation    Validate TC_11 Validate Customer Is Able To Update AutoPay Schedule
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_11 Validate Customer Is Able To Update AutoPay Schedule
[Documentation]    Validate TC_11 Validate Customer Is Able To Update AutoPay Schedule using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}
Login To PayNOW And Navigate To Autopay    ${account_number}    ${invoice_number}    ${nan}
Select Existing AutoPay Schedule    ${account_number}    ${nan}    ${nan}
Update Payment Details For AutoPay    ${4000000000000069}    ${new_payment_date}    ${nan}
Save Updated AutoPay Schedule    ${nan}    ${nan}    ${nan}
Validate AutoPay Schedule Is Updated    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}

Login To PayNOW And Navigate To Autopay
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Select Existing AutoPay Schedule
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Update Payment Details For AutoPay
[Arguments]    ${4000000000000069}    ${new_payment_date}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${4000000000000069}    ${new_payment_date}    ${nan}

Save Updated AutoPay Schedule
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate AutoPay Schedule Is Updated
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

","The test case ""TC_11 Validate Customer Is Able To Update AutoPay Schedule"" is designed to verify that a customer has the functionality to successfully update an existing AutoPay schedule through the application or platform. The purpose of this test is to ensure that users can manage their AutoPay settings as per their evolving financial needs and preferences, particularly the ability to modify payment amounts, dates, or funding sources. This validation confirms that the system correctly processes and updates the AutoPay schedule without errors, providing customers with the required flexibility and control over their automated payments. The successful update of an AutoPay schedule ensures that the changes are reflected immediately and accurately in the system, and the customer receives confirmation of the update."
Generate data-driven customercentral_testcases for Customers Testcases TC_59 Validate Customer Can Change Address Through Profile Page,data-driven,TC_59 Validate Customer Can Change Address Through Profile Page,"*** Settings ***
Documentation    Validate TC_59 Validate Customer Can Change Address Through Profile Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_59 Validate Customer Can Change Address Through Profile Page
[Documentation]    Validate TC_59 Validate Customer Can Change Address Through Profile Page using the following steps
Log In As Valid User    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Navigate To Profile Page    ${TEST_PROFILE_PAGE}    ${nan}    ${}
Click On Edit Address Button    ${nan}    ${nan}    ${}
Enter New Address Details    ${NEW_ADDRESS}    ${nan}    ${}
Save New Address    ${nan}    ${nan}    ${}
Validate Address Change Success Message    ${SUCCESS_MESSAGE}    ${nan}    ${}
Log Out    ${nan}    ${nan}    ${}

*** Keywords ***
Log In As Valid User
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Navigate To Profile Page
[Arguments]    ${TEST_PROFILE_PAGE}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${TEST_PROFILE_PAGE}    ${nan}    ${}

Click On Edit Address Button
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Enter New Address Details
[Arguments]    ${NEW_ADDRESS}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${NEW_ADDRESS}    ${nan}    ${}

Save New Address
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate Address Change Success Message
[Arguments]    ${SUCCESS_MESSAGE}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${SUCCESS_MESSAGE}    ${nan}    ${}

Log Out
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

","The purpose of the test case 'TC_59 Validate Customer Can Change Address Through Profile Page' is to validate that a customer can successfully update their address information using the profile page of the application.

Key objectives include:

1. Ensuring that the customer can log in with valid credentials.
2. Confirming that the customer can navigate to their profile page.
3. Verifying that the edit address functionality is accessible.
4. Checking that a new address can be entered and saved correctly.
5. Validating that a success message is displayed to confirm the address change.
6. Ensuring that the customer can log out after completing the address change.

By executing this test case, we aim to ensure the application's profile management feature is user-friendly, functional, and reliable."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_45 Validate Merchant Can Resend Invoice After Initial Failure,data-driven,TC_45 Validate Merchant Can Resend Invoice After Initial Failure,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Can Resend Invoice After Initial Failure
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Can Resend Invoice After Initial Failure
[Documentation]    Validate TC_45 Validate Merchant Can Resend Invoice After Initial Failure using the following steps
Send Request To Create Customer    ${COOKIE_DOUGH_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${COOKIE_DOUGH_MERCHANT}    ${account_number}    ${nan}
Send Request To Process Payment Through Credit Card    ${COOKIE_DOUGH_MERCHANT}    ${account_number}    ${invoice_number}
Get Gatewayid    ${response}    ${nan}    ${nan}
Simulate Payment Failure    ${gateway_id}    ${nan}    ${nan}
Resend Invoice    ${COOKIE_DOUGH_MERCHANT}    ${gateway_id}    ${invoice_number}
Validate Invoice Resend Success    ${gateway_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${COOKIE_DOUGH_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${COOKIE_DOUGH_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${COOKIE_DOUGH_MERCHANT}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${COOKIE_DOUGH_MERCHANT}    ${account_number}    ${nan}

Send Request To Process Payment Through Credit Card
[Arguments]    ${COOKIE_DOUGH_MERCHANT}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${COOKIE_DOUGH_MERCHANT}    ${account_number}    ${invoice_number}

Get Gatewayid
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Simulate Payment Failure
[Arguments]    ${gateway_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${gateway_id}    ${nan}    ${nan}

Resend Invoice
[Arguments]    ${COOKIE_DOUGH_MERCHANT}    ${gateway_id}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${COOKIE_DOUGH_MERCHANT}    ${gateway_id}    ${invoice_number}

Validate Invoice Resend Success
[Arguments]    ${gateway_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${gateway_id}    ${nan}    ${nan}

","The test case 'TC_45 Validate Merchant Can Resend Invoice After Initial Failure' is designed to ensure that merchants have the capability to resend invoices via the clientcentral platform after an initial payment failure. This functionality is crucial for maintaining customer satisfaction and ensuring that payment issues can be promptly resolved.

**Purpose:**

1. **Error Recovery:**
- To check that the system allows a merchant to resend an invoice following a failure in initial payment processing.

2. **System Resilience:**
- To ensure the system can handle, detect, and recover smoothly from errors that might occur during the payment process.

3. **Customer Service:**
- To guarantee that merchants can promptly address payment failures and successfully resend invoices for payment completion.

The key steps include generating a customer and invoice, processing a payment to simulate failure, and then attempting to resend the invoice and validate its success. This loop ensures transactional integrity and a positive merchant experience."
Create data-driven autonomouscar test cases for DriveWorld Testcases TC_14 Validate Car Is Able To Perform Emergency Braking,data-driven,TC_14 Validate Car Is Able To Perform Emergency Braking,"*** Settings ***
Documentation    Validate TC_14 Validate Car Is Able To Perform Emergency Braking
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testdriver
${VALID_PASSWORD}   drivepass

*** Test Cases ***
TC_14 Validate Car Is Able To Perform Emergency Braking
[Documentation]    Validate TC_14 Validate Car Is Able To Perform Emergency Braking using the following steps
Send Request To Initialize Car    ${DRIVEWORLD_CAR_MODEL}    ${engine_on}    ${nan}
Set Speed For Car    ${DRIVEWORLD_CAR_MODEL}    ${80}    ${nan}
Simulate Obstacle On Road    ${DRIVEWORLD_CAR_MODEL}    ${obstacle_distance}    ${50}
Apply Emergency Braking    ${DRIVEWORLD_CAR_MODEL}    ${nan}    ${nan}
Validate Car Stops Before Obstacle    ${DRIVEWORLD_CAR_MODEL}    ${nan}    ${nan}

*** Keywords ***
Send Request To Initialize Car
[Arguments]    ${DRIVEWORLD_CAR_MODEL}    ${engine_on}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DRIVEWORLD_CAR_MODEL}    ${engine_on}    ${nan}

Set Speed For Car
[Arguments]    ${DRIVEWORLD_CAR_MODEL}    ${80}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DRIVEWORLD_CAR_MODEL}    ${80}    ${nan}

Simulate Obstacle On Road
[Arguments]    ${DRIVEWORLD_CAR_MODEL}    ${obstacle_distance}    ${50}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DRIVEWORLD_CAR_MODEL}    ${obstacle_distance}    ${50}

Apply Emergency Braking
[Arguments]    ${DRIVEWORLD_CAR_MODEL}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DRIVEWORLD_CAR_MODEL}    ${nan}    ${nan}

Validate Car Stops Before Obstacle
[Arguments]    ${DRIVEWORLD_CAR_MODEL}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${DRIVEWORLD_CAR_MODEL}    ${nan}    ${nan}

","The purpose of the test case 'TC_14 Validate Car Is Able To Perform Emergency Braking' is to ensure that an autonomous vehicle is capable of detecting obstacles on the road and performing emergency braking to prevent collisions. This is crucial for the safety and reliability of autonomous driving systems.

Key actions of the test case include:"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_50 Validate Merchant Can Apply Discounts To Invoices,data-driven,TC_50 Validate Merchant Can Apply Discounts To Invoices,"*** Settings ***
Documentation    Validate TC_50 Validate Merchant Can Apply Discounts To Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_50 Validate Merchant Can Apply Discounts To Invoices
[Documentation]    Validate TC_50 Validate Merchant Can Apply Discounts To Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}
Create Invoice For Customer    ${account_number}    ${invoice_details}    ${}
Apply Discount To Invoice    ${invoice_number}    ${discount_details}    ${}
Validate Discount Is Applied    ${response}    ${invoice_number}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Create Invoice For Customer
[Arguments]    ${account_number}    ${invoice_details}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_details}    ${}

Apply Discount To Invoice
[Arguments]    ${invoice_number}    ${discount_details}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${discount_details}    ${}

Validate Discount Is Applied
[Arguments]    ${response}    ${invoice_number}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${response}    ${invoice_number}    ${}

","The test case titled 'TC_50 Validate Merchant Can Apply Discounts To Invoices' is designed to ensure that merchants can successfully apply discounts to invoices within the payment processing system.

**Purpose:**
1. To confirm that the discount application functionality is integrated correctly and works as expected.
2. To validate that the discount details are processed and reflected accurately on the invoice.
3. To ensure that the discount application does not introduce any errors or inconsistencies in the final invoice values.

**Steps typically involved:**
1. Log in to the merchant account on the platform.
2. Create a new customer record.
3. Generate an invoice for the created customer with specific details.
4. Apply a discount to the generated invoice.
5. Verify that the invoice shows the discount correctly and the final amount is adjusted.

This test verifies the feature's usability, helps improve the overall flexibility for merchants, and ensures that they can offer promotional discounts seamlessly to their customers."
Build data-driven clientcentral_testcases for user management Testcases TC_15 Validate Admin Can Update User Roles,data-driven,TC_15 Validate Admin Can Update User Roles,"*** Settings ***
Documentation    Validate TC_15 Validate Admin Can Update User Roles
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       adminuser
${VALID_PASSWORD}   adminsecret

*** Test Cases ***
TC_15 Validate Admin Can Update User Roles
[Documentation]    Validate TC_15 Validate Admin Can Update User Roles using the following steps
Send Request To Authenticate Admin    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Send Request To Fetch User Details    ${USER_ID}    ${nan}    ${nan}
Send Request To Update User Role    ${USER_ID}    ${NEW_ROLE}    ${nan}
Validate User Role Update Success    ${USER_ID}    ${NEW_ROLE}    ${nan}
Fetch And Validate Updated User Details    ${USER_ID}    ${nan}    ${nan}

*** Keywords ***
Send Request To Authenticate Admin
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Authenticate admin user and return a session token or equivalent.
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Send Request To Fetch User Details
[Arguments]    ${USER_ID}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Fetch details of the user by user ID.
Log    ${USER_ID}    ${nan}    ${nan}

Send Request To Update User Role
[Arguments]    ${USER_ID}    ${NEW_ROLE}    ${nan}
[Return]    ${string}
[Documentation]    Update the role of specified user ID to a new role.
Log    ${USER_ID}    ${NEW_ROLE}    ${nan}

Validate User Role Update Success
[Arguments]    ${USER_ID}    ${NEW_ROLE}    ${nan}
[Return]    ${boolean}
[Documentation]    Validate that the role update was successful.
Log    ${USER_ID}    ${NEW_ROLE}    ${nan}

Fetch And Validate Updated User Details
[Arguments]    ${USER_ID}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Fetch user details again to validate role update in the response.
Log    ${USER_ID}    ${nan}    ${nan}

","The test case 'TC_15 Validate Admin Can Update User Roles' ensures that an admin user can successfully change the roles of users within the system. This function is critical for managing access rights and permissions across different users. The test includes steps to authenticate as an admin, fetch current user details, update the user's role, and validate the update.

Key objectives:"
Generate data-driven clientcentral_testcases for all transactions Testcases TC_35 Validate User Can Search Transactions By Date Range,data-driven,TC_35 Validate User Can Search Transactions By Date Range,"*** Settings ***
Documentation    Validate TC_35 Validate User Can Search Transactions By Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret
${START_DATE}       2023-01-01
${END_DATE}         2023-01-31

*** Test Cases ***
TC_35 Validate User Can Search Transactions By Date Range
[Documentation]    Validate TC_35 Validate User Can Search Transactions By Date Range using the following steps
Login To ClientCentral    ${VALID_USER}    ${VALID_PASSWORD}
Navigate To Transactions Module    ${}    ${}    ${}
Enter Date Range In Search Filter    ${START_DATE}    ${END_DATE}    ${}
Execute Search    ${}    ${}    ${}
Validate Search Results Are Correct    ${START_DATE}    ${END_DATE}    ${}

*** Keywords ***
Login To ClientCentral
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}

Navigate To Transactions Module
[Arguments]    ${}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${}    ${}    ${}

Enter Date Range In Search Filter
[Arguments]    ${START_DATE}    ${END_DATE}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${START_DATE}    ${END_DATE}    ${}

Execute Search
[Arguments]    ${}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${}    ${}    ${}

Validate Search Results Are Correct
[Arguments]    ${START_DATE}    ${END_DATE}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${START_DATE}    ${END_DATE}    ${}
","The test case 'TC_35 Validate User Can Search Transactions By Date Range' is designed to verify the functionality of searching for transactions within a specified date range within a financial or billing application. This test ensures that users can accurately filter and retrieve transactions that occurred within the given start and end dates.

### Purpose:"
Create data-driven clientcentral_testcases for products Testcases TC_10 Validate Merchant Is Able To Add Product To Inventory,data-driven,TC_10 Validate Merchant Is Able To Add Product To Inventory,"*** Settings ***
Documentation    Validate TC_10 Validate Merchant Is Able To Add Product To Inventory
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Merchant Is Able To Add Product To Inventory
[Documentation]    Validate TC_10 Validate Merchant Is Able To Add Product To Inventory using the following steps
Send Request To Create Product    ${PRODUCT_NAME}    ${DESCRIPTION}    ${PRICE}
Send Request To Add Product To Inventory    ${PRODUCT_NAME}    ${SKU}    ${QUANTITY}
Get Inventory Item    ${response}    ${nan}    ${nan}
Validate Product In Inventory    ${PRODUCT_NAME}    ${SKU}    ${QUANTITY}

*** Keywords ***
Send Request To Create Product
[Arguments]    ${PRODUCT_NAME}    ${DESCRIPTION}    ${PRICE}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PRODUCT_NAME}    ${DESCRIPTION}    ${PRICE}

Send Request To Add Product To Inventory
[Arguments]    ${PRODUCT_NAME}    ${SKU}    ${QUANTITY}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PRODUCT_NAME}    ${SKU}    ${QUANTITY}

Get Inventory Item
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Validate Product In Inventory
[Arguments]    ${PRODUCT_NAME}    ${SKU}    ${QUANTITY}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${PRODUCT_NAME}    ${SKU}    ${QUANTITY}

","The test case 'TC_10 Validate Merchant Is Able To Add Product To Inventory' is designed to ensure that a merchant can successfully add a new product to their inventory. The objective of this test is to verify that the system allows merchants to create and manage their inventory effectively, ensuring that new products can be entered and tracked accurately in the system.

Key aspects include:
"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_92 Validate User Is Able To Update Contact Details Successfully,data-driven,TC_92 Validate User Is Able To Update Contact Details Successfully,"*** Settings ***
Documentation    Validate TC_92 Validate User Is Able To Update Contact Details Successfully
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_92 Validate User Is Able To Update Contact Details Successfully
[Documentation]    Validate TC_92 Validate User Is Able To Update Contact Details Successfully using the following steps
Send Request To Create Customer    ${STERLING_COOPER_USER}    ${nan}    ${}
Send Request To Retrieve Customer Details    ${account_number}    ${nan}    ${}
Navigate To Settings Page    ${nan}    ${nan}    ${}
Update Customer Contact Details    ${account_number}    ${new_email}    ${new_phone}
Validate Contact Details Updated    ${account_number}    ${new_email}    ${new_phone}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_USER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_USER}    ${nan}    ${}

Send Request To Retrieve Customer Details
[Arguments]    ${account_number}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${}

Navigate To Settings Page
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Update Customer Contact Details
[Arguments]    ${account_number}    ${new_email}    ${new_phone}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${new_email}    ${new_phone}

Validate Contact Details Updated
[Arguments]    ${account_number}    ${new_email}    ${new_phone}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${new_email}    ${new_phone}

","The test case 'TC_92 Validate User Is Able To Update Contact Details Successfully' aims to verify the functionality of updating a user's contact details in the PayNow system.

### Purpose:"
Generate data-driven clientcentral_testcases for notifications Testcases TC_15 Validate Merchant Receives Notification For Successful Payment,data-driven,TC_15 Validate Merchant Receives Notification For Successful Payment,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Receives Notification For Successful Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Receives Notification For Successful Payment
[Documentation]    Validate TC_15 Validate Merchant Receives Notification For Successful Payment using the following steps
Send Request To Create Customer    ${ACME_CORP}    ${nan}    ${}
Send Request To Create Invoice    ${ACME_CORP}    ${account_number}    ${}
Process Payment    ${ACME_CORP}    ${account_number}    ${invoice_number}
Validate Payment Notification Is Sent    ${ACME_CORP}    ${account_number}    ${invoice_number}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${ACME_CORP}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${nan}    ${}

Send Request To Create Invoice
[Arguments]    ${ACME_CORP}    ${account_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${account_number}    ${}

Process Payment
[Arguments]    ${ACME_CORP}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${account_number}    ${invoice_number}

Validate Payment Notification Is Sent
[Arguments]    ${ACME_CORP}    ${account_number}    ${invoice_number}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${account_number}    ${invoice_number}

","**Test Case Summary: TC_15 Validate Merchant Receives Notification For Successful Payment**

**Purpose:**

The primary purpose of this test case is to ensure that merchants receive notifications upon successful payment processing. Notifications play a critical role in keeping merchants informed about the status of transactions, thereby enhancing transparency and operational efficiency. This test case focuses on validating the following aspects:

1. **Notification Delivery:** Ensures that a notification is sent to the merchant after a payment is successfully processed.
2. **Content Accuracy:** Verifies that the notification contains the correct details relating to the transaction, including customer information and invoice details.
3. **Timeliness:** Confirms that the notification is sent promptly after the payment has been processed, contributing to real-time transaction tracking for the merchant."
Create data-driven testing for e-commerce platform Testcases TC_08 Validate User Able To Add Items To Cart And Proceed To Checkout,data-driven,TC_08 Validate User Able To Add Items To Cart And Proceed To Checkout,"*** Settings ***
Documentation    Validate TC_08 Validate User Able To Add Items To Cart And Proceed To Checkout
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_08 Validate User Able To Add Items To Cart And Proceed To Checkout
[Documentation]    Validate TC_08 Validate User Able To Add Items To Cart And Proceed To Checkout using the following steps
Generate Random Item Details    ${ITEM_DETAILS}    ${nan}    ${nan}
Launch E-Commerce Application    ${E_COMMERCE_PLATFORM}    ${nan}    ${nan}
Login As Valid User    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Add Item To Cart    ${ITEM_DETAILS}    ${nan}    ${nan}
Navigate To Cart    ${nan}    ${nan}    ${nan}
Validate Item In Cart    ${ITEM_DETAILS}    ${nan}    ${nan}
Proceed To Checkout    ${nan}    ${nan}    ${nan}
Validate Checkout Page    ${nan}    ${nan}    ${nan}

*** Keywords ***
Generate Random Item Details
[Arguments]    ${ITEM_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ITEM_DETAILS}    ${nan}    ${nan}

Launch E-Commerce Application
[Arguments]    ${E_COMMERCE_PLATFORM}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${E_COMMERCE_PLATFORM}    ${nan}    ${nan}

Login As Valid User
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Add Item To Cart
[Arguments]    ${ITEM_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ITEM_DETAILS}    ${nan}    ${nan}

Navigate To Cart
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Item In Cart
[Arguments]    ${ITEM_DETAILS}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${ITEM_DETAILS}    ${nan}    ${nan}

Proceed To Checkout
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Checkout Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

","**Test Case Summary: TC_08 Validate User Able To Add Items To Cart And Proceed To Checkout**

**Purpose**:
The purpose of this test case, TC_08, is to validate that a user can successfully add items to their shopping cart and proceed to the checkout process on an e-commerce platform. This test ensures the seamless operation of crucial functionalities within the shopping experience that contribute to the overall user satisfaction and operational efficiency of the platform.

By executing this test, the aim is to confirm that users can:
1. **Add Items to the Cart:** Ensure that selected items can be added to the shopping cart.
2. **View Items in the Cart:** Validate that the cart accurately reflects the chosen items.
3. **Proceed to Checkout:** Confirm that the user can navigate to the checkout page, which should correctly display the items and related payment options.

Successful validation of this test case guarantees that the core shopping functionalities are performing as expected, enabling users to complete their purchase journey without any technical hindrances."
Create data-driven clientcentral_testcases for customers Testcases TC_42 Validate Merchant Can Update Customer Contact Information,data-driven,TC_42 Validate Merchant Can Update Customer Contact Information,"*** Settings ***
Documentation    Validate TC_42 Validate Merchant Can Update Customer Contact Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_42 Validate Merchant Can Update Customer Contact Information
[Documentation]    Validate TC_42 Validate Merchant Can Update Customer Contact Information using the following steps
Send Request To Create Customer    ${Test_Customers}    ${nan}    ${nan}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Update Customer Contact Information    ${account_number}    ${new_contact_info}    ${nan}
Validate Updated Contact Information    ${account_number}    ${new_contact_info}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${Test_Customers}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Test_Customers}    ${nan}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Update Customer Contact Information
[Arguments]    ${account_number}    ${new_contact_info}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${new_contact_info}    ${nan}

Validate Updated Contact Information
[Arguments]    ${account_number}    ${new_contact_info}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${new_contact_info}    ${nan}

","The test case 'TC_42 Validate Merchant Can Update Customer Contact Information' aims to verify that a merchant can successfully update the contact information of a customer within their system. The primary objectives of this test case include:

1. **Customer Creation:** Ensuring that the functionality for customer creation works as expected.
2. **Navigation to Customer Details:** Confirming that the merchant can navigate to the specific customer's detail page.
3. **Update Contact Information:** Verifying that the merchant can input and save new contact information for the customer.
4. **Validation:** Checking that the updated contact information is correctly reflected in the system.

**Purpose:**

1. To ensure that merchants can maintain up-to-date contact information for their customers, which is crucial for effective communication and customer relationship management.
2. To verify that the system handles contact information updates accurately without data integrity issues."
Build data-driven clientcentral_testcases for users Testcases TC_51 Validate Admin Is Able To Create A New User Account,data-driven,TC_51 Validate Admin Is Able To Create A New User Account,"*** Settings ***
Documentation    Validate TC_51 Validate Admin Is Able To Create A New User Account
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_ADMIN}      adminuser
${VALID_PASSWORD}   adminsecret

*** Test Cases ***
TC_51 Validate Admin Is Able To Create A New User Account
[Documentation]    Validate TC_51 Validate Admin Is Able To Create A New User Account using the following steps
Navigate To Admin Panel    ${VALID_ADMIN}    ${VALID_PASSWORD}    ${nan}
Access User Management Section    ${nan}    ${nan}    ${}
Fill In New User Details    ${new_username}    ${new_user_email}    ${new_user_password}
Submit Creation Form    ${nan}    ${nan}    ${nan}
Validate User Creation    ${new_username}    ${new_user_email}    ${nan}

*** Keywords ***
Navigate To Admin Panel
[Arguments]    ${VALID_ADMIN}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_ADMIN}    ${VALID_PASSWORD}    ${nan}

Access User Management Section
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Fill In New User Details
[Arguments]    ${new_username}    ${new_user_email}    ${new_user_password}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_username}    ${new_user_email}    ${new_user_password}

Submit Creation Form
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate User Creation
[Arguments]    ${new_username}    ${new_user_email}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_username}    ${new_user_email}    ${nan}

","The test case **'TC_51 Validate Admin Is Able To Create A New User Account'** aims to ensure that administrators using the system can successfully create new user accounts. This involves navigating to the admin panel, accessing the user management section, filling in the required user details, submitting the new user creation form, and verifying that the user account has been created correctly.

**Key Points of the Test Case:**
1. **Initial State:** The admin is logged into the system and has access to the admin panel.
2. **Action:** The admin navigates to the user management section and enters details for the new user.
3. **Expected Outcome:** The system processes the information and creates a new user account, with the details appropriately stored and accessible by the admin."
Generate data-driven clientcentral_testcases for product management Testcases TC_15 Validate Merchant Can Add and Remove Products from Inventory,data-driven,TC_15 Validate Merchant Can Add and Remove Products from Inventory,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Can Add and Remove Products from Inventory
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Can Add and Remove Products from Inventory
[Documentation]    Validate TC_15 Validate Merchant Can Add and Remove Products from Inventory using the following steps
Send Request To Create Product     ${PRODUCT_NAME_STATIC}    ${PRODUCT_PRICE_STATIC}    ${nan}
Validate Product Is Added      ${PRODUCT_NAME_STATIC}    ${PRODUCT_PRICE_STATIC}    ${PRODUCT_ID_STATIC}
Send Request To Remove Product ${PRODUCT_ID_STATIC}    ${nan}    ${nan}
Validate Product Is Removed    ${PRODUCT_ID_STATIC}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Product
[Arguments]    ${PRODUCT_NAME_STATIC}    ${PRODUCT_PRICE_STATIC}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PRODUCT_NAME_STATIC}    ${PRODUCT_PRICE_STATIC}    ${nan}

Validate Product Is Added
[Arguments]     ${PRODUCT_NAME_STATIC}    ${PRODUCT_PRICE_STATIC}    ${PRODUCT_ID_STATIC}
[Return]        ${boolean}
[Documentation] Keyword description
Log             ${PRODUCT_NAME_STATIC}    ${PRODUCT_PRICE_STATIC}    ${PRODUCT_ID_STATIC}

Send Request To Remove Product
[Arguments]   ${PRODUCT_ID_STATIC}    ${nan}    ${nan}
[Return]      ${string}
[Documentation] Keyword description
Log             ${PRODUCT_ID_STATIC}    ${nan}    ${nan}

Validate Product Is Removed
[Arguments]   ${PRODUCT_ID_STATIC}    ${nan}    ${nan}
[Return]      ${boolean}
[Documentation] Keyword description
Log               ${PRODUCT_ID_STATIC}    ${nan}    ${nan}
","The purpose of the test case 'TC_15 Validate Merchant Can Add and Remove Products from Inventory' is to ensure the merchant has the capability to manage their product inventory effectively. This includes adding new products to the inventory and subsequently removing them when necessary. The test verifies that a product can be successfully created with a specific name and price, confirming it appears in the inventory. It also checks that the same product can be removed, ensuring that it no longer appears in the inventory list. Verifying this functionality is crucial for the maintenance of accurate and up-to-date product inventories, reflecting manageable stock levels and available products for sale. The intent is to ensure a seamless and error-free user experience during the management of products within the inventory system."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_15 Validate Merchant Can Export Transaction Data In CSV Format,data-driven,TC_15 Validate Merchant Can Export Transaction Data In CSV Format,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Can Export Transaction Data In CSV Format
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Can Export Transaction Data In CSV Format
[Documentation]    Validate TC_15 Validate Merchant Can Export Transaction Data In CSV Format using the following steps
Select Module    ${All Transactions}    ${nan}    ${}
Export Transaction Data As CSV    ${file_location}    ${nan}    ${}
Validate CSV File Is Downloaded    ${file_location}    ${nan}    ${}
Validate CSV File Content    ${file_location}    ${expected_content}    ${}

*** Keywords ***
Select Module
[Arguments]    ${All Transactions}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${All Transactions}    ${nan}    ${}

Export Transaction Data As CSV
[Arguments]    ${file_location}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${file_location}    ${nan}    ${}

Validate CSV File Is Downloaded
[Arguments]    ${file_location}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${file_location}    ${nan}    ${}

Validate CSV File Content
[Arguments]    ${file_location}    ${expected_content}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${file_location}    ${expected_content}    ${}
","The test case 'TC_15 Validate Merchant Can Export Transaction Data In CSV Format' verifies the ability of merchants to export their transaction data into a CSV file format from the application's user interface. This test ensures the application is capable of accurately generating and providing a downloadable CSV file containing transactional information. Key aspects validated in this test include:

1. **Navigation to Export Option:** Ensuring the merchant can access the export feature within the transaction module.
2. **File Generation:** Verifying that the CSV file is correctly generated and saved to the specified location.
3. **File Download:** Confirming that the file download process completes successfully without errors.
4. **Content Accuracy:** Checking that the exported CSV file contains the correct transaction data, matching expected results.

This test ensures that the export functionality works as intended, allowing merchants to easily obtain and utilize transaction data in a CSV format for their records and further analysis."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_45 Validate Merchant Is Able To Refund A Transaction,data-driven,TC_45 Validate Merchant Is Able To Refund A Transaction,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To Refund A Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To Refund A Transaction
[Documentation]    Validate TC_45 Validate Merchant Is Able To Refund A Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Send Request To Refund Processed Payment    ${account_number}    ${transaction_id}    ${refund_amount}
Select Module    ${All Transactions}    ${nan}    ${nan}
Validate Refund Status    ${account_number}    ${transaction_id}    ${Refunded}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Send Request To Refund Processed Payment
[Arguments]    ${account_number}    ${transaction_id}    ${refund_amount}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${transaction_id}    ${refund_amount}

Select Module
[Arguments]    ${All Transactions}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${All Transactions}    ${nan}    ${nan}

Validate Refund Status
[Arguments]    ${account_number}    ${transaction_id}    ${Refunded}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${transaction_id}    ${Refunded}
","**Test Case TC_45: Validate Merchant Is Able To Refund A Transaction**

**Purpose:**
The purpose of this test case is to ensure that the merchant can successfully perform a refund for a previously processed transaction. This involves verifying that the system correctly handles the refund request, updates transaction records, and reflects the refunded status appropriately. By validating this functionality, we ensure the merchant's ability to manage refunds efficiently and accurately, which is essential for maintaining customer satisfaction and compliance with transaction processing norms.

**Key Objectives:**
1. Confirm that the refund process is correctly initiated based on the provided transaction details and refund amount.
2. Ensure that the system updates the transaction status to 'Refunded' post successful refund processing.
3. Verify that transaction records include accurate details of the refunded transaction for audit and customer support purposes."
Generate data-driven paynow test cases for integrated Testcases TC_22 Validate Integrated Customer Is Able To Save Payment Method,data-driven,TC_22 Validate Integrated Customer Is Able To Save Payment Method,"*** Settings ***
Documentation    Validate TC_22 Validate Integrated Customer Is Able To Save Payment Method
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Integrated Customer Is Able To Save Payment Method
[Documentation]    Validate TC_22 Validate Integrated Customer Is Able To Save Payment Method using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}
Click On Add Invoice    ${nan}    ${nan}    ${nan}
Add Invoice Details    ${12345}    ${200}    ${1}
Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}
Enter ACH/ECheck Details    ${ACH_ECHECK_DETAILS}    ${nan}    ${nan}
Save Payment Method    ${nan}    ${nan}    ${nan}
Validate Payment Method Saved    ${customer_details}    ${ACH}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}

Select Payment Type
[Arguments]    ${Specific Invoice}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Specific Invoice}    ${nan}    ${nan}

Click On Add Invoice
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Add Invoice Details
[Arguments]    ${12345}    ${200}    ${1}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${12345}    ${200}    ${1}

Select Payment Method
[Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter ACH/ECheck Details
[Arguments]    ${ACH_ECHECK_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACH_ECHECK_DETAILS}    ${nan}    ${nan}

Save Payment Method
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Payment Method Saved
[Arguments]    ${customer_details}    ${ACH}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_details}    ${ACH}    ${nan}

","The test case ""TC_22 Validate Integrated Customer Is Able To Save Payment Method"" ensures that"
Create data-driven order_manager test cases for confirming customer order status Testcases TC_11 Validate That Customer Is Able To View And Confirm Order Status,data-driven,TC_11 Validate That Customer Is Able To View And Confirm Order Status,"*** Settings ***
Documentation    Validate TC_11 Validate That Customer Is Able To View And Confirm Order Status
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_11 Validate That Customer Is Able To View And Confirm Order Status
[Documentation]    Validate TC_11 Validate That Customer Is Able To View And Confirm Order Status using the following steps
Launch Order Manager Application    ${NON_INTEGRATED_MERCHANT}    ${}    ${}
Enter Order ID    ${order_id}    ${}    ${}
Fetch Order Details    ${order_id}    ${}    ${}
Validate Order Status    ${expected_status}    ${}    ${}
Confirm Order    ${order_id}    ${}    ${}
Validate Confirmation Message    ${message}    ${}    ${}

*** Keywords ***
Launch Order Manager Application
[Arguments]    ${NON_INTEGRATED_MERCHANT}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NON_INTEGRATED_MERCHANT}    ${}    ${}

Enter Order ID
[Arguments]    ${order_id}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_id}    ${}    ${}

Fetch Order Details
[Arguments]    ${order_id}    ${}    ${}
[Return]    ${dict}
[Documentation]    Keyword description
Log    ${order_id}    ${}    ${}

Validate Order Status
[Arguments]    ${expected_status}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${expected_status}    ${}    ${}

Confirm Order
[Arguments]    ${order_id}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_id}    ${}    ${}

Validate Confirmation Message
[Arguments]    ${message}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${message}    ${}    ${}

","**Test Case: TC_11 Validate That Customer Is Able To View And Confirm Order Status**

**Purpose:**
The purpose of this test case is to ensure that customers are able to successfully view and confirm the status of their orders using the Order Manager application. This functionality is critical for maintaining transparency and ensuring customer satisfaction by keeping them informed about the status of their orders.

**Key Points:**
1. **Order ID Entry:** The customer needs to enter a valid order ID to fetch and view the order details.
2. **Status Validation:** The system must display the correct order status as expected.
3. **Order Confirmation:** The customer should be able to confirm the order status, and a confirmation message should be displayed to acknowledge the action."
Create data-driven clientcentral_testcases for all transactions Testcases TC_75 Validate Merchant Is Able To Generate A Refund For A Processed Transaction,data-driven,TC_75 Validate Merchant Is Able To Generate A Refund For A Processed Transaction,"*** Settings ***
Documentation    Validate TC_75 Validate Merchant Is Able To Generate A Refund For A Processed Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_75 Validate Merchant Is Able To Generate A Refund For A Processed Transaction
[Documentation]    Validate TC_75 Validate Merchant Is Able To Generate A Refund For A Processed Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment Through Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Get TransactionId    ${response}    ${nan}    ${nan}
Navigate To Transaction Details Page    ${transaction_id}    ${nan}    ${nan}
Initiate Refund Process    ${transaction_id}    ${refund_amount}    ${nan}
Validate Refund Is Successfully Processed    ${transaction_id}    ${refund_amount}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get TransactionId
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Initiate Refund Process
[Arguments]    ${transaction_id}    ${refund_amount}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${refund_amount}    ${nan}

Validate Refund Is Successfully Processed
[Arguments]    ${transaction_id}    ${refund_amount}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${refund_amount}    ${nan}

","The test case 'TC_75 Validate Merchant Is Able To Generate A Refund For A Processed Transaction' ensures that merchants are able to process refunds for transactions that have been previously completed. This functionality is vital for maintaining customer satisfaction and addressing any potential issues that may arise post-transaction.

### Purpose:"
Generate data-driven clientcentral_testcases for managing customer profiles Testcases TC_18 Validate Merchant Can Update Customer Email Address,data-driven,TC_18 Validate Merchant Can Update Customer Email Address,"*** Settings ***
Documentation    Validate TC_18 Validate Merchant Can Update Customer Email Address
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_18 Validate Merchant Can Update Customer Email Address
[Documentation]    Validate TC_18 Validate Merchant Can Update Customer Email Address using the following steps
Send Request To Create Customer    ${DON_DRAPER}    ${nan}    ${nan}
Send Request To Update Customer Email Address    ${DON_DRAPER}    ${new_email}    ${nan}
Select Module    ${Customer Profiles}    ${nan}    ${nan}
Validate Customer Email Address Is Updated    ${new_email}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DON_DRAPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DON_DRAPER}    ${nan}    ${nan}

Send Request To Update Customer Email Address
[Arguments]    ${DON_DRAPER}    ${new_email}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DON_DRAPER}    ${new_email}    ${nan}

Select Module
[Arguments]    ${Customer Profiles}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Customer Profiles}    ${nan}    ${nan}

Validate Customer Email Address Is Updated
[Arguments]    ${new_email}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_email}    ${nan}    ${nan}

","**Test Case: TC_18 Validate Merchant Can Update Customer Email Address**

**Purpose:**
The purpose of this test case is to verify the functionality that allows merchants to update a customer's email address in their profile. This is a critical feature for maintaining accurate and up-to-date customer contact information, which is essential for effective communication and successful transactions.

**Description:**
1. **Setup and Initial State:**
- A Customer profile is created in the system using initial dummy data.

2. **Action:**
- The merchant updates the email address of the customer.

3. **Validation:**
- The system should reflect the updated email address in the customer profile section, confirming that the change was successful.

**Key Steps:**
1. **Send Request To Create Customer:** Create a new customer profile.
2. **Send Request To Update Customer Email Address:** Update the email address in the customer profile.
3. **Select Module:** Navigate to the Customer Profiles module.
4. **Validate Customer Email Address Is Updated:** Check that the new email address is correctly displayed in the customer profile page."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_75 Validate Customer Can Successfully Add Multiple Credit Cards,data-driven,TC_75 Validate Customer Can Successfully Add Multiple Credit Cards,"*** Settings ***
Documentation    Validate TC_75 Validate Customer Can Successfully Add Multiple Credit Cards
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_75 Validate Customer Can Successfully Add Multiple Credit Cards
[Documentation]    Validate TC_75 Validate Customer Can Successfully Add Multiple Credit Cards using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Send Request To Add Credit Card For Customer    ${account_number}    ${credit_card_1}    ${expiration_date_1}    ${CVV_1}    ${}
Send Request To Add Credit Card For Customer    ${account_number}    ${credit_card_2}    ${expiration_date_2}    ${CVV_2}    ${}
Send Request To Add Credit Card For Customer    ${account_number}    ${credit_card_3}    ${expiration_date_3}    ${CVV_3}    ${}
Validate Multiple Credit Cards Added Successfully    ${account_number}    ${3}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Add Credit Card For Customer
[Arguments]    ${account_number}    ${credit_card}    ${expiration_date}    ${CVV}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${credit_card}    ${expiration_date}    ${CVV}

Validate Multiple Credit Cards Added Successfully
[Arguments]    ${account_number}    ${expected_card_count}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${expected_card_count}    ${}

","The test case ""TC_75 Validate Customer Can Successfully Add Multiple Credit Cards"" aims to verify that a customer can add multiple credit cards to their account using the PayNow application. The purpose of this test case is to ensure that the system correctly handles the input and storage of multiple credit cards, maintaining the integrity of customer data and offering flexibility in payment options. This test includes sending requests to create a customer and then adding multiple credit cards to their account. Finally, it validates that the correct number of credit cards have been added successfully. This ensures the application provides the expected user experience and functionality when managing multiple payment methods."
Create data-driven clientcentral_testcases for customers Testcases TC_45 Validate Merchant Is Able To Create And View Customer Profile,data-driven,TC_45 Validate Merchant Is Able To Create And View Customer Profile,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To Create And View Customer Profile
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To Create And View Customer Profile
[Documentation]    Validate TC_45 Validate Merchant Is Able To Create And View Customer Profile using the following steps
Send Request To Create Customer    ${JOHN_DOE}    ${nan}    ${nan}
Validate Customer Profile Creation    ${customer_id}    ${nan}    ${nan}
Navigate To Customer Details Page    ${customer_id}    ${nan}    ${nan}
Validate Customer Information Is Correct    ${JOHN_DOE}    ${customer_email}    ${customer_phone}
Edit Customer Information    ${customer_id}    ${new_customer_email}    ${new_customer_phone}
Validate Updated Customer Information    ${customer_id}    ${new_customer_email}    ${new_customer_phone}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${JOHN_DOE}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${JOHN_DOE}    ${nan}    ${nan}

Validate Customer Profile Creation
[Arguments]    ${customer_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_id}    ${nan}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${customer_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${nan}    ${nan}

Validate Customer Information Is Correct
[Arguments]    ${JOHN_DOE}    ${customer_email}    ${customer_phone}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${JOHN_DOE}    ${customer_email}    ${customer_phone}

Edit Customer Information
[Arguments]    ${customer_id}    ${new_customer_email}    ${new_customer_phone}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${new_customer_email}    ${new_customer_phone}

Validate Updated Customer Information
[Arguments]    ${customer_id}    ${new_customer_email}    ${new_customer_phone}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_id}    ${new_customer_email}    ${new_customer_phone}

","The test case ""TC_45 Validate Merchant Is Able To Create And View Customer Profile"" aims to verify that a merchant can effectively create a customer profile and then view and update the profile's details. The primary goal of this test case is to ensure that all procedures involved in adding a new customer, validating their data, navigating to their profile page, editing their information, and confirming the updated information are successfully executed without any errors. This functionality is crucial for maintaining accurate and up-to-date customer records in the system. The outcome of the test should confirm that the customer's profile can be created, viewed, and updated correctly, thereby ensuring data integrity and operational efficiency."
Build data-driven clientcentral_testcases for tokens Testcases TC_05 Validate User Can Reset Password Through Email,data-driven,TC_05 Validate User Can Reset Password Through Email,"*** Settings ***
Documentation    Validate TC_05 Validate User Can Reset Password Through Email
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate User Can Reset Password Through Email
[Documentation]    Validate TC_05 Validate User Can Reset Password Through Email using the following steps
Send Password Reset Request    ${VALID_EMAIL}    ${nan}    ${nan}
Receive Password Reset Link    ${VALID_EMAIL}    ${EMAIL_PASSWORD}    ${nan}
Extract Reset Link From Email    ${EMAIL_CONTENT}    ${RESET_LINK}    ${nan}
Navigate To Password Reset Page    ${RESET_LINK}    ${nan}    ${nan}
Enter New Password    ${NEW_PASSWORD}    ${nan}    ${nan}
Confirm New Password    ${NEW_PASSWORD_CONFIRM}    ${nan}    ${nan}
Submit Password Reset Form    ${nan}    ${nan}    ${nan}
Validate Password Reset Successful    ${SUCCESS_MESSAGE}    ${nan}    ${nan}

*** Keywords ***
Send Password Reset Request
[Arguments]    ${VALID_EMAIL}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_EMAIL}    ${nan}    ${nan}

Receive Password Reset Link
[Arguments]    ${VALID_EMAIL}    ${EMAIL_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_EMAIL}    ${EMAIL_PASSWORD}    ${nan}

Extract Reset Link From Email
[Arguments]    ${EMAIL_CONTENT}    ${RESET_LINK}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${EMAIL_CONTENT}    ${RESET_LINK}    ${nan}

Navigate To Password Reset Page
[Arguments]    ${RESET_LINK}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${RESET_LINK}    ${nan}    ${nan}

Enter New Password
[Arguments]    ${NEW_PASSWORD}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_PASSWORD}    ${nan}    ${nan}

Confirm New Password
[Arguments]    ${NEW_PASSWORD_CONFIRM}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_PASSWORD_CONFIRM}    ${nan}    ${nan}

Submit Password Reset Form
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Password Reset Successful
[Arguments]    ${SUCCESS_MESSAGE}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${SUCCESS_MESSAGE}    ${nan}    ${nan}

","The test case ""TC_05 Validate User Can Reset Password Through Email"" focuses on verifying that a user can successfully initiate a password reset request and complete the password reset process via an email link. This involves several critical steps: sending the password reset request, receiving the reset link email, extracting the reset link from the email content, navigating to the password reset page, entering and confirming a new password, submitting the reset form, and finally validating that the password has been successfully reset. This test case ensures that the entire password reset workflow is functioning correctly, providing a seamless experience for users needing to reset their passwords."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_22 Validate Customer Can Apply Available Discounts Before Processing Payment,data-driven,TC_22 Validate Customer Can Apply Available Discounts Before Processing Payment,"*** Settings ***
Documentation    Validate TC_22 Validate Customer Can Apply Available Discounts Before Processing Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Customer Can Apply Available Discounts Before Processing Payment
[Documentation]    Validate TC_22 Validate Customer Can Apply Available Discounts Before Processing Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER}    ${}
Generate Random Customer Details    ${nan}    ${nan}    ${}
Launch PayNow Application    ${STERLING_COOPER}    ${nan}    ${}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}
Enter Customer Details    ${customer_details}    ${STERLING_COOPER}    ${}
Select Available Discounts    ${DISCOUNT_CODE}    ${nan}    ${}
Validate Discount Applied    ${DISCOUNT_AMOUNT}    ${nan}    ${}
Select Payment Type    ${Lump Sum}    ${nan}    ${}
Enter Lumpsum Amount    ${amount_after_discount}    ${nan}    ${}
Select Payment Method    ${Credit Card}    ${nan}    ${}
Enter Credit Card Details    ${card_number}    ${expiry_date}    ${}
Process Invoice Payment    ${nan}    ${nan}    ${}
Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER}    ${}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Enter Customer Details
[Arguments]    ${customer_details}    ${STERLING_COOPER}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${STERLING_COOPER}    ${}

Select Available Discounts
[Arguments]    ${DISCOUNT_CODE}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DISCOUNT_CODE}    ${nan}    ${}

Validate Discount Applied
[Arguments]    ${DISCOUNT_AMOUNT}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${DISCOUNT_AMOUNT}    ${nan}    ${}

Select Payment Type
[Arguments]    ${Lump Sum}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
[Arguments]    ${amount_after_discount}    ${nan}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${amount_after_discount}    ${nan}    ${}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${}

",
Create data-driven paynow test cases for Sterlingcooper Testcases TC_101 Validate Customer Is Able To View Unpaid Payment Status On Invoice Page,data-driven,TC_101 Validate Customer Is Able To View Unpaid Payment Status On Invoice Page,"*** Settings ***
Documentation    Validate TC_101 Validate Customer Is Able To View Unpaid Payment Status On Invoice Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_101 Validate Customer Is Able To View Unpaid Payment Status On Invoice Page
[Documentation]    Validate TC_101 Validate Customer Is Able To View Unpaid Payment Status On Invoice Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Navigate To Menu Tab    ${Unpaid Invoices}    ${nan}    ${nan}
Validate Invoice Status Is Unpaid    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Menu Tab
[Arguments]    ${Unpaid Invoices}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Unpaid Invoices}    ${nan}    ${nan}

Validate Invoice Status Is Unpaid
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

","**Test Case Summary: ""TC_101 Validate Customer Is Able To View Unpaid Payment Status On Invoice Page""**

**Purpose:**

The purpose of this test case is to ensure that customers can view the payment status marked as ""Unpaid"" on the invoice page for invoices that have not yet been paid. This validation is essential for customer transparency and helps customers keep track of pending payments and manage their financial activities effectively.

**Key Steps Involved:**

1. **Navigate to the Invoice Page:** The user should access the invoice page by logging into their account and selecting the relevant invoice from their transaction history.

2. **Unpaid Status Check:** Verify that the invoice which hasn't had any payment processed is correctly marked as ""Unpaid"" on the invoice page. This ensures reliable tracking of outstanding dues."
Build data-driven paynow test cases for UploadFeature Testcases TC_35 Validate Large File Upload Process With Different File Formats,data-driven,TC_35 Validate Large File Upload Process With Different File Formats,"*** Settings ***
Documentation    Validate TC_35 Validate Large File Upload Process With Different File Formats
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_35 Validate Large File Upload Process With Different File Formats
[Documentation]    Validate TC_35 Validate Large File Upload Process With Different File Formats using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}
Launch Upload Application    ${UPLOAD_SERVICE}    ${nan}    ${}
Select Upload File Option    ${UPLOAD_SERVICE}    ${nan}    ${}
Upload File With Specific Format    ${file_path}    ${file_format}    ${}
Validate Successful Upload    ${file_response.Success_Message}    ${nan}    ${}
Validate File Content And Integrity    ${file_content}    ${nan}    ${}
Generate Upload Report    ${nan}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch Upload Application
[Arguments]    ${UPLOAD_SERVICE}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${UPLOAD_SERVICE}    ${nan}    ${}

Select Upload File Option
[Arguments]    ${UPLOAD_SERVICE}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${UPLOAD_SERVICE}    ${nan}    ${}

Upload File With Specific Format
[Arguments]    ${file_path}    ${file_format}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${file_path}    ${file_format}    ${}

Validate Successful Upload
[Arguments]    ${file_response.Success_Message}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${file_response.Success_Message}    ${nan}    ${}

Validate File Content And Integrity
[Arguments]    ${file_content}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${file_content}    ${nan}    ${}

Generate Upload Report
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}
","**Summary of TC_35 - Validate Large File Upload Process With Different File Formats**

**Purpose:**
The primary objective of TC_35 is to test the upload functionality of the application while handling large files of various formats—in order to ensure the system's robustness and reliability. This test case assesses the application’s ability to process and validate uploads, maintaining the integrity and correct storage of the files.

**Key Points:**
1. **File Format Compatibility:** Test the system's capability to handle different file formats like .txt, .csv, .pdf, and .xlsx.
2. **Integrity Maintenance:** Ensure that the file content remains unaltered and complete after the upload.
3. **Handling Large Files:** Check that the application can efficiently manage the upload of large files without timeout or crash.
4. **Validation of Success:** Ensure that appropriate success messages and logs are generated post-upload."
Create data-driven clientcentral_testcases for refunds Testcases TC_15 Validate Merchant Is Able To Issue Refund For A Completed Transaction,data-driven,TC_15 Validate Merchant Is Able To Issue Refund For A Completed Transaction,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Is Able To Issue Refund For A Completed Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Is Able To Issue Refund For A Completed Transaction
[Documentation]    Validate TC_15 Validate Merchant Is Able To Issue Refund For A Completed Transaction using the following steps
Send Request To Create Customer    ${GLOBEX_CORP}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${GLOBEX_CORP}    ${account_number}    ${nan}
Process Payment For Invoice    ${GLOBEX_CORP}    ${account_number}    ${invoice_number}
Navigate To Transaction Details Page    ${transaction_id}    ${nan}    ${nan}
Initiate Refund Process    ${transaction_id}    ${amount}    ${nan}
Validate Refund Status    ${Refunded}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${GLOBEX_CORP}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBEX_CORP}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${GLOBEX_CORP}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBEX_CORP}    ${account_number}    ${nan}

Process Payment For Invoice
[Arguments]    ${GLOBEX_CORP}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBEX_CORP}    ${account_number}    ${invoice_number}

Navigate To Transaction Details Page
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Initiate Refund Process
[Arguments]    ${transaction_id}    ${amount}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${amount}    ${nan}

Validate Refund Status
[Arguments]    ${Refunded}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Refunded}    ${nan}    ${nan}

","The test case 'TC_15 Validate Merchant Is Able To Issue Refund For A Completed Transaction' is designed to ensure that a merchant can effectively issue a refund for a completed transaction. The primary objective is to verify that once a transaction has been successfully processed, the merchant has the capability to navigate to the transaction details page, initiate the refund process, and validate that the transaction status is updated to 'Refunded'. This test case checks the accuracy and reliability of the refund process, ensuring that the merchant can manage customer refunds properly. By validating this functionality, the test helps maintain customer satisfaction and trust, supporting financial accuracy and transparency within the merchant's operations."
Create data-driven paynow test cases for Omnicorp Testcases TC_05 Validate Payment Is Rejected For Expired Credit Card,data-driven,TC_05 Validate Payment Is Rejected For Expired Credit Card,"*** Settings ***
Documentation    Validate TC_05 Validate Payment Is Rejected For Expired Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Payment Is Rejected For Expired Credit Card
[Documentation]    Validate TC_05 Validate Payment Is Rejected For Expired Credit Card using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${200.0}
Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
Use Expired Credit Card And Attempt Payment    ${200}    ${EXPIRED_CREDIT_CARD_DETAILS}    ${nan}
Validate Errors After Clicking On Process Invoice    ${Card Expired}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${200.0}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${OMNICORP_MERCHANT}    ${200.0}

Launch PayNow Application
[Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Use Expired Credit Card And Attempt Payment
[Arguments]    ${200}    ${EXPIRED_CREDIT_CARD_DETAILS}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${200}    ${EXPIRED_CREDIT_CARD_DETAILS}    ${nan}

Validate Errors After Clicking On Process Invoice
[Arguments]    ${Card Expired}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Card Expired}    ${nan}    ${nan}

","The test case 'TC_05 Validate Payment Is Rejected For Expired Credit Card' is designed to ensure that the system correctly identifies and rejects a payment attempt made with an expired credit card. The main aim of this test case is to validate the system's capability to prevent transactions using invalid payment methods, specifically expired credit cards. The test involves simulating a payment process with a credit card that is past its expiration date and confirming that the system denies the transaction, providing an appropriate error message to the user. This validation is critical in maintaining transaction security and ensuring the reliability of the payment gateway.
"
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_37 Validate Customer Can Apply Discount Code To Invoice During Payment Process,data-driven,TC_37 Validate Customer Can Apply Discount Code To Invoice During Payment Process,"*** Settings ***
Documentation    Validate TC_37 Validate Customer Can Apply Discount Code To Invoice During Payment Process
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_37 Validate Customer Can Apply Discount Code To Invoice During Payment Process
[Documentation]    Validate TC_37 Validate Customer Can Apply Discount Code To Invoice During Payment Process using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${}    ${}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${}    ${}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}
Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}
Apply Discount Code    ${invoice_number}    ${DISCOUNT_CODE}    ${}
Select Payment Method    ${Credit Card}    ${}    ${}
Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${}    ${}
Validate Final Amount Is Reduced    ${final_amount}    ${expected_amount_after_discount}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${}    ${}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Enter Customer Details
[Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}

Apply Discount Code
[Arguments]    ${invoice_number}    ${DISCOUNT_CODE}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${DISCOUNT_CODE}    ${}

Select Payment Method
[Arguments]    ${Credit Card}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${}    ${}

Enter Credit Card Details
[Arguments]    ${CREDIT_CARD_DETAILS}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CREDIT_CARD_DETAILS}    ${}    ${}

Validate Final Amount Is Reduced
[Arguments]    ${final_amount}    ${expected_amount_after_discount}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${final_amount}    ${expected_amount_after_discount}    ${}
","**Test Case Summary: TC_37 Validate Customer Can Apply Discount Code To Invoice During Payment Process**

**Purpose:**

The primary objective of this test case is to ensure the following functionalities within the PayNOW system concerning the application of discount codes:

1. **Application of Discount Code:**
- Verify that users can successfully apply a discount code to an invoice during the payment process. This part of the test ensures that the system correctly recognizes and applies the discount code, reducing the invoice's total amount as specified by the discount terms.

2. **Validation of Final Amount:**
- Confirm that the final payable amount accurately reflects the application of the discount. This ensures the system calculations are correct and users are charged the appropriate reduced amount"
Build data-driven clientcentral_testcases for customers Testcases TC_55 Validate Merchant Can Export Transaction History To CSV,data-driven,TC_55 Validate Merchant Can Export Transaction History To CSV,"*** Settings ***
Documentation    Validate TC_55 Validate Merchant Can Export Transaction History To CSV
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testclient
${VALID_PASSWORD}   password123

*** Test Cases ***
TC_55 Validate Merchant Can Export Transaction History To CSV
[Documentation]    Validate TC_55 Validate Merchant Can Export Transaction History To CSV using the following steps
Send Request To Authenticate User    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To Transaction History Page    ${user_session}    ${nan}    ${nan}
Select Date Range For Export    ${start_date}    ${end_date}    ${nan}
Click Export To CSV    ${Export_Button}    ${nan}    ${nan}
Verify CSV Is Downloaded Successfully    ${download_path}    ${nan}    ${nan}

*** Keywords ***
Send Request To Authenticate User
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${session_token}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Navigate To Transaction History Page
[Arguments]    ${user_session}    ${nan}    ${nan}
[Return]    ${page_status}
[Documentation]    Keyword description
Log    ${user_session}    ${nan}    ${nan}

Select Date Range For Export
[Arguments]    ${start_date}    ${end_date}    ${nan}
[Return]    ${date_range_selected}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${nan}

Click Export To CSV
[Arguments]    ${Export_Button}    ${nan}    ${nan}
[Return]    ${csv_export_status}
[Documentation]    Keyword description
Log    ${Export_Button}    ${nan}    ${nan}

Verify CSV Is Downloaded Successfully
[Arguments]    ${download_path}    ${nan}    ${nan}
[Return]    ${download_success}
[Documentation]    Keyword description
Log    ${download_path}    ${nan}    ${nan}

","The test case 'TC_55 Validate Merchant Can Export Transaction History To CSV' is designed to ensure that merchants can successfully export their transaction history into a CSV file. This functionality is crucial for merchants who need to perform detailed financial analyses, audits, or reconciliations outside the platform using spreadsheet software. The test case involves verifying that after logging in, the user can navigate to the transaction history page, select the desired date range, initiate the export, and confirm that the CSV file is downloaded without errors. The accuracy and completeness of the exported data are crucial for maintaining reliable financial records."
Build data-driven clientcentral_testcases for payments Testcases TC_25 Validate Merchant Is Able To Refund A Payment Transaction,data-driven,TC_25 Validate Merchant Is Able To Refund A Payment Transaction,"*** Settings ***
Documentation    Validate TC_25 Validate Merchant Is Able To Refund A Payment Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_25 Validate Merchant Is Able To Refund A Payment Transaction
[Documentation]    Validate TC_25 Validate Merchant Is Able To Refund A Payment Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Create Invoice And Process Payment    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Refund Payment    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Validate Payment Refund Was Successful    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create Invoice And Process Payment
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Refund Payment
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Validate Payment Refund Was Successful
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

","**Test Case: TC_25 - Validate Merchant Is Able To Refund A Payment Transaction**

**Purpose:**

The purpose of this test case is to verify that a merchant can successfully process a refund for a payment transaction. This functionality is crucial for handling cancellations, returns, or errors in billing, ensuring that merchants can provide customers with refunds when necessary.

**Key Objectives:**

1. **Integration Check:** Confirm that the merchant can create a customer and process payments within the system.
2. **Refund Process:** Verify that the refund process can be initiated and completed without any errors.
3. **Validation:** Ensure that the system reflects the refunded status and updates the transaction records accordingly.

Through this test, we will validate the robustness and reliability of the refund process, ensuring that it meets the standards necessary for smooth financial operations."
Create data-driven clientcentral_testcases for transaction details Testcases TC_30 Ensure Merchant Can Download Transaction Details As CSV,data-driven,TC_30 Ensure Merchant Can Download Transaction Details As CSV,"*** Settings ***
Documentation    Validate TC_30 Ensure Merchant Can Download Transaction Details As CSV
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_30 Ensure Merchant Can Download Transaction Details As CSV
[Documentation]    Validate TC_30 Ensure Merchant Can Download Transaction Details As CSV using the following steps
Select Module    ${Transaction History}    ${nan}    ${}
Select Date Range From Calendar    ${this_month}    ${today}    ${}
Validate Selected Date Range Is Displayed    ${this_month}    ${today}    ${}
Click Download CSV Button    ${nan}    ${nan}    ${}
Validate CSV File Downloaded    ${transaction_details.csv}    ${nan}    ${}

*** Keywords ***
Select Module
[Arguments]    ${Transaction History}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Transaction History}    ${nan}    ${}

Select Date Range From Calendar
[Arguments]    ${this_month}    ${today}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${this_month}    ${today}    ${}

Validate Selected Date Range Is Displayed
[Arguments]    ${this_month}    ${today}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${this_month}    ${today}    ${}

Click Download CSV Button
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate CSV File Downloaded
[Arguments]    ${transaction_details.csv}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_details.csv}    ${nan}    ${}

","**Test Case: TC_30 Ensure Merchant Can Download Transaction Details As CSV**

**Purpose:**
The purpose of this test case is to verify that a merchant has the functionality to download transaction details in a CSV format. This test ensures that the download feature works correctly and the file contains accurate transaction data as expected.

**Key Points:**
1. **Module Selection:** Ensure the merchant can navigate to the transaction history section.
2. **Date Range Selection:** Validate that the merchant can specify the date range for which they want the transaction details.
3. **CSV Download:** Confirm that the merchant can initiate a CSV download and the file is saved correctly.
4. **File Content:** Validate that the downloaded CSV file contains accurate and complete transaction details for the specified date range."
Create a data-driven paynow test case for Sterlingcooper Testcases TC_75 Validate Payment History Shows Recent Payments For Integrated Customers,data-driven,TC_75 Validate Payment History Shows Recent Payments For Integrated Customers,"*** Settings ***
Documentation    Validate TC_75 Validate Payment History Shows Recent Payments For Integrated Customers
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_75 Validate Payment History Shows Recent Payments For Integrated Customers
[Documentation]    Validate TC_75 Validate Payment History Shows Recent Payments For Integrated Customers using the following steps
Create Integrated Customer Account    ${INTEGRATED_CUSTOMER_DETAILS}    ${nan}    ${}
Log Into Integrated Customer Account    ${INTEGRATED_CUSTOMER_DETAILS}    ${VALID_USER}    ${VALID_PASSWORD}
Navigate To Payment History Section    ${nan}    ${nan}    ${}
Validate Recent Payment Entries Are Displayed    ${expected_payments}    ${nan}    ${}

*** Keywords ***
Create Integrated Customer Account
[Arguments]    ${INTEGRATED_CUSTOMER_DETAILS}    ${nan}    ${}
[Return]    ${account_details}
[Documentation]    Keyword description
Log    ${INTEGRATED_CUSTOMER_DETAILS}    ${nan}    ${}

Log Into Integrated Customer Account
[Arguments]    ${INTEGRATED_CUSTOMER_DETAILS}    ${VALID_USER}    ${VALID_PASSWORD}
[Return]    ${session}
[Documentation]    Keyword description
Log    ${INTEGRATED_CUSTOMER_DETAILS}    ${VALID_USER}    ${VALID_PASSWORD}

Navigate To Payment History Section
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${page_status}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate Recent Payment Entries Are Displayed
[Arguments]    ${expected_payments}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${expected_payments}    ${nan}    ${}
","**Test Case: TC_75 Validate Payment History Shows Recent Payments For Integrated Customers**

**Purpose:**

The purpose of this test case is to ensure that integrated customers can view their recent payment activities in their payment history section. This test case will verify:

1. **Account Creation:** The test will commence by creating an integrated customer account to ensure the account is set up properly.
2. **Login Procedure:** Validate that the customer can log into their account using valid credentials.
3. **Navigation:** Check that the customer can successfully navigate to the payment history section within the application.
4. **Display Accuracy:** Confirm that recent payment entries are correctly displayed, ensuring they are accurate and up to date.

This functionality is essential for providing transparency and maintaining trust with customers by allowing them to easily access and verify their recent payment activities."
Generate data-driven clientcentral_testcases for customers Testcases TC_15 Validate Customer Address is Correctly Updated in System,data-driven,TC_15 Validate Customer Address is Correctly Updated in System,"*** Settings ***
Documentation    Validate TC_15 Validate Customer Address is Correctly Updated in System
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Customer Address is Correctly Updated in System
[Documentation]    Validate TC_15 Validate Customer Address is Correctly Updated in System using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Address Information}    ${nan}    ${nan}
Update Customer Address    ${new_address}    ${nan}    ${nan}
Validate Address Is Updated    ${new_address}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Address Information}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Address Information}    ${nan}    ${nan}

Update Customer Address
[Arguments]    ${new_address}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_address}    ${nan}    ${nan}

Validate Address Is Updated
[Arguments]    ${new_address}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_address}    ${nan}    ${nan}

","The test case 'TC_15 Validate Customer Address is Correctly Updated in System' aims to validate that any changes made to a customer's address information are accurately reflected in the system. This test ensures the address data integrity is maintained throughout the update process.

### Purpose:"
"Generate data-driven clientcentral_testcases for order processing Testcases TC_78 Validate Merchant Is Able To Create, View, And Delete Orders",data-driven,"TC_78 Validate Merchant Is Able To Create, View, And Delete Orders","*** Settings ***
Documentation    Validate TC_78 Validate Merchant Is Able To Create, View, And Delete Orders
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_78 Validate Merchant Is Able To Create, View, And Delete Orders
[Documentation]    Validate TC_78 Validate Merchant Is Able To Create, View, And Delete Orders using the following steps
Send Request To Create Order    ${ORDER_DETAILS}    ${nan}    ${}
Navigate To Orders Page    ${nan}    ${nan}    ${}
View Created Order    ${ORDER_ID}    ${nan}    ${}
Delete Created Order    ${ORDER_ID}    ${nan}    ${}
Validate Order Deletion    ${ORDER_ID}    ${nan}    ${}

*** Keywords ***
Send Request To Create Order
[Arguments]    ${ORDER_DETAILS}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ORDER_DETAILS}    ${nan}    ${}

Navigate To Orders Page
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

View Created Order
[Arguments]    ${ORDER_ID}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ORDER_ID}    ${nan}    ${}

Delete Created Order
[Arguments]    ${ORDER_ID}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ORDER_ID}    ${nan}    ${}

Validate Order Deletion
[Arguments]    ${ORDER_ID}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${ORDER_ID}    ${nan}    ${}

","**Test Case Summary: TC_78 Validate Merchant Is Able To Create, View, And Delete Orders**

**Purpose:**

The primary objective of this test case is to ensure that the merchant can effectively manage orders within the system. Specifically, it focuses on verifying that the following actions can be performed seamlessly:

1. **Create Order** – Ensure the merchant can create a new order with the required details.
2. **View Order** – Verify that the merchant can view the details of the created order.
3. **Delete Order** – Confirm that the merchant can delete the created order.
4. **Validate Deletion** – Ensure that the order deletion is validated and that the deleted order no longer appears in the system.

**Goals:**

- **Verify Order Creation:** Ensure that the order creation process is smooth and that the order is registered in the system.
- **Verify Order Visibility:** Confirm that the newly created order is visible in the orders page.
- **Verify Order Deletion:** Ensure the deletion functionality works, and the order is removed from the system.

By validating these aspects, the test case ensures that the order management system provides the necessary functions for merchants to create, access, and manage their orders efficiently."
Generate data-driven paynow test cases for DunderMifflin Testcases TC_18 Validate Customer Is Able To Process Payment Using Debit Card,data-driven,TC_18 Validate Customer Is Able To Process Payment Using Debit Card,"*** Settings ***
Documentation    Validate TC_18 Validate Customer Is Able To Process Payment Using Debit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_18 Validate Customer Is Able To Process Payment Using Debit Card
[Documentation]    Validate TC_18 Validate Customer Is Able To Process Payment Using Debit Card using the following steps
Send Request To Create Customer    ${DUNDER_MIFFLIN_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${DUNDER_MIFFLIN_MERCHANT}    ${nan}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${DUNDER_MIFFLIN_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Enter Customer Details    ${customer_details}    ${DUNDER_MIFFLIN_MERCHANT}    ${nan}
Select Payment Method    ${Debit Card}    ${nan}    ${nan}
Enter Debit Card Details    ${DEBIT_CARD_DETAILS}    ${nan}    ${nan}
Process Invoice Payment    ${nan}    ${nan}    ${nan}
Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DUNDER_MIFFLIN_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${DUNDER_MIFFLIN_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${DUNDER_MIFFLIN_MERCHANT}    ${nan}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${DUNDER_MIFFLIN_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${DUNDER_MIFFLIN_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${DUNDER_MIFFLIN_MERCHANT}    ${nan}

Select Payment Method
[Arguments]    ${Debit Card}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Debit Card}    ${nan}    ${nan}

Enter Debit Card Details
[Arguments]    ${DEBIT_CARD_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DEBIT_CARD_DETAILS}    ${nan}    ${nan}

Process Invoice Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Payment Receipt Is Generated
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

",The purpose of the test case 'TC_18 Validate Customer Is Able To Process Payment Using Debit Card' is to ensure that a customer can successfully process a payment using a debit card through the PayNow application.
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_15 Validate Customer Can View Invoice Payment History,data-driven,TC_15 Validate Customer Can View Invoice Payment History,"*** Settings ***
Documentation    Validate TC_15 Validate Customer Can View Invoice Payment History
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Customer Can View Invoice Payment History
[Documentation]    Validate TC_15 Validate Customer Can View Invoice Payment History using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${amount}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Navigate To Invoice Page    ${invoice_number}    ${nan}    ${nan}
Open Payment History Tab    ${nan}    ${nan}    ${nan}
Validate Payment History Details Are Displayed    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${amount}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${amount}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Invoice Page
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Open Payment History Tab
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Payment History Details Are Displayed
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

","**Test Case: TC_15 - Validate Customer Can View Invoice Payment History**

**Purpose:**

The purpose of this test case is to verify the functionality that allows customers to view the payment history for a specific invoice within the PayNow application. This includes ensuring that customers can access and review the list of payments made towards an invoice, along with relevant details such as the payment date, amount, and method. Specifically, the test case aims to validate:

1. **Access to Payment History:** Customers can navigate to the invoice page and open the payment history tab.
2. **Display of Payment Details:** The payment history tab shows a comprehensive list of all payments made towards the invoice, including detailed information.
3. **User Experience:** Ensuring that the feature works smoothly and that all relevant details are correctly displayed to the customer for transparency and record-keeping purposes."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_75 Validate Merchant Can Update Customer Information,data-driven,TC_75 Validate Merchant Can Update Customer Information,"*** Settings ***
Documentation    Validate TC_75 Validate Merchant Can Update Customer Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_75 Validate Merchant Can Update Customer Information
[Documentation]    Validate TC_75 Validate Merchant Can Update Customer Information using the following steps
Send Request To Create Customer    ${ACME_CORP}    ${nan}    ${nan}
Retrieve Customer Information    ${ACME_CORP}    ${customer_number}    ${nan}
Update Customer Information    ${customer_number}    ${new_customer_details}    ${nan}
Validate Customer Information Updated    ${customer_number}    ${new_customer_details}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${ACME_CORP}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${nan}    ${nan}

Retrieve Customer Information
[Arguments]    ${ACME_CORP}    ${customer_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${customer_number}    ${nan}

Update Customer Information
[Arguments]    ${customer_number}    ${new_customer_details}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_number}    ${new_customer_details}    ${nan}

Validate Customer Information Updated
[Arguments]    ${customer_number}    ${new_customer_details}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_number}    ${new_customer_details}    ${nan}

","The test case 'TC_75 Validate Merchant Can Update Customer Information' is designed to ensure that a merchant can successfully update a customer's details within the system.

### Purpose:"
Generate data-driven clientcentral_testcases for transactions Testcases TC_45 Validate Merchant Is Able To Export Transaction History As CSV,data-driven,TC_45 Validate Merchant Is Able To Export Transaction History As CSV,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To Export Transaction History As CSV
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To Export Transaction History As CSV
[Documentation]    Validate TC_45 Validate Merchant Is Able To Export Transaction History As CSV using the following steps
Login As Valid User    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Navigate To Transactions Page    ${}    ${}    ${}
Select Date Range    ${start_date}    ${end_date}    ${}
Export Transactions As CSV    ${}    ${}    ${}
Validate CSV Export Is Successful    ${}    ${}    ${}

*** Keywords ***
Login As Valid User
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Navigate To Transactions Page
[Arguments]    ${}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${}    ${}    ${}

Select Date Range
[Arguments]    ${start_date}    ${end_date}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${}

Export Transactions As CSV
[Arguments]    ${}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${}    ${}    ${}

Validate CSV Export Is Successful
[Arguments]    ${}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${}    ${}    ${}

","**Test Case: TC_45 Validate Merchant Is Able To Export Transaction History As CSV**

**Purpose:**
The main objective of this test case is to ensure that merchants can export their transaction history to a CSV file from the system. This functionality is critical for merchants to maintain offline records, analyze financial data, and integrate with other financial systems or tools. By validating this feature, we confirm that:

1. Merchants can navigate to the transactions section without any issues.
2. The system provides options to select a specific date range for exporting transaction history.
3. The export functionality works correctly, generating a CSV file that includes the transaction details corresponding to the selected date range.
4. The user interface (UI) responds appropriately and confirms the successful export action.

This ensures that the export feature is reliable and useful for merchants in their day-to-day financial operations."
Validate data-driven clientcentral_testcases for transactions Testcases TC_07 Validate Merchant Is Able To Refund A Payment Successfully,data-driven,TC_07 Validate Merchant Is Able To Refund A Payment Successfully,"*** Settings ***
Documentation    Validate TC_07 Validate Merchant Is Able To Refund A Payment Successfully
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Merchant Is Able To Refund A Payment Successfully
[Documentation]    Validate TC_07 Validate Merchant Is Able To Refund A Payment Successfully using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}
Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Transaction History Page    ${account_number}    ${nan}    ${}
Find Recent Payment Transaction    ${account_number}    ${nan}    ${}
Initiate Refund For Payment    ${transaction_id}    ${nan}    ${}
Validate Refund Is Processed Successfully    ${transaction_id}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${}

Send Request To Process Payment For Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Transaction History Page
[Arguments]    ${account_number}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${}

Find Recent Payment Transaction
[Arguments]    ${account_number}    ${nan}    ${}
[Return]    ${transaction_id}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${}

Initiate Refund For Payment
[Arguments]    ${transaction_id}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${}

Validate Refund Is Processed Successfully
[Arguments]    ${transaction_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${}

","The purpose of the test case 'TC_07 Validate Merchant Is Able To Refund A Payment Successfully' is to ensure that a merchant can effectively execute a refund for a processed payment. The test validates the full refund process, from navigating to the transaction history page and identifying the recent payment transaction to initiating and confirming the refund has been processed without errors. This functionality is critical for maintaining customer satisfaction and handling transaction discrepancies accurately. Ensuring the system supports a seamless refund process helps in avoiding any potential financial errors and operational inefficiencies."
Create data-driven paynow test cases for Globex Testcases TC_19 Verify Refund Process For An Invoice,data-driven,TC_19 Verify Refund Process For An Invoice,"*** Settings ***
Documentation    Validate TC_19 Verify Refund Process For An Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_19 Verify Refund Process For An Invoice
[Documentation]    Validate TC_19 Verify Refund Process For An Invoice using the following steps
Send Request To Create Customer    ${GLOBEX_MERCHANT}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${account_number}    ${GLOBEX_MERCHANT}    ${}
Process Invoice Payment    ${account_number}    ${invoice_number}    ${}
Initiate Refund For The Invoice    ${account_number}    ${invoice_number}    ${}
Validate Refund Status In The System    ${invoice_number}    ${nan}    ${}
Validate Refund Transaction In Customer Account    ${customer_details}    ${invoice_number}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${GLOBEX_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBEX_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${GLOBEX_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${GLOBEX_MERCHANT}    ${}

Process Invoice Payment
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Initiate Refund For The Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Validate Refund Status In The System
[Arguments]    ${invoice_number}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${}

Validate Refund Transaction In Customer Account
[Arguments]    ${customer_details}    ${invoice_number}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_details}    ${invoice_number}    ${}

","The test case ""TC_19 Verify Refund Process For An Invoice"" is designed to validate the functionality and correctness of the refund process within the system. The primary goal of this test case is to ensure that refunds are processed accurately, and the status is updated correctly in the system, with the appropriate entries made in the customer account.

Key objectives of the test case include:
"
Generate data-driven clientcentral_testcases for user management Testcases TC_45 Validate Admin Can Successfully Deactivate A User From User Management Module,data-driven,TC_45 Validate Admin Can Successfully Deactivate A User From User Management Module,"*** Settings ***
Documentation    Validate TC_45 Validate Admin Can Successfully Deactivate A User From User Management Module
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_ADMIN_USER}       admin
${VALID_ADMIN_PASSWORD}   supersecret

*** Test Cases ***
TC_45 Validate Admin Can Successfully Deactivate A User From User Management Module
[Documentation]    Validate TC_45 Validate Admin Can Successfully Deactivate A User From User Management Module using the following steps
Login As Admin    ${VALID_ADMIN_USER}    ${VALID_ADMIN_PASSWORD}    ${}
Navigate To User Management Module    ${User Management}    ${nan}    ${}
Select User To Deactivate    ${username}    ${nan}    ${}
Deactivate User Account    ${username}    ${nan}    ${}
Validate User Account Deactivation    ${username}    ${nan}    ${}

*** Keywords ***
Login As Admin
[Arguments]    ${VALID_ADMIN_USER}    ${VALID_ADMIN_PASSWORD}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_ADMIN_USER}    ${VALID_ADMIN_PASSWORD}    ${}

Navigate To User Management Module
[Arguments]    ${User Management}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${User Management}    ${nan}    ${}

Select User To Deactivate
[Arguments]    ${username}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${username}    ${nan}    ${}

Deactivate User Account
[Arguments]    ${username}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${username}    ${nan}    ${}

Validate User Account Deactivation
[Arguments]    ${username}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${username}    ${nan}    ${}

","The test case **'TC_45 Validate Admin Can Successfully Deactivate A User From User Management Module'** aims to ensure that an admin can effectively deactivate a user account within the User Management module of a system. This test case is designed to verify that the deactivation process works correctly and that once deactivated, the user's account cannot be accessed or used. By achieving this, the test ensures administrative control over user accounts, enhancing system security and management capabilities.

**Purpose:**
- Confirm that an admin can log in and access the User Management module.
- Validate the ability to search and select a specific user to deactivate.
- Ensure that the deactivation action is performed successfully and reflected in the system.
- Verify that the deactivated user can no longer access their account, maintaining system integrity and security."
Create data-driven clientcentral_testcases for invoices Testcases TC_45 Validate Merchant Can Successfully Edit and Resend Invoice Email,data-driven,TC_45 Validate Merchant Can Successfully Edit and Resend Invoice Email,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Can Successfully Edit and Resend Invoice Email
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}          testuser
${VALID_PASSWORD}      secret

*** Test Cases ***
TC_45 Validate Merchant Can Successfully Edit and Resend Invoice Email
[Documentation]    Validate TC_45 Validate Merchant Can Successfully Edit and Resend Invoice Email using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Select Module    ${Invoices}    ${nan}    ${nan}
Filter Details In Invoices    ${account_number}    ${invoice_number}    ${nan}
Navigate To Details Page From Invoices    ${invoice_number}    ${nan}    ${nan}
Select Tab In Invoice Details Page    ${Email Invoice}    ${nan}    ${nan}
Edit Email Content Before Resending    ${new_email_content}    ${nan}    ${nan}
Resend Invoice Email    ${nan}    ${nan}    ${nan}
Validate Invoice Email Is Successfully Sent    ${transaction_id}    ${nan}    ${nan}
Validate Email Was Edited    ${new_email_content}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Select Module
[Arguments]    ${Invoices}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Invoices}    ${nan}    ${nan}

Filter Details In Invoices
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Details Page From Invoices
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Select Tab In Invoice Details Page
[Arguments]    ${Email Invoice}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Email Invoice}    ${nan}    ${nan}

Edit Email Content Before Resending
[Arguments]    ${new_email_content}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_email_content}    ${nan}    ${nan}

Resend Invoice Email
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Invoice Email Is Successfully Sent
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Validate Email Was Edited
[Arguments]    ${new_email_content}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_email_content}    ${nan}    ${nan}
","**Test Case: TC_45 - Validate Merchant Can Successfully Edit and Resend Invoice Email**

**Purpose:**

The goal of this test case (TC_45) is to verify that a merchant can effortlessly edit the content of an invoice email and successfully resend it to the customer. This includes several key functionalities and checks:
"
Build data-driven clientcentral_testcases for orders Testcases TC_45 Validate Merchant Can View And Edit Order Details,data-driven,TC_45 Validate Merchant Can View And Edit Order Details,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Can View And Edit Order Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Can View And Edit Order Details
[Documentation]    Validate TC_45 Validate Merchant Can View And Edit Order Details using the following steps
Send Request To Create Merchant    ${FooCorp}    ${nan}    ${nan}
Send Request To Create Customer    ${FooCorp}    ${account_number}    ${nan}
Send Request To Create Order For Customer    ${FooCorp}    ${account_number}    ${order_number}
Navigate To Orders Page    ${FooCorp}    ${nan}    ${nan}
Filter Orders By Customer    ${account_number}    ${nan}    ${nan}
Select Order To View Details    ${order_number}    ${nan}    ${nan}
Validate Order Details Are Displayed    ${order_number}    ${nan}    ${nan}
Edit Order Details    ${order_number}    ${nan}    ${nan}
Save Edited Order Details    ${order_number}    ${nan}    ${nan}
Validate Edited Order Details Are Saved    ${order_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Merchant
[Arguments]    ${FooCorp}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${FooCorp}    ${nan}    ${nan}

Send Request To Create Customer
[Arguments]    ${FooCorp}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${FooCorp}    ${account_number}    ${nan}

Send Request To Create Order For Customer
[Arguments]    ${FooCorp}    ${account_number}    ${order_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${FooCorp}    ${account_number}    ${order_number}

Navigate To Orders Page
[Arguments]    ${FooCorp}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${FooCorp}    ${nan}    ${nan}

Filter Orders By Customer
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Order To View Details
[Arguments]    ${order_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_number}    ${nan}    ${nan}

Validate Order Details Are Displayed
[Arguments]    ${order_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_number}    ${nan}    ${nan}

Edit Order Details
[Arguments]    ${order_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_number}    ${nan}    ${nan}

Save Edited Order Details
[Arguments]    ${order_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_number}    ${nan}    ${nan}

Validate Edited Order Details Are Saved
[Arguments]    ${order_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_number}    ${nan}    ${nan}

","The test case ""TC_45 Validate Merchant Can View And Edit Order Details"" is designed to verify that a merchant can successfully navigate to the orders section, filter orders based on a customer, view the details of a specific order, make edits to the order as needed, and save those edits. The key goals of this test case are to ensure:

1. Order creation for a given customer works as intended.
2. The orders page is accessible and filterable by the merchant.
3. The merchant can select an order to view its details.
4. The merchant can edit order details and save those changes.
5"
Create data-driven clientcentral_testcases for virtual terminal Testcases TC_06 Validate Merchant Can Process Payment With Surcharge Included,data-driven,TC_06 Validate Merchant Can Process Payment With Surcharge Included,"*** Settings ***
Documentation    Validate TC_06 Validate Merchant Can Process Payment With Surcharge Included
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_06 Validate Merchant Can Process Payment With Surcharge Included
[Documentation]    Validate TC_06 Validate Merchant Can Process Payment With Surcharge Included using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Customer Settings}    ${nan}    ${nan}
Select Surcharge Exempt    ${False}    ${nan}    ${nan}
Select Module    ${Virtual Terminal}    ${nan}    ${nan}
Search Customer In Virtual Terminal    ${account_number}    ${nan}    ${nan}
Select Country In Virtual Terminal    ${United States}    ${nan}    ${nan}
Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}
Select Specific Invoice Checkbox    ${nan}    ${nan}    ${nan}
Select Payment Method    ${Credit Card}    ${nan}    ${nan}
Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
Validate Surcharge    ${5}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Customer Settings}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Customer Settings}    ${nan}    ${nan}

Select Surcharge Exempt
[Arguments]    ${False}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${False}    ${nan}    ${nan}

Select Module
[Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Virtual Terminal}    ${nan}    ${nan}

Search Customer In Virtual Terminal
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Country In Virtual Terminal
[Arguments]    ${United States}    ${nan}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${United States}    ${nan}    ${nan}

Select Payment Type
[Arguments]    ${Specific Invoice}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Specific Invoice}    ${nan}    ${nan}

Select Specific Invoice Checkbox
[Arguments]    ${nan}    ${nan}    ${",
Create data-driven paynow test cases for Sterlingcooper Testcases TC_48 Verify Customer Can Successfully Make A Payment With A Credit Card,data-driven,TC_48 Verify Customer Can Successfully Make A Payment With A Credit Card,"*** Settings ***
Documentation    Validate TC_48 Verify Customer Can Successfully Make A Payment With A Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_48 Verify Customer Can Successfully Make A Payment With A Credit Card
[Documentation]    Validate TC_48 Verify Customer Can Successfully Make A Payment With A Credit Card using the following steps
Send Request To Create Customer    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${invoice_amount}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Enter Credit Card Details    ${credit_card_number}    ${expiration_date}    ${cvv}
Submit Payment    ${cvv}    ${nan}    ${nan}
Validate Payment Confirmation Message    ${confirmation_message}    ${nan}    ${nan}
Validate Payment Is Reflected In Account    ${account_number}    ${invoice_number}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${invoice_amount}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_amount}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Enter Credit Card Details
[Arguments]    ${credit_card_number}    ${expiration_date}    ${cvv}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${credit_card_number}    ${expiration_date}    ${cvv}

Submit Payment
[Arguments]    ${cvv}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${cvv}    ${nan}    ${nan}

Validate Payment Confirmation Message
[Arguments]    ${confirmation_message}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${confirmation_message}    ${nan}    ${nan}

Validate Payment Is Reflected In Account
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

","The test case 'TC_48 Verify Customer Can Successfully Make A Payment With A Credit Card' is designed to ensure that a customer is able to make a payment using their credit card through the PayNow application. This test case aims to validate the entire process, from creating a customer and invoice to entering credit card details and confirming the payment. It ensures that the payment information is processed correctly and a confirmation message is displayed. Additionally, it verifies that the payment is reflected in the customer's account, which is critical for tracking transactions and ensuring financial accuracy."
Build data-driven clientcentral_testcases for all transactions Testcases TC_78 Validate Merchant Is Able To Export Transaction Reports,data-driven,TC_78 Validate Merchant Is Able To Export Transaction Reports,"*** Settings ***
Documentation    Validate TC_78 Validate Merchant Is Able To Export Transaction Reports
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_78 Validate Merchant Is Able To Export Transaction Reports
[Documentation]    Validate TC_78 Validate Merchant Is Able To Export Transaction Reports using the following steps
Login As Valid Merchant    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Navigate To Reports Section    ${}    ${}    ${}
Select Transaction Report Options    ${All Transactions}    ${This Month}    ${CSV}
Click On Export Button    ${}    ${}    ${}
Validate Exported Report    ${CSV}    ${}    ${}

*** Keywords ***
Login As Valid Merchant
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Navigate To Reports Section
[Arguments]    ${}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${}    ${}    ${}

Select Transaction Report Options
[Arguments]    ${All Transactions}    ${This Month}    ${CSV}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${All Transactions}    ${This Month}    ${CSV}

Click On Export Button
[Arguments]    ${}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${}    ${}    ${}

Validate Exported Report
[Arguments]    ${CSV}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${CSV}    ${}    ${}

","**Test Case: TC_78 Validate Merchant Is Able To Export Transaction Reports**

**Purpose:**
The objective of this test case is to ensure that merchants can successfully export transaction reports from the system. This functionality is vital for merchants to perform financial analysis, accounting, and record-keeping.

**Key Objectives:**
1. **Login Verification:** Ensure the merchant can log into the system using valid credentials.
2. **Navigation:** Confirm the system's interface allows the merchant to navigate to the reports section.
3. **Report Selection:** Validate that the merchant can select desired transaction report options, including type, date range, and file format.
4. **Export Functionality:** Ensure clicking the export button successfully generates the report.
5. **Output Validation:** Verify that the exported report matches the selected criteria and format, ensuring data integrity and usability."
Generate data-driven clientcentral_testcases for customers Testcases TC_75 Validate Customer Can Successfully Update Billing Address Via Customer Portal,data-driven,TC_75 Validate Customer Can Successfully Update Billing Address Via Customer Portal,"*** Settings ***
Documentation    Validate TC_75 Validate Customer Can Successfully Update Billing Address Via Customer Portal
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_75 Validate Customer Can Successfully Update Billing Address Via Customer Portal
[Documentation]    Validate TC_75 Validate Customer Can Successfully Update Billing Address Via Customer Portal using the following steps
Send Request To Create Customer    ${CUSTOMER_PORTAL}    ${nan}    ${nan}
Launch Customer Portal    ${CUSTOMER_PORTAL}    ${nan}    ${nan}
Login With Valid Credentials    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To Billing Address Section    ${nan}    ${nan}    ${nan}
Update Billing Address Details    ${new_address}    ${city}    ${state}    ${zip_code}
Save Billing Address    ${nan}    ${nan}    ${nan}
Validate Billing Address Update    ${new_address}    ${city}    ${state}    ${zip_code}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${CUSTOMER_PORTAL}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CUSTOMER_PORTAL}    ${nan}    ${nan}

Launch Customer Portal
[Arguments]    ${CUSTOMER_PORTAL}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CUSTOMER_PORTAL}    ${nan}    ${nan}

Login With Valid Credentials
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Navigate To Billing Address Section
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Update Billing Address Details
[Arguments]    ${new_address}    ${city}    ${state}    ${zip_code}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_address}    ${city}    ${state}    ${zip_code}

Save Billing Address
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Billing Address Update
[Arguments]    ${new_address}    ${city}    ${state}    ${zip_code}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_address}    ${city}    ${state}    ${zip_code}
","The test case 'TC_75 Validate Customer Can Successfully Update Billing Address Via Customer Portal' is designed to verify that customers can update their billing address information through the customer portal. This test ensures the system correctly processes address updates, reflecting changes in the customer's account details. The objectives are to validate:

1. The customer can navigate to the billing address section within the portal.
2. The user interface allows for the modification of address fields.
3. The new address details are saved and stored correctly.
4. The updated billing address information is correctly displayed and reflected in the customer account.

This functionality is crucial for maintaining accurate and up-to-date customer information for billing and correspondence purposes."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_21 Validate Customer Is Able To Link Multiple Debit Cards,data-driven,TC_21 Validate Customer Is Able To Link Multiple Debit Cards,"*** Settings ***
Documentation    Validate TC_21 Validate Customer Is Able To Link Multiple Debit Cards
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_21 Validate Customer Is Able To Link Multiple Debit Cards
[Documentation]    Validate TC_21 Validate Customer Is Able To Link Multiple Debit Cards using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Link Debit Card    ${integrated_merchant}    ${Debit Card 1}    ${CARD_DETAILS_1}
Link Debit Card    ${integrated_merchant}    ${Debit Card 2}    ${CARD_DETAILS_2}
Validate Both Debit Cards Are Linked    ${2}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Link Debit Card
[Arguments]    ${integrated_merchant}    ${Debit Card}    ${CARD_DETAILS}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${Debit Card}    ${CARD_DETAILS}

Validate Both Debit Cards Are Linked
[Arguments]    ${2}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${2}    ${nan}    ${nan}

","**Test Case Summary:**

**Title:**
TC_21 Validate Customer Is Able To Link Multiple Debit Cards

**Purpose:**
The purpose of Test Case TC_21 is to ensure that a customer using the system can successfully link and save multiple debit cards for future transactions. This test case specifically focuses on verifying the functionality of adding more than one debit card to the customer's profile.

**Objectives:**
1. Validate that the user interface prompts the customer to enter necessary details for Debit Card linking.
2. Confirm that the system correctly saves the first debit card's information.
3. Ensure the system allows adding a second debit card without errors.
4. Verify that both debit cards are listed under the customer's saved payment methods, confirming successful linkage of multiple cards.

By validating these objectives, the test ensures robust functionality in managing multiple debit cards for enhanced customer experience."
Develop data-driven clientcentral_testcases for virtual terminal Testcases TC_15 Validate Merchant Is Able To Process Refund For ACH/Echeck Transaction,data-driven,TC_15 Validate Merchant Is Able To Process Refund For ACH/Echeck Transaction,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Is Able To Process Refund For ACH/Echeck Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Is Able To Process Refund For ACH/Echeck Transaction
[Documentation]    Validate TC_15 Validate Merchant Is Able To Process Refund For ACH/Echeck Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Transaction History}    ${nan}    ${nan}
Search For Transaction    ${invoice_number}    ${nan}    ${nan}
Select Transaction For Refund    ${ACH/Echeck}    ${nan}    ${nan}
Enter Refund Amount    ${10.00}    ${nan}    ${nan}
Process Refund    ${nan}    ${nan}    ${nan}
Validate Refund Confirmation Page Is Displayed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Transaction History}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Transaction History}    ${nan}    ${nan}

Search For Transaction
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Select Transaction For Refund
[Arguments]    ${ACH/Echeck}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACH/Echeck}    ${nan}    ${nan}

Enter Refund Amount
[Arguments]    ${10.00}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${10.00}    ${nan}    ${nan}

Process Refund
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Refund Confirmation Page Is Displayed
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

","**Test Case: TC_15 Validate Merchant Is Able To Process Refund For ACH/Echeck Transaction**

**Purpose:**

This test case aims to verify that a merchant can successfully process a refund for a transaction made using the ACH/Echeck method. This functionality is essential for merchants to manage returns, process refunds promptly, and ensure customer satisfaction by reversing the funds"
Create data-driven clientcentral_testcases for customers Testcases TC_102 Validate Merchant Can Download Invoice Summary Report As PDF,data-driven,TC_102 Validate Merchant Can Download Invoice Summary Report As PDF,"*** Settings ***
Documentation    Validate TC_102 Validate Merchant Can Download Invoice Summary Report As PDF
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_102 Validate Merchant Can Download Invoice Summary Report As PDF
[Documentation]    Validate TC_102 Validate Merchant Can Download Invoice Summary Report As PDF using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Multiple Invoices For Customer    ${STERLING_COOPER}    ${account_number}    ${3}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Reports}    ${nan}    ${nan}
Select Invoice Summary Report    ${nan}    ${nan}    ${nan}
Generate PDF For Invoice Summary Report    ${nan}    ${nan}    ${nan}
Validate PDF Download Is Successful    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Multiple Invoices For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${3}
[Return]    @{invoices}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${3}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Reports}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Reports}    ${nan}    ${nan}

Select Invoice Summary Report
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Generate PDF For Invoice Summary Report
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate PDF Download Is Successful
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

","The test case ""TC_102 Validate Merchant Can Download Invoice Summary Report As PDF"" is designed to verify that the merchant can successfully generate and download an invoice summary report in PDF format. This feature is crucial for merchants who require a summarized view of their invoices for record-keeping, analysis, or sharing with stakeholders. Ensuring that the report can be downloaded as a PDF enhances accessibility, ease of use, and portability of financial records.

**Purpose:**
To ensure that the system supports generating and downloading invoice summary reports in a universally accepted and easily accessible format such as PDF. This test case checks the end-to-end functionality from navigating to the report section to successfully downloading the report, thereby confirming that the feature works as intended without errors.

**Key Steps:**
1. Navigate to the reports section where the merchant can view and generate reports.
2. Select the option to generate an invoice summary report.
3. Confirm that the report is generated and downloaded successfully in PDF format."
Generate data-driven paynow test cases for Initech Testcases TC_104 Validate Merchant Receives Notification Upon Payment Failure,data-driven,TC_104 Validate Merchant Receives Notification Upon Payment Failure,"*** Settings ***
Documentation    Validate TC_104 Validate Merchant Receives Notification Upon Payment Failure
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_104 Validate Merchant Receives Notification Upon Payment Failure
[Documentation]    Validate TC_104 Validate Merchant Receives Notification Upon Payment Failure using the following steps
Initiate Payment Process    ${INITECH_MERCHANT}    ${account_number}    ${invoice_number}
Simulate Payment Failure    ${account_number}    ${invoice_number}    ${error_code}
Send Payment Failure Notification To Merchant    ${merchant_email}    ${account_number}    ${invoice_number}
Check Merchant's Email For Failure Notification    ${merchant_email}    ${failure_subject}    ${nan}
Validate Notification Content    ${failure_message}    ${account_number}    ${invoice_number}

*** Keywords ***
Initiate Payment Process
[Arguments]    ${INITECH_MERCHANT}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${INITECH_MERCHANT}    ${account_number}    ${invoice_number}

Simulate Payment Failure
[Arguments]    ${account_number}    ${invoice_number}    ${error_code}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${error_code}

Send Payment Failure Notification To Merchant
[Arguments]    ${merchant_email}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${merchant_email}    ${account_number}    ${invoice_number}

Check Merchant's Email For Failure Notification
[Arguments]    ${merchant_email}    ${failure_subject}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${merchant_email}    ${failure_subject}    ${nan}

Validate Notification Content
[Arguments]    ${failure_message}    ${account_number}    ${invoice_number}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${failure_message}    ${account_number}    ${invoice_number}
","The test case 'TC_104 Validate Merchant Receives Notification Upon Payment Failure' aims to ensure that merchants are promptly notified if a payment attempt fails. This functionality is crucial for maintaining the merchant's awareness of their transaction status and allows them to take necessary actions swiftly.

Key objectives of this test case include:
1. **Verification of Notification Trigger:** Confirm that a notification is triggered immediately after the payment failure occurs.
2. **Accuracy of Notification Content:** Ensure the notification includes critical details such as the account number, invoice number, and a clear failure message.
3. **Email Delivery and Content Validation:** Check that the email is successfully delivered to the merchant and validate the accuracy and clarity of the notification content.

By verifying this feature, the test supports the overall reliability and responsiveness of the payment system, enhancing the user experience for merchants dealing with failed transactions."
Build data-driven paynow test cases for Sterlingcooper Testcases TC_72 Validate Customer Can Apply Gift Card To Reduce Total Payment Amount,data-driven,TC_72 Validate Customer Can Apply Gift Card To Reduce Total Payment Amount,"*** Settings ***
Documentation    Validate TC_72 Validate Customer Can Apply Gift Card To Reduce Total Payment Amount
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_72 Validate Customer Can Apply Gift Card To Reduce Total Payment Amount
[Documentation]    Validate TC_72 Validate Customer Can Apply Gift Card To Reduce Total Payment Amount using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Apply Gift Card To Total Due Amount    ${gift_card_number}    ${invoice_number}    ${nan}
Validate Gift Card Applied And Total Reduced    ${total_due_after_gift_card}    ${invoice_number}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Apply Gift Card To Total Due Amount
[Arguments]    ${gift_card_number}    ${invoice_number}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${gift_card_number}    ${invoice_number}    ${nan}

Validate Gift Card Applied And Total Reduced
[Arguments]    ${total_due_after_gift_card}    ${invoice_number}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${total_due_after_gift_card}    ${invoice_number}    ${nan}

","### Summary of Test Case: TC_72 - Validate Customer Can Apply Gift Card To Reduce Total Payment Amount

**Purpose:**

The primary objective of Test Case TC_72 is to verify that the system allows a customer to apply the balance from a gift card towards reducing the total payment amount due for an invoice. This functionality is important for providing a seamless and flexible payment experience to the customers.

**Key Points:**
1. **Gift Card Application:** Ensure that the payment system correctly processes the application of a gift card and deducts the appropriate amount from the total due.
2. **Balance Accuracy:** Confirm that the total due amount is recalculated accurately after the gift card is applied.
3. **User Interaction:** Validate that the steps to apply the gift card are intuitive and straightforward for the end user."
Create data-driven paynow test cases for RenterManager Testcases TC_06 Validate Manager Is Able To Generate Monthly Rent Statements,data-driven,TC_06 Validate Manager Is Able To Generate Monthly Rent Statements,"*** Settings ***
Documentation    Validate TC_06 Validate Manager Is Able To Generate Monthly Rent Statements
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_06 Validate Manager Is Able To Generate Monthly Rent Statements
[Documentation]    Validate TC_06 Validate Manager Is Able To Generate Monthly Rent Statements using the following steps
Send Request To Generate Statement    ${RENTER_ID_123}    ${2023-10}    ${nan}
Validate Statement Generation    ${Statement generated successfully}    ${nan}    ${nan}
Verify Statement Details    ${Statement_ID}    ${RENTER_ID_123}    ${2023-10}
Send Statement To Renter    ${Statement_ID}    ${RENTER_EMAIL}    ${nan}
Validate Email Receipt    ${Email sent successfully}    ${nan}    ${nan}

*** Keywords ***
Send Request To Generate Statement
[Arguments]    ${RENTER_ID_123}    ${2023-10}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${RENTER_ID_123}    ${2023-10}    ${nan}

Validate Statement Generation
[Arguments]    ${Statement generated successfully}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Statement generated successfully}    ${nan}    ${nan}

Verify Statement Details
[Arguments]    ${Statement_ID}    ${RENTER_ID_123}    ${2023-10}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Statement_ID}    ${RENTER_ID_123}    ${2023-10}

Send Statement To Renter
[Arguments]    ${Statement_ID}    ${RENTER_EMAIL}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Statement_ID}    ${RENTER_EMAIL}    ${nan}

Validate Email Receipt
[Arguments]    ${Email sent successfully}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Email sent successfully}    ${nan}    ${nan}
","The test case 'TC_06 Validate Manager Is Able To Generate Monthly Rent Statements' aims to ensure that property managers can successfully generate and distribute monthly rent statements to their tenants.

**Purpose:**
1. **Rent Management:** To confirm that the system supports the generation of accurate and timely rent statements, which is essential for managing tenant payments and maintaining financial records.
2. **Communication Efficiency:** To ensure that the rent statement can be sent via email to the tenant, improving communication and reducing the need for physical document distribution.
3. **Data Accuracy:** To validate that the details within the generated rent statement are accurate and correspond to the correct tenant and billing period.
"
Create data-driven clientcentral_testcases for virtual terminal Testcases TC_02 Validate Merchant Is Unable To Process Payment With Expired Credit Card,data-driven,TC_02 Validate Merchant Is Unable To Process Payment With Expired Credit Card,"*** Settings ***
Documentation    Validate TC_02 Validate Merchant Is Unable To Process Payment With Expired Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Merchant Is Unable To Process Payment With Expired Credit Card
[Documentation]    Validate TC_02 Validate Merchant Is Unable To Process Payment With Expired Credit Card using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}
Select Module    ${Virtual Terminal}    ${nan}    ${}
Search Customer In Virtual Terminal    ${account_number}    ${nan}    ${}
Enter Amount For Payment    ${Payment}    ${100.00}    ${}
Select Payment Method    ${Credit Card}    ${nan}    ${}
Enter Credit Card Details    ${EXPIRED_CREDIT_CARD_DETAILS}    ${nan}    ${}
Validate Error Message For Expired Card    ${Your credit card has expired. Please use another card.}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${}

Select Module
[Arguments]    ${Virtual Terminal}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Virtual Terminal}    ${nan}    ${}

Search Customer In Virtual Terminal
[Arguments]    ${account_number}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${}

Enter Amount For Payment
[Arguments]    ${Payment}    ${100.00}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Payment}    ${100.00}    ${}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${}

Enter Credit Card Details
[Arguments]    ${EXPIRED_CREDIT_CARD_DETAILS}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${EXPIRED_CREDIT_CARD_DETAILS}    ${nan}    ${}

Validate Error Message For Expired Card
[Arguments]    ${Your credit card has expired. Please use another card.}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Your credit card has expired. Please use another card.}    ${nan}    ${}

","The test case 'TC_02 Validate Merchant Is Unable To Process Payment With Expired Credit Card' aims to ensure that the payment processing system correctly identifies and rejects transactions initiated using expired credit cards.

### Purpose:"
Create data-driven clientcentral test cases for account management Testcases TC_89 Validate Merchant Can Update Account Information,data-driven,TC_89 Validate Merchant Can Update Account Information,"*** Settings ***
Documentation    Validate TC_89 Validate Merchant Can Update Account Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser93
${VALID_PASSWORD}   topsecret

*** Test Cases ***
TC_89 Validate Merchant Can Update Account Information
[Documentation]    Validate TC_89 Validate Merchant Can Update Account Information using the following steps
Send Request To Create Customer    ${NEW_MERCHANT}    ${nan}    ${nan}
Authenticate Merchant Account    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Update Account Information    ${NEW_MERCHANT}    ${new_email}    ${new_phone}
Validate Account Information    ${NEW_MERCHANT}    ${new_email}    ${new_phone}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${NEW_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_MERCHANT}    ${nan}    ${nan}

Authenticate Merchant Account
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Update Account Information
[Arguments]    ${NEW_MERCHANT}    ${new_email}    ${new_phone}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_MERCHANT}    ${new_email}    ${new_phone}

Validate Account Information
[Arguments]    ${NEW_MERCHANT}    ${new_email}    ${new_phone}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${NEW_MERCHANT}    ${new_email}    ${new_phone}

","The test case 'TC_89 Validate Merchant Can Update Account Information' is designed to confirm that merchants are able to successfully update their account details using the platform.

### Purpose:"
Build data-driven clientcentral_testcases for user authentication Testcases TC_27 Validate User Is Able To Login With Valid Credentials,data-driven,TC_27 Validate User Is Able To Login With Valid Credentials,"*** Settings ***
Documentation    Validate TC_27 Validate User Is Able To Login With Valid Credentials
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secretpassword

*** Test Cases ***
TC_27 Validate User Is Able To Login With Valid Credentials
[Documentation]    Validate TC_27 Validate User Is Able To Login With Valid Credentials using the following steps
Open Login Page    ${nan}    ${nan}    ${nan}
Enter Username    ${VALID_USER}    ${nan}    ${nan}
Enter Password    ${VALID_PASSWORD}    ${nan}    ${nan}
Click Login Button    ${nan}    ${nan}    ${nan}
Validate User Is Redirected To Dashboard    ${nan}    ${nan}    ${nan}

*** Keywords ***
Open Login Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    Opening login page    ${nan}    ${nan}

Enter Username
[Arguments]    ${VALID_USER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description","**Summary for Test Case 'TC_27 Validate User Is Able To Login With Valid Credentials'**

**Purpose:**
The primary objective of this test case is to validate that a user can successfully log in to the system using valid credentials. This involves ensuring that authenticated users are correctly redirected to their dashboard upon entering the correct username and password, confirming that the login functionality is working as expected.

**Key Points:**
1. **User Authentication:** Validate that the system verifies the user credentials properly and grants access to legitimate users.
2. **Redirection:** Ensure that, upon successful login, the user is redirected to the appropriate dashboard, consistent with the system's user flow design.
3. **User Interface:** Confirm that all UI elements involved in the login process (e.g., login fields, buttons) are functioning correctly and leading to the expected outcome.
4. **Security:** Ensure that any security measures for password protection and data handling during login are in place and functioning as intended."
Validate data-driven clientcentral_testcases for customers Testcases TC_53 Validate Merchant Can Update Customer Details Successfully,data-driven,TC_53 Validate Merchant Can Update Customer Details Successfully,"*** Settings ***
Documentation    Validate TC_53 Validate Merchant Can Update Customer Details Successfully
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_53 Validate Merchant Can Update Customer Details Successfully
[Documentation]    Validate TC_53 Validate Merchant Can Update Customer Details Successfully using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Edit Customer Name    ${NEW_NAME}    ${nan}    ${nan}
Edit Customer Email    ${NEW_EMAIL}    ${nan}    ${nan}
Save Updated Customer Details    ${nan}    ${nan}    ${nan}
Validate Updated Customer Name    ${NEW_NAME}    ${nan}    ${nan}
Validate Updated Customer Email    ${NEW_EMAIL}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Edit Customer Name
[Arguments]    ${NEW_NAME}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_NAME}    ${nan}    ${nan}

Edit Customer Email
[Arguments]    ${NEW_EMAIL}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_EMAIL}    ${nan}    ${nan}

Save Updated Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Updated Customer Name
[Arguments]    ${NEW_NAME}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${NEW_NAME}    ${nan}    ${nan}

Validate Updated Customer Email
[Arguments]    ${NEW_EMAIL}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${NEW_EMAIL}    ${nan}    ${nan}
","### Summary: TC_53 Validate Merchant Can Update Customer Details Successfully

**Purpose:**

This test case aims to ensure that merchants can effectively update their customer details within the system. Verifying this functionality is crucial for maintaining accurate and up-to-date customer records, which in turn supports customer relationship management and communication.

**Objective:**

1. **Edit Functionality Verification:** Confirm that the system allows merchants to access and edit customer details (name and email) accurately.

2. **Saving Updates:** Ensure that any changes made to the customer details are saved properly and reflected in the system.

3. **Validation of Updates:** After saving, validate that the updated customer details (name and email) are correctly displayed within the customer records.

4. **User Experience:** Verify that the process for updating customer details is intuitive and robust, providing a seamless experience for the user."
Generate data-driven payment_processing test cases for customers Testcases TC_12 Validate User Can Process Payment Without Discount Using Credit Card,data-driven,TC_12 Validate User Can Process Payment Without Discount Using Credit Card,"*** Settings ***
Documentation    Validate TC_12 Validate User Can Process Payment Without Discount Using Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate User Can Process Payment Without Discount Using Credit Card
[Documentation]    Validate TC_12 Validate User Can Process Payment Without Discount Using Credit Card using the following steps
Generate Random Customer Details    ${GLOBAL_TRADERS}    ${nan}    ${nan}
Launch Payment Processing Application    ${GLOBAL_TRADERS}    ${nan}    ${nan}
Enter Customer Details    ${customer_details}    ${GLOBAL_TRADERS}    ${nan}
Select Payment Type    ${Full Payment}    ${nan}    ${nan}
Add Invoice Details    ${54321}    ${1500}    ${1}
Select Payment Method    ${Credit Card}    ${nan}    ${nan}
Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
Validate Total Charges Under Summary Of Payment    ${$15.00}    ${nan}    ${nan}
Process Invoice Payment    ${nan}    ${nan}    ${nan}
Validate Details In Generated Payment Receipt    ${Full Payment}    ${54*****21}    ${Credit Card}

*** Keywords ***
Generate Random Customer Details
[Arguments]    ${GLOBAL_TRADERS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBAL_TRADERS}    ${nan}    ${nan}

Launch Payment Processing Application
[Arguments]    ${GLOBAL_TRADERS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBAL_TRADERS}    ${nan}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${GLOBAL_TRADERS}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${GLOBAL_TRADERS}    ${nan}

Select Payment Type
[Arguments]    ${Full Payment}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Full Payment}    ${nan}    ${nan}

Add Invoice Details
[Arguments]    ${54321}    ${1500}    ${1}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${54321}    ${1500}    ${1}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
[Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Validate Total Charges Under Summary Of Payment
[Arguments]    ${$15.00}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${$15.00}    ${nan}    ${nan}

Process Invoice Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Details In Generated Payment Receipt
[Arguments]    ${Full Payment}    ${54*****21}    ${Credit Card}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Full Payment}    ${54*****21}    ${Credit Card}

","Test Case 'TC_12 Validate User Can Process Payment Without Discount Using Credit Card' aims to confirm that a user is able to complete a payment using a credit card without availing any discount.

**Purpose**:"
Generate data-driven clientcentral_testcases for user management Testcases TC_07 Validate Merchant Is Able To Update Customer Email Address,data-driven,TC_07 Validate Merchant Is Able To Update Customer Email Address,"*** Settings ***
Documentation    Validate TC_07 Validate Merchant Is Able To Update Customer Email Address
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Merchant Is Able To Update Customer Email Address
[Documentation]    Validate TC_07 Validate Merchant Is Able To Update Customer Email Address using the following steps
Send Request To Create Customer    ${OMNICORP}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${OMNICORP}    ${account_number}    ${nan}
Select Module    ${Customers}    ${nan}    ${nan}
Find Customer By Account Number    ${account_number}    ${nan}    ${nan}
Update Customer Email Address    ${account_number}    ${new_email_address}    ${nan}
Validate Email Address Updated    ${account_number}    ${new_email_address}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${OMNICORP}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${OMNICORP}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP}    ${account_number}    ${nan}

Select Module
[Arguments]    ${Customers}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Customers}    ${nan}    ${nan}

Find Customer By Account Number
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Update Customer Email Address
[Arguments]    ${account_number}    ${new_email_address}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${new_email_address}    ${nan}

Validate Email Address Updated
[Arguments]    ${account_number}    ${new_email_address}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${new_email_address}    ${nan}

","The test case 'TC_07 Validate Merchant Is Able To Update Customer Email Address' is designed to verify that merchants can successfully update the email address associated with an existing customer account within their system.

### Purpose:"
Build data-driven clientcentral_testcases for customer orders Testcases TC_07 Validate Merchant Can Successfully Place And View Multiple Orders,data-driven,TC_07 Validate Merchant Can Successfully Place And View Multiple Orders,"*** Settings ***
Documentation    Validate TC_07 Validate Merchant Can Successfully Place And View Multiple Orders
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Merchant Can Successfully Place And View Multiple Orders
[Documentation]    Validate TC_07 Validate Merchant Can Successfully Place And View Multiple Orders using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Place Multiple Orders Through API    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment For Orders    ${STERLING_COOPER}    ${account_number}    ${orders_list.0}
Get OrderId    ${response}    ${nan}    ${nan}
Navigate To Customer Orders Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Orders Page    ${Orders}    ${nan}    ${nan}
Validate Order Details In List    ${order_id}    ${nan}    ${nan}
Validate Total Orders Count    ${total_orders}    ${nan}    ${nan}
Validate Orders Pagination    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Place Multiple Orders Through API
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Orders
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${orders_list.0}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${orders_list.0}

Get OrderId
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Navigate To Customer Orders Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Orders Page
[Arguments]    ${Orders}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Orders}    ${nan}    ${nan}

Validate Order Details In List
[Arguments]    ${order_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_id}    ${nan}    ${nan}

Validate Total Orders Count
[Arguments]    ${total_orders}    ${nan}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${total_orders}    ${nan}    ${nan}

Validate Orders Pagination
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_07 Validate Merchant Can Successfully Place And View Multiple Orders' focuses on verifying that a merchant is able to correctly place and view multiple orders within the system. The objectives of this test case include:

1. To confirm that the functionality for placing multiple orders via API is working as expected.
2. To validate that the system processes payments for these orders correctly.
3. To ensure that the order details, including the list of orders, are accurately displayed on the customer orders page.
4. To check that the total number of orders is correctly updated and reflected.
5. To guarantee that pagination within the orders section functions smoothly, allowing the merchant to navigate through multiple pages of orders without issues.

This test ensures the end-to-end functionality of order handling within the system, aiming for a seamless and error-free experience for the merchant."
Create data-driven clientcentral_testcases for invoice generation Testcases TC_07 Validate Merchant Can Generate Invoice With Multiple Line Items,data-driven,TC_07 Validate Merchant Can Generate Invoice With Multiple Line Items,"*** Settings ***
Documentation    Validate TC_07 Validate Merchant Can Generate Invoice With Multiple Line Items
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Merchant Can Generate Invoice With Multiple Line Items
[Documentation]    Validate TC_07 Validate Merchant Can Generate Invoice With Multiple Line Items using the following steps
Send Request To Create Customer    ${adams_corp}    ${5}    ${}
Send Request To Create Empty Invoice    ${adams_corp}    ${account_number}    ${}
Add Line Item To Invoice    ${Item_1}    ${100}    ${2}
Add Line Item To Invoice    ${Item_2}    ${200}    ${3}
Validate Invoice Total Amount    ${account_number}    ${invoice_number}    ${800}
Submit Invoice    ${account_number}    ${invoice_number}    ${}
Validate Invoice Submission Status    ${account_number}    ${invoice_number}    ${Submitted}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${adams_corp}    ${5}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${adams_corp}    ${5}    ${}

Send Request To Create Empty Invoice
[Arguments]    ${adams_corp}    ${account_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${adams_corp}    ${account_number}    ${}

Add Line Item To Invoice
[Arguments]    ${Item_1}    ${100}    ${2}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Item_1}    ${100}    ${2}

Add Line Item To Invoice
[Arguments]    ${Item_2}    ${200}    ${3}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Item_2}    ${200}    ${3}

Validate Invoice Total Amount
[Arguments]    ${account_number}    ${invoice_number}    ${800}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${800}

Submit Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Validate Invoice Submission Status
[Arguments]    ${account_number}    ${invoice_number}    ${Submitted}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${Submitted}

","**Test Case Name**: TC_07 Validate Merchant Can Generate Invoice With Multiple Line Items
"
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_10 Validate Customer Is Able To Make Payment Without CVV Number,data-driven,TC_10 Validate Customer Is Able To Make Payment Without CVV Number,"*** Settings ***
Documentation    Validate TC_10 Validate Customer Is Able To Make Payment Without CVV Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Customer Is Able To Make Payment Without CVV Number
[Documentation]    Validate TC_10 Validate Customer Is Able To Make Payment Without CVV Number using the following steps
Send Request To Initiate Payment    ${STERLING_COOPER_MERCHANT}    ${payment_details}    ${}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${payment_details}    ${}
Enter Payment Details    ${card_number}    ${expiry_date}    ${nan}
Validate Payment Process Result    ${payment_status}    ${expected_status}    ${}

*** Keywords ***
Send Request To Initiate Payment
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${payment_details}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${payment_details}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${payment_details}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${payment_details}    ${}

Enter Payment Details
[Arguments]    ${card_number}    ${expiry_date}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${card_number}    ${expiry_date}    ${nan}

Validate Payment Process Result
[Arguments]    ${payment_status}    ${expected_status}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${payment_status}    ${expected_status}    ${}

","The test case ""TC_10 Validate Customer Is Able To Make Payment Without CVV Number"" is designed to verify the system's handling of a payment process when the CVV number is not provided. The purpose is to evaluate the robustness and error-handling capabilities of the payment gateway, ensuring it responds correctly to incomplete payment details. This validation is critical for maintaining security and compliance with payment processing standards, as well as improving user experience by providing precise feedback when essential details are missing."
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_78 Validate Customer Can Delete Saved Credit Card Payment Method,data-driven,TC_78 Validate Customer Can Delete Saved Credit Card Payment Method,"*** Settings ***
Documentation    Validate TC_78 Validate Customer Can Delete Saved Credit Card Payment Method
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_78 Validate Customer Can Delete Saved Credit Card Payment Method
[Documentation]    Validate TC_78 Validate Customer Can Delete Saved Credit Card Payment Method using the following steps
Send Request To Create Customer    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_CLIENT}    ${nan}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Pay The Invoice Using Credit Card And Save The Payment Method    ${integrated_client}    ${4111111111111111}    ${12/26}
Navigate To Saved Payment Methods    ${nan}    ${nan}    ${nan}
Delete Saved Credit Card    ${411111}    ${card_nickname}    ${nan}
Validate Credit Card Is Deleted    ${411111}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_CLIENT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_CLIENT}    ${nan}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using Credit Card And Save The Payment Method
[Arguments]    ${integrated_client}    ${4111111111111111}    ${12/26}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_client}    ${4111111111111111}    ${12/26}

Navigate To Saved Payment Methods
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Delete Saved Credit Card
[Arguments]    ${411111}    ${card_nickname}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${411111}    ${card_nickname}    ${nan}

Validate Credit Card Is Deleted
[Arguments]    ${411111}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${411111}    ${nan}    ${nan}

","The test case 'TC_78 Validate Customer Can Delete Saved Credit Card Payment Method' aims to ensure that customers who have previously saved their credit card details for future use can successfully delete them when they wish to remove outdated or unnecessary payment methods.

### Purpose:"
Create data-driven refund testcase for Sterlingcooper Testcases TC_44 Validate Customer Is Able To Request Refund For An Invoice,data-driven,TC_44 Validate Customer Is Able To Request Refund For An Invoice,"*** Settings ***
Documentation    Validate TC_44 Validate Customer Is Able To Request Refund For An Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_44 Validate Customer Is Able To Request Refund For An Invoice
[Documentation]    Validate TC_44 Validate Customer Is Able To Request Refund For An Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Send Request To Process Payment Through Credit Card    ${STERLING_COOPER_MERCHANT}    ${account_number}    ${invoice_number}
Launch Customer Portal Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Refund Request    ${account_number}    ${invoice_number}    ${nan}
Submit Refund Request    ${nan}    ${nan}    ${nan}
Validate Refund Request Status    ${invoice_number}    ${Refund Requested}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Send Request To Process Payment Through Credit Card
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${account_number}    ${invoice_number}

Launch Customer Portal Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Refund Request
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Submit Refund Request
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Refund Request Status
[Arguments]    ${invoice_number}    ${Refund Requested}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${Refund Requested}    ${nan}

","**Test Case Summary: TC_44 Validate Customer Is Able To Request Refund For An Invoice**

**Purpose:**
The primary objective of this test case is to ensure that a customer has the ability to request a refund for an invoice through the customer portal. This functionality is fundamental in providing customers with a straightforward and reliable way to initiate refund requests for transactions that may require reversals, such as in the case of erroneous charges or returned products. By validating this feature, we ensure that the refund request process is accessible, efficient, and functioning correctly within the system.

**Key Points:**
1. **Trigger Conditions:**
- The scenario generally involves a customer logging into the portal and navigating to the invoice for which they wish to request a refund.
- The ""Request Refund"" option must be presented and allow the customer to submit their request successfully.

2. **Expected Outcomes:**
- Upon submitting the refund request, the system should acknowledge receipt of the request and change the status of the invoice to reflect that a refund has been requested.
- The system should provide feedback to the customer regarding the status of their refund request."
Build data-driven clientcentral_testcases for customers Testcases TC_55 Validate Merchant Can Update Shipping Address After Order Placement,data-driven,TC_55 Validate Merchant Can Update Shipping Address After Order Placement,"*** Settings ***
Documentation    Validate TC_55 Validate Merchant Can Update Shipping Address After Order Placement
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_55 Validate Merchant Can Update Shipping Address After Order Placement
[Documentation]    Validate TC_55 Validate Merchant Can Update Shipping Address After Order Placement using the following steps
Send Request To Create Customer    ${MERCHANTCENTRAL}    ${nan}    ${nan}
Send Request To Create Order For Customer    ${MERCHANTCENTRAL}    ${account_number}    ${nan}
Generate Random Shipping Address    ${nan}    ${nan}    ${nan}
Launch MerchantCentral Application    ${MERCHANTCENTRAL}    ${nan}    ${nan}
Enter Order Number And Access Shipping Details    ${account_number}    ${order_number}    ${nan}
Send Request To Update Shipping Address    ${integrated_merchant}    ${account_number}    ${new_shipping_address}
Navigate To Order Details Page    ${Order History}    ${nan}    ${nan}
Validate Updated Shipping Address Is Displayed    ${order_number}    ${new_shipping_address}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${MERCHANTCENTRAL}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${MERCHANTCENTRAL}    ${nan}    ${nan}

Send Request To Create Order For Customer
[Arguments]    ${MERCHANTCENTRAL}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${MERCHANTCENTRAL}    ${account_number}    ${nan}

Generate Random Shipping Address
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch MerchantCentral Application
[Arguments]    ${MERCHANTCENTRAL}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${MERCHANTCENTRAL}    ${nan}    ${nan}

Enter Order Number And Access Shipping Details
[Arguments]    ${account_number}    ${order_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${order_number}    ${nan}

Send Request To Update Shipping Address
[Arguments]    ${integrated_merchant}    ${account_number}    ${new_shipping_address}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${account_number}    ${new_shipping_address}

Navigate To Order Details Page
[Arguments]    ${Order History}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Order History}    ${nan}    ${nan}

Validate Updated Shipping Address Is Displayed
[Arguments]    ${order_number}    ${new_shipping_address}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_number}    ${new_shipping_address}    ${nan}

","**Summary of Test Case 'TC_55 Validate Merchant Can Update Shipping Address After Order Placement':**

**Purpose:**
The primary objective of this test case is to ensure that a merchant can successfully update the shipping address for an order after it has been placed. This functionality is crucial for accommodating changes requested by customers and ensuring the correct delivery of orders.

**Key Points:**
1. **Order Placement:** Confirm that an order is placed successfully and details are recorded correctly.

2. **Shipping Address Updates:** Verify that the merchant has the capability to modify the shipping address associated with the order.

3. **Validation:** Ensure that the updated shipping address is correctly reflected in the order history and details, maintaining the accuracy of delivery information."
Build data-driven clientcentral_testcases for customer data validation Testcases TC_20 Validate Customer Details Are Correctly Updated,data-driven,TC_20 Validate Customer Details Are Correctly Updated,"*** Settings ***
Documentation    Validate TC_20 Validate Customer Details Are Correctly Updated
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser2
${VALID_PASSWORD}   secret123

*** Test Cases ***
TC_20 Validate Customer Details Are Correctly Updated
[Documentation]    Validate TC_20 Validate Customer Details Are Correctly Updated using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${initial_customer_data}    ${nan}
Send Request To Update Customer Details    ${OMNICORP_MERCHANT}    ${updated_customer_data}    ${customer_id}
Validate Updated Customer Details    ${customer_id}    ${updated_customer_data}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${OMNICORP_MERCHANT}    ${initial_customer_data}    ${nan}
[Return]    ${customer_id}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${initial_customer_data}    ${nan}

Send Request To Update Customer Details
[Arguments]    ${OMNICORP_MERCHANT}    ${updated_customer_data}    ${customer_id}
[Return]    ${response}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${updated_customer_data}    ${customer_id}

Validate Updated Customer Details
[Arguments]    ${customer_id}    ${updated_customer_data}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_id}    ${updated_customer_data}    ${nan}

","The test case 'TC_20 Validate Customer Details Are Correctly Updated' aims to verify that the system accurately updates the details of a customer and appropriately reflects those changes. This is crucial for maintaining accurate and up-to-date customer information, which is essential for business operations and customer satisfaction.

Key objectives include:
1. Ensuring that initial customer details are correctly created.
2. Verifying that the update process correctly modifies the customer details.
3. Validating that the updated details are accurately reflected in the system.

This test case supports maintaining data accuracy and integrity within the customer management system, thereby helping businesses manage customer data efficiently."
Generate data-driven paynow test cases for QuickPay Testcases TC_07 Validate Express Payment Without Saving Customer Information,data-driven,TC_07 Validate Express Payment Without Saving Customer Information,"*** Settings ***
Documentation    Validate TC_07 Validate Express Payment Without Saving Customer Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Express Payment Without Saving Customer Information
[Documentation]    Validate TC_07 Validate Express Payment Without Saving Customer Information using the following steps
Send Request To Create Customer    ${EXPRESSPAY_MERCHANT}    ${4}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${EXPRESSPAY_MERCHANT}    ${4}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch ExpressPay Application    ${EXPRESSPAY_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Enter Customer Details    ${customer_details}    ${EXPRESSPAY_MERCHANT}    ${nan}
Select Payment Method    ${Credit Card}    ${nan}    ${nan}
Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
Confirm No Customer Information Saved    ${nan}    ${nan}    ${nan}
Process Express Payment    ${nan}    ${nan}    ${nan}
Validate Express Payment Status    ${account_number}    ${invoice_number}    ${Completed}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${EXPRESSPAY_MERCHANT}    ${4}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${EXPRESSPAY_MERCHANT}    ${4}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${EXPRESSPAY_MERCHANT}    ${4}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${EXPRESSPAY_MERCHANT}    ${4}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch ExpressPay Application
[Arguments]    ${EXPRESSPAY_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${EXPRESSPAY_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${EXPRESSPAY_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${EXPRESSPAY_MERCHANT}    ${nan}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
[Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Confirm No Customer Information Saved
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Process Express Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Express Payment Status
[Arguments]    ${account_number}    ${invoice_number}    ${Completed}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${Completed}
",**Test Case TC_07: Validate Express Payment
Generate data-driven paynow test cases for Payments Testcases TC_15 Validate Customer Is Able To Upload And Pay Bulk Invoices Through CSV,data-driven,TC_15 Validate Customer Is Able To Upload And Pay Bulk Invoices Through CSV,"*** Settings ***
Documentation    Validate TC_15 Validate Customer Is Able To Upload And Pay Bulk Invoices Through CSV
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Customer Is Able To Upload And Pay Bulk Invoices Through CSV
[Documentation]    Validate TC_15 Validate Customer Is Able To Upload And Pay Bulk Invoices Through CSV using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Generate Bulk Invoices CSV    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${invoice_list}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Upload Bulk Invoices CSV    ${account_number}    ${invoice_list}    ${CSV_FILE_PATH}
Validate Bulk Invoice Upload Success    ${account_number}    ${invoice_list}    ${nan}
Pay All Uploaded Invoices Using Saved Payment Method    ${account_number}    ${invoice_list}    ${SAVED_PAYMENT_METHOD}
Validate Payment Status For All Invoices    ${account_number}    ${invoice_list}    ${Paid}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Generate Bulk Invoices CSV
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${invoice_list}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${invoice_list}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Upload Bulk Invoices CSV
[Arguments]    ${account_number}    ${invoice_list}    ${CSV_FILE_PATH}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_list}    ${CSV_FILE_PATH}

Validate Bulk Invoice Upload Success
[Arguments]    ${account_number}    ${invoice_list}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_list}    ${nan}

Pay All Uploaded Invoices Using Saved Payment Method
[Arguments]    ${account_number}    ${invoice_list}    ${SAVED_PAYMENT_METHOD}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_list}    ${SAVED_PAYMENT_METHOD}

Validate Payment Status For All Invoices
[Arguments]    ${account_number}    ${invoice_list}    ${Paid}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_list}    ${Paid}

","The test case ""TC_15 Validate Customer Is Able To Upload And Pay Bulk Invoices Through CSV"" aims to ensure that customers can successfully upload bulk invoices via a CSV file and make payments for all the uploaded invoices in one go.

The purpose of this test case is to confirm that:
1. The system allows customers to upload a CSV file containing multiple invoice details.
2. The upload process correctly reads and validates the invoice data from the CSV file.
3. The customer can use a saved payment method to pay for all the uploaded invoices collectively.
4. The system accurately updates the payment status for all the invoices once the payment is processed.
5. The entire process is efficient and user-friendly, ensuring smooth handling of bulk invoice payments."
Create data-driven clientcentral_testcases for payments Testcases TC_15 Validate Payment Reversal Process Works Correctly in PayNOW,data-driven,TC_15 Validate Payment Reversal Process Works Correctly in PayNOW,"*** Settings ***
Documentation    Validate TC_15 Validate Payment Reversal Process Works Correctly in PayNOW
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Payment Reversal Process Works Correctly in PayNOW
[Documentation]    Validate TC_15 Validate Payment Reversal Process Works Correctly in PayNOW using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment For Invoice    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Payment Transaction Page    ${account_number}    ${transaction_id}    ${nan}
Initiate Payment Reversal    ${transaction_id}    ${nan}    ${nan}
Confirm Reversal Action    ${nan}    ${nan}    ${nan}
Validate Reversal Is Success    ${transaction_id}    ${reversed_status}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Invoice
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Payment Transaction Page
[Arguments]    ${account_number}    ${transaction_id}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${transaction_id}    ${nan}

Initiate Payment Reversal
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Confirm Reversal Action
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Reversal Is Success
[Arguments]    ${transaction_id}    ${reversed_status}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${reversed_status}    ${nan}

","The test case 'TC_15 Validate Payment Reversal Process Works Correctly in PayNOW' aims to ensure that merchants can successfully reverse a payment transaction in PayNOW. This is essential for handling refunds, chargebacks, or transaction errors.

**Purpose:**
- **Verification:** To confirm that the payment reversal functionality works as expected and allows the user to reverse payments without any issues.
- **Functionality:** To ensure the end-to-end process of reversing a payment, from initiating the reversal action to confirming its success.
- **User Experience:** To validate that the user interface provides clear prompts and confirmations throughout the payment reversal process and that the system accurately reflects the reversed transaction status."
Create data-driven clientcentral_testcases for transaction validation Testcases TC_13 Validate Merchant Can View Processed Invoice In Transaction History,data-driven,TC_13 Validate Merchant Can View Processed Invoice In Transaction History,"*** Settings ***
Documentation    Validate TC_13 Validate Merchant Can View Processed Invoice In Transaction History
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_13 Validate Merchant Can View Processed Invoice In Transaction History
[Documentation]    Validate TC_13 Validate Merchant Can View Processed Invoice In Transaction History using the following steps
Send Request To Create Customer    ${DUNDER_MIFFLIN}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${DUNDER_MIFFLIN}    ${account_number}    ${}
Process Payment For Invoice    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}
Go To Transaction History Module    ${DUNDER_MIFFLIN}    ${nan}    ${}
Validate Processed Invoice In History    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${account_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${account_number}    ${}

Process Payment For Invoice
[Arguments]    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}

Go To Transaction History Module
[Arguments]    ${DUNDER_MIFFLIN}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${nan}    ${}

Validate Processed Invoice In History
[Arguments]    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}

","## Test Case: TC_13 - Validate Merchant Can View Processed Invoice In Transaction History

### Purpose:
The purpose of this test case is to ensure that merchants can view and verify the details of processed invoices in their transaction history. This feature is crucial for tracking financial transactions and auditing purposes.

### Summary:
1. **Setup:**
- Ensure the merchant is logged into the system.
- Navigate to the section where transaction history is displayed.

2. **Execution Steps:**
- Verify that a new customer can be created.
- Verify that an invoice can be created for the customer.
- Confirm that a payment can be processed for the created invoice.
- Check that the transaction history module is accessible.
- Validate that the processed invoice appears in the transaction history with correct details."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_51 Validate Customer Can Filter Invoices By Date Range,data-driven,TC_51 Validate Customer Can Filter Invoices By Date Range,"*** Settings ***
Documentation    Validate TC_51 Validate Customer Can Filter Invoices By Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_51 Validate Customer Can Filter Invoices By Date Range
[Documentation]    Validate TC_51 Validate Customer Can Filter Invoices By Date Range using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Generate Multiple Invoices Through API    ${account_number}    ${integrated_merchant}    ${}
Generate Random Customer Details    ${nan}    ${nan}    ${}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Enter Account Number And Invoice    ${account_number}    ${invoice.0}    ${}
Apply Date Range Filter    ${start_date}    ${end_date}    ${}
Validate Filtered Invoices Are Within Date Range    ${invoice}    ${start_date}    ${end_date}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Generate Multiple Invoices Through API
[Arguments]    ${account_number}    ${integrated_merchant}    ${}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${account_number}    ${integrated_merchant}    ${}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice.0}    ${}
[Return]    ${float}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice.0}    ${}

Apply Date Range Filter
[Arguments]    ${start_date}    ${end_date}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${}

Validate Filtered Invoices Are Within Date Range
[Arguments]    ${invoice}    ${start_date}    ${end_date}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice}    ${start_date}    ${end_date}
","The purpose of the test case 'TC_51 Validate Customer Can Filter Invoices By Date Range' is to ensure that the functionality allowing customers to filter invoices by a specific date range is working as intended. This test verifies that the application accurately filters and displays invoices based on the selected date range, enhancing usability and data accuracy for the customer. Key objectives include:
"
Create data-driven clientcentral_testcases for recurring billing Testcases TC_75 Validate Customer Is Able To Set Up Recurring Billing,data-driven,TC_75 Validate Customer Is Able To Set Up Recurring Billing,"*** Settings ***
Documentation    Validate TC_75 Validate Customer Is Able To Set Up Recurring Billing
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_75 Validate Customer Is Able To Set Up Recurring Billing
[Documentation]    Validate TC_75 Validate Customer Is Able To Set Up Recurring Billing using the following steps
Send Request To Create Customer    ${NEXUS_BUSINESS}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${NEXUS_BUSINESS}    ${account_number}    ${nan}
Send Request To Process Payment Through Credit Card    ${NEXUS_BUSINESS}    ${account_number}    ${invoice_number}
Get Gatewayid    ${response}    ${nan}    ${nan}
Navigate To Recurring Billing Setup Page    ${gateway_id}    ${nan}    ${nan}
Enter Recurring Billing Details    ${billing_details}    ${nan}    ${nan}
Activate Recurring Billing    ${nan}    ${nan}    ${nan}
Validate Recurring Billing Is Set Up    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${NEXUS_BUSINESS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEXUS_BUSINESS}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${NEXUS_BUSINESS}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEXUS_BUSINESS}    ${account_number}    ${nan}

Send Request To Process Payment Through Credit Card
[Arguments]    ${NEXUS_BUSINESS}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEXUS_BUSINESS}    ${account_number}    ${invoice_number}

Get Gatewayid
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Navigate To Recurring Billing Setup Page
[Arguments]    ${gateway_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${gateway_id}    ${nan}    ${nan}

Enter Recurring Billing Details
[Arguments]    ${billing_details}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${billing_details}    ${nan}    ${nan}

Activate Recurring Billing
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Recurring Billing Is Set Up
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

","**Test Case Summary: TC_75 Validate Customer Is Able To Set Up Recurring Billing**

**Purpose:**
The main goal of this test case is to verify that customers can successfully set up and activate a recurring billing option within the application. This functionality is crucial for the convenience of customers who prefer automated regular payments instead of manual ones. Validating this feature ensures a smooth user experience and reliable automated payments system.

**Key Points:**
1. **User Authentication:** Ensure the customer is correctly authenticated before proceeding with the setup.
2. **Setup Navigation:** Confirm the customer can navigate to the recurring billing setup section.
3. **Billing Information:** Verify that all necessary billing details are entered correctly.
4. **Activation:** Ensure that the recurring billing can be activated without issues.
5. **Confirmation:** Validate that the recurring billing setup is confirmed and functioning as intended."
Build data-driven paynow test cases for Sterlingcooper Testcases TC_89 Validate Customer Can Update Payment Method Details,data-driven,TC_89 Validate Customer Can Update Payment Method Details,"*** Settings ***
Documentation    Validate TC_89 Validate Customer Can Update Payment Method Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_89 Validate Customer Can Update Payment Method Details
[Documentation]    Validate TC_89 Validate Customer Can Update Payment Method Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_CLIENT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Save Payment Method For Future Use    ${customer_id}    ${PaymentMethodDetails}    ${nan}
Update Payment Method Details    ${customer_id}    ${new_PaymentMethodDetails}    ${nan}
Validate Payment Method Details Are Updated    ${customer_id}    ${new_PaymentMethodDetails}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_CLIENT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_CLIENT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_CLIENT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Save Payment Method For Future Use
[Arguments]    ${customer_id}    ${PaymentMethodDetails}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${PaymentMethodDetails}    ${nan}

Update Payment Method Details
[Arguments]    ${customer_id}    ${new_PaymentMethodDetails}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${new_PaymentMethodDetails}    ${nan}

Validate Payment Method Details Are Updated
[Arguments]    ${customer_id}    ${new_PaymentMethodDetails}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_id}    ${new_PaymentMethodDetails}    ${nan}

","**Test Case Summary:**

**Title:**
TC_89 Validate Customer Can Update Payment Method Details

**Purpose:**
The purpose of Test Case TC_89 is to ensure that a customer using the PayNow system can successfully update their saved payment method details. This test case focuses on the customer's ability to provide new payment information and verify that the system appropriately reflects these updates.

**Objectives:**
1. Validate that the user interface allows the customer to access and edit previously saved payment method details.
2. Confirm that the system successfully captures the updated payment details and stores them correctly.
3. Ensure that the updated payment information is displayed accurately whenever the payment method is accessed or used in future transactions."
Create data-driven registration test cases for WebApp Testcases TC_33 Validate User Is Able To Register With Valid Details,data-driven,TC_33 Validate User Is Able To Register With Valid Details,"*** Settings ***
Documentation    Validate TC_33 Validate User Is Able To Register With Valid Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}         testuser
${VALID_PASSWORD}     secret
${VALID_EMAIL}        testuser@example.com
${FIRST_NAME}         John
${LAST_NAME}          Doe

*** Test Cases ***
TC_33 Validate User Is Able To Register With Valid Details
[Documentation]    Validate TC_33 Validate User Is Able To Register With Valid Details using the following steps
Launch Registration Page    ${nan}    ${nan}    ${}
Enter User Details    ${FIRST_NAME}    ${LAST_NAME}    ${VALID_EMAIL}
Set User Credentials    ${VALID_USER}    ${VALID_PASSWORD}    ${secret_question}
Submit Registration Form    ${nan}    ${nan}    ${}
Validate Registration Success Message    ${expected_success_message}    ${nan}    ${}

*** Keywords ***
Launch Registration Page
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    Launching Registration Page    ${nan}    ${nan}

Enter User Details
[Arguments]    ${FIRST_NAME}    ${LAST_NAME}    ${VALID_EMAIL}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${FIRST_NAME}    ${LAST_NAME}    ${VALID_EMAIL}

Set User Credentials
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${secret_question}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${secret_question}

Submit Registration Form
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    Submitting Registration Form    ${nan}    ${nan}

Validate Registration Success Message
[Arguments]    ${expected_success_message}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${expected_success_message}    ${nan}    ${}

","The test case 'TC_33 Validate User Is Able To Register With Valid Details' aims to ensure that a user can register successfully in the WebApp using valid information. The primary goals of this test case are:
"
Validate data-driven paynow test cases for Globex Testcases TC_78 Validate Refund Process For Partially Paid Invoices,data-driven,TC_78 Validate Refund Process For Partially Paid Invoices,"*** Settings ***
Documentation    Validate TC_78 Validate Refund Process For Partially Paid Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_78 Validate Refund Process For Partially Paid Invoices
[Documentation]    Validate TC_78 Validate Refund Process For Partially Paid Invoices using the following steps
Send Request To Create Customer    ${GLOBEX_MERCHANT}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${account_number}    ${GLOBEX_MERCHANT}    ${}
Login To PayNOW And Make Partial Payment    ${account_number}    ${invoice_number}    ${amount}
Initiate Refund Process    ${account_number}    ${invoice_number}    ${refund_amount}
Validate Refund Status    ${account_number}    ${invoice_number}    ${refund_status}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${GLOBEX_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBEX_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${GLOBEX_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${GLOBEX_MERCHANT}    ${}

Login To PayNOW And Make Partial Payment
[Arguments]    ${account_number}    ${invoice_number}    ${amount}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${amount}

Initiate Refund Process
[Arguments]    ${account_number}    ${invoice_number}    ${refund_amount}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${refund_amount}

Validate Refund Status
[Arguments]    ${account_number}    ${invoice_number}    ${refund_status}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${refund_status}

","The purpose of the test case 'TC_78 Validate Refund Process For Partially Paid Invoices' is to verify the functionality of the refund process for invoices that have been partially paid. This ensures that:

1. **Refund Accuracy:** The system correctly refunds the specified amount for a partially paid invoice.
2. **Transaction Integrity:** Partial payments are properly tracked, and the refund process incorporates these correctly.
3. **User Notification:** Appropriate notifications and confirmations are shown to the user regarding the status of the refund.

The test case involves creating a customer, generating an invoice, making a partial payment, initiating a refund for that partial payment, and finally validating that the refund has been processed correctly."
Create data-driven paynow test cases for integrated customers Testcases TC_78 Validate Integrated Customer Is Able To Process The Split Payment With Multiple Payment Methods,data-driven,TC_78 Validate Integrated Customer Is Able To Process The Split Payment With Multiple Payment Methods,"*** Settings ***
Documentation    Validate TC_78 Validate Integrated Customer Is Able To Process The Split Payment With Multiple Payment Methods
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_78 Validate Integrated Customer Is Able To Process The Split Payment With Multiple Payment Methods
[Documentation]    Validate TC_78 Validate Integrated Customer Is Able To Process The Split Payment With Multiple Payment Methods using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
Select Payment Type    ${Split Payment}    ${nan}    ${nan}
Enter Split Payment Amounts    ${50}    ${30}    ${20}
Select First Payment Method    ${Credit Card}    ${nan}    ${nan}
Enter First Payment Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
Select Second Payment Method    ${ACH}    ${nan}    ${nan}
Enter Second Payment Details    ${ACH_DETAILS}    ${nan}    ${nan}
Select Third Payment Method    ${Debit Card}    ${nan}    ${nan}
Enter Third Payment Details    ${DEBIT_CARD_DETAILS}    ${nan}    ${nan}
Process Split Payment    ${nan}    ${nan}    ${nan}
Validate Details In Generated Payment Receipt    ${Split Payment (Credit Card, ACH, Debit Card)}    ${411111******1111}    ${Card}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}

Select Payment Type
[Arguments]    ${Split Payment}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Split Payment}    ${nan}    ${nan}

Enter Split Payment Amounts
[Arguments]    ${50}    ${30}    ${20}
[Return]    ${list}
[Documentation]    Keyword description
Log    ${50}    ${30}    ${20}

Select First Payment Method
[Arguments]    ${Credit Card}    ${nan}",
Create data-driven clientcentral_testcases for user management Testcases TC_12 Validate Admin Can Deactivate User Accounts,data-driven,TC_12 Validate Admin Can Deactivate User Accounts,"*** Settings ***
Documentation    Validate TC_12 Validate Admin Can Deactivate User Accounts
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${ADMIN_USER}       admin
${ADMIN_PASSWORD}   adminsecret

*** Test Cases ***
TC_12 Validate Admin Can Deactivate User Accounts
[Documentation]    Validate TC_12 Validate Admin Can Deactivate User Accounts using the following steps
Send Request To Create User    ${new_user}    ${email}    ${nan}
Send Request To Activate User Account    ${new_user}    ${nan}    ${nan}
Admin Login To Web Portal    ${ADMIN_USER}    ${ADMIN_PASSWORD}    ${nan}
Navigate To User Management Page    ${nan}    ${nan}    ${nan}
Select User Account    ${new_user}    ${nan}    ${nan}
Deactivate User Account    ${new_user}    ${nan}    ${nan}
Validate User Account Is Deactivated    ${new_user}    ${Deactivated}    ${nan}

*** Keywords ***
Send Request To Create User
[Arguments]    ${new_user}    ${email}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_user}    ${email}    ${nan}

Send Request To Activate User Account
[Arguments]    ${new_user}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_user}    ${nan}    ${nan}

Admin Login To Web Portal
[Arguments]    ${ADMIN_USER}    ${ADMIN_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ADMIN_USER}    ${ADMIN_PASSWORD}    ${nan}

Navigate To User Management Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Select User Account
[Arguments]    ${new_user}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_user}    ${nan}    ${nan}

Deactivate User Account
[Arguments]    ${new_user}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_user}    ${nan}    ${nan}

Validate User Account Is Deactivated
[Arguments]    ${new_user}    ${Deactivated}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_user}    ${Deactivated}    ${nan}

","The test case 'TC_12 Validate Admin Can Deactivate User Accounts' is designed to ensure that administrators of the system have the necessary permissions to deactivate user accounts. This involves verifying that an admin can log in to the platform, navigate to the user management section, select a user account, and successfully deactivate it. The purpose of this test is to confirm that the deactivation functionality works as intended and that changes in the user status are properly reflected in the system. This helps maintain proper user account management and ensures that inactive or unauthorized users are correctly handled."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_59 Validate Merchant is able to Refund a Specific Invoice Transaction,data-driven,TC_59 Validate Merchant is able to Refund a Specific Invoice Transaction,"*** Settings ***
Documentation    Validate TC_59 Validate Merchant is able to Refund a Specific Invoice Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_59 Validate Merchant is able to Refund a Specific Invoice Transaction
[Documentation]    Validate TC_59 Validate Merchant is able to Refund a Specific Invoice Transaction using the following steps
Send Request To Create Customer    ${DRAPER_ENTERPRISES}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${DRAPER_ENTERPRISES}    ${account_number}    ${nan}
Send Request To Process Payment Through Credit Card    ${DRAPER_ENTERPRISES}    ${account_number}    ${invoice_number}
Select Module    ${All Transactions}    ${nan}    ${nan}
Search Transaction    ${invoice_number}    ${nan}    ${nan}
Initiate Refund    ${account_number}    ${invoice_number}    ${nan}
Validate Refund Successful    ${account_number}    ${invoice_number}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DRAPER_ENTERPRISES}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DRAPER_ENTERPRISES}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${DRAPER_ENTERPRISES}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DRAPER_ENTERPRISES}    ${account_number}    ${nan}

Send Request To Process Payment Through Credit Card
[Arguments]    ${DRAPER_ENTERPRISES}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DRAPER_ENTERPRISES}    ${account_number}    ${invoice_number}

Select Module
[Arguments]    ${All Transactions}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${All Transactions}    ${nan}    ${nan}

Search Transaction
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Initiate Refund
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Validate Refund Successful
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

","## Test Case: TC_59 - Validate Merchant is able to Refund a Specific Invoice Transaction

### Purpose:
This test case ensures that merchants have the functionality to process a refund for a specific invoice transaction. This capability is essential for handling customer returns and adjustments.

### Summary:
1. **Setup:**
- Ensure the merchant is logged into the system.
- Ensure an existing transaction is available for refund.

2. **Execution Steps:**
- Locate the specific invoice transaction.
- Initiate the refund process.
- Verify that the refund is successfully processed and recorded."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_25 Validate Merchant Can Successfully Process Refund For A Paid Invoice,data-driven,TC_25 Validate Merchant Can Successfully Process Refund For A Paid Invoice,"*** Settings ***
Documentation    Validate TC_25 Validate Merchant Can Successfully Process Refund For A Paid Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_25 Validate Merchant Can Successfully Process Refund For A Paid Invoice
[Documentation]    Validate TC_25 Validate Merchant Can Successfully Process Refund For A Paid Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Process Invoice Payment    ${account_number}    ${invoice_number}    ${PAYMENT_DETAILS}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Navigate To Paid Invoices Section    ${nan}    ${nan}    ${nan}
Select Invoice For Refund    ${account_number}    ${invoice_number}    ${nan}
Process Refund For Invoice    ${account_number}    ${invoice_number}    ${refund_details}
Validate Refund Is Processed Successfully    ${invoice_number}    ${refund_amount}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Process Invoice Payment
[Arguments]    ${account_number}    ${invoice_number}    ${PAYMENT_DETAILS}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${PAYMENT_DETAILS}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Navigate To Paid Invoices Section
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Select Invoice For Refund
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Process Refund For Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${refund_details}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${refund_details}

Validate Refund Is Processed Successfully
[Arguments]    ${invoice_number}    ${refund_amount}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${refund_amount}    ${nan}

","**Test Case: TC_25 Validate Merchant Can Successfully Process Refund For A Paid Invoice**

**Purpose:**

The objective of this test case is to ensure that merchants can successfully process refunds for invoices that have already been paid. This functionality is crucial for handling customer returns, errors in billing, or other situations requiring a refund transaction.

**Scope:**

1. **Verification of Refund Process:** Ensure the refund process can be initiated and completed without errors, accurately reflecting the refunded amount in the system.

2. **System Updates and Notifications:** Verify that the refund transaction updates relevant account balances and sends appropriate notifications to the merchant and customer.

3. **Security Compliance:** Confirm that the refund process adheres to applicable security and compliance standards, ensuring sensitive financial information is protected."
Generate data-driven clientcentral_testcases for customers Testcases TC_76 Validate Merchant Can Add And View Notes On Customer Account In Virtual Terminal,data-driven,TC_76 Validate Merchant Can Add And View Notes On Customer Account In Virtual Terminal,"*** Settings ***
Documentation    Validate TC_76 Validate Merchant Can Add And View Notes On Customer Account In Virtual Terminal
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_76 Validate Merchant Can Add And View Notes On Customer Account In Virtual Terminal
[Documentation]    Validate TC_76 Validate Merchant Can Add And View Notes On Customer Account In Virtual Terminal using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Add Note To Customer Account    ${STERLING_COOPER}    ${account_number}    ${note_content}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Notes}    ${nan}    ${nan}
Verify Note Content Is Displayed    ${note_content}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Add Note To Customer Account
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${note_content}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${note_content}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Notes}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Notes}    ${nan}    ${nan}

Verify Note Content Is Displayed
[Arguments]    ${note_content}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${note_content}    ${nan}    ${nan}

","The test case 'TC_76 Validate Merchant Can Add And View Notes On Customer Account In Virtual Terminal' aims to verify that merchants have the capability to add and subsequently view notes on a customer's account within the Virtual Terminal. This test ensures that the note-adding functionality is working properly and that the added notes are visibly displayed on the customer's account page.

This feature is essential for merchants to record and track any important information or observations related to customer interactions, which aids in better customer service and record-keeping. The main objectives of this test case are:
1. Confirm that a note can be successfully added to a customer's account.
2. Ensure that the added note appears correctly on the customer’s details page under the ""Notes"" tab.

By validating this functionality, this test case helps to maintain the efficiency and accuracy of customer account management within the Virtual Terminal environment."
Develop data-driven test cases for ClientCentral Testcases TC_03 Validate User Can Export Customer Data To CSV,data-driven,TC_03 Validate User Can Export Customer Data To CSV,"*** Settings ***
Documentation    Validate TC_03 Validate User Can Export Customer Data To CSV
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate User Can Export Customer Data To CSV
[Documentation]    Validate TC_03 Validate User Can Export Customer Data To CSV using the following steps
Send Request To Create Customer    ${ACME_CORP}    ${nan}    ${}
Login To ClientCentral    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Select Module    ${Customers}    ${nan}    ${}
Search Customer By Name    ${customer_name}    ${nan}    ${}
Click Export To CSV    ${customer_name}    ${nan}    ${}
Validate CSV File Is Created    ${customer_name.csv}    ${nan}    ${}
Read CSV File    ${customer_name.csv}    ${nan}    ${}
Validate Customer Data In CSV    ${customer_details}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${ACME_CORP}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${nan}    ${}

Login To ClientCentral
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Select Module
[Arguments]    ${Customers}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Customers}    ${nan}    ${}

Search Customer By Name
[Arguments]    ${customer_name}    ${nan}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${customer_name}    ${nan}    ${}

Click Export To CSV
[Arguments]    ${customer_name}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_name}    ${nan}    ${}

Validate CSV File Is Created
[Arguments]    ${customer_name.csv}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_name.csv}    ${nan}    ${}

Read CSV File
[Arguments]    ${customer_name.csv}    ${nan}    ${}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${customer_name.csv}    ${nan}    ${}

Validate Customer Data In CSV
[Arguments]    ${customer_details}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_details}    ${nan}    ${}

","The test case 'TC_03 Validate User Can Export Customer Data To CSV' is designed to ensure that users can successfully export customer data into a CSV file from the ClientCentral application.

### Purpose:"
Create data-driven clientcentral_testcases for customers Testcases TC_67 Validate Payment Gateway Timeouts Are Handled Properly,data-driven,TC_67 Validate Payment Gateway Timeouts Are Handled Properly,"*** Settings ***
Documentation    Validate TC_67 Validate Payment Gateway Timeouts Are Handled Properly
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_67 Validate Payment Gateway Timeouts Are Handled Properly
[Documentation]    Validate TC_67 Validate Payment Gateway Timeouts Are Handled Properly using the following steps
Send Request To Create Customer    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}
Send Request To Process Payment For Credit Card With Timeout    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Validate Payment Timeout Error Message    ${Payment request timed out. Please try again.}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card With Timeout
[Arguments]    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Validate Payment Timeout Error Message
[Arguments]    ${Payment request timed out. Please try again.}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Payment request timed out. Please try again.}    ${nan}    ${nan}

","The test case 'TC_67 Validate Payment Gateway Timeouts Are Handled Properly' is designed to verify that the payment system appropriately handles gateway timeout errors. This ensures that when a payment request to the gateway experiences a timeout:

1. The system correctly identifies and flags the timeout event.
2. A clear and understandable error message is displayed to inform the user about the timeout.
3. The user is advised to retry the payment or take alternative steps.

This verification is essential to ensure a smooth user experience by providing proper feedback during exceptional scenarios, thus contributing to the robustness and reliability of the payment processing system."
Generate data-driven clientcentral_testcases for transaction refund Testcases TC_12 Validate Merchant Can Process Full Refund For A Transaction,data-driven,TC_12 Validate Merchant Can Process Full Refund For A Transaction,"*** Settings ***
Documentation    Validate TC_12 Validate Merchant Can Process Full Refund For A Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Merchant Can Process Full Refund For A Transaction
[Documentation]    Validate TC_12 Validate Merchant Can Process Full Refund For A Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment To Transaction    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Transaction Details Page    ${transaction_number}    ${nan}    ${nan}
Select Transaction Refund Option    ${transaction_number}    ${nan}    ${nan}
Process Full Refund For Transaction    ${transaction_number}    ${refund_amount}    ${nan}
Validate Full Refund Processed    ${transaction_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment To Transaction
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Transaction Details Page
[Arguments]    ${transaction_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_number}    ${nan}    ${nan}

Select Transaction Refund Option
[Arguments]    ${transaction_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_number}    ${nan}    ${nan}

Process Full Refund For Transaction
[Arguments]    ${transaction_number}    ${refund_amount}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_number}    ${refund_amount}    ${nan}

Validate Full Refund Processed
[Arguments]    ${transaction_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_number}    ${nan}    ${nan}

","The test case 'TC_12 Validate Merchant Can Process Full Refund For A Transaction' is designed to ensure that merchants can process a full refund for a specific transaction effectively.

**Purpose:**
1. **Verification of Refund Option Availability:**
The test verifies that the refund option is available for the transaction and that the merchant can access and select this option without any issues.

2. **Ensure Full Refund Processing:**
This test validates that the system correctly processes a full refund for the specified transaction amount, reflecting it accurately in all relevant records.

3. **Validation of Refund Completion:**
The final step checks that the full refund has been successfully processed and all related transaction details are updated and displayed correctly in the merchant's account."
Create data-driven clientcentral_testcases for customers Testcases TC_101 Validate Customer Is Able To Update Billing Address,data-driven,TC_101 Validate Customer Is Able To Update Billing Address,"*** Settings ***
Documentation    Validate TC_101 Validate Customer Is Able To Update Billing Address
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_101 Validate Customer Is Able To Update Billing Address
[Documentation]    Validate TC_101 Validate Customer Is Able To Update Billing Address using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Billing Address}    ${nan}    ${nan}
Update Billing Address    ${new_billing_address}    ${nan}    ${nan}
Validate Updated Billing Address    ${account_number}    ${new_billing_address}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Billing Address}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Billing Address}    ${nan}    ${nan}

Update Billing Address
[Arguments]    ${new_billing_address}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_billing_address}    ${nan}    ${nan}

Validate Updated Billing Address
[Arguments]    ${account_number}    ${new_billing_address}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${new_billing_address}    ${nan}

","**Test Case Title:** TC_101 Validate Customer Is Able To Update Billing Address

**Purpose:**
The primary purpose of this test case is to validate that customers have the ability to update their billing address through the platform. This ensures that any changes to customer address information are correctly captured and reflected in the system. Verifying this functionality is critical for maintaining accurate customer records and ensuring that billing and shipping information is up-to-date.

The specific objectives include:

1. **Navigation Validation:** Confirm that customers can navigate to the billing address update section without any issues.
2. **Update Functionality:** Verify that the customer can successfully enter and save a new billing address.
3. **Validation Post-Update:** Ensure that the updated billing address is correctly displayed and stored in the system."
Create data-driven paynow test cases for customer payment status Testcases TC_21 Validate Payment Status Is Updated In PayNOW On Transaction Completion,data-driven,TC_21 Validate Payment Status Is Updated In PayNOW On Transaction Completion,"*** Settings ***
Documentation    Validate TC_21 Validate Payment Status Is Updated In PayNOW On Transaction Completion
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_21 Validate Payment Status Is Updated In PayNOW On Transaction Completion
[Documentation]    Validate TC_21 Validate Payment Status Is Updated In PayNOW On Transaction Completion using the following steps
Initiate Customer Creation    ${MERCHANT_XYZ}    ${nan}    ${nan}
Create New Invoice For Customer    ${account_number}    ${MERCHANT_XYZ}    ${100.00}
Start PayNow Application    ${MERCHANT_XYZ}    ${nan}    ${nan}
Authenticate User Login    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Access Customer Invoice Section    ${account_number}    ${invoice_number}    ${nan}
Process Payment For Invoice    ${credit_card_number}    ${expiration_date}    ${cvv}
Verify Payment Status Update    ${invoice_number}    ${Completed}    ${nan}

*** Keywords ***
Initiate Customer Creation
[Arguments]    ${MERCHANT_XYZ}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${MERCHANT_XYZ}    ${nan}    ${nan}

Create New Invoice For Customer
[Arguments]    ${account_number}    ${MERCHANT_XYZ}    ${100.00}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${MERCHANT_XYZ}    ${100.00}

Start PayNow Application
[Arguments]    ${MERCHANT_XYZ}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${MERCHANT_XYZ}    ${nan}    ${nan}

Authenticate User Login
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Access Customer Invoice Section
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Process Payment For Invoice
[Arguments]    ${credit_card_number}    ${expiration_date}    ${cvv}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${credit_card_number}    ${expiration_date}    ${cvv}

Verify Payment Status Update
[Arguments]    ${invoice_number}    ${Completed}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${Completed}    ${nan}

","**Test Case: TC_21 Validate Payment Status Is Updated In PayNOW On Transaction Completion**

**Purpose:**
The main objective of this test case is to validate that the payment status within the PayNOW system is accurately updated to reflect 'Completed' once a transaction is successfully processed. This ensures that customers and merchants have up-to-date information on the status of payments, thereby facilitating accurate record-keeping and further actions based on the transaction status.

**Key Points:**"
Create data-driven test case for verifying user login functionality for online banking Testcases TC_101 Validate User Login Functionality,data-driven,TC_101 Validate User Login Functionality,"*** Settings ***
Documentation    Validate TC_101 Validate User Login Functionality
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_101 Validate User Login Functionality
[Documentation]    Validate TC_101 Validate User Login Functionality using the following steps
Launch Online Banking Application    ${test_env_url}    ${nan}    ${}
Enter Username    ${VALID_USER}    ${nan}    ${}
Enter Password    ${VALID_PASSWORD}    ${nan}    ${}
Click Login Button    ${nan}    ${nan}    ${}
Validate User Is Redirected To Dashboard    ${nan}    ${nan}    ${}
Validate Welcome Message    ${VALID_USER}    ${nan}    ${}
Log Out From Application    ${nan}    ${nan}    ${}
Validate User Is Redirected To Login Page    ${nan}    ${nan}    ${}

*** Keywords ***
Launch Online Banking Application
[Arguments]    ${test_env_url}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${test_env_url}    ${nan}    ${}

Enter Username
[Arguments]    ${VALID_USER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${nan}    ${}

Enter Password
[Arguments]    ${VALID_PASSWORD}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_PASSWORD}    ${nan}    ${}

Click Login Button
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate User Is Redirected To Dashboard
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate Welcome Message
[Arguments]    ${VALID_USER}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${nan}    ${}

Log Out From Application
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate User Is Redirected To Login Page
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

","Certainly! The test case 'TC_101 Validate User Login Functionality' is designed to ensure that a user can successfully log in to an online banking application and perform basic actions. Here’s a summary of its purpose:

### Purpose:
1. **Login Functionality:** To verify that the login functionality works correctly, ensuring users with valid credentials can successfully log in.
2. **User Redirection:** To ensure that after logging in, users are redirected to the correct dashboard page.
3. **Welcome Message:** To confirm that the welcome message appears correctly, showing the logged-in user's name.
4. **Log Out Functionality:** To check that the log-out process works, and users are redirected back to the login page.

This ensures a seamless and secure user experience in the critical area of user authentication."
Create data-driven clientcentral_testcases for Refund Testcases TC_45 Validate Merchant Is Able To Process Refund For A Completed Invoice Payment,data-driven,TC_45 Validate Merchant Is Able To Process Refund For A Completed Invoice Payment,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To Process Refund For A Completed Invoice Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To Process Refund For A Completed Invoice Payment
[Documentation]    Validate TC_45 Validate Merchant Is Able To Process Refund For A Completed Invoice Payment using the following steps
Send Request To Create Customer    ${MERCHANT_CLIENT}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${MERCHANT_CLIENT}    ${account_number}    ${}
Pay Invoice Using Credit Card    ${account_number}    ${invoice_number}    ${}
Select Module    ${Refunds}    ${nan}    ${}
Process Refund For Completed Payment    ${invoice_number}    ${refund_amount}    ${}
Validate Refund Status    ${invoice_number}    ${Refunded}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${MERCHANT_CLIENT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${MERCHANT_CLIENT}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${MERCHANT_CLIENT}    ${account_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${MERCHANT_CLIENT}    ${account_number}    ${}

Pay Invoice Using Credit Card
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Select Module
[Arguments]    ${Refunds}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Refunds}    ${nan}    ${}

Process Refund For Completed Payment
[Arguments]    ${invoice_number}    ${refund_amount}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${refund_amount}    ${}

Validate Refund Status
[Arguments]    ${invoice_number}    ${Refunded}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${Refunded}    ${}
","
The test case **'TC_45 Validate Merchant Is Able To Process Refund For A Completed Invoice Payment'** is designed to verify that a merchant can process a refund for a transaction that has already been completed and paid. This test ensures that the refund functionality works correctly, allowing the merchant to manage refunds efficiently. The key aspects covered by this test case include:

1. **Payment Verification:** Confirms that the original payment transaction was successfully processed and completed.
2. **Refund Processing:** Ensures that the merchant can initiate and complete a refund for the specified invoice.
3. **Status Update:** Verifies that the invoice status is updated to 'Refunded' after the refund process is completed.
4. **Module Navigation:** Checks that the merchant is able to navigate to the appropriate module/page to process the refund."
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_85 Validate Customer Is Able To Update Payment Method On Existing Scheduled Payment,data-driven,TC_85 Validate Customer Is Able To Update Payment Method On Existing Scheduled Payment,"*** Settings ***
Documentation    Validate TC_85 Validate Customer Is Able To Update Payment Method On Existing Scheduled Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_85 Validate Customer Is Able To Update Payment Method On Existing Scheduled Payment
[Documentation]    Validate TC_85 Validate Customer Is Able To Update Payment Method On Existing Scheduled Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Create Scheduled Payment    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Enter Account Number And Scheduled Payment    ${account_number}    ${scheduled_payment_id}    ${}
Navigate To Scheduled Payment Details Page    ${scheduled_payment_id}    ${nan}    ${}
Select Update Payment Method    ${Credit Card}    ${nan}    ${}
Enter New Credit Card Details    ${NEW_CREDIT_CARD_DETAILS}    ${nan}    ${}
Save Updated Payment Method    ${scheduled_payment_id}    ${nan}    ${}
Validate Updated Payment Method    ${account_number}    ${scheduled_payment_id}    ${new_payment_method}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Create Scheduled Payment
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Scheduled Payment
[Arguments]    ${account_number}    ${scheduled_payment_id}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${scheduled_payment_id}    ${}

Navigate To Scheduled Payment Details Page
[Arguments]    ${scheduled_payment_id}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${scheduled_payment_id}    ${nan}    ${}

Select Update Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${}

Enter New Credit Card Details
[Arguments]    ${NEW_CREDIT_CARD_DETAILS}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_CREDIT_CARD_DETAILS}    ${nan}    ${}

Save Updated Payment Method
[Arguments]    ${scheduled_payment_id}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${scheduled_payment_id}    ${nan}    ${}

Validate Updated Payment Method
[Arguments]    ${account_number}    ${scheduled_payment_id}    ${new_payment_method}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${scheduled_payment_id}    ${new_payment_method}

","The test case ""TC_85 Validate Customer Is Able To Update Payment Method On Existing Scheduled Payment"" is designed to ensure that a customer can successfully update the payment method for an already scheduled payment. Here is a summary of its purpose:
"
Validate data-driven clientcentral test cases for Sterlingcooper Testcases TC_57 Validate Customer Can Filter Invoices By Date Range,data-driven,TC_57 Validate Customer Can Filter Invoices By Date Range,"*** Settings ***
Documentation    Validate TC_57 Validate Customer Can Filter Invoices By Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_57 Validate Customer Can Filter Invoices By Date Range
[Documentation]    Validate TC_57 Validate Customer Can Filter Invoices By Date Range using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Create Multiple Invoices Through API    ${account_number}    ${integrated_merchant}    ${}
Launch ClientCentral Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Enter Account Details    ${account_number}    ${customer_details}    ${}
Set Filter Date Range    ${start_date}    ${end_date}    ${}
Validate Filtered Invoices    ${start_date}    ${end_date}    ${expected_invoices}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Create Multiple Invoices Through API
[Arguments]    ${account_number}    ${integrated_merchant}    ${}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${account_number}    ${integrated_merchant}    ${}

Launch ClientCentral Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Details
[Arguments]    ${account_number}    ${customer_details}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${customer_details}    ${}

Set Filter Date Range
[Arguments]    ${start_date}    ${end_date}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${}

Validate Filtered Invoices
[Arguments]    ${start_date}    ${end_date}    ${expected_invoices}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${expected_invoices}

","The purpose of the test case 'TC_57 Validate Customer Can Filter Invoices By Date Range' is to ensure customers can accurately filter their invoices based on a specified date range within the Sterlingcooper ClientCentral application. This involves verifying that:
"
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_45 Validate User Can Successfully Schedule Recurring Payments,data-driven,TC_45 Validate User Can Successfully Schedule Recurring Payments,"*** Settings ***
Documentation    Validate TC_45 Validate User Can Successfully Schedule Recurring Payments
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate User Can Successfully Schedule Recurring Payments
[Documentation]    Validate TC_45 Validate User Can Successfully Schedule Recurring Payments using the following steps
Send Request To Create User    ${STERLING_COOPER_USER}    ${nan}    ${nan}
Generate User Account Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_USER}    ${nan}    ${nan}
Enter User Credentials    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Access Recurring Payments Section    ${nan}    ${nan}    ${nan}
Select Payment Frequency    ${monthly}    ${nan}    ${nan}
Enter Payment Details    ${500}    ${USD}    ${1234567890}
Confirm Recurring Payment Schedule    ${nan}    ${nan}    ${nan}
Validate Recurring Payment Is Set    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create User
[Arguments]    ${STERLING_COOPER_USER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_USER}    ${nan}    ${nan}

Generate User Account Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_USER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_USER}    ${nan}    ${nan}

Enter User Credentials
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Access Recurring Payments Section
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Select Payment Frequency
[Arguments]    ${monthly}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${monthly}    ${nan}    ${nan}

Enter Payment Details
[Arguments]    ${500}    ${USD}    ${1234567890}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${500}    ${USD}    ${1234567890}

Confirm Recurring Payment Schedule
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Recurring Payment Is Set
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_45 Validate User Can Successfully Schedule Recurring Payments' is designed to ensure that a user can effectively schedule recurring payments within the PayNow application.

**Purpose:**
1. **Verify Functionality:** Ensure that users have the capability to schedule recurring payments, specifying the frequency and details of the payment.
2. **User Experience:** Confirm that the user interface allows for easy navigation to the recurring payments section and provides a seamless scheduling process.
3. **Accuracy:** Validate that the recurring payment details entered by the user are saved correctly and that the system schedules the payments according to the specified intervals.
4. **Reliability:** Ensure that the system accurately processes and maintains recurring payment schedules without errors or disruptions, providing a reliable automated payment solution for users."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_95 Validate Customer Is Able To Download All Invoices In A Single PDF,data-driven,TC_95 Validate Customer Is Able To Download All Invoices In A Single PDF,"*** Settings ***
Documentation    Validate TC_95 Validate Customer Is Able To Download All Invoices In A Single PDF
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_95 Validate Customer Is Able To Download All Invoices In A Single PDF
[Documentation]    Validate TC_95 Validate Customer Is Able To Download All Invoices In A Single PDF using the following steps
Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Create List Of Invoices    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Enter Account Number    ${account_number}    ${nan}    ${}
Request Download Of All Invoices    ${account_number}    ${nan}    ${}
Validate PDF Download Successful    ${account_number}    ${PDF_File_Name}    ${}

*** Keywords ***
Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Create List Of Invoices
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number
[Arguments]    ${account_number}    ${nan}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${}

Request Download Of All Invoices
[Arguments]    ${account_number}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${}

Validate PDF Download Successful
[Arguments]    ${account_number}    ${PDF_File_Name}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${PDF_File_Name}    ${}

","**Test Case Summary: TC_95 - Validate Customer Is Able To Download All Invoices In A Single PDF**

**Purpose:**
The main purpose of this test case is to ensure that customers have the ability to download all their invoices in a single PDF document through the Paynow system. This helps in verifying the functionality that aggregates all available invoices into one consolidated PDF, making it easier for users to keep track of their billing information.

**Key Objectives:**
1. **Customer Interaction:** Ensure that customers can navigate to the section of the application where they can request the download of a consolidated invoice PDF.
2. **Functionality Check:** Validate that the system accurately generates a single PDF containing all the invoices for the customer's account.
3. **Download Verification:** Confirm that the PDF download is successful and that the document contains all relevant invoice data as expected."
Develop data-driven paynow test cases for reporting Testcases TC_25 Validate Report Generation For Transactions Over A Specified Date Range,data-driven,TC_25 Validate Report Generation For Transactions Over A Specified Date Range,"*** Settings ***
Documentation    Validate TC_25 Validate Report Generation For Transactions Over A Specified Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_25 Validate Report Generation For Transactions Over A Specified Date Range
[Documentation]    Validate TC_25 Validate Report Generation For Transactions Over A Specified Date Range using the following steps
login_paynow_application    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To Reports Section    ${nan}    ${nan}    ${nan}
Select Date Range    ${start_date}    ${end_date}    ${nan}
Click On Generate Report    ${nan}    ${nan}    ${nan}
Validate Report Content    ${transaction_data}    ${nan}    ${nan}

*** Keywords ***
login_paynow_application
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Navigate To Reports Section
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Select Date Range
[Arguments]    ${start_date}    ${end_date}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${nan}

Click On Generate Report
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Report Content
[Arguments]    ${transaction_data}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_data}    ${nan}    ${nan}
","### Summary of Test Case: TC_25 - Validate Report Generation For Transactions Over A Specified Date Range

**Purpose:**
The primary goal of this test case is to ensure that the application's report generation functionality correctly generates transaction reports for a specified date range. This functionality is essential for users to review and analyze transaction data over selected periods.

**Key Steps:**
1. **Login:** Ensure that the user can log into the PayNow application with valid credentials.
2. **Navigation:** Navigate to the reports section of the application.
3. **Date Range Selection:** Enable the user to specify the start and end dates for the transaction report.
4. **Report Generation:** Validate that the report is generated accurately and contains the correct transaction data for the specified date range.
5. **Content Validation:** Ensure the generated report accurately reflects the transaction data within the selected dates, including all relevant details."
Create data-driven clientcentral_testcases for customer payment history Testcases TC_75 Verify Payment History Displays Correct Transactions,data-driven,TC_75 Verify Payment History Displays Correct Transactions,"*** Settings ***
Documentation    Validate TC_75 Verify Payment History Displays Correct Transactions
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_75 Verify Payment History Displays Correct Transactions
[Documentation]    Validate TC_75 Verify Payment History Displays Correct Transactions using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Payment History}    ${nan}    ${nan}
Validate Transaction In Payment History    ${invoice_number}    ${amount}    ${date}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Payment History}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Payment History}    ${nan}    ${nan}

Validate Transaction In Payment History
[Arguments]    ${invoice_number}    ${amount}    ${date}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${amount}    ${date}

","The test case 'TC_75 Verify Payment History Displays Correct Transactions' is designed to ensure that customers are able to view an accurate history of their transactions. The main objectives of this test case are:
"
Generate data-driven clientcentral_testcases for refund processing Testcases TC_05 Validate Merchant Is Able To Process Partial Refunds,data-driven,TC_05 Validate Merchant Is Able To Process Partial Refunds,"*** Settings ***
Documentation    Validate TC_05 Validate Merchant Is Able To Process Partial Refunds
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Merchant Is Able To Process Partial Refunds
[Documentation]    Validate TC_05 Validate Merchant Is Able To Process Partial Refunds using the following steps
Send Request To Create Customer    ${Global_Corp}    ${sector}    ${nan}
Send Request To Create Invoice For Customer    ${Global_Corp}    ${account_number}    ${nan}
Send Request To Process Payment    ${Global_Corp}    ${account_number}    ${invoice_number}
Select Module    ${Transactions}    ${nan}    ${nan}
Navigate To Refund Section    ${transaction_id}    ${nan}    ${nan}
Process Partial Refund    ${transaction_id}    ${refund_amount}    ${reason}
Validate Refund Is Processed    ${transaction_id}    ${refund_amount}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${Global_Corp}    ${sector}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Global_Corp}    ${sector}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${Global_Corp}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Global_Corp}    ${account_number}    ${nan}

Send Request To Process Payment
[Arguments]    ${Global_Corp}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Global_Corp}    ${account_number}    ${invoice_number}

Select Module
[Arguments]    ${Transactions}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Transactions}    ${nan}    ${nan}

Navigate To Refund Section
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Process Partial Refund
[Arguments]    ${transaction_id}    ${refund_amount}    ${reason}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${refund_amount}    ${reason}

Validate Refund Is Processed
[Arguments]    ${transaction_id}    ${refund_amount}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${refund_amount}    ${nan}

","**Test Case Summary: TC_05 Validate Merchant Is Able To Process Partial Refunds**

**Purpose:**
The objective of this test case is to ensure that merchants have the ability to process partial refunds for transactions. This functionality is crucial for addressing customer issues, handling overpayments, and managing refunds efficiently within the system. By verifying the partial refund capability, we can confirm that the refund process is flexible, accurate, and reliable.

Key Aspects to Validate:"
Generate data-driven clientcentral_testcases for refund transactions Testcases TC_07 Validate Merchant Is Able To Initiate Refund For A Specific Transaction,data-driven,TC_07 Validate Merchant Is Able To Initiate Refund For A Specific Transaction,"*** Settings ***
Documentation    Validate TC_07 Validate Merchant Is Able To Initiate Refund For A Specific Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Merchant Is Able To Initiate Refund For A Specific Transaction
[Documentation]    Validate TC_07 Validate Merchant Is Able To Initiate Refund For A Specific Transaction using the following steps
Select Module    ${Refund Transactions}    ${}    ${}
Select Transaction To Refund    ${transaction_id}    ${}    ${}
Validate Refund Initiation    ${transaction_id}    ${nan}    ${}

*** Keywords ***
Select Module
[Arguments]    ${Refund Transactions}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Refund Transactions}    ${}    ${}

Select Transaction To Refund
[Arguments]    ${transaction_id}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${}    ${}

Validate Refund Initiation
[Arguments]    ${transaction_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${}

","The test case 'TC_07 Validate Merchant Is Able To Initiate Refund For A Specific Transaction' is designed to verify that a merchant can successfully initiate a refund process for a particular transaction using their transaction management system.

**Purpose:**
"
Build data-driven clientcentral_testcases for customers Testcases TC_45 Validate Admin Can Generate Customer Activity Report,data-driven,TC_45 Validate Admin Can Generate Customer Activity Report,"*** Settings ***
Documentation    Validate TC_45 Validate Admin Can Generate Customer Activity Report
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       adminuser
${VALID_PASSWORD}   adminsecret

*** Test Cases ***
TC_45 Validate Admin Can Generate Customer Activity Report
[Documentation]    Validate TC_45 Validate Admin Can Generate Customer Activity Report using the following steps
Login As Admin    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To Reports Module    ${Reports}    ${nan}    ${nan}
Select Customer Activity Report    ${Customer Activity}    ${nan}    ${nan}
Set Report Parameters    ${DateRange}    ${CustomerID}    ${nan}
Generate Report    ${nan}    ${nan}    ${nan}
Validate Generated Report Content    ${ReportID}    ${CustomerID}    ${nan}

*** Keywords ***
Login As Admin
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Navigate To Reports Module
[Arguments]    ${Reports}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Reports}    ${nan}    ${nan}

Select Customer Activity Report
[Arguments]    ${Customer Activity}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Customer Activity}    ${nan}    ${nan}

Set Report Parameters
[Arguments]    ${DateRange}    ${CustomerID}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${DateRange}    ${CustomerID}    ${nan}

Generate Report
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Generated Report Content
[Arguments]    ${ReportID}    ${CustomerID}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${ReportID}    ${CustomerID}    ${nan}
","The test case 'TC_45 Validate Admin Can Generate Customer Activity Report' validates that an admin user can successfully generate a report detailing customer activities. The primary goal is to ensure that the reporting functionality is working correctly, allowing admins to track and analyze various customer interactions and activities. This involves validating several key elements:

1. Admins can log in with valid credentials and access the reporting module.
2. The system allows the selection of the Customer Activity Report from the available report types.
3. Admins can set the necessary parameters like date range and customer ID for generating the report.
4. The report generates correctly and includes accurate and comprehensive data concerning the specified parameters.
5. The generated report content aligns with the expected customer activity details, ensuring the reliability and effectiveness of the reporting feature."
Build data-driven quickpay_testcases for purchase orders Testcases TC_34 Validate System Generates Report For Completed Purchase Orders,data-driven,TC_34 Validate System Generates Report For Completed Purchase Orders,"*** Settings ***
Documentation    Validate TC_34 Validate System Generates Report For Completed Purchase Orders
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_34 Validate System Generates Report For Completed Purchase Orders
[Documentation]    Validate TC_34 Validate System Generates Report For Completed Purchase Orders using the following steps
Send Request To Create Purchase Order    ${QUICKPAY_STORE}    ${item_id}    ${quantity}
Send Request To Process Payment For Purchase Order    ${QUICKPAY_STORE}    ${order_number}    ${payment_method}
Validate Order Status    ${order_number}    ${Completed}    ${}
Generate Order Completion Report    ${order_number}    ${}    ${}
Validate Report Is Generated    ${order_number}    ${report_id}    ${}

*** Keywords ***
Send Request To Create Purchase Order
[Arguments]    ${QUICKPAY_STORE}    ${item_id}    ${quantity}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${QUICKPAY_STORE}    ${item_id}    ${quantity}

Send Request To Process Payment For Purchase Order
[Arguments]    ${QUICKPAY_STORE}    ${order_number}    ${payment_method}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${QUICKPAY_STORE}    ${order_number}    ${payment_method}

Validate Order Status
[Arguments]    ${order_number}    ${Completed}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_number}    ${Completed}    ${}

Generate Order Completion Report
[Arguments]    ${order_number}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_number}    ${}    ${}

Validate Report Is Generated
[Arguments]    ${order_number}    ${report_id}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_number}    ${report_id}    ${}

","The test case 'TC_34 Validate System Generates Report For Completed Purchase Orders' is designed to ensure that the system is capable of generating a report for completed purchase orders effectively.

### Purpose:"
Create data-driven clientcentral_testcases for invoices Testcases TC_21 Validate Merchant Can Create and Send Invoice Using Email,data-driven,TC_21 Validate Merchant Can Create and Send Invoice Using Email,"*** Settings ***
Documentation    Validate TC_21 Validate Merchant Can Create and Send Invoice Using Email
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_21 Validate Merchant Can Create and Send Invoice Using Email
[Documentation]    Validate TC_21 Validate Merchant Can Create and Send Invoice Using Email using the following steps
Send Request To Create Customer    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
Send Request To Create Product    ${PAPER}    ${nan}    ${nan}
Create Invoice For Product      ${DUNDER_MIFFLIN}    ${PAPER}    ${invoice_number}
Send Invoice To Email           ${DUNDER_MIFFLIN}    ${account_number}    ${email_address}
Validate Invoice Is Received In Email ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${nan}    ${nan}

Send Request To Create Product
[Arguments]    ${PAPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PAPER}    ${nan}    ${nan}

Create Invoice For Product
[Arguments]    ${DUNDER_MIFFLIN}    ${PAPER}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${PAPER}    ${invoice_number}

Send Invoice To Email
[Arguments]    ${DUNDER_MIFFLIN}    ${account_number}    ${email_address}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${account_number}    ${email_address}

Validate Invoice Is Received In Email
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

","### Test Case Summary: TC_21 - Validate Merchant Can Create and Send Invoice Using Email

**Purpose:**

This test case validates that a merchant can successfully create an invoice for a product and send it to a customer's email address using a payment processing system. Ensuring that the invoicing and email functionalities work seamlessly is crucial for maintaining proper records and providing timely billing information to customers.

**Objectives:**

1. **Verify Customer Creation:** Confirm that a new customer can be created without errors.
2. **Validate Product Invoicing:** Ensure that an invoice for a product can be created and associated with the customer.
3. **Confirm Email Dispatch:** Validate that the created invoice is sent to the customer's provided email address.
4. **Check Email Receipt:** Ensure that the email containing the invoice is received and accessible by the customer."
Construct data-driven test cases for ClientDashboard Testcases TC_45 Validate User Can Filter Transactions By Date Range,data-driven,TC_45 Validate User Can Filter Transactions By Date Range,"*** Settings ***
Documentation    Validate TC_45 Validate User Can Filter Transactions By Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       dashboard_user
${VALID_PASSWORD}   password123

*** Test Cases ***
TC_45 Validate User Can Filter Transactions By Date Range
[Documentation]    Validate TC_45 Validate User Can Filter Transactions By Date Range using the following steps
Login To Client Dashboard    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Navigate To Transactions Page    ${USER_DASHBOARD}    ${nan}    ${}
Set Date Range Filter    ${START_DATE}    ${END_DATE}    ${}
Apply Filter    ${nan}    ${nan}    ${}
Verify Transactions Within Date Range    ${START_DATE}    ${END_DATE}    ${}

*** Keywords ***
Login To Client Dashboard
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Navigate To Transactions Page
[Arguments]    ${USER_DASHBOARD}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${USER_DASHBOARD}    ${nan}    ${}

Set Date Range Filter
[Arguments]    ${START_DATE}    ${END_DATE}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${START_DATE}    ${END_DATE}    ${}

Apply Filter
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Verify Transactions Within Date Range
[Arguments]    ${START_DATE}    ${END_DATE}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${START_DATE}    ${END_DATE}    ${}

","**Test Case Summary: ""TC_45 Validate User Can Filter Transactions By Date Range""**

**Purpose:**

The objective of this test case is to ensure that users can apply a date range filter to transactions in the Client Dashboard and verify that only transactions within the specified range are displayed. This functionality is vital for users to efficiently manage and review their transactions based on time periods of interest.

**Key Steps Involved:**

1. **Login to Client Dashboard:** Securely authenticate with valid user credentials to access the dashboard.
2. **Navigate to Transactions Page:** Access the section of the client dashboard where transaction details are displayed.
3. **Set Date Range Filter:** Input the start and end dates to define the transaction period to be reviewed.
4. **Apply Filter:** Execute the filter to update the transaction list based on the specified date range.
5. **Verify Transactions:** Check to ensure that all displayed transactions fall within the specified start and end dates."
Create data-driven test cases for Sterlingcooper Testcases TC_35 Validate Customer Is Able To Update Billing Address,data-driven,TC_35 Validate Customer Is Able To Update Billing Address,"*** Settings ***
Documentation    Validate TC_35 Validate Customer Is Able To Update Billing Address
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_35 Validate Customer Is Able To Update Billing Address
[Documentation]    Validate TC_35 Validate Customer Is Able To Update Billing Address using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Launch Customer Portal    ${account_number}    ${VALID_USER}    ${VALID_PASSWORD}
Navigate To Billing Address Section    ${nan}    ${nan}    ${nan}
Update Billing Address    ${new_billing_address}    ${nan}    ${nan}
Save Updated Billing Address    ${nan}    ${nan}    ${nan}
Validate Billing Address Is Updated    ${new_billing_address}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch Customer Portal
[Arguments]    ${account_number}    ${VALID_USER}    ${VALID_PASSWORD}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${VALID_USER}    ${VALID_PASSWORD}

Navigate To Billing Address Section
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Update Billing Address
[Arguments]    ${new_billing_address}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_billing_address}    ${nan}    ${nan}

Save Updated Billing Address
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Billing Address Is Updated
[Arguments]    ${new_billing_address}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_billing_address}    ${nan}    ${nan}

","The test case 'TC_35 Validate Customer Is Able To Update Billing Address' is designed to verify that customers can successfully update their billing address information within the application.

### Purpose:
This test aims to:
1. Validate the functionality of the billing address update feature within the customer portal.
2. Ensure that the updated billing address is saved correctly in the system and reflected accurately in the customer's profile.
3. Confirm that users receive appropriate acknowledgment (like a success message) indicating that their billing address has been updated.
4. Detect any issues or bugs that might prevent the customer from updating their billing address, which could impact the usability and reliability of the feature."
Generate data-driven clientcentral_testcases for accounts Testcases TC_23 Validate Merchant Is Able To Update Account Details,data-driven,TC_23 Validate Merchant Is Able To Update Account Details,"*** Settings ***
Documentation    Validate TC_23 Validate Merchant Is Able To Update Account Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_23 Validate Merchant Is Able To Update Account Details
[Documentation]    Validate TC_23 Validate Merchant Is Able To Update Account Details using the following steps
Send Request To Create Account    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Retrieve Account Details    ${STERLING_COOPER}    ${account_id}    ${nan}
Navigate To Account Details Page    ${account_id}    ${nan}    ${nan}
Edit Account Information    ${account_id}    ${new_account_info}    ${nan}
Save Updated Account Details    ${account_id}    ${nan}    ${nan}
Validate Updated Account Details    ${account_id}    ${expected_account_info}    ${nan}

*** Keywords ***
Send Request To Create Account
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Retrieve Account Details
[Arguments]    ${STERLING_COOPER}    ${account_id}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_id}    ${nan}

Navigate To Account Details Page
[Arguments]    ${account_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_id}    ${nan}    ${nan}

Edit Account Information
[Arguments]    ${account_id}    ${new_account_info}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_id}    ${new_account_info}    ${nan}

Save Updated Account Details
[Arguments]    ${account_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_id}    ${nan}    ${nan}

Validate Updated Account Details
[Arguments]    ${account_id}    ${expected_account_info}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_id}    ${expected_account_info}    ${nan}
","The test case 'TC_23 Validate Merchant Is Able To Update Account Details' is designed to ensure that merchants can successfully update their account details within the system. The primary goal of this test case is to confirm that all steps in the account update process—from the initial request to create an account, retrieving existing details, editing information, saving changes, to validating the updated information—work as expected. This helps guarantee that the system maintains data integrity and that merchants have the necessary functionality to manage their accounts accurately."
Create data-driven clientcentral_testcases for refund Testcases TC_45 Validate Merchant Is Able To Process Refunds And Confirm Refund Details Are Recorded Correctly,data-driven,TC_45 Validate Merchant Is Able To Process Refunds And Confirm Refund Details Are Recorded Correctly,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To Process Refunds And Confirm Refund Details Are Recorded Correctly
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To Process Refunds And Confirm Refund Details Are Recorded Correctly
[Documentation]    Validate TC_45 Validate Merchant Is Able To Process Refunds And Confirm Refund Details Are Recorded Correctly using the following steps
Send Request To Create Customer    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}
Navigate To Process Refund Page    ${invoices_page}    ${invoice_number}    ${nan}
Select Invoice To Refund    ${invoice_number}    ${nan}    ${nan}
Enter Refund Details    ${refund_amount}    ${refund_reason}    ${nan}
Submit Refund Request    ${nan}    ${nan}    ${nan}
Validate Refund Processed Successfully    ${invoice_number}    ${refund_amount}    ${nan}
Validate Refund Details Recorded In System    ${refund_id}    ${refund_amount}    ${refund_date}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}

Navigate To Process Refund Page
[Arguments]    ${invoices_page}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoices_page}    ${invoice_number}    ${nan}

Select Invoice To Refund
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Enter Refund Details
[Arguments]    ${refund_amount}    ${refund_reason}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${refund_amount}    ${refund_reason}    ${nan}

Submit Refund Request
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Refund Processed Successfully
[Arguments]    ${invoice_number}    ${refund_amount}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${refund_amount}    ${nan}

Validate Refund Details Recorded In System
[Arguments]    ${refund_id}    ${refund_amount}    ${refund_date}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${refund_id}    ${refund_amount}    ${refund_date}
","
The test case 'TC_45 Validate Merchant Is Able To Process Refunds And Confirm Refund Details Are Recorded Correctly' ensures that merchants can process refunds for invoices and that all relevant refund details are accurately recorded within the system.

**Purpose:**
1. **Refund Processing:** Validate that merchants can initiate and complete refund transactions accurately.
2. **Detail Recording:** Ensure that refund details such as refund amount, reason, and date are correctly captured and stored in the system.
3. **Accuracy Verification:** Confirm that merchants can verify the processed refund details through the user interface or reporting dashboard.

By validating these components, the test case guarantees that the refund process is reliable, transparent, and documented correctly for auditing and customer service purposes."
Generate data-driven clientcentral_testcases for account management Testcases TC_10 Validate Merchant Is Able To Update Account Details,data-driven,TC_10 Validate Merchant Is Able To Update Account Details,"*** Settings ***
Documentation    Validate TC_10 Validate Merchant Is Able To Update Account Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Merchant Is Able To Update Account Details
[Documentation]    Validate TC_10 Validate Merchant Is Able To Update Account Details using the following steps
Send Request To Create Customer    ${ACME_CORP}    ${nan}    ${nan}
Send Request To Create Account For Customer    ${ACME_CORP}    ${account_number}    ${nan}
Update Account Details    ${account_number}    ${new_account_details}    ${nan}
Validate Account Details Updated    ${account_number}    ${new_account_details}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${ACME_CORP}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${nan}    ${nan}

Send Request To Create Account For Customer
[Arguments]    ${ACME_CORP}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${account_number}    ${nan}

Update Account Details
[Arguments]    ${account_number}    ${new_account_details}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${new_account_details}    ${nan}

Validate Account Details Updated
[Arguments]    ${account_number}    ${new_account_details}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${new_account_details}    ${nan}
","The test case 'TC_10 Validate Merchant Is Able To Update Account Details' is designed to ensure that merchants within the application can successfully update the details of a customer's account. This test case focuses on the following key aspects:
"
Build data-driven clientcentral_testcases for transactions Testcases TC_24 Validate Merchant Can Process Refund For A Customer,data-driven,TC_24 Validate Merchant Can Process Refund For A Customer,"*** Settings ***
Documentation    Validate TC_24 Validate Merchant Can Process Refund For A Customer
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_24 Validate Merchant Can Process Refund For A Customer
[Documentation]    Validate TC_24 Validate Merchant Can Process Refund For A Customer using the following steps
Send Request To Create Customer    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}
Send Request To Process Payment For Credit Card    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}
Navigate To Transaction History Page    ${account_number}    ${nan}    ${nan}
Select Transaction    ${invoice_number}    ${nan}    ${nan}
Initiate Refund For Transaction    ${invoice_number}    ${refund_amount}    ${nan}
Validate Refund Processed Successfully    ${account_number}    ${invoice_number}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
[Arguments]    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}

Navigate To Transaction History Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Transaction
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Initiate Refund For Transaction
[Arguments]    ${invoice_number}    ${refund_amount}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${refund_amount}    ${nan}

Validate Refund Processed Successfully
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

","**Test Case: TC_24 Validate Merchant Can Process Refund For A Customer**

**Purpose:**

The test case ""TC_24 Validate Merchant Can Process Refund For A Customer"" is designed to ensure that merchants are capable of processing refunds for their customers accurately and efficiently within the system.

### Key Objectives:"
Build data-driven clientcentral_testcases for all transactions Testcases TC_50 Validate Merchant Is Able To View Transaction History In The Last 30 Days,data-driven,TC_50 Validate Merchant Is Able To View Transaction History In The Last 30 Days,"*** Settings ***
Documentation    Validate TC_50 Validate Merchant Is Able To View Transaction History In The Last 30 Days
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_50 Validate Merchant Is Able To View Transaction History In The Last 30 Days
[Documentation]    Validate TC_50 Validate Merchant Is Able To View Transaction History In The Last 30 Days using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${100.00}
Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Get Gatewayid    ${response}    ${nan}    ${nan}
Navigate To Transaction History Page    ${gateway_id}    ${nan}    ${nan}
Validate Transactions In Last 30 Days    ${STERLING_COOPER}    ${LAST_30_DAYS_TRANSACTIONS}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${100.00}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${100.00}

Send Request To Process Payment For Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Navigate To Transaction History Page
[Arguments]    ${gateway_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${gateway_id}    ${nan}    ${nan}

Validate Transactions In Last 30 Days
[Arguments]    ${STERLING_COOPER}    ${LAST_30_DAYS_TRANSACTIONS}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${LAST_30_DAYS_TRANSACTIONS}    ${nan}

","The test case 'TC_50 Validate Merchant Is Able To View Transaction History In The Last 30 Days' is designed to ensure that merchants can access a comprehensive transaction history for the previous 30 days. This functionality is pivotal for keeping track of payments, monitoring cash flow, and assisting in reconciliatory tasks.

### Purpose:
The primary objectives of this test case include:"
Develop data-driven paynow test cases for all transactions Testcases TC_22 Validate Successful Payment Using PayPal,data-driven,TC_22 Validate Successful Payment Using PayPal,"*** Settings ***
Documentation    Validate TC_22 Validate Successful Payment Using PayPal
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Successful Payment Using PayPal
[Documentation]    Validate TC_22 Validate Successful Payment Using PayPal using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER}    ${nan}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${STERLING_COOPER}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Enter Customer Details    ${customer_details}    ${STERLING_COOPER}    ${nan}
Select Payment Method    ${PayPal}    ${nan}    ${nan}
Enter PayPal Details    ${PAYPAL_CREDENTIALS}    ${nan}    ${nan}
Validate Total Charges Under Summary Of Payment    ${$50.00}    ${nan}    ${nan}
Process Invoice Payment    ${nan}    ${nan}    ${nan}
Validate Details In Generated Payment Receipt    ${Specific Invoice}    ${PayPal Transaction ID}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER}    ${nan}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${STERLING_COOPER}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${STERLING_COOPER}    ${nan}

Select Payment Method
[Arguments]    ${PayPal}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PayPal}    ${nan}    ${nan}

Enter PayPal Details
[Arguments]    ${PAYPAL_CREDENTIALS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PAYPAL_CREDENTIALS}    ${nan}    ${nan}

Validate Total Charges Under Summary Of Payment
[Arguments]    ${$50.00}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${$50.00}    ${nan}    ${nan}

Process Invoice Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Details In Generated Payment Receipt
[Arguments]    ${Specific Invoice}    ${PayPal Transaction ID}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Specific Invoice}    ${PayPal Transaction ID}    ${nan}
",The test case 'TC_22 Validate Successful Payment Using PayPal' is designed to ensure the successful completion of a
Build data-driven paynow test cases for non integrated Testcases TC_09 Validate Non Integrated Customer Can Save Payment Method,data-driven,TC_09 Validate Non Integrated Customer Can Save Payment Method,"*** Settings ***
Documentation    Validate TC_09 Validate Non Integrated Customer Can Save Payment Method
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_09 Validate Non Integrated Customer Can Save Payment Method
[Documentation]    Validate TC_09 Validate Non Integrated Customer Can Save Payment Method using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}
Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}
Select Payment Method    ${Credit Card}    ${nan}    ${nan}
Enter Credit Card Details    ${4111111111111111}    ${12/25}    ${456}
Save Payment Method For Future Use    ${Credit Card}    ${visa}    ${nan}
Validate Payment Method Is Saved    ${Credit Card}    ${visa}    ${nan}

*** Keywords ***
Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
[Arguments]    ${4111111111111111}    ${12/25}    ${456}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${4111111111111111}    ${12/25}    ${456}

Save Payment Method For Future Use
[Arguments]    ${Credit Card}    ${visa}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${visa}    ${nan}

Validate Payment Method Is Saved
[Arguments]    ${Credit Card}    ${visa}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Credit Card}    ${visa}    ${nan}

","The test case ""TC_09 Validate Non Integrated Customer Can Save Payment Method"" aims to ensure that a customer who is not integrated within a specific system or platform can successfully save a chosen payment method for future transactions. This includes ensuring that the entry and storage of payment details work as expected.

The primary objectives are:
"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_14 Validate Integrated Customer Is Able To Add And Use Credit Card For Future Payments,data-driven,TC_14 Validate Integrated Customer Is Able To Add And Use Credit Card For Future Payments,"*** Settings ***
Documentation    Validate TC_14 Validate Integrated Customer Is Able To Add And Use Credit Card For Future Payments
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_14 Validate Integrated Customer Is Able To Add And Use Credit Card For Future Payments
[Documentation]    Validate TC_14 Validate Integrated Customer Is Able To Add And Use Credit Card For Future Payments using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Add Credit Card And Save For Future Use    ${integrated_merchant}    ${Credit_Card_Details}    ${nan}
Pay The Invoice Using Saved Credit Card    ${integrated_merchant}    ${CREDIT_CARD}    ${nan}
Validate Credit Card Exists Under Saved Payment Method    ${credit_card_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Add Credit Card And Save For Future Use
[Arguments]    ${integrated_merchant}    ${Credit_Card_Details}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${Credit_Card_Details}    ${nan}

Pay The Invoice Using Saved Credit Card
[Arguments]    ${integrated_merchant}    ${CREDIT_CARD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${CREDIT_CARD}    ${nan}

Validate Credit Card Exists Under Saved Payment Method
[Arguments]    ${credit_card_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${credit_card_number}    ${nan}    ${nan}

","The test case ""TC_14 Validate Integrated Customer Is Able To Add And Use Credit Card For Future Payments"" is designed to verify that a customer, whose account is integrated with the system, can securely and successfully add their credit card information for future transactions and use the saved credit card information for payments.

### Purpose:"
Build data-driven clientcentral_testcases for virtual terminal Testcases TC_10 Validate That Merchant Cannot Process Payment Without Payment Method Selected,data-driven,TC_10 Validate That Merchant Cannot Process Payment Without Payment Method Selected,"*** Settings ***
Documentation    Validate TC_10 Validate That Merchant Cannot Process Payment Without Payment Method Selected
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate That Merchant Cannot Process Payment Without Payment Method Selected
[Documentation]    Validate TC_10 Validate That Merchant Cannot Process Payment Without Payment Method Selected using the following steps
Send Request To Create Customer    ${STIRLING_ELY_MERCHANT}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${STIRLING_ELY_MERCHANT}    ${customer_id}    ${}
Select Module    ${Virtual Terminal}    ${nan}    ${}
Search Customer In Virtual Terminal    ${customer_id}    ${nan}    ${}
Select Country In Virtual Terminal    ${United States}    ${nan}    ${}
Select Payment Type    ${Standard Invoice}    ${nan}    ${}
Edit Amount To Pay    ${100}    ${nan}    ${}
Validate Payment Method Is Not Selected    ${Please select a payment method}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STIRLING_ELY_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STIRLING_ELY_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${STIRLING_ELY_MERCHANT}    ${customer_id}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STIRLING_ELY_MERCHANT}    ${customer_id}    ${}

Select Module
[Arguments]    ${Virtual Terminal}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Virtual Terminal}    ${nan}    ${}

Search Customer In Virtual Terminal
[Arguments]    ${customer_id}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${nan}    ${}

Select Country In Virtual Terminal
[Arguments]    ${United States}    ${nan}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${United States}    ${nan}    ${}

Select Payment Type
[Arguments]    ${Standard Invoice}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Standard Invoice}    ${nan}    ${}

Edit Amount To Pay
[Arguments]    ${100}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${100}    ${nan}    ${}

Validate Payment Method Is Not Selected
[Arguments]    ${Please select a payment method}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Please select a payment method}    ${nan}    ${}
","**Test Case: TC_10 - Validate That Merchant Cannot Process Payment Without Payment Method Selected**

**Purpose:**

The objective of this test case is to ensure that a merchant using the virtual terminal is prevented from processing a payment if no payment method has been selected. This validation checks that the system enforces the necessary selection of a payment method prior to processing any payment transactions.

**Key Objectives:**

1. **Validation Check:** Ensure the application does not allow transactions to proceed without selecting a payment method.
2. **Prevent Errors:** Avoid errors and potential disputes stemming from incomplete or invalid payment information.
3. **User Guidance:** Ensure clear messaging to prompt users to select a payment method before they proceed with payment processing.

**Steps Involved:**

1. **Customer and Invoice Setup:** Create customer and set up an invoice for testing.
2. **Module Selection:** Navigate to the Virtual Terminal module.
3. **Customer Search and Payment Information:** Search for the customer and enter payment details without selecting a payment method.
4. **Error Validation:** Check for the appropriate error message indicating that a payment method is required."
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_40 Validate Customer Is Unable To Make Payment With Expired Credit Card,data-driven,TC_40 Validate Customer Is Unable To Make Payment With Expired Credit Card,"*** Settings ***
Documentation    Validate TC_40 Validate Customer Is Unable To Make Payment With Expired Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_40 Validate Customer Is Unable To Make Payment With Expired Credit Card
[Documentation]    Validate TC_40 Validate Customer Is Unable To Make Payment With Expired Credit Card using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
Select Specific Invoice And Enter Amount    ${invoice_number}    ${50}    ${nan}
Select Payment Method    ${Credit Card}    ${nan}    ${nan}
Enter Expired Credit Card Details    ${expired_credit_card}    ${nan}    ${nan}
Validate Error Message Is Displayed    ${Credit card is expired}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}

Select Specific Invoice And Enter Amount
[Arguments]    ${invoice_number}    ${50}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${50}    ${nan}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${nan}

Enter Expired Credit Card Details
[Arguments]    ${expired_credit_card}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${expired_credit_card}    ${nan}    ${nan}

Validate Error Message Is Displayed
[Arguments]    ${Credit card is expired}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Credit card is expired}    ${nan}    ${nan}

","### Summary of Test Case 'TC_40: Validate Customer Is Unable To Make Payment With Expired Credit Card'

#### **Purpose"
Create data-driven clientcentral_testcases for user management Testcases TC_12 Validate User Is Able To Reset Password,data-driven,TC_12 Validate User Is Able To Reset Password,"*** Settings ***
Documentation    Validate TC_12 Validate User Is Able To Reset Password
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate User Is Able To Reset Password
[Documentation]    Validate TC_12 Validate User Is Able To Reset Password using the following steps
Navigate To Login Page    ${URL}    ${}    ${}
Click Forgot Password Link    ${nan}    ${}    ${}
Enter Registered Email    ${VALID_USER_EMAIL}    ${}    ${}
Click Reset Password Button    ${nan}    ${}    ${}
Validate Password Reset Confirmation    ${Confirmation Message}    ${}    ${}
Open Reset Password Email    ${VALID_USER_EMAIL}    ${VALID_EMAIL_PASSWORD}    ${}
Click Reset Password Link In Email    ${nan}    ${}    ${}
Enter New Password    ${NEW_PASSWORD}    ${}    ${}
Confirm New Password    ${NEW_PASSWORD}    ${}    ${}
Submit New Password    ${nan}    ${}    ${}
Validate Password Reset Success    ${Success Message}    ${}    ${}

*** Keywords ***
Navigate To Login Page
[Arguments]    ${URL}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${URL}    ${}    ${}

Click Forgot Password Link
[Arguments]    ${nan}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${}    ${}

Enter Registered Email
[Arguments]    ${VALID_USER_EMAIL}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER_EMAIL}    ${}    ${}

Click Reset Password Button
[Arguments]    ${nan}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${}    ${}

Validate Password Reset Confirmation
[Arguments]    ${Confirmation Message}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Confirmation Message}    ${}    ${}

Open Reset Password Email
[Arguments]    ${VALID_USER_EMAIL}    ${VALID_EMAIL_PASSWORD}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER_EMAIL}    ${VALID_EMAIL_PASSWORD}    ${}

Click Reset Password Link In Email
[Arguments]    ${nan}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${}    ${}

Enter New Password
[Arguments]    ${NEW_PASSWORD}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_PASSWORD}    ${}    ${}

Confirm New Password
[Arguments]    ${NEW_PASSWORD}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_PASSWORD}    ${}    ${}

Submit New Password
[Arguments]    ${nan}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${}    ${}

Validate Password Reset Success
[Arguments]    ${Success Message}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Success Message}    ${}    ${}

","The test case 'TC_12 Validate User Is Able To Reset Password' is designed to confirm that users can safely and successfully reset their passwords through a series of defined steps. The main objectives of this test case are to ensure the following:
"
Generate data-driven paynow test cases for Quickpay Testcases TC_42 Validate Customer Can Update Payment Method Details,data-driven,TC_42 Validate Customer Can Update Payment Method Details,"*** Settings ***
Documentation    Validate TC_42 Validate Customer Can Update Payment Method Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_42 Validate Customer Can Update Payment Method Details
[Documentation]    Validate TC_42 Validate Customer Can Update Payment Method Details using the following steps
Send Request To Create Customer    ${QUICKPAY_MERCHANT}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${account_number}    ${QUICKPAY_MERCHANT}    ${}
Generate Random Customer Details    ${nan}    ${nan}    ${}
Launch PayNow Application    ${QUICKPAY_MERCHANT}    ${nan}    ${}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}
Enter Customer Details    ${customer_details}    ${QUICKPAY_MERCHANT}    ${}
Select Payment Type    ${Lump Sum}    ${nan}    ${}
Enter Amount To Pay    ${100}    ${nan}    ${}
Select Payment Method    ${Credit Card}    ${nan}    ${}
Enter Credit Card Values    ${creditcard_details}    ${nan}    ${}
Save Payment Method    ${nan}    ${nan}    ${}
Navigate To Saved Payments Tab    ${nan}    ${nan}    ${}
Update Saved Payment Method Details    ${new_creditcard_details}    ${nan}    ${}
Validate Payment Method Details Are Updated    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${QUICKPAY_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${QUICKPAY_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${QUICKPAY_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${QUICKPAY_MERCHANT}    ${}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch PayNow Application
[Arguments]    ${QUICKPAY_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${QUICKPAY_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Enter Customer Details
[Arguments]    ${customer_details}    ${QUICKPAY_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${QUICKPAY_MERCHANT}    ${}

Select Payment Type
[Arguments]    ${Lump Sum}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Lump Sum}    ${nan}    ${}

Enter Amount To Pay
[Arguments]    ${100}    ${nan}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${100}    ${nan}    ${}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${}

Enter Credit Card Values
[Arguments]    ${creditcard_details}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${creditcard_details}    ${nan}    ${}

Save Payment Method
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}",
Create data-driven paynow test cases for Sterlingcooper Testcases TC_25 Validate That Customer Can Update Payment Information Without Losing Previous Transaction Data,data-driven,TC_25 Validate That Customer Can Update Payment Information Without Losing Previous Transaction Data,"*** Settings ***
Documentation    Validate TC_25 Validate That Customer Can Update Payment Information Without Losing Previous Transaction Data
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_25 Validate That Customer Can Update Payment Information Without Losing Previous Transaction Data
[Documentation]    Validate TC_25 Validate That Customer Can Update Payment Information Without Losing Previous Transaction Data using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Pay The Invoice Using Credit Card    ${integrated_merchant}    ${VALID_CARD}    ${VALID_EXPIRATION}
Update Payment Information    ${integrated_merchant}    ${NEW_VALID_CARD}    ${NEW_VALID_EXPIRATION}
Validate Previous Transaction Data    ${account_number}    ${invoice_number}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using Credit Card
[Arguments]    ${integrated_merchant}    ${VALID_CARD}    ${VALID_EXPIRATION}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${VALID_CARD}    ${VALID_EXPIRATION}

Update Payment Information
[Arguments]    ${integrated_merchant}    ${NEW_VALID_CARD}    ${NEW_VALID_EXPIRATION}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${NEW_VALID_CARD}    ${NEW_VALID_EXPIRATION}

Validate Previous Transaction Data
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

","The purpose of the test case 'TC_25 Validate That Customer Can Update Payment Information Without Losing Previous Transaction Data' is to ensure that when customers update their payment information, all previous transaction data associated with their account remains intact. This includes validating that all historical transaction records are unaltered and accurately reflect past activity despite the update to new payment credentials. Key objectives include testing the robustness of data integrity mechanisms and confirming that the system retains customer transaction history without degradation or loss. This test case is crucial for maintaining user trust and ensuring the continuity of financial records within the application."
Generate data-driven clientcentral_testcases for customers Testcases TC_67 Validate User Can Update Billing Address Information,data-driven,TC_67 Validate User Can Update Billing Address Information,"*** Settings ***
Documentation    Validate TC_67 Validate User Can Update Billing Address Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_67 Validate User Can Update Billing Address Information
[Documentation]    Validate TC_67 Validate User Can Update Billing Address Information using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Billing Address}    ${nan}    ${nan}
Enter New Billing Information    ${New Street}    ${New City}    ${New State}    ${New Postal Code}
Save Updated Billing Information    ${nan}    ${nan}    ${nan}
Validate Billing Information Is Updated And Displayed    ${New Street}    ${New City}    ${New State}    ${New Postal Code}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Billing Address}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Billing Address}    ${nan}    ${nan}

Enter New Billing Information
[Arguments]    ${New Street}    ${New City}    ${New State}    ${New Postal Code}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${New Street}    ${New City}    ${New State}    ${New Postal Code}

Save Updated Billing Information
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Billing Information Is Updated And Displayed
[Arguments]    ${New Street}    ${New City}    ${New State}    ${New Postal Code}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${New Street}    ${New City}    ${New State}    ${New Postal Code}

","The test case 'TC_67 Validate User Can Update Billing Address Information' is designed to verify the functionality that allows a user to update their billing address information within a system or application. The purpose of this test case is to ensure that users have the appropriate permissions and that the process for updating billing address details works correctly, without errors. This includes verifying inputs such as mandatory fields, data formats, and any backend processes like database updates. Successful execution demonstrates that the system facilitates billing address updates as expected and maintains data integrity, which is crucial for accurate billing and record-keeping.
"
Create data-driven clientcentral_testcases for inventory management Testcases TC_45 Validate Merchant Is Able To Update Inventory Stock,data-driven,TC_45 Validate Merchant Is Able To Update Inventory Stock,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To Update Inventory Stock
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To Update Inventory Stock
[Documentation]    Validate TC_45 Validate Merchant Is Able To Update Inventory Stock using the following steps
Send Request To Create Product    ${PRODUCT_NAME}    ${PRODUCT_CATEGORY}    ${nan}
Send Request To Add Initial Stock    ${PRODUCT_NAME}    ${INITIAL_STOCK}    ${nan}
Update Product Stock    ${PRODUCT_NAME}    ${UPDATED_STOCK}    ${nan}
Validate Updated Stock Is Reflected    ${PRODUCT_NAME}    ${UPDATED_STOCK}    ${nan}

*** Keywords ***
Send Request To Create Product
[Arguments]    ${PRODUCT_NAME}    ${PRODUCT_CATEGORY}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PRODUCT_NAME}    ${PRODUCT_CATEGORY}    ${nan}

Send Request To Add Initial Stock
[Arguments]    ${PRODUCT_NAME}    ${INITIAL_STOCK}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PRODUCT_NAME}    ${INITIAL_STOCK}    ${nan}

Update Product Stock
[Arguments]    ${PRODUCT_NAME}    ${UPDATED_STOCK}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PRODUCT_NAME}    ${UPDATED_STOCK}    ${nan}

Validate Updated Stock Is Reflected
[Arguments]    ${PRODUCT_NAME}    ${UPDATED_STOCK}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${PRODUCT_NAME}    ${UPDATED_STOCK}    ${nan}

","The test case ""TC_45 Validate Merchant Is Able To Update Inventory Stock"" is designed to ensure that a merchant can successfully update the stock quantity of a product within the inventory management system. The test involves creating a product, setting an initial stock quantity, updating the stock, and verifying that the updated stock is accurately reflected in the system. This is crucial for maintaining accurate inventory levels and ensuring that the inventory management system operates as intended. Accurate stock updates help in preventing stockouts or overstock situations, thereby supporting efficient inventory control and customer satisfaction."
Generate data-driven paynow test cases for RefundPayment Testcases TC_12 Validate Customer Is Able To Request Refund,data-driven,TC_12 Validate Customer Is Able To Request Refund,"*** Settings ***
Documentation    Validate TC_12 Validate Customer Is Able To Request Refund
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Customer Is Able To Request Refund
[Documentation]    Validate TC_12 Validate Customer Is Able To Request Refund using the following steps
Send Request To Create Customer    ${GLOBOCORP_MERCHANT}    ${5}    ${nan}
Send Request To Create Invoice For Customer    ${GLOBOCORP_MERCHANT}    ${5}    ${account_number}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${GLOBOCORP_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Enter Customer Details    ${customer_details}    ${GLOBOCORP_MERCHANT}    ${nan}
Process Payment    ${Credit Card}    ${nan}    ${nan}
Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
Select Payment Date    ${today}    ${nan}    ${nan}
Complete Payment    ${nan}    ${nan}    ${nan}
Navigate To Payment History Tab    ${account_number}    ${invoice_number}    ${nan}
Request Refund    ${nan}    ${nan}    ${nan}
Validate Refund Status    ${account_number}    ${invoice_number}    ${Refunded}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${GLOBOCORP_MERCHANT}    ${5}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBOCORP_MERCHANT}    ${5}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${GLOBOCORP_MERCHANT}    ${5}    ${account_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBOCORP_MERCHANT}    ${5}    ${account_number}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${GLOBOCORP_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBOCORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${GLOBOCORP_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${GLOBOCORP_MERCHANT}    ${nan}

Process Payment
[Arguments]    ${Credit Card}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
[Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Select Payment Date
[Arguments]    ${today}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${today}    ${nan}    ${nan}

Complete Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Navigate To Payment History Tab
[Arguments]    ${account_number",
Generate data-driven clientcentral_testcases for customers Testcases TC_77 Validate Merchant Is Able To Issue Refund For Credit Card Transaction,data-driven,TC_77 Validate Merchant Is Able To Issue Refund For Credit Card Transaction,"*** Settings ***
Documentation    Validate TC_77 Validate Merchant Is Able To Issue Refund For Credit Card Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_77 Validate Merchant Is Able To Issue Refund For Credit Card Transaction
[Documentation]    Validate TC_77 Validate Merchant Is Able To Issue Refund For Credit Card Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Transactions}    ${nan}    ${nan}
Select Specific Transaction    ${invoice_number}    ${nan}    ${nan}
Issue Refund For Transaction    ${invoice_number}    ${reason_for_refund}    ${nan}
Validate Transaction Is Refunded    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Transactions}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Transactions}    ${nan}    ${nan}

Select Specific Transaction
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Issue Refund For Transaction
[Arguments]    ${invoice_number}    ${reason_for_refund}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${reason_for_refund}    ${nan}

Validate Transaction Is Refunded
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

","The test case 'TC_77 Validate Merchant Is Able To Issue Refund For Credit Card Transaction' ensures that a merchant can successfully process a refund for a completed credit card transaction. The key points of this test case include:
"
Generate data-driven paynow test cases for RetailPayment Testcases TC_12 Validate Customer Can Add And Remove Items From Shopping Cart,data-driven,TC_12 Validate Customer Can Add And Remove Items From Shopping Cart,"*** Settings ***
Documentation    Validate TC_12 Validate Customer Can Add And Remove Items From Shopping Cart
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Customer Can Add And Remove Items From Shopping Cart
[Documentation]    Validate TC_12 Validate Customer Can Add And Remove Items From Shopping Cart using the following steps
Launch Retail Application    ${RETAIL_MERCHANT}    ${nan}    ${}
Add Item To Shopping Cart    ${item_id}    ${RETAIL_MERCHANT}    ${}
Verify Item In Shopping Cart    ${item_id}    ${nan}    ${}
Remove Item From Shopping Cart    ${item_id}    ${nan}    ${}
Verify Item Not In Shopping Cart    ${item_id}    ${nan}    ${}

*** Keywords ***
Launch Retail Application
[Arguments]    ${RETAIL_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${RETAIL_MERCHANT}    ${nan}    ${}

Add Item To Shopping Cart
[Arguments]    ${item_id}    ${RETAIL_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${item_id}    ${RETAIL_MERCHANT}    ${}

Verify Item In Shopping Cart
[Arguments]    ${item_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${item_id}    ${nan}    ${}

Remove Item From Shopping Cart
[Arguments]    ${item_id}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${item_id}    ${nan}    ${}

Verify Item Not In Shopping Cart
[Arguments]    ${item_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${item_id}    ${nan}    ${}

","**Test Case: TC_12 Validate Customer Can Add And Remove Items From Shopping Cart**

**Purpose:**

The purpose of this test case is to ensure that customers can efficiently manage items within their shopping cart in a retail application. Specifically, it aims to validate that:

1. **Add Items to Cart:** Customers can add items to their shopping cart, which should include verifying that the items appear correctly in the cart with the appropriate details such as item name, price, and quantity.
2. **Remove Items from Cart:** Customers can remove items from their shopping cart, ensuring that the application updates the cart accordingly and the items no longer appear in the cart list.

This functionality is crucial for improving the shopping experience by enabling customers to easily manage their purchases before proceeding to checkout."
Build data-driven clientcentral_testcases for all transactions Testcases TC_75 Validate Merchant Can Issue Refund For A Processed Transaction,data-driven,TC_75 Validate Merchant Can Issue Refund For A Processed Transaction,"*** Settings ***
Documentation    Validate TC_75 Validate Merchant Can Issue Refund For A Processed Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_75 Validate Merchant Can Issue Refund For A Processed Transaction
[Documentation]    Validate TC_75 Validate Merchant Can Issue Refund For A Processed Transaction using the following steps
Generate Random Transaction Details    ${nan}    ${nan}    ${}
Launch ClientCentral Application    ${MERCHANT_ID}    ${nan}    ${}
Login To Merchant Account    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Search For The Processed Transaction    ${transaction_id}    ${nan}    ${}
Issue Refund For The Transaction    ${transaction_id}    ${refund_amount}    ${}
Validate Refund Is Successful    ${transaction_id}    ${refund_status}    ${}

*** Keywords ***
Generate Random Transaction Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch ClientCentral Application
[Arguments]    ${MERCHANT_ID}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${MERCHANT_ID}    ${nan}    ${}

Login To Merchant Account
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Search For The Processed Transaction
[Arguments]    ${transaction_id}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${}

Issue Refund For The Transaction
[Arguments]    ${transaction_id}    ${refund_amount}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${refund_amount}    ${}

Validate Refund Is Successful
[Arguments]    ${transaction_id}    ${refund_status}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${refund_status}    ${}
","The purpose of the test case 'TC_75 Validate Merchant Can Issue Refund For A Processed Transaction' is to ensure that merchants can successfully initiate and complete a refund for a transaction that has already been processed. This verification is crucial as it confirms that the refund mechanism within the system operates correctly, allowing merchants to manage refunds efficiently.

Specifically, the test case aims to:
1. Verify that the system allows merchants to search for and locate processed transactions.
2. Confirm that the user can initiate a refund for the specified transaction.
3. Check that the refund is processed without errors and the status of the transaction is updated accordingly.
4. Ensure that the refund action does not interfere with other ongoing transactions or system functionalities, thus maintaining the integrity and reliability of the payment processing system.

This validation helps in maintaining a robust and trustworthy transaction management environment for merchants."
Create data-driven clientcentral_testcases for customers Testcases TC_45 Validate Merchant Can Apply Credits To Invoices,data-driven,TC_45 Validate Merchant Can Apply Credits To Invoices,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Can Apply Credits To Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Can Apply Credits To Invoices
[Documentation]    Validate TC_45 Validate Merchant Can Apply Credits To Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Credit Note For Customer    ${STERLING_COOPER}    ${account_number}    ${credit_note_number}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}
Apply Credit To Invoice    ${credit_note_number}    ${invoice_number}    ${nan}
Validate Credit Applied Successfully    ${invoice_number}    ${credit_note_number}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Credit Note For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${credit_note_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${credit_note_number}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Invoices}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Invoices}    ${nan}    ${nan}

Apply Credit To Invoice
[Arguments]    ${credit_note_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${credit_note_number}    ${invoice_number}    ${nan}

Validate Credit Applied Successfully
[Arguments]    ${invoice_number}    ${credit_note_number}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${credit_note_number}    ${nan}

","**Test Case Summary for 'TC_45 Validate Merchant Can Apply Credits To Invoices'**

**Purpose:**

The purpose of this test case, TC_45, is to validate that a merchant can successfully apply credit notes to their invoices within the system. This test ensures that the credit application feature functions correctly and that merchants can manage their credit notes efficiently.

**Key Goals:**
"
Validate data-driven clientcentral_testcases for customers Testcases TC_88 Validate Merchant Can Generate Detailed Sales Report Under Specific Date Range,data-driven,TC_88 Validate Merchant Can Generate Detailed Sales Report Under Specific Date Range,"*** Settings ***
Documentation    Validate TC_88 Validate Merchant Can Generate Detailed Sales Report Under Specific Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_88 Validate Merchant Can Generate Detailed Sales Report Under Specific Date Range
[Documentation]    Validate TC_88 Validate Merchant Can Generate Detailed Sales Report Under Specific Date Range using the following steps
Send Request To Create Merchant Account    ${VALID_USER}    ${nan}    ${nan}
Login To Merchant Portal    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To Sales Report Section    ${nan}    ${nan}    ${nan}
Set Date Range For Sales Report    ${start_date}    ${end_date}    ${nan}
Generate Sales Report    ${nan}    ${nan}    ${nan}
Validate Sales Report Generated Successfully    ${start_date}    ${end_date}    ${nan}
Validate Sales Data In Report    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Merchant Account
[Arguments]    ${VALID_USER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${nan}    ${nan}

Login To Merchant Portal
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Navigate To Sales Report Section
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Set Date Range For Sales Report
[Arguments]    ${start_date}    ${end_date}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${nan}

Generate Sales Report
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Sales Report Generated Successfully
[Arguments]    ${start_date}    ${end_date}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${nan}

Validate Sales Data In Report
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

","**Test Case Summary: TC_88 Validate Merchant Can Generate Detailed Sales Report Under Specific Date Range**

**Purpose**:
This test case aims to verify that a merchant can successfully generate a detailed sales report within a given date range and that all relevant data is accurately presented in the report. The primary objectives are as follows:
"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_10 Validate Customer Can Pay Invoices Successfully Using Credit Card,data-driven,TC_10 Validate Customer Can Pay Invoices Successfully Using Credit Card,"*** Settings ***
Documentation    Validate TC_10 Validate Customer Can Pay Invoices Successfully Using Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Customer Can Pay Invoices Successfully Using Credit Card
[Documentation]    Validate TC_10 Validate Customer Can Pay Invoices Successfully Using Credit Card using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${}    ${}
Create Invoice Through API    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}
Select Payment Method    ${Credit Card}    ${nan}    ${}
Enter Credit Card Details    ${credit_card_details}    ${nan}    ${}
Process Invoice Payment    ${nan}    ${}    ${}
Validate Payment Success Message    ${payment_success_message}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${}    ${}

Create Invoice Through API
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
[Return]    ${invoice_number}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${}

Enter Credit Card Details
[Arguments]    ${credit_card_details}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${credit_card_details}    ${nan}    ${}

Process Invoice Payment
[Arguments]    ${nan}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${}    ${}

Validate Payment Success Message
[Arguments]    ${payment_success_message}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${payment_success_message}    ${nan}    ${}

","The purpose of the test case 'TC_10 Validate Customer Can Pay Invoices Successfully Using Credit Card' is to ensure the PayNow application's functionality for processing invoice payments via credit cards is operating correctly. This involves verifying that customers can select the Credit Card payment option, enter valid credit card details, and complete payments successfully. The test case also confirms that a successful payment message is displayed, thus enhancing user confidence and ensuring seamless transaction processing within the application."
Build data-driven paynow test cases for Sterlingcooper Testcases TC_07 Validate Customer Can Process Payment Using Credit Card And Save For Future Transactions,data-driven,TC_07 Validate Customer Can Process Payment Using Credit Card And Save For Future Transactions,"*** Settings ***
Documentation    Validate TC_07 Validate Customer Can Process Payment Using Credit Card And Save For Future Transactions
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Customer Can Process Payment Using Credit Card And Save For Future Transactions
[Documentation]    Validate TC_07 Validate Customer Can Process Payment Using Credit Card And Save For Future Transactions using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Pay The Invoice Using Credit Card And Save The Payment Method    ${integrated_merchant}    ${Visa}    ${45678.0}
Validate Credit Card Number Exists Under Saved Payment Methods    ${credit_card_last_four}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using Credit Card And Save The Payment Method
[Arguments]    ${integrated_merchant}    ${Visa}    ${45678.0}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${Visa}    ${45678.0}

Validate Credit Card Number Exists Under Saved Payment Methods
[Arguments]    ${credit_card_last_four}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${credit_card_last_four}    ${nan}    ${nan}

","**Test Case: TC_07 - Validate Customer Can Process Payment Using Credit Card And Save For Future Transactions**

**Purpose:**

The purpose of this test case is to verify that a customer is able to process a payment using a credit card and save the credit card information for future transactions. This functionality is essential for providing customers with a convenient and seamless payment experience, as it allows them to use their saved credit card details for quicker processing in subsequent transactions.

**Key Objectives:**

1. **Payment Processing:** Ensure that the customer can successfully process a payment using a credit card.
2. **Save Credit Card Information:** Confirm that the system allows the customer to save their credit card information upon successful payment.
3. **Verify Saved Payment Method:** Validate that the saved credit card details are correctly stored and can be used for future transactions."
Develop data-driven clientcentral_testcases for Refund Transactions Testcases TC_12 Validate Refund Process For A Completed Transaction,data-driven,TC_12 Validate Refund Process For A Completed Transaction,"*** Settings ***
Documentation    Validate TC_12 Validate Refund Process For A Completed Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Refund Process For A Completed Transaction
[Documentation]    Validate TC_12 Validate Refund Process For A Completed Transaction using the following steps
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
Select Payment Type    ${Lump Sum}    ${nan}    ${}
Process Transaction    ${transaction_details}    ${nan}    ${}
Validate Transaction Completed    ${transaction_details}    ${nan}    ${}
Initiate Refund    ${transaction_details}    ${nan}    ${}
Validate Refund Status    ${refund_status}    ${nan}    ${}
Confirm Refund Processed    ${refund_process_details}    ${nan}    ${}

*** Keywords ***
Launch PayNow Application
[Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
[Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
[Arguments]    ${Lump Sum}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Lump Sum}    ${nan}    ${}

Process Transaction
[Arguments]    ${transaction_details}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_details}    ${nan}    ${}

Validate Transaction Completed
[Arguments]    ${transaction_details}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_details}    ${nan}    ${}

Initiate Refund
[Arguments]    ${transaction_details}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_details}    ${nan}    ${}

Validate Refund Status
[Arguments]    ${refund_status}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${refund_status}    ${nan}    ${}

Confirm Refund Processed
[Arguments]    ${refund_process_details}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${refund_process_details}    ${nan}    ${}

","The test case 'TC_12 Validate Refund Process For A Completed Transaction' is designed to ensure the integrity and functionality of the refund process for transactions that have already been completed. The primary objectives of this test case include:
"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_45 Validate Successfully Processed Invoices Are Listed Under Payment History,data-driven,TC_45 Validate Successfully Processed Invoices Are Listed Under Payment History,"*** Settings ***
Documentation    Validate TC_45 Validate Successfully Processed Invoices Are Listed Under Payment History
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Successfully Processed Invoices Are Listed Under Payment History
[Documentation]    Validate TC_45 Validate Successfully Processed Invoices Are Listed Under Payment History using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Pay The Invoice Using Credit Card    ${integrated_merchant}    ${credit_card_details}    ${nan}
Validate Invoice Is Listed Under Payment History    ${processed_invoice_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using Credit Card
[Arguments]    ${integrated_merchant}    ${credit_card_details}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${credit_card_details}    ${nan}

Validate Invoice Is Listed Under Payment History
[Arguments]    ${processed_invoice_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${processed_invoice_id}    ${nan}    ${nan}

","The test case 'TC_45 Validate Successfully Processed Invoices Are Listed Under Payment History' aims to verify that once an invoice is successfully paid using the PayNow application, it is accurately recorded and displayed under the payment history section for future reference.

### Key Objectives:"
Generate data-driven clientcentral_testcases for user management Testcases TC_33 Validate Admin Can Deactivate User Account,data-driven,TC_33 Validate Admin Can Deactivate User Account,"*** Settings ***
Documentation    Validate TC_33 Validate Admin Can Deactivate User Account
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_ADMIN_USER}    adminuser
${VALID_ADMIN_PASSWORD}   adminsecret

*** Test Cases ***
TC_33 Validate Admin Can Deactivate User Account
[Documentation]    Validate TC_33 Validate Admin Can Deactivate User Account using the following steps
Select Module    ${User Management}    ${}    ${}
Search User    ${testuser}    ${}    ${}
Select User From List    ${testuser}    ${}    ${}
Deactivate User    ${testuser}    ${}    ${}
Validate User Is Deactivated    ${testuser}    ${}    ${}

*** Keywords ***
Select Module
[Arguments]    ${User Management}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${User Management}    ${}    ${}

Search User
[Arguments]    ${testuser}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${testuser}    ${}    ${}

Select User From List
[Arguments]    ${testuser}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${testuser}    ${}    ${}

Deactivate User
[Arguments]    ${testuser}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${testuser}    ${}    ${}

Validate User Is Deactivated
[Arguments]    ${testuser}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${testuser}    ${}    ${}

","The test case 'TC_33 Validate Admin Can Deactivate User Account' is designed to ensure that an admin user has the ability to deactivate a user account within the system. The purpose of this test case is to verify that the admin can successfully perform this action, which is critical for managing user access and maintaining system security.

Key aspects include:
"
Build data-driven clientcentral_testcases for users Testcases TC_24 Validate Admin Can Update User Roles And Permissions,data-driven,TC_24 Validate Admin Can Update User Roles And Permissions,"*** Settings ***
Documentation    Validate TC_24 Validate Admin Can Update User Roles And Permissions
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_ADMIN_USER}       adminuser
${VALID_ADMIN_PASSWORD}   adminpassword

*** Test Cases ***
TC_24 Validate Admin Can Update User Roles And Permissions
[Documentation]    Validate TC_24 Validate Admin Can Update User Roles And Permissions using the following steps
Login As Admin    ${VALID_ADMIN_USER}    ${VALID_ADMIN_PASSWORD}    ${nan}
Navigate To User Management Section    ${nan}    ${nan}    ${}
Select User To Update    ${username}    ${nan}    ${}
Update User Roles And Permissions    ${username}    ${newroles}    ${newpermissions}
Save Changes    ${nan}    ${nan}    ${}
Validate User Roles And Permissions Updated    ${username}    ${newroles}    ${newpermissions}

*** Keywords ***
Login As Admin
[Arguments]    ${VALID_ADMIN_USER}    ${VALID_ADMIN_PASSWORD}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_ADMIN_USER}    ${VALID_ADMIN_PASSWORD}    ${nan}

Navigate To User Management Section
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Select User To Update
[Arguments]    ${username}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${username}    ${nan}    ${}

Update User Roles And Permissions
[Arguments]    ${username}    ${newroles}    ${newpermissions}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${username}    ${newroles}    ${newpermissions}

Save Changes
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate User Roles And Permissions Updated
[Arguments]    ${username}    ${newroles}    ${newpermissions}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${username}    ${newroles}    ${newpermissions}

","**Test Case Summary: TC_24 Validate Admin Can Update User Roles And Permissions**

**Purpose:**

The objective of this test case is to confirm that an admin user has the ability to update and modify user roles and permissions within the system effectively. This validation will ensure that the administrative functionalities provided for managing user access rights are working correctly. Specifically, it will cover the following:

1. **Login Functionality:** Ensure that an admin user can successfully log in using valid credentials.
2. **Navigation:** Confirm that the admin can navigate to the User Management section without issues.
3. **Selection and Update:** Verify that the admin can select a specific user and update their roles and permissions accurately.
4. **Persistence of Changes:** Validate that changes are saved and take effect immediately.
5. **Verification:** Ensure that the updated roles and permissions are correctly reflected in the system.

**Goals:**

- **Confirm Admin Functionalities:** Ensure that the admin functionalities for user management are operational and reliable.
- **Maintain Data Integrity:** Guarantee that any updates to user roles and permissions are stored correctly and are immediately visible.
- **Enhance Security:** Validate that only authorized admin users can make such changes, preserving the security and integrity of the system's user management."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_25 Validate Merchant Is Able To Filter Transactions By Date Range,data-driven,TC_25 Validate Merchant Is Able To Filter Transactions By Date Range,"*** Settings ***
Documentation    Validate TC_25 Validate Merchant Is Able To Filter Transactions By Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_25 Validate Merchant Is Able To Filter Transactions By Date Range
[Documentation]    Validate TC_25 Validate Merchant Is Able To Filter Transactions By Date Range using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Create Transactions Within Date Range    ${STERLING_COOPER}    ${account_number}    ${start_date}    ${end_date}
Select Module    ${All Transactions}    ${nan}    ${nan}
Filter Transactions By Date Range    ${start_date}    ${end_date}
Validate Transaction Results    ${account_number}    ${start_date}    ${end_date}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create Transactions Within Date Range
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${start_date}    ${end_date}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${start_date}    ${end_date}

Select Module
[Arguments]    ${All Transactions}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${All Transactions}    ${nan}    ${nan}

Filter Transactions By Date Range
[Arguments]    ${start_date}    ${end_date}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}

Validate Transaction Results
[Arguments]    ${account_number}    ${start_date}    ${end_date}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${start_date}    ${end_date}

","**Test Case Summary: TC_25 Validate Merchant Is Able To Filter Transactions By Date Range**

**Purpose:**
The primary aim of this test case is to verify that merchants can effectively filter transaction records within the system based on specified date ranges. This functionality is critical for financial queries, end-of-month reports, audits, and tracing specific transactions over particular periods. Ensuring that transaction filters by date range work accurately will confirm the system's utility for time-sensitive financial operations and data retrievals for periodic reviews or reports.

**Key Test Steps:**"
Create data-driven clientcentral_testcases for all transactions Testcases TC_57 Validate Merchant Is Able To View Transaction History,data-driven,TC_57 Validate Merchant Is Able To View Transaction History,"*** Settings ***
Documentation    Validate TC_57 Validate Merchant Is Able To View Transaction History
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_57 Validate Merchant Is Able To View Transaction History
[Documentation]    Validate TC_57 Validate Merchant Is Able To View Transaction History using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Process Multiple Transactions For Invoice    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Transaction History Page    ${account_number}    ${nan}    ${nan}
Validate Transaction History Details    ${transaction_list}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Process Multiple Transactions For Invoice
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Transaction History Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Validate Transaction History Details
[Arguments]    ${transaction_list}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_list}    ${nan}    ${nan}

","**Test Case Summary: TC_57 Validate Merchant Is Able To View Transaction History**

**Purpose:**
The objective of this test case is to verify that merchants have the capability to view the transaction history within their system comprehensively. Ensuring that merchants can access a detailed transaction history is crucial for maintaining accurate financial records, analyzing sales trends, and resolving any potential disputes. This feature is fundamental for day-to-day operations as it supports financial transparency and accountability.

Key Aspects to Validate:"
Build data-driven paynow test cases for Bluerocket Testcases TC_27 Validate Merchant Can Generate Detailed Transaction Report For Specific Date Range,data-driven,TC_27 Validate Merchant Can Generate Detailed Transaction Report For Specific Date Range,"*** Settings ***
Documentation    Validate TC_27 Validate Merchant Can Generate Detailed Transaction Report For Specific Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_27 Validate Merchant Can Generate Detailed Transaction Report For Specific Date Range
[Documentation]    Validate TC_27 Validate Merchant Can Generate Detailed Transaction Report For Specific Date Range using the following steps
Login To Merchant Portal    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To Reports Section    ${nan}    ${nan}    ${nan}
Select Date Range For Report    ${start_date}    ${end_date}    ${nan}
Generate Report    ${nan}    ${nan}    ${nan}
Validate Report Is Generated Successfully    ${transaction_count}    ${nan}    ${nan}

*** Keywords ***
Login To Merchant Portal
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Navigate To Reports Section
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Select Date Range For Report
[Arguments]    ${start_date}    ${end_date}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${nan}

Generate Report
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Report Is Generated Successfully
[Arguments]    ${transaction_count}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_count}    ${nan}    ${nan}

","The purpose of the test case 'TC_27 Validate Merchant Can Generate Detailed Transaction Report For Specific Date Range' is to ensure that merchants can successfully generate a detailed report of their transactions within a specified date range.

The test focuses on the end-to-end process merchants follow to generate transaction reports, specifically:
1. **Login:** The merchant logs into the merchant portal using valid credentials.
2. **Navigation:** The merchant navigates to the 'Reports' section within the portal.
3. **Date Range Selection:** The merchant selects the start and end dates for the report.
4. **Report Generation:** The system generates the detailed transaction report for the selected date range.
5. **Validation:** The test verifies that the report is generated successfully, by checking the presence of transactions within the report.

This test case ensures that the reporting functionality meets merchant needs, enabling them to analyze their transaction data over specific periods for accounting, auditing, and business insights."
Generate data-driven clientcentral_testcases for reporting module Testcases TC_10 Validate Merchant Can Download Sales Report By Date Range,data-driven,TC_10 Validate Merchant Can Download Sales Report By Date Range,"*** Settings ***
Documentation    Validate TC_10 Validate Merchant Can Download Sales Report By Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Merchant Can Download Sales Report By Date Range
[Documentation]    Validate TC_10 Validate Merchant Can Download Sales Report By Date Range using the following steps
Send Request To Authenticate User    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Select Module    ${Reporting}    ${nan}    ${}
Filter Sales Report By Date Range    ${start_date}    ${end_date}    ${nan}
Select Download Format    ${PDF}    ${CSV}    ${}
Initiate Report Download    ${start_date}    ${end_date}    ${}
Validate Download Completion    ${Download successful}    ${nan}    ${}

*** Keywords ***
Send Request To Authenticate User
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Select Module
[Arguments]    ${Reporting}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Reporting}    ${nan}    ${}

Filter Sales Report By Date Range
[Arguments]    ${start_date}    ${end_date}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${nan}

Select Download Format
[Arguments]    ${PDF}    ${CSV}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PDF}    ${CSV}    ${}

Initiate Report Download
[Arguments]    ${start_date}    ${end_date}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${}

Validate Download Completion
[Arguments]    ${Download successful}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Download successful}    ${nan}    ${}

","The test case 'TC_10 Validate Merchant Can Download Sales Report By Date Range' is designed to ensure that merchants are able to successfully generate and download sales reports for a specific date range. This functionality is critical for maintaining proper records and for financial analysis.

**Purpose:**
"
Create data-driven clientcentral_testcases for all transactions Testcases TC_60 Validate Merchant Is Able To Refund A Payment From Transaction Details Page,data-driven,TC_60 Validate Merchant Is Able To Refund A Payment From Transaction Details Page,"*** Settings ***
Documentation    Validate TC_60 Validate Merchant Is Able To Refund A Payment From Transaction Details Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_60 Validate Merchant Is Able To Refund A Payment From Transaction Details Page
[Documentation]    Validate TC_60 Validate Merchant Is Able To Refund A Payment From Transaction Details Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}
Initiate Refund Process    ${gateway_id}    ${amount}    ${nan}
Confirm Refund    ${confirmation_message}    ${nan}    ${nan}
Validate Refund Is Processed    ${gateway_id}    ${amount}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Transaction Details Page
[Arguments]    ${gateway_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${gateway_id}    ${nan}    ${nan}

Initiate Refund Process
[Arguments]    ${gateway_id}    ${amount}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${gateway_id}    ${amount}    ${nan}

Confirm Refund
[Arguments]    ${confirmation_message}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${confirmation_message}    ${nan}    ${nan}

Validate Refund Is Processed
[Arguments]    ${gateway_id}    ${amount}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${gateway_id}    ${amount}    ${nan}

","The test case 'TC_60 Validate Merchant Is Able To Refund A Payment From Transaction Details Page' is designed to ensure that merchants can successfully process a refund for a payment directly from the transaction details page. This functionality is crucial for managing transactions efficiently and providing seamless service to customers. The primary objective of this test is to verify the proper execution of the refund process, ensuring that:

1. The merchant can initiate a refund from the transaction details page.
2. The refund amount is accurately processed.
3. Confirmation messages are displayed correctly, indicating the success or failure of the refund.
4. Transaction records are updated accordingly to reflect the refunded amount.

Overall, this test case aims to validate the robustness and reliability of the refund feature, ensuring that merchants can handle refunds effectively without encountering errors or discrepancies within the system."
Create data-driven clientcentral_testcases for authentication Testcases TC_10 Validate User Is Able To Successfully Login With Valid Credentials,data-driven,TC_10 Validate User Is Able To Successfully Login With Valid Credentials,"*** Settings ***
Documentation    Validate TC_10 Validate User Is Able To Successfully Login With Valid Credentials
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate User Is Able To Successfully Login With Valid Credentials
[Documentation]    Validate TC_10 Validate User Is Able To Successfully Login With Valid Credentials using the following steps
Open Login Page    ${nan}    ${nan}    ${nan}
Enter Username    ${VALID_USER}    ${nan}    ${nan}
Enter Password    ${VALID_PASSWORD}    ${nan}    ${nan}
Click Login Button    ${nan}    ${nan}    ${nan}
Validate Successful Login Status    ${SUCCESS}    ${nan}    ${nan}

*** Keywords ***
Open Login Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    Opened Login Page    ${nan}    ${nan}

Enter Username
[Arguments]    ${username}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    Entered Username ${username}    ${nan}    ${nan}

Enter Password
[Arguments]    ${password}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    Entered Password ${password}    ${nan}    ${nan}

Click Login Button
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    Clicked Login Button    ${nan}    ${nan}

Validate Successful Login Status
[Arguments]    ${status}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description","**Test Case: TC_10 Validate User Is Able To Successfully Login With Valid Credentials**
"
Validate data-driven clientcentral_testcases for settlements Testcases TC_45 Validate Merchant Can Export Transaction Settlements Summary,data-driven,TC_45 Validate Merchant Can Export Transaction Settlements Summary,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Can Export Transaction Settlements Summary
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Can Export Transaction Settlements Summary
[Documentation]    Validate TC_45 Validate Merchant Can Export Transaction Settlements Summary using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Process Payment Transaction Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Settlement Page    ${account_number}    ${nan}    ${nan}
Filter To Specific Date Range    ${start_date}    ${end_date}    ${nan}
Export Transaction Settlements    ${export_format}    ${nan}    ${nan}
Validate Exported Settlements File    ${export_format}    ${file_location}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Process Payment Transaction Through ACH/Echeck Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Settlement Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Filter To Specific Date Range
[Arguments]    ${start_date}    ${end_date}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${nan}

Export Transaction Settlements
[Arguments]    ${export_format}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${export_format}    ${nan}    ${nan}

Validate Exported Settlements File
[Arguments]    ${export_format}    ${file_location}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${export_format}    ${file_location}    ${nan}

","The test case ""TC_45 Validate Merchant Can Export Transaction Settlements Summary"" aims to ensure that a merchant can successfully export a summary of transaction settlements within a specified date range in a selected file format. This test verifies the functionality of generating and exporting settlement reports, ensuring that the system correctly compiles transaction data and exports it in a user-friendly and accessible format, such as CSV or PDF. This capability is essential for merchants to manage and review their transaction records, reconcile accounts, and maintain accurate financial records. Successful completion of this test case confirms that the export feature is reliable, efficient, and supports the merchant's operational needs."
Create data-driven clientcentral_testcases for customers Testcases TC_22 Validate Merchant Can Update Customer Contact Information,data-driven,TC_22 Validate Merchant Can Update Customer Contact Information,"*** Settings ***
Documentation    Validate TC_22 Validate Merchant Can Update Customer Contact Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Merchant Can Update Customer Contact Information
[Documentation]    Validate TC_22 Validate Merchant Can Update Customer Contact Information using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Update Customer Contact Information    ${account_number}    ${new_email}    ${new_phone_number}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Validate Updated Customer Contact Information    ${new_email}    ${new_phone_number}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Update Customer Contact Information
[Arguments]    ${account_number}    ${new_email}    ${new_phone_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${new_email}    ${new_phone_number}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Validate Updated Customer Contact Information
[Arguments]    ${new_email}    ${new_phone_number}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_email}    ${new_phone_number}    ${nan}

","The test case ""TC_22 Validate Merchant Can Update Customer Contact Information"" aims to ensure that merchants using the system can successfully update the contact details of their customers. This feature is crucial for maintaining accurate and up-to-date contact records which are essential for customer support, marketing, and communication purposes.

Key objectives of this test case include:
1. **Functionality Verification:** Ensuring that the system allows merchants to change customer contact information such as email and phone number.
2. **Accuracy Check:** Confirming that the updated contact details are saved correctly in the system.
3. **Usability Test:** Making sure that the process for updating contact information is straightforward and can be completed without technical issues.
4. **Real-time Update:** Verifying that changes reflect immediately in the customer records and any associated interfaces."
Create data-driven clientcentral_testcases for transactions Testcases TC_23 Validate Merchant Is Able To Void A Transaction From Transaction Details,data-driven,TC_23 Validate Merchant Is Able To Void A Transaction From Transaction Details,"*** Settings ***
Documentation    Validate TC_23 Validate Merchant Is Able To Void A Transaction From Transaction Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_23 Validate Merchant Is Able To Void A Transaction From Transaction Details
[Documentation]    Validate TC_23 Validate Merchant Is Able To Void A Transaction From Transaction Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}
Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Transaction Details Page    ${transaction_id}    ${nan}    ${}
Void Transaction    ${transaction_id}    ${nan}    ${}
Validate Transaction Is Voided In System    ${transaction_id}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${}

Send Request To Process Payment For Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Transaction Details Page
[Arguments]    ${transaction_id}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${}

Void Transaction
[Arguments]    ${transaction_id}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${}

Validate Transaction Is Voided In System
[Arguments]    ${transaction_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${}

","The test case 'TC_23 Validate Merchant Is Able To Void A Transaction From Transaction Details' aims to ensure that merchants have the capability to void a transaction after it has been initiated, directly from the transaction details page. This test case confirms that the void function is accessible, and the action is accurately reflected in the system without causing any errors or inconsistencies. The ability to void transactions is crucial for rectifying mistakes or handling cancellations, maintaining accurate financial records, and providing flexible transaction management for merchants."
Create data-driven clientcentral_testcases for validating chargeback details Testcases TC_101 Validate Merchant Can Retrieve And View Chargeback Details By Transaction ID,data-driven,TC_101 Validate Merchant Can Retrieve And View Chargeback Details By Transaction ID,"*** Settings ***
Documentation    Validate TC_101 Validate Merchant Can Retrieve And View Chargeback Details By Transaction ID
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_101 Validate Merchant Can Retrieve And View Chargeback Details By Transaction ID
[Documentation]    Validate TC_101 Validate Merchant Can Retrieve And View Chargeback Details By Transaction ID using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment For Invoice    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Initiate Chargeback    ${account_number}    ${invoice_number}    ${nan}
Select Module    ${Chargebacks}    ${nan}    ${nan}
Filter Chargeback Details By Transaction ID    ${transaction_id}    ${nan}    ${Nan}
Validate Chargeback Details Displayed    ${transaction_id}    ${chargeback_details}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Invoice
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Initiate Chargeback
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Select Module
[Arguments]    ${Chargebacks}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Chargebacks}    ${nan}    ${nan}

Filter Chargeback Details By Transaction ID
[Arguments]    ${transaction_id}    ${nan}    ${Nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${Nan}

Validate Chargeback Details Displayed
[Arguments]    ${transaction_id}    ${chargeback_details}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${chargeback_details}    ${nan}
","**Test Case Summary: TC_101 Validate Merchant Can Retrieve And View Chargeback Details By Transaction ID**

**Purpose:**
The primary aim of this test case is to ensure that merchants can retrieve and accurately view the details of chargebacks by using the transaction ID. Chargebacks are critical disputes that affect financial transactions, and merchants must be able to access detailed information regarding each chargeback to resolve disputes effectively.

**Steps involved:**
1. **Create Customer and Process Payment:** Start by creating a customer and processing a payment, simulating a real-world transaction flow.
2. **Initiate Chargeback:** Simulate a chargeback for the processed transaction to test the retrieval functionality.
3. **Retrieve Chargeback Details:** Navigate to the chargebacks module and filter the chargeback details using the transaction ID.
4. **Validate Information:** Ensure that the retrieved chargeback details match the transaction ID provided, confirming the accuracy and reliability of the chargeback retrieval system."
Create data-driven clientcentral_testcases for dashboard Testcases TC_05 Validate Merchant Can Filter Transactions By Date Range,data-driven,TC_05 Validate Merchant Can Filter Transactions By Date Range,"*** Settings ***
Documentation    Validate TC_05 Validate Merchant Can Filter Transactions By Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Merchant Can Filter Transactions By Date Range
[Documentation]    Validate TC_05 Validate Merchant Can Filter Transactions By Date Range using the following steps
Login To Dashboard    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To Transactions Page    ${nan}    ${nan}    ${nan}
Apply Date Filter    ${start_date}    ${end_date}    ${nan}
Validate Transactions Are Filtered    ${start_date}    ${end_date}    ${transaction_list}

*** Keywords ***
Login To Dashboard
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Navigate To Transactions Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Apply Date Filter
[Arguments]    ${start_date}    ${end_date}    ${nan}
[Return]    ${list}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${nan}

Validate Transactions Are Filtered
[Arguments]    ${start_date}    ${end_date}    ${transaction_list}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${transaction_list}
","**Test Case TC_05: Validate Merchant Can Filter Transactions By Date Range**

**Purpose:**
The main goal of this test case is to confirm that a merchant can effectively filter transactions within a specified date range on the dashboard. This feature is essential for merchants to manage and review financial data over specific periods efficiently.

**Objectives:**
1. Verify that the merchant can navigate to the transactions page.
2. Ensure the date filter input fields accept valid dates and filter transactions accurately.
3. Confirm that only transactions within the specified date range are displayed after the filter is applied."
Generate data-driven paynow test cases for Omnicorp Testcases TC_12 Validate Customer Is Able To Make Payment For Multiple Invoices,data-driven,TC_12 Validate Customer Is Able To Make Payment For Multiple Invoices,"*** Settings ***
Documentation    Validate TC_12 Validate Customer Is Able To Make Payment For Multiple Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       validuser
${VALID_PASSWORD}   validpassword

*** Test Cases ***
TC_12 Validate Customer Is Able To Make Payment For Multiple Invoices
[Documentation]    Validate TC_12 Validate Customer Is Able To Make Payment For Multiple Invoices using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${test}    ${data}
Send Request To Create Multiple Invoices For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${test}
Generate Random Customer Details    ${data1}    ${data2}    ${data3}
Launch PayNow Application    ${OMNICORP_MERCHANT}    ${test}    ${data}
Enter Account Number And Multiple Invoices    ${account_number}    ${invoice_numbers}    ${testdata}
Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${data}
Select All Invoices    ${data}    ${test}    ${data1}
Select Payment Method    ${ACH}    ${test}    ${data}
Enter Payment Details For Multiple Invoices    ${payment_details}    ${data}    ${test}
Confirm And Submit Payment    ${confirmation}    ${test}    ${data}
Validate Payment Success Message    ${Payment successful}    ${test}    ${data}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${OMNICORP_MERCHANT}    ${test}    ${data}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${test}    ${data}

Send Request To Create Multiple Invoices For Customer
[Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${test}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${OMNICORP_MERCHANT}    ${test}

Generate Random Customer Details
[Arguments]    ${data1}    ${data2}    ${data3}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${data1}    ${data2}    ${data3}

Launch PayNow Application
[Arguments]    ${OMNICORP_MERCHANT}    ${test}    ${data}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${test}    ${data}

Enter Account Number And Multiple Invoices
[Arguments]    ${account_number}    ${invoice_numbers}    ${testdata}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_numbers}    ${testdata}

Enter Customer Details
[Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${data}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${data}

Select All Invoices
[Arguments]    ${data}    ${test}    ${data1}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${data}    ${test}    ${data1}

Select Payment Method
[Arguments]    ${ACH}    ${test}    ${data}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACH}    ${test}    ${data}

Enter Payment Details For Multiple Invoices
[Arguments]    ${payment_details}    ${data}    ${test}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${payment_details}    ${data}    ${test}

Confirm And Submit Payment
[Arguments]    ${confirmation}    ${test}    ${data}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${confirmation}    ${test}    ${data}

Validate Payment Success Message
[Arguments]    ${Payment successful}",
Build data-driven paynow test cases for non integrated Testcases TC_10 Validate Non Integrated Customer Is Able To Update Invoice Amount,data-driven,TC_10 Validate Non Integrated Customer Is Able To Update Invoice Amount,"*** Settings ***
Documentation    Validate TC_10 Validate Non Integrated Customer Is Able To Update Invoice Amount
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Non Integrated Customer Is Able To Update Invoice Amount
[Documentation]    Validate TC_10 Validate Non Integrated Customer Is Able To Update Invoice Amount using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}
Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}
Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}
Click On Add Invoice    ${nan}    ${nan}    ${nan}
Add Invoice Details    ${23456}    ${500}    ${1.0}
Update Invoice Amount    ${23456}    ${600}    ${nan}
Validate Updated Invoice Amount    ${23456}    ${600}    ${nan}

*** Keywords ***
Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}

Select Payment Type
[Arguments]    ${Specific Invoice}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Specific Invoice}    ${nan}    ${nan}

Click On Add Invoice
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Add Invoice Details
[Arguments]    ${23456}    ${500}    ${1.0}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${23456}    ${500}    ${1.0}

Update Invoice Amount
[Arguments]    ${23456}    ${600}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${23456}    ${600}    ${nan}

Validate Updated Invoice Amount
[Arguments]    ${23456}    ${600}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${23456}    ${600}    ${nan}
","The test case ""TC_10 Validate Non Integrated Customer Is Able To Update Invoice Amount"" focuses on confirming that a customer who is not integrated within a specific system can successfully update the amount on a selected invoice. The main goals are to ensure that the user interface and backend processes function correctly to allow such a customer to adjust invoice values without any errors.

### Purpose:
"
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_45 Validate Merchant Can Export Payment History,data-driven,TC_45 Validate Merchant Can Export Payment History,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Can Export Payment History
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Can Export Payment History
[Documentation]    Validate TC_45 Validate Merchant Can Export Payment History using the following steps
Send Request To Create Merchant    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Payment History    ${STERLING_COOPER}    ${merchant_id}    ${nan}
Launch PayNow Application    ${STERLING_COOPER}    ${nan}    ${nan}
Enter Merchant Credentials    ${merchant_id}    ${VALID_PASSWORD}    ${nan}
Navigate To Payment History Page    ${merchant_id}    ${nan}    ${nan}
Select Export Format    ${CSV}    ${nan}    ${nan}
Initiate Payment History Export    ${merchant_id}    ${nan}    ${nan}
Validate Export Is Successful    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Merchant
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Payment History
[Arguments]    ${STERLING_COOPER}    ${merchant_id}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${merchant_id}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Enter Merchant Credentials
[Arguments]    ${merchant_id}    ${VALID_PASSWORD}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${merchant_id}    ${VALID_PASSWORD}    ${nan}

Navigate To Payment History Page
[Arguments]    ${merchant_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${merchant_id}    ${nan}    ${nan}

Select Export Format
[Arguments]    ${CSV}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${CSV}    ${nan}    ${nan}

Initiate Payment History Export
[Arguments]    ${merchant_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${merchant_id}    ${nan}    ${nan}

Validate Export Is Successful
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

","The test case TC_45, titled ""Validate Merchant Can Export Payment History,"" aims to ensure that merchants using a given application or platform can successfully export their payment history details into a specified format.

### Purpose:"
Generate data-driven clientcentral_testcases for invoices Testcases TC_05 Validate Merchant Can Generate Invoice Report By Date Range,data-driven,TC_05 Validate Merchant Can Generate Invoice Report By Date Range,"*** Settings ***
Documentation    Validate TC_05 Validate Merchant Can Generate Invoice Report By Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Merchant Can Generate Invoice Report By Date Range
[Documentation]    Validate TC_05 Validate Merchant Can Generate Invoice Report By Date Range using the following steps
Send Request To Create Customer    ${GLOBAL_TECH}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${GLOBAL_TECH}    ${account_number}    ${nan}
Select Module    ${Invoices}    ${nan}    ${nan}
Filter Invoice By Date Range    ${start_date}    ${end_date}    ${nan}
Generate Invoice Report    ${nan}    ${nan}    ${nan}
Validate Invoice Report Is Generated    ${start_date}    ${end_date}    ${expected_report}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${GLOBAL_TECH}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBAL_TECH}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${GLOBAL_TECH}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBAL_TECH}    ${account_number}    ${nan}

Select Module
[Arguments]    ${Invoices}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Invoices}    ${nan}    ${nan}

Filter Invoice By Date Range
[Arguments]    ${start_date}    ${end_date}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${nan}

Generate Invoice Report
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Invoice Report Is Generated
[Arguments]    ${start_date}    ${end_date}    ${expected_report}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${expected_report}

","The purpose of the test case 'TC_05 Validate Merchant Can Generate Invoice Report By Date Range' is to ensure that merchants can successfully generate a comprehensive report of invoices within a specified date range using the system's reporting feature. This functionality plays a critical role in financial tracking and reporting activities.

**Key objectives include:**
"
Create data-driven billingcenter_testcases for all transactions Testcases TC_20 Validate Customer Is Able To Update Billing Address Successfully,data-driven,TC_20 Validate Customer Is Able To Update Billing Address Successfully,"*** Settings ***
Documentation    Validate TC_20 Validate Customer Is Able To Update Billing Address Successfully
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_20 Validate Customer Is Able To Update Billing Address Successfully
[Documentation]    Validate TC_20 Validate Customer Is Able To Update Billing Address Successfully using the following steps
Send Request To Create Customer    ${JETRO_ENTERPRISES}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${JETRO_ENTERPRISES}    ${account_number}    ${nan}
Login To Billing Center    ${VALID_USER}    ${VALID_PASSWORD}    ${JETRO_ENTERPRISES}
Navigate To Customer Billing Page    ${account_number}    ${nan}    ${nan}
Update Billing Address    ${new_address}    ${nan}    ${nan}
Save Updated Billing Address    ${nan}    ${nan}    ${nan}
Validate Billing Address Updated Successfully    ${account_number}    ${new_address}    ${true}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${JETRO_ENTERPRISES}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${JETRO_ENTERPRISES}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${JETRO_ENTERPRISES}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${JETRO_ENTERPRISES}    ${account_number}    ${nan}

Login To Billing Center
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${JETRO_ENTERPRISES}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${JETRO_ENTERPRISES}

Navigate To Customer Billing Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Update Billing Address
[Arguments]    ${new_address}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_address}    ${nan}    ${nan}

Save Updated Billing Address
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Billing Address Updated Successfully
[Arguments]    ${account_number}    ${new_address}    ${true}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${new_address}    ${true}

","The test case 'TC_20 Validate Customer Is Able To Update Billing Address Successfully' aims to verify the functionality that allows customers to update their billing address within the billing center. The test ensures that customers can seamlessly navigate to the billing section, enter new billing address details, save the updated information, and validate that the changes have been successfully applied. This functionality is crucial for maintaining accurate and up-to-date billing information, ensuring that invoices and other communications are correctly addressed to the customer. The test guarantees an efficient workflow, from login to confirmation of updates."
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_99 Validate Customer Is Unable To Process Payment With Expired Credit Card,data-driven,TC_99 Validate Customer Is Unable To Process Payment With Expired Credit Card,"*** Settings ***
Documentation    Validate TC_99 Validate Customer Is Unable To Process Payment With Expired Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_99 Validate Customer Is Unable To Process Payment With Expired Credit Card
[Documentation]    Validate TC_99 Validate Customer Is Unable To Process Payment With Expired Credit Card using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${}    ${}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${}    ${}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}
Select Payment Method    ${Credit Card}    ${}    ${}
Enter Credit Card Details    ${expired_card_details}    ${}    ${}
Validate Error Message For Expired Card    ${expired_card_message}    ${}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${}    ${}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Select Payment Method
[Arguments]    ${Credit Card}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${}    ${}

Enter Credit Card Details
[Arguments]    ${expired_card_details}    ${}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${expired_card_details}    ${}    ${}

Validate Error Message For Expired Card
[Arguments]    ${expired_card_message}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${expired_card_message}    ${}    ${}

","The purpose of test case 'TC_99 Validate Customer Is Unable To Process Payment With Expired Credit Card' is to ensure the payment system's robustness in handling expired credit card details. Specifically, this test case verifies that customers cannot complete the payment process on the Paynow platform using an expired credit card. By validating this scenario, the test ensures that the system properly identifies and rejects expired financial credentials, thereby maintaining the security and validity of transactions."
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_124 Validate Specific Error Message When Making Payment With Expired Credit Card,data-driven,TC_124 Validate Specific Error Message When Making Payment With Expired Credit Card,"*** Settings ***
Documentation    Validate TC_124 Validate Specific Error Message When Making Payment With Expired Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_124 Validate Specific Error Message When Making Payment With Expired Credit Card
[Documentation]    Validate TC_124 Validate Specific Error Message When Making Payment With Expired Credit Card using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}
Launch PayNow Application    ${STERLING_COOPER}    ${nan}    ${}
Enter Account Number And Invoice    ${customer_details}    ${invoice_number}    ${}
Select Payment Method    ${Credit Card}    ${expired_card_details}    ${}
Attempt To Process Payment    ${expired_card_details}    ${nan}    ${}
Validate Error Message For Expired Card    ${""Your credit card has expired""}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Enter Account Number And Invoice
[Arguments]    ${customer_details}    ${invoice_number}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${customer_details}    ${invoice_number}    ${}

Select Payment Method
[Arguments]    ${Credit Card}    ${expired_card_details}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${expired_card_details}    ${}

Attempt To Process Payment
[Arguments]    ${expired_card_details}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${expired_card_details}    ${nan}    ${}

Validate Error Message For Expired Card
[Arguments]    ${""Your credit card has expired""}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${""Your credit card has expired""}    ${nan}    ${}

","**Test Case: TC_124 Validate Specific Error Message When Making Payment With Expired Credit Card**

**Purpose:**
The purpose of this test case is to ensure that the PayNow application correctly handles the scenario where a customer attempts to make a payment using an expired credit card. The test will verify that the appropriate error message is displayed to the user, indicating that the card has expired.

**Key Points:**
1. **User Experience:** Ensure that the customer receives a clear and specific error message that accurately describes the issue.
2. **Validation Check:** Confirm that the system appropriately identifies and rejects expired credit cards during the payment process.
3. **Error Message Accuracy:** Validate that the exact error message ""Your credit card has expired"" is shown, maintaining consistency in user communication.

By testing this functionality, we can ensure that users are promptly informed about the reason for the payment failure and that expired credit card information is handled correctly by the system."
Validate data-driven clientcentral_testcases for customers Testcases TC_52 Validate Merchant Can Apply Discount On Invoice,data-driven,TC_52 Validate Merchant Can Apply Discount On Invoice,"*** Settings ***
Documentation    Validate TC_52 Validate Merchant Can Apply Discount On Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_52 Validate Merchant Can Apply Discount On Invoice
[Documentation]    Validate TC_52 Validate Merchant Can Apply Discount On Invoice using the following steps
Send Request To Create Customer    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}
Select Invoice To Apply Discount    ${account_number}    ${invoice_number}    ${nan}
Enter Discount Amount    ${10}    ${percent}    ${nan}
Apply Discount On Invoice    ${nan}    ${nan}    ${nan}
Validate Discount Applied    ${account_number}    ${invoice_number}    ${10}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}

Select Invoice To Apply Discount
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Enter Discount Amount
[Arguments]    ${10}    ${percent}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${10}    ${percent}    ${nan}

Apply Discount On Invoice
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Discount Applied
[Arguments]    ${account_number}    ${invoice_number}    ${10}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${10}

","### Summary: TC_52 Validate Merchant Can Apply Discount On Invoice

**Purpose:**

The purpose of test case TC_52 is to ensure that merchants have the ability to apply discounts to invoices effectively. This functionality is crucial for customer satisfaction and sales strategies, allowing merchants to offer competitive pricing and handle promotions efficiently.

**Objective:**

1. **Verify Discount Entry:** The test aims to check if merchants can correctly enter the discount amount and type (e.g., percentage) on a designated invoice.

2. **Functionality Testing:** Ensure that the discount is accurately applied to the invoice, adjusting the total amount appropriately as expected.

3. **Validation:** Ensure that the applied discount is visible and correctly reflected in the invoice details for transparency and record-keeping.

Key steps include creating a customer, generating an invoice, selecting the invoice for discount, applying the discount, and validating the applied discount."
Validate data-driven payment gateway test cases for PandaCorp Testcases TC_73 Validate Customer Can Cancel Payment Transaction,data-driven,TC_73 Validate Customer Can Cancel Payment Transaction,"*** Settings ***
Documentation    Validate TC_73 Validate Customer Can Cancel Payment Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_73 Validate Customer Can Cancel Payment Transaction
[Documentation]    Validate TC_73 Validate Customer Can Cancel Payment Transaction using the following steps
Send Request To Create Customer    ${PANDACORP}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${PANDACORP}    ${account_number}    ${nan}
Initiate Payment Process    ${PANDACORP}    ${account_number}    ${invoice_number}
Navigate To Payment Page    ${account_number}    ${nan}    ${nan}
Select Payment Method    ${Credit Card}    ${nan}    ${nan}
Enter Payment Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
Cancel Payment    ${nan}    ${nan}    ${nan}
Validate Payment Status    ${Cancelled}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${PANDACORP}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PANDACORP}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${PANDACORP}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PANDACORP}    ${account_number}    ${nan}

Initiate Payment Process
[Arguments]    ${PANDACORP}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PANDACORP}    ${account_number}    ${invoice_number}

Navigate To Payment Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${nan}

Enter Payment Details
[Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Cancel Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Payment Status
[Arguments]    ${Cancelled}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Cancelled}    ${nan}    ${nan}
","The purpose of the test case 'TC_73 Validate Customer Can Cancel Payment Transaction' is to ensure that the payment gateway system of PandaCorp allows customers to cancel a payment transaction successfully. This test case verifies that a customer can navigate through the payment process and has the option to cancel the transaction before it is finalized. The test case includes checking if the system correctly updates the payment status to ""Cancelled"" and ensures that any funds or charges are appropriately managed. By doing this, it ensures that customers can quickly and effectively cancel payment transactions, enhancing the user experience and maintaining the accuracy of transaction records."
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_92 Validate Invalid Payment Details Are Rejected And An Error Message Is Displayed,data-driven,TC_92 Validate Invalid Payment Details Are Rejected And An Error Message Is Displayed,"*** Settings ***
Documentation    Validate TC_92 Validate Invalid Payment Details Are Rejected And An Error Message Is Displayed
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_92 Validate Invalid Payment Details Are Rejected And An Error Message Is Displayed
[Documentation]    Validate TC_92 Validate Invalid Payment Details Are Rejected And An Error Message Is Displayed using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}
Select Payment Type    ${Specific Invoice}    ${nan}    ${}
Enter Invalid Payment Details    ${INVALID_DETAILS}    ${nan}    ${}
Process Payment    ${nan}    ${nan}    ${}
Validate Error Message Is Displayed    ${ERROR_MESSAGE}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Customer Details
[Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}

Select Payment Type
[Arguments]    ${Specific Invoice}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Specific Invoice}    ${nan}    ${}

Enter Invalid Payment Details
[Arguments]    ${INVALID_DETAILS}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${INVALID_DETAILS}    ${nan}    ${}

Process Payment
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate Error Message Is Displayed
[Arguments]    ${ERROR_MESSAGE}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${ERROR_MESSAGE}    ${nan}    ${}

","**Test Case: TC_92 Validate Invalid Payment Details Are Rejected And An Error Message Is Displayed**

**Purpose:**

The objective of this test case is to verify that the Paynow system correctly identifies and handles invalid payment details by rejecting the payment attempt and displaying an appropriate error message. This ensures the integrity of the payment processing system and provides clear feedback to the user.

**Key Considerations:**

1. **Data Validation:**
- Ensure that the system can identify various types of invalid payment details, such as incorrect credit card numbers or invalid expiration dates.

2. **User Feedback:**
- Confirm that the system provides clear and informative error messages to guide the user in correcting their input.

3. **System Security:**
- Verify that the system does not process or store invalid payment details, maintaining the security and reliability of the payment processing environment.

This test ensures that the critical validation checks are in place for processing payments in the Paynow application."
Create a data-driven clientcentral_testcase for profile management Testcases TC_07 Validate That User Can Upload Profile Picture,data-driven,TC_07 Validate That User Can Upload Profile Picture,"*** Settings ***
Documentation    Validate TC_07 Validate That User Can Upload Profile Picture
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate That User Can Upload Profile Picture
[Documentation]    Validate TC_07 Validate That User Can Upload Profile Picture using the following steps
Login To Application    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Navigate To UserProfile    ${nan}    ${nan}    ${}
Click On Upload Profile Picture Button    ${nan}    ${nan}    ${}
Select Picture From File System    ${picture_path}    ${nan}    ${}
Click On Save Changes Button    ${nan}    ${nan}    ${}
Validate Profile Picture Is Updated    ${nan}    ${nan}    ${}

*** Keywords ***
Login To Application
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Navigate To UserProfile
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Click On Upload Profile Picture Button
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Select Picture From File System
[Arguments]    ${picture_path}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${picture_path}    ${nan}    ${}

Click On Save Changes Button
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate Profile Picture Is Updated
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

",
Construct data-driven clientcentral_testcases for subscription management Testcases TC_35 Validate User Is Able To Update Subscription Plan,data-driven,TC_35 Validate User Is Able To Update Subscription Plan,"*** Settings ***
Documentation    Validate TC_35 Validate User Is Able To Update Subscription Plan
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_35 Validate User Is Able To Update Subscription Plan
[Documentation]    Validate TC_35 Validate User Is Able To Update Subscription Plan using the following steps
Send Request To Create Customer    ${CLIENTCENTRAL_USER}    ${nan}    ${nan}
Send Request To Create Subscription For Customer    ${CLIENTCENTRAL_USER}    ${account_number}    ${existing_plan}
Send Request To Update Subscription Plan    ${CLIENTCENTRAL_USER}    ${account_number}    ${new_plan}
Get Subscription Details    ${response}    ${nan}    ${nan}
Validate Subscription Plan Is Updated    ${new_plan}    ${account_number}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${CLIENTCENTRAL_USER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CLIENTCENTRAL_USER}    ${nan}    ${nan}

Send Request To Create Subscription For Customer
[Arguments]    ${CLIENTCENTRAL_USER}    ${account_number}    ${existing_plan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CLIENTCENTRAL_USER}    ${account_number}    ${existing_plan}

Send Request To Update Subscription Plan
[Arguments]    ${CLIENTCENTRAL_USER}    ${account_number}    ${new_plan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CLIENTCENTRAL_USER}    ${account_number}    ${new_plan}

Get Subscription Details
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Validate Subscription Plan Is Updated
[Arguments]    ${new_plan}    ${account_number}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_plan}    ${account_number}    ${nan}

","The purpose of the test case 'TC_35 Validate User Is Able To Update Subscription Plan' is to ensure that users are able to successfully update their subscription plans within the application. This test verifies the complete workflow of changing a subscription plan, ensuring the system appropriately handles the transition and reflects the new plan details in the user's subscription profile.

Specifically, the test case aims to:
1. Verify that a user can initiate a subscription plan update.
2. Ensure that the system processes the update request correctly and transitions the user to the new plan.
3. Check that the application accurately displays the updated subscription plan details.
4. Confirm that any necessary adjustments or charges related to the plan update are handled accordingly.
"
Create data-driven paynow test cases for InvoicePayment Testcases TC_15 Validate Customer Is Able To Make Full Payment On Invoice,data-driven,TC_15 Validate Customer Is Able To Make Full Payment On Invoice,"*** Settings ***
Documentation    Validate TC_15 Validate Customer Is Able To Make Full Payment On Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Customer Is Able To Make Full Payment On Invoice
[Documentation]    Validate TC_15 Validate Customer Is Able To Make Full Payment On Invoice using the following steps
Send Request To Create Customer    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${DUNDER_MIFFLIN}    ${nan}
Launch PayNow Application    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Select Payment Method    ${Credit Card}    ${nan}    ${nan}
Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
Make Full Payment    ${invoice_number}    ${amount_due}    ${nan}
Navigate To Payment Confirmation Page    ${invoice_number}    ${nan}    ${nan}
Validate Payment Confirmation Is Displayed    ${invoice_number}    ${amount_due}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${DUNDER_MIFFLIN}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${DUNDER_MIFFLIN}    ${nan}

Launch PayNow Application
[Arguments]    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
[Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Make Full Payment
[Arguments]    ${invoice_number}    ${amount_due}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${amount_due}    ${nan}

Navigate To Payment Confirmation Page
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Validate Payment Confirmation Is Displayed
[Arguments]    ${invoice_number}    ${amount_due}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${amount_due}    ${nan}

","### Test Case Summary: TC_15 Validate Customer Is Able To Make Full Payment On Invoice

**Purpose:**
This test case aims to verify that customers are able to make a full payment on an invoice within a payment management system. The test ensures that the entire process from selecting the invoice, entering payment details, to confirming the payment is smooth and error-free.

**Context and Importance:**
Making full payments on invoices is a core functionality for any billing system. Ensuring that this process works correctly is vital for customer satisfaction and accurate accounting. This test case covers the essential steps to confirm that everything from invoice selection to payment confirmation is working as expected, providing a seamless user experience and ensuring reliability of the financial transactions.

To"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_70 Verify Email Notification Is Sent For Successful Payment,data-driven,TC_70 Verify Email Notification Is Sent For Successful Payment,"*** Settings ***
Documentation    Validate TC_70 Verify Email Notification Is Sent For Successful Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_70 Verify Email Notification Is Sent For Successful Payment
[Documentation]    Validate TC_70 Verify Email Notification Is Sent For Successful Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Process Payment For Invoice    ${invoice_number}    ${payment_amount}    ${nan}
Validate Email Notification Sent    ${customer_email}    ${payment_confirmation_subject}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Process Payment For Invoice
[Arguments]    ${invoice_number}    ${payment_amount}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${payment_amount}    ${nan}

Validate Email Notification Sent
[Arguments]    ${customer_email}    ${payment_confirmation_subject}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_email}    ${payment_confirmation_subject}    ${nan}

","Test Case 'TC_70 Verify Email Notification Is Sent For Successful Payment' aims to confirm that an email notification is sent to the customer after a payment is successfully processed through the PayNow application. This test case ensures that customers receive timely communication confirming their payment, thus enhancing transparency and trust in the payment process.

**Purpose:**
1. **Customer Communication:** To ensure customers are promptly notified via email upon successful payment, providing them with a confirmation and record of their transaction.
2. **System Integrity:** To verify that the system's notification feature works correctly and reliably, maintaining clear communication channels between the service provider and the customer.
3. **User Experience:** To enhance the customer experience by providing immediate feedback about the payment status, reducing potential confusion and ensuring peace of mind for transactions conducted through the PayNow application."
Generate data-driven ecomapp testcases for CartManagement Testcases TC_15 Validate Customer Can Add And Remove Items From Cart,data-driven,TC_15 Validate Customer Can Add And Remove Items From Cart,"*** Settings ***
Documentation    Validate TC_15 Validate Customer Can Add And Remove Items From Cart
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Customer Can Add And Remove Items From Cart
[Documentation]    Validate TC_15 Validate Customer Can Add And Remove Items From Cart using the following steps
Send Request To Create Customer    ${ECOMAPP_MERCHANT}    ${nan}    ${nan}
Send Request To Add Item To Cart    ${ECOMAPP_MERCHANT}    ${account_number}    ${item_id}
Validate Item In Cart    ${account_number}    ${item_id}    ${Added}
Send Request To Remove Item From Cart    ${ECOMAPP_MERCHANT}    ${account_number}    ${item_id}
Validate Item Not In Cart    ${account_number}    ${item_id}    ${Removed}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${ECOMAPP_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ECOMAPP_MERCHANT}    ${nan}    ${nan}

Send Request To Add Item To Cart
[Arguments]    ${ECOMAPP_MERCHANT}    ${account_number}    ${item_id}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ECOMAPP_MERCHANT}    ${account_number}    ${item_id}

Validate Item In Cart
[Arguments]    ${account_number}    ${item_id}    ${Added}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${item_id}    ${Added}

Send Request To Remove Item From Cart
[Arguments]    ${ECOMAPP_MERCHANT}    ${account_number}    ${item_id}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ECOMAPP_MERCHANT}    ${account_number}    ${item_id}

Validate Item Not In Cart
[Arguments]    ${account_number}    ${item_id}    ${Removed}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${item_id}    ${Removed}
","The test case 'TC_15 Validate Customer Can Add And Remove Items From Cart' is designed to ensure the customer can perform basic cart management operations. This includes adding an item to the shopping cart and subsequently removing it, verifying that these operations reflect correctly in the user interface and backend system.

**Key Validation Points:**
"
Build data-driven API test cases for Payment Processing System Testcases TC_15 Validate Successful Payment Process With Valid Account And Payment Details,data-driven,TC_15 Validate Successful Payment Process With Valid Account And Payment Details,"*** Settings ***
Documentation    Validate TC_15 Validate Successful Payment Process With Valid Account And Payment Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Successful Payment Process With Valid Account And Payment Details
[Documentation]    Validate TC_15 Validate Successful Payment Process With Valid Account And Payment Details using the following steps
Generate Payment Account Details    ${VALID_ACCOUNT}    ${nan}    ${nan}
Generate Payment Details    ${PAYMENT_AMOUNT}    ${nan}    ${nan}
Authenticate Payment Account    ${VALID_ACCOUNT}    ${VALID_USER}    ${VALID_PASSWORD}
Initiate Payment Process    ${VALID_ACCOUNT}    ${PAYMENT_AMOUNT}    ${nan}
Verify Payment Confirmation Response    ${VALID_ACCOUNT}    ${PAYMENT_AMOUNT}    ${CONFIRMATION_RESPONSE}
Validate Payment Is Reflected In Account Balance    ${VALID_ACCOUNT}    ${PAYMENT_AMOUNT}    ${NEW_BALANCE}

*** Keywords ***
Generate Payment Account Details
[Arguments]    ${VALID_ACCOUNT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_ACCOUNT}    ${nan}    ${nan}

Generate Payment Details
[Arguments]    ${PAYMENT_AMOUNT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PAYMENT_AMOUNT}    ${nan}    ${nan}

Authenticate Payment Account
[Arguments]    ${VALID_ACCOUNT}    ${VALID_USER}    ${VALID_PASSWORD}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_ACCOUNT}    ${VALID_USER}    ${VALID_PASSWORD}

Initiate Payment Process
[Arguments]    ${VALID_ACCOUNT}    ${PAYMENT_AMOUNT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_ACCOUNT}    ${PAYMENT_AMOUNT}    ${nan}

Verify Payment Confirmation Response
[Arguments]    ${VALID_ACCOUNT}    ${PAYMENT_AMOUNT}    ${CONFIRMATION_RESPONSE}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_ACCOUNT}    ${PAYMENT_AMOUNT}    ${CONFIRMATION_RESPONSE}

Validate Payment Is Reflected In Account Balance
[Arguments]    ${VALID_ACCOUNT}    ${PAYMENT_AMOUNT}    ${NEW_BALANCE}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_ACCOUNT}    ${PAYMENT_AMOUNT}    ${NEW_BALANCE}
","The test case 'TC_15 Validate Successful Payment Process With Valid Account And Payment Details' is designed to ensure that a payment transaction proceeds successfully when both valid account and payment information are provided. This test case is critical in verifying the robustness and reliability of the payment processing system.

### Objectives:"
Create data-driven clientcentral_testcases for refund processing Testcases TC_30 Validate Merchant Is Able To Process Refund For A Completed Transaction,data-driven,TC_30 Validate Merchant Is Able To Process Refund For A Completed Transaction,"*** Settings ***
Documentation    Validate TC_30 Validate Merchant Is Able To Process Refund For A Completed Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_30 Validate Merchant Is Able To Process Refund For A Completed Transaction
[Documentation]    Validate TC_30 Validate Merchant Is Able To Process Refund For A Completed Transaction using the following steps
Send Request To Create Customer    ${DRAPER_JONES}    ${nan}    ${nan}
Send Request To Create Completed Transaction    ${DRAPER_JONES}    ${account_number}    ${transaction_id}
Select Module    ${Transactions}    ${nan}    ${nan}
Filter Details In Transactions    ${account_number}    ${transaction_id}    ${Transaction ID}
Navigate To Transaction Details Page    ${transaction_id}    ${nan}    ${nan}
Select Tab In Transaction Details Page    ${Refund}    ${nan}    ${nan}
Initiate Refund Process    ${transaction_id}    ${refund_amount}    ${nan}
Validate Refund Processed Successfully    ${transaction_id}    ${refund_amount}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DRAPER_JONES}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DRAPER_JONES}    ${nan}    ${nan}

Send Request To Create Completed Transaction
[Arguments]    ${DRAPER_JONES}    ${account_number}    ${transaction_id}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DRAPER_JONES}    ${account_number}    ${transaction_id}

Select Module
[Arguments]    ${Transactions}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Transactions}    ${nan}    ${nan}

Filter Details In Transactions
[Arguments]    ${account_number}    ${transaction_id}    ${Transaction ID}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${transaction_id}    ${Transaction ID}

Navigate To Transaction Details Page
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Select Tab In Transaction Details Page
[Arguments]    ${Refund}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Refund}    ${nan}    ${nan}

Initiate Refund Process
[Arguments]    ${transaction_id}    ${refund_amount}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${transaction_id}    ${refund_amount}    ${nan}

Validate Refund Processed Successfully
[Arguments]    ${transaction_id}    ${refund_amount}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${refund_amount}    ${nan}

","The test case 'TC_30 Validate Merchant Is Able To Process Refund For A Completed Transaction' aims to ensure that the system allows a merchant to successfully process a refund for transactions that have been completed. This helps maintain the integrity of transactions and provides flexibility for refunds.

#### Key Objectives:"
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_25 Validate Customer Can Update Saved ACHorEcheck Payment Information,data-driven,TC_25 Validate Customer Can Update Saved ACHorEcheck Payment Information,"*** Settings ***
Documentation    Validate TC_25 Validate Customer Can Update Saved ACHorEcheck Payment Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_25 Validate Customer Can Update Saved ACHorEcheck Payment Information
[Documentation]    Validate TC_25 Validate Customer Can Update Saved ACHorEcheck Payment Information using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Pay The Invoice Using ACH/Echeck And Save The Payment Method    ${integrated_merchant}    ${Business Checking}    ${ACH_ECHECK_DETAILS}
Update Saved Payment Method Information    ${integrated_merchant}    ${updated_ACH_ECHECK_DETAILS}    ${nan}
Validate Updated Payment Information Is Saved    ${account_number}    ${updated_ACH_ECHECK_DETAILS}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using ACH/Echeck And Save The Payment Method
[Arguments]    ${integrated_merchant}    ${Business Checking}    ${ACH_ECHECK_DETAILS}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${Business Checking}    ${ACH_ECHECK_DETAILS}

Update Saved Payment Method Information
[Arguments]    ${integrated_merchant}    ${updated_ACH_ECHECK_DETAILS}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${updated_ACH_ECHECK_DETAILS}    ${nan}

Validate Updated Payment Information Is Saved
[Arguments]    ${account_number}    ${updated_ACH_ECHECK_DETAILS}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${updated_ACH_ECHECK_DETAILS}    ${nan}

","**Summary of Test Case TC_25: Validate Customer Can Update Saved ACH or E-check Payment Information**

**Purpose:**
This test case focuses on verifying that a customer who has previously saved their Automated Clearing House (ACH) or electronic check (E-check) payment information can successfully update this saved information. This feature is crucial for maintaining accurate and current payment details for seamless future transactions.

**Key Objectives:**

1. **Functionality Verification:** Ensure that the system allows customers to update their saved ACH/E-check payment information without error.
2. **Data Integrity:** Verify that the updated payment information is correctly saved and reflected in the customer's saved payment methods.
3. **User Experience:** Confirm that the user interface facilitates an easy and intuitive process for updating stored payment details, enhancing the overall customer experience."
Generate data-driven clientcentral_testcases for refunds Testcases TC_72 Validate Merchant Can Initiate And Process Refunds Using Transaction ID,data-driven,TC_72 Validate Merchant Can Initiate And Process Refunds Using Transaction ID,"*** Settings ***
Documentation    Validate TC_72 Validate Merchant Can Initiate And Process Refunds Using Transaction ID
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_72 Validate Merchant Can Initiate And Process Refunds Using Transaction ID
[Documentation]    Validate TC_72 Validate Merchant Can Initiate And Process Refunds Using Transaction ID using the following steps
Send Request To Process Payment    ${STERLING_COOPER}    ${account_number}    ${amount}
Get Transaction ID    ${response}    ${nan}    ${nan}
Navigate To Refunds Module    ${Refunds}    ${nan}    ${nan}
Initiate Refund Using Transaction ID    ${transaction_id}    ${nan}    ${nan}
Confirm Refund Information    ${transaction_id}    ${nan}    ${nan}
Process Refund    ${transaction_id}    ${nan}    ${nan}
Validate Refund Is Successful    ${transaction_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Process Payment
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${amount}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${amount}

Get Transaction ID
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Navigate To Refunds Module
[Arguments]    ${Refunds}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Refunds}    ${nan}    ${nan}

Initiate Refund Using Transaction ID
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Confirm Refund Information
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Process Refund
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Validate Refund Is Successful
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

","The test case 'TC_72 Validate Merchant Can Initiate And Process Refunds Using Transaction ID' is intended to ensure that merchants can successfully initiate and process refunds using a transaction ID. This test focuses on verifying the end-to-end functionality of the refund process.

### Purpose:

1. **Refund Functionality Verification**:
- Ensure that the merchant can initiate a refund using a transaction ID and that the refund process is completed successfully.

2. **User Interface and Navigation**:
- Confirm that the navigation steps to access the refund module are straightforward and functional.

3. **Accuracy and Completeness**:
- Validate that the refund information is correct and that the system acknowledges the refund, ensuring all transaction records are appropriately updated.

By validating these aspects, the test case aims to ensure a seamless and accurate refund process for merchants, thereby enhancing user satisfaction and operational efficiency."
Generate data-driven clientcentral_testcases for customer support Testcases TC_52 Validate Support Agent Is Able To Escalate A Support Ticket,data-driven,TC_52 Validate Support Agent Is Able To Escalate A Support Ticket,"*** Settings ***
Documentation    Validate TC_52 Validate Support Agent Is Able To Escalate A Support Ticket
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       supportAgent
${VALID_PASSWORD}   supportSecret

*** Test Cases ***
TC_52 Validate Support Agent Is Able To Escalate A Support Ticket
[Documentation]    Validate TC_52 Validate Support Agent Is Able To Escalate A Support Ticket using the following steps
Send Request To Create Customer    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
Send Request To Log Support Ticket For Customer    ${DUNDER_MIFFLIN}    ${ticket_id}    ${nan}
Navigate To Support Ticket Details Page    ${ticket_id}    ${nan}    ${nan}
Select Escalate Option In Support Ticket    ${ticket_id}    ${Supporting Team}    ${nan}
Confirm Escalation Of Support Ticket    ${ticket_id}    ${nan}    ${nan}
Validate Ticket Status In Support Ticket Details    ${ticket_id}    ${Escalated}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${nan}    ${nan}

Send Request To Log Support Ticket For Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${ticket_id}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${ticket_id}    ${nan}

Navigate To Support Ticket Details Page
[Arguments]    ${ticket_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ticket_id}    ${nan}    ${nan}

Select Escalate Option In Support Ticket
[Arguments]    ${ticket_id}    ${Supporting Team}    ${nan}
[Return]    ${partial_string}
[Documentation]    Keyword description
Log    ${ticket_id}    ${Supporting Team}    ${nan}

Confirm Escalation Of Support Ticket
[Arguments]    ${ticket_id}    ${nan}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${ticket_id}    ${nan}    ${nan}

Validate Ticket Status In Support Ticket Details
[Arguments]    ${ticket_id}    ${Escalated}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${ticket_id}    ${Escalated}    ${nan}

","The test case 'TC_52 Validate Support Agent Is Able To Escalate A Support Ticket' aims to ensure that support agents within a customer support application can escalate a support ticket to a higher-level support team correctly. The primary purposes of this test case include:
"
Generate data-driven paynow test cases for AscendTest Testcases TC_22 Validate New User Registration And Initial Payment Processing,data-driven,TC_22 Validate New User Registration And Initial Payment Processing,"*** Settings ***
Documentation    Validate TC_22 Validate New User Registration And Initial Payment Processing
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate New User Registration And Initial Payment Processing
[Documentation]    Validate TC_22 Validate New User Registration And Initial Payment Processing using the following steps
Send Request To Register New User    ${NEW_USER}    ${nan}    ${nan}
Activate User Account via Email    ${NEW_USER}    ${activation_code}    ${nan}
Login To PayNow As New User    ${NEW_USER}    ${VALID_PASSWORD}    ${nan}
Setup Initial Payment Method    ${NEW_USER}    ${credit_card_details}    ${nan}
Make Initial Payment For Subscription    ${amount}    ${payment_method}    ${nan}
Validate Initial Payment Success Message    ${Thank you for your payment}    ${nan}    ${nan}

*** Keywords ***
Send Request To Register New User
[Arguments]    ${NEW_USER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_USER}    ${nan}    ${nan}

Activate User Account via Email
[Arguments]    ${NEW_USER}    ${activation_code}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_USER}    ${activation_code}    ${nan}

Login To PayNow As New User
[Arguments]    ${NEW_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_USER}    ${VALID_PASSWORD}    ${nan}

Setup Initial Payment Method
[Arguments]    ${NEW_USER}    ${credit_card_details}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_USER}    ${credit_card_details}    ${nan}

Make Initial Payment For Subscription
[Arguments]    ${amount}    ${payment_method}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${amount}    ${payment_method}    ${nan}

Validate Initial Payment Success Message
[Arguments]    ${Thank you for your payment}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Thank you for your payment}    ${nan}    ${nan}

","The purpose of the test case 'TC_22 Validate New User Registration And Initial Payment Processing' is to ensure that the new user registration and subsequent initial payment process performs as expected within the PayNow system.

**Purpose:**
1. **User Registration:** To confirm that new users can successfully register their accounts and receive an activation code through email.
2. **Account Activation:** To validate that users can activate their accounts using the received activation code.
3. **User Login:** To ensure the newly registered users can log in to the PayNow system using valid credentials.
4. **Payment Method Setup:** To verify users can set up their preferred initial payment method without any issues.
5. **Initial Payment Processing:** To ensure that the initial payment for a subscription is processed successfully and an appropriate success message is displayed.
6. **User Experience:** To enhance overall user satisfaction through seamless registration and payment steps, ensuring the system guides the user throughout the process effectively and efficiently."
Create data-driven sterlingcooper test cases TC_23 Validate Customer Details Are Updated Successfully After Modification,data-driven,TC_23 Validate Customer Details Are Updated Successfully After Modification,"*** Settings ***
Documentation    Validate TC_23 Validate Customer Details Are Updated Successfully After Modification
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_23 Validate Customer Details Are Updated Successfully After Modification
[Documentation]    Validate TC_23 Validate Customer Details Are Updated Successfully After Modification using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Update Customer Details    ${customer_id}    ${new_customer_details}    ${nan}
Validate Updated Customer Details    ${customer_id}    ${new_customer_details}    ${nan}
Confirm Update In Customer Profile    ${STERLING_COOPER_MERCHANT}    ${customer_id}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Update Customer Details
[Arguments]    ${customer_id}    ${new_customer_details}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${new_customer_details}    ${nan}

Validate Updated Customer Details
[Arguments]    ${customer_id}    ${new_customer_details}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_id}    ${new_customer_details}    ${nan}

Confirm Update In Customer Profile
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${customer_id}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${customer_id}    ${nan}

","**Test Case Summary: TC_23 - Validate Customer Details Are Updated Successfully After Modification**

**Purpose:** The purpose of this test case is to confirm that customer details stored within the Sterling Cooper system are successfully updated when modified. This entails validating that changes to customer information are properly recorded, maintained, and reflected across the system without any discrepancies.

The test aims to validate:
1. **Successfully initiating customer creation:** The system should be able to create a new customer profile.
2. **Generating and modifying customer details:** The system should allow random details to be generated and then accurately modify these details as specified.
3. **Verification of updated details:** The updates made to the customer profile should reflect accurately, and a validation against the new details should confirm their accuracy.
4. **Consistency across customer profile:** The modifications should be consistent across the entire customer profile interface."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_42 Validate Ability To Apply Discounts To Invoices,data-driven,TC_42 Validate Ability To Apply Discounts To Invoices,"*** Settings ***
Documentation    Validate TC_42 Validate Ability To Apply Discounts To Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_42 Validate Ability To Apply Discounts To Invoices
[Documentation]    Validate TC_42 Validate Ability To Apply Discounts To Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Apply Discount To Invoice    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    ${discount_code}
Launch PayNow Application    ${STERLING_COOPER}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Validate Discount Applied    ${discount_code}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Apply Discount To Invoice
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    ${discount_code}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    ${discount_code}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Validate Discount Applied
[Arguments]    ${discount_code}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${discount_code}    ${nan}    ${nan}

","The test case ""TC_42 Validate Ability To Apply Discounts To Invoices"" aims to verify the functionality related to discount application on invoices within the PayNow system. This test ensures that merchants using Sterling Cooper's services can successfully apply discount codes to customer invoices and that the discount reflects appropriately in the payment process.

### Purpose:"
Generate data-driven clientcentral_testcases for recurring payments Testcases TC_33 Validate Merchant Can Set Up Recurring Payments With Different Frequencies,data-driven,TC_33 Validate Merchant Can Set Up Recurring Payments With Different Frequencies,"*** Settings ***
Documentation    Validate TC_33 Validate Merchant Can Set Up Recurring Payments With Different Frequencies
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_33 Validate Merchant Can Set Up Recurring Payments With Different Frequencies
[Documentation]    Validate TC_33 Validate Merchant Can Set Up Recurring Payments With Different Frequencies using the following steps
Send Request To Create Customer    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}
Send Request To Setup Recurring Payment    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}
Navigate To Customer Recurring Payments Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Recurring Payments}    ${nan}    ${nan}
Select Recurring Payment Frequency    ${Weekly}    ${nan}    ${nan}
Enter Recurring Payment Details    ${500}    ${ACH}    ${Weekly}
Process Recurring Payment Setup    ${nan}    ${nan}    ${nan}
Validate Recurring Payment Setup Successful    ${account_number}    ${500}    ${Weekly}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}

Send Request To Setup Recurring Payment
[Arguments]    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}

Navigate To Customer Recurring Payments Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Recurring Payments}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Recurring Payments}    ${nan}    ${nan}

Select Recurring Payment Frequency
[Arguments]    ${Weekly}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Weekly}    ${nan}    ${nan}

Enter Recurring Payment Details
[Arguments]    ${500}    ${ACH}    ${Weekly}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${500}    ${ACH}    ${Weekly}

Process Recurring Payment Setup
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Recurring Payment Setup Successful
[Arguments]    ${account_number}    ${500}    ${Weekly}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${500}    ${Weekly}

","The test case ""TC_33 Validate Merchant Can Set Up Recurring Payments With Different Frequencies"" is designed to ensure that a merchant can successfully set up recurring payments for a customer with various frequency options (e.g., monthly, weekly).

The purpose of this test case is to verify the following:
"
Generate data-driven clientcentral_testcases for users Testcases TC_90 Validate Error Message When Submitting Empty Feedback Form,data-driven,TC_90 Validate Error Message When Submitting Empty Feedback Form,"*** Settings ***
Documentation    Validate TC_90 Validate Error Message When Submitting Empty Feedback Form
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_90 Validate Error Message When Submitting Empty Feedback Form
[Documentation]    Validate TC_90 Validate Error Message When Submitting Empty Feedback Form using the following steps
Open Feedback Form    ${nan}    ${nan}    ${nan}
Submit Feedback Form    ${empty_fields}    ${nan}    ${nan}
Validate Error Message In Feedback Form    ${All fields are required}    ${nan}    ${nan}

*** Keywords ***
Open Feedback Form
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    Opened Feedback Form    ${nan}    ${nan}

Submit Feedback Form
[Arguments]    ${empty_fields}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    Submitted Feedback Form with empty fields    ${empty_fields}    ${nan}    ${nan}

Validate Error Message In Feedback Form
[Arguments]    ${All fields are required}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${All fields are required}    ${nan}    ${nan}

","The test case 'TC_90 Validate Error Message When Submitting Empty Feedback Form' is designed to ensure that the feedback form validation works correctly by displaying an appropriate error message when the form is submitted without filling in any fields. This is essential to prevent users from submitting incomplete feedback, thereby ensuring that all necessary information is collected.

**Purpose:**
- Verify that the system prompts the user with an error message when an attempt is made to submit an empty feedback form.
- Confirm that the error message accurately indicates the need to fill in all required fields, hence maintaining the quality and completeness of the feedback data.
- Ensure the feedback form's validation mechanisms are working as intended, enhancing user experience and system reliability."
Generate data-driven clientcentral_testcases for password reset functionality Testcases TC_04 Validate User Is Able To Reset Password Successfully,data-driven,TC_04 Validate User Is Able To Reset Password Successfully,"*** Settings ***
Documentation    Validate TC_04 Validate User Is Able To Reset Password Successfully
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate User Is Able To Reset Password Successfully
[Documentation]    Validate TC_04 Validate User Is Able To Reset Password Successfully using the following steps
Send Request To Create User    ${user_email}    ${user_name}    ${user_password}
Send Password Reset Request    ${user_email}    ${nan}    ${nan}
Capture Password Reset Token    ${user_email}    ${reset_token}    ${nan}
Reset Password Using Token    ${reset_token}    ${new_password}    ${confirm_new_password}
Validate Password Reset    ${user_email}    ${new_password}    ${nan}
Login With New Password    ${user_email}    ${new_password}    ${nan}
Validate Login Success    ${user_email}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create User
[Arguments]    ${user_email}    ${user_name}    ${user_password}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${user_email}    ${user_name}    ${user_password}

Send Password Reset Request
[Arguments]    ${user_email}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${user_email}    ${nan}    ${nan}

Capture Password Reset Token
[Arguments]    ${user_email}    ${reset_token}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${user_email}    ${reset_token}    ${nan}

Reset Password Using Token
[Arguments]    ${reset_token}    ${new_password}    ${confirm_new_password}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${reset_token}    ${new_password}    ${confirm_new_password}

Validate Password Reset
[Arguments]    ${user_email}    ${new_password}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${user_email}    ${new_password}    ${nan}

Login With New Password
[Arguments]    ${user_email}    ${new_password}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${user_email}    ${new_password}    ${nan}

Validate Login Success
[Arguments]    ${user_email}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${user_email}    ${nan}    ${nan}
","The test case 'TC_04 Validate User Is Able To Reset Password Successfully' ensures that users can securely reset their account password within an online platform. This test case focuses on the following key aspects:
"
Generate data-driven clientcentral_testcases for orders Testcases TC_45 Validate Merchant Can Reprocess A Failed Order Payment,data-driven,TC_45 Validate Merchant Can Reprocess A Failed Order Payment,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Can Reprocess A Failed Order Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Can Reprocess A Failed Order Payment
[Documentation]    Validate TC_45 Validate Merchant Can Reprocess A Failed Order Payment using the following steps
Send Request To Create Customer    ${GENESIS_CORP}    ${nan}    ${nan}
Send Request To Create Order For Customer    ${GENESIS_CORP}    ${order_id}    ${nan}
Send Request To Fail Payment For Order    ${GENESIS_CORP}    ${order_id}    ${nan}
Validate Payment Status    ${order_id}    ${Failed}    ${nan}
Reprocess Payment For Failed Order    ${order_id}    ${nan}    ${nan}
Validate Payment Status    ${order_id}    ${Success}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${GENESIS_CORP}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GENESIS_CORP}    ${nan}    ${nan}

Send Request To Create Order For Customer
[Arguments]    ${GENESIS_CORP}    ${order_id}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GENESIS_CORP}    ${order_id}    ${nan}

Send Request To Fail Payment For Order
[Arguments]    ${GENESIS_CORP}    ${order_id}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${GENESIS_CORP}    ${order_id}    ${nan}

Validate Payment Status
[Arguments]    ${order_id}    ${Failed}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_id}    ${Failed}    ${nan}

Reprocess Payment For Failed Order
[Arguments]    ${order_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_id}    ${nan}    ${nan}

Validate Payment Status
[Arguments]    ${order_id}    ${Success}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_id}    ${Success}    ${nan}
","The test case 'TC_45 Validate Merchant Can Reprocess A Failed Order Payment' aims to ensure that a merchant can successfully reprocess a payment for an order that initially failed. The purpose of this test is to validate that the system can handle payment failures gracefully and allows for reattempts to complete the transaction. This test checks for key aspects like:

1. Creating an order and simulating a payment failure.
2. Verifying the status of the payment as 'Failed'.
3. Attempting to reprocess the payment and confirming if the status updates to 'Success'.
4. Ensuring that the user is provided with appropriate feedback and the system responds correctly to different payment scenarios.

The test is crucial in ensuring that merchants have a reliable way to handle payment issues, improving the robustness of the transaction system."
Generate data-driven paynow test cases for Hamilton Testcases TC_21 Validate Customer Can View And Download Invoice,data-driven,TC_21 Validate Customer Can View And Download Invoice,"*** Settings ***
Documentation    Validate TC_21 Validate Customer Can View And Download Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_21 Validate Customer Can View And Download Invoice
[Documentation]    Validate TC_21 Validate Customer Can View And Download Invoice using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}
Launch PayNow Application    ${HAMILTON_MERCHANT}    ${nan}    ${}
Enter Customer Login Details    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Navigate To Invoice Page    ${HAMILTON_MERCHANT}    ${nan}    ${}
View Invoice Details    ${invoice_id}    ${nan}    ${}
Download Invoice    ${invoice_id}    ${nan}    ${}
Validate Invoice Is Downloaded Successfully    ${invoice_id}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch PayNow Application
[Arguments]    ${HAMILTON_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${HAMILTON_MERCHANT}    ${nan}    ${}

Enter Customer Login Details
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Navigate To Invoice Page
[Arguments]    ${HAMILTON_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${HAMILTON_MERCHANT}    ${nan}    ${}

View Invoice Details
[Arguments]    ${invoice_id}    ${nan}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${invoice_id}    ${nan}    ${}

Download Invoice
[Arguments]    ${invoice_id}    ${nan}    ${}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${invoice_id}    ${nan}    ${}

Validate Invoice Is Downloaded Successfully
[Arguments]    ${invoice_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_id}    ${nan}    ${}

","The test case 'TC_21 Validate Customer Can View And Download Invoice' is designed to ensure that a customer can successfully view and download their invoices within the PayNow application. The purpose is to validate the correct display of invoice information and the functionality of the download feature.

**Purpose:**
"
Generate data-driven clientcentral_testcases for all customers Testcases TC_15 Validate Merchant Is Able To Update Customer Information,data-driven,TC_15 Validate Merchant Is Able To Update Customer Information,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Is Able To Update Customer Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Is Able To Update Customer Information
[Documentation]    Validate TC_15 Validate Merchant Is Able To Update Customer Information using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}
Select Module    ${Customers}    ${nan}    ${}
Search Customer    ${STERLING_COOPER}    ${customer_id}    ${nan}
Update Customer Details    ${customer_id}    ${new_customer_name}    ${new_email}
Validate Updated Customer Information Is Displayed    ${new_customer_name}    ${new_email}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Select Module
[Arguments]    ${Customers}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Customers}    ${nan}    ${}

Search Customer
[Arguments]    ${STERLING_COOPER}    ${customer_id}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${customer_id}    ${nan}

Update Customer Details
[Arguments]    ${customer_id}    ${new_customer_name}    ${new_email}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${new_customer_name}    ${new_email}

Validate Updated Customer Information Is Displayed
[Arguments]    ${new_customer_name}    ${new_email}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_customer_name}    ${new_email}    ${}

","The purpose of the test case 'TC_15 Validate Merchant Is Able To Update Customer Information' is to verify that a merchant has the capability to modify existing customer records within the system. This test ensures that the process of updating customer details, such as name and email address, functions correctly without any errors. Successful execution of this test case confirms that the updated customer information is accurately saved and displayed, which is essential for maintaining current and precise customer data in the merchant portal."
Generate data-driven transactions_testcases for refunds Testcases TC_75 Validate Customer Can Request Refund For Completed Transaction,data-driven,TC_75 Validate Customer Can Request Refund For Completed Transaction,"*** Settings ***
Documentation    Validate TC_75 Validate Customer Can Request Refund For Completed Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_75 Validate Customer Can Request Refund For Completed Transaction
[Documentation]    Validate TC_75 Validate Customer Can Request Refund For Completed Transaction using the following steps
Send Request To Create Customer    ${ACME_CORP}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${ACME_CORP}    ${account_number}    ${nan}
Send Request To Process Payment Through Credit Card    ${ACME_CORP}    ${account_number}    ${invoice_number}
Get TransactionId    ${response}    ${nan}    ${nan}
Navigate To Transaction Details Page    ${transaction_id}    ${nan}    ${nan}
Select Refund Option    ${nan}    ${nan}    ${nan}
Enter Refund Details    ${refund_amount}    ${refund_reason}    ${nan}
Confirm Refund Request    ${nan}    ${nan}    ${nan}
Validate Refund Status    ${transaction_id}    ${Refunded}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${ACME_CORP}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${ACME_CORP}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${account_number}    ${nan}

Send Request To Process Payment Through Credit Card
[Arguments]    ${ACME_CORP}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${account_number}    ${invoice_number}

Get TransactionId
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Select Refund Option
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Enter Refund Details
[Arguments]    ${refund_amount}    ${refund_reason}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${refund_amount}    ${refund_reason}    ${nan}

Confirm Refund Request
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Refund Status
[Arguments]    ${transaction_id}    ${Refunded}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${Refunded}

","The test case 'TC_75 Validate Customer Can Request Refund For Completed Transaction' aims to verify that customers can successfully request a refund for a transaction that has been completed. The primary objective is to ensure that the refund functionality operates correctly, allowing the customer to specify the refund amount and reason accurately. This involves confirming several key points:

1. The ability to navigate to the transaction details page.
2. The presence and accessibility of the refund option.
3. The accuracy of refund details entered by the customer, including the amount and reason.
4. Confirmation and validation of the refund status to ensure that the process completes as expected.

By validating these functionalities, the test case ensures that customers can manage refunds seamlessly and that the system adheres to the required specifications for processing refunds for completed transactions."
Design data-driven paynow test cases for WidgetInc Testcases TC_05 Verify Customer Can Delete A Saved Payment Method,data-driven,TC_05 Verify Customer Can Delete A Saved Payment Method,"*** Settings ***
Documentation    Validate TC_05 Verify Customer Can Delete A Saved Payment Method
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Verify Customer Can Delete A Saved Payment Method
[Documentation]    Validate TC_05 Verify Customer Can Delete A Saved Payment Method using the following steps
Send Request To Create Customer    ${WIDGETINC_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${WIDGETINC_MERCHANT}    ${nan}
Launch PayNow Application    ${WIDGETINC_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Save Payment Method    ${customer_id}    ${4111111111111111}    ${12/26}
Delete Saved Payment Method    ${customer_id}    ${nan}    ${nan}
Validate Payment Method Is Deleted    ${customer_id}    ${411111******1111}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${WIDGETINC_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${WIDGETINC_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${WIDGETINC_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${WIDGETINC_MERCHANT}    ${nan}

Launch PayNow Application
[Arguments]    ${WIDGETINC_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${WIDGETINC_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Save Payment Method
[Arguments]    ${customer_id}    ${4111111111111111}    ${12/26}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${4111111111111111}    ${12/26}

Delete Saved Payment Method
[Arguments]    ${customer_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${nan}    ${nan}

Validate Payment Method Is Deleted
[Arguments]    ${customer_id}    ${411111******1111}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_id}    ${411111******1111}    ${nan}

","**Test Case: TC_05 Verify Customer Can Delete A Saved Payment Method**

**Purpose:**

The primary objective of this test case is to verify that customers have the ability to delete their previously saved payment methods from their accounts within the application. Ensuring this functionality is vital for maintaining user control over their stored payment data and enhancing overall data security.

**Objectives:**
1. Verify that the delete option is available for saved payment methods in the user interface.
2. Ensure that selecting the delete option permanently removes the payment method from the user's account.
3. Confirm that the system does not reference deleted payment methods in future transactions or interfaces.
4. Validate that appropriate notifications or messages are displayed to inform the customer of the successful deletion."
Create data-driven clientcentral_testcases for customers Testcases TC_45 Validate Merchant Is Able To Filter Customers By Email Domain,data-driven,TC_45 Validate Merchant Is Able To Filter Customers By Email Domain,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To Filter Customers By Email Domain
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To Filter Customers By Email Domain
[Documentation]    Validate TC_45 Validate Merchant Is Able To Filter Customers By Email Domain using the following steps
Send Request To Create Multiple Customers    ${STERLING_COOPER}    ${gmail.com}    ${yahoo.com}
Navigate To Customer List Page    ${nan}    ${nan}    ${nan}
Apply Email Domain Filter    ${gmail.com}    ${nan}    ${nan}
Validate Filtered Customer List Results    ${gmail.com}    ${nan}    ${nan}
Apply Email Domain Filter    ${yahoo.com}    ${nan}    ${nan}
Validate Filtered Customer List Results    ${yahoo.com}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Multiple Customers
[Arguments]    ${STERLING_COOPER}    ${email_domain1}    ${email_domain2}
[Return]    @{list}
[Documentation]    Keyword description","**Test Case Summary: TC_45 Validate Merchant Is Able To Filter Customers By Email Domain**

**Purpose:**
The main objective of this test case is to ensure that a merchant can effectively filter customers based on their email domain. This functionality is crucial for merchants to segment their customer base, tailor their communication strategies, and streamline customer management processes. Proper validation of this feature guarantees that the system can accurately filter and display the customer list based on specified email domains, enhancing the merchant's ability to manage and target customer groups effectively.

**Key Points:**
1. **Trigger Conditions:**
- The scenario involves having multiple customers with different email domains present in the system.
- The merchant needs to navigate to the customer list page and apply filters based on specific email domains (e.g., `@gmail.com`, `@yahoo.com`).

2. **Validation Steps:**
- Ensure that the system accurately filters and displays customers who have the specified email domain.
- Validate the accuracy of the filter by cross-referencing the email domain of the displayed customers with the applied filter and ensuring there are no discrepancies.

3. **Importance:**
- By verifying this feature, we ensure that merchants can easily and effectively manage customers based on email domains, which can be a critical aspect of targeted marketing and customer service strategies."
Generate data-driven paynow test cases for customers Testcases TC_12 Validate User Can Delete Saved Credit Card Payment Method,data-driven,TC_12 Validate User Can Delete Saved Credit Card Payment Method,"*** Settings ***
Documentation    Validate TC_12 Validate User Can Delete Saved Credit Card Payment Method
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate User Can Delete Saved Credit Card Payment Method
[Documentation]    Validate TC_12 Validate User Can Delete Saved Credit Card Payment Method using the following steps
Send Request To Create Customer    ${CUSTOMER_ABCD}    ${nan}    ${nan}
Add A Credit Card Payment Method    ${CUSTOMER_ABCD}    ${CreditCard}    ${1234-5678-9012-3456}
Validate Credit Card Exists Under Saved Payment Method    ${CUSTOMER_ABCD}    ${CreditCard}    ${1234-5678-9012-3456}
Delete Saved Credit Card Payment Method    ${CUSTOMER_ABCD}    ${CreditCard}    ${1234-5678-9012-3456}
Validate Credit Card No Longer Exists Under Saved Payment Method    ${CUSTOMER_ABCD}    ${CreditCard}    ${1234-5678-9012-3456}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${CUSTOMER_ABCD}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CUSTOMER_ABCD}    ${nan}    ${nan}

Add A Credit Card Payment Method
[Arguments]    ${CUSTOMER_ABCD}    ${CreditCard}    ${1234-5678-9012-3456}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CUSTOMER_ABCD}    ${CreditCard}    ${1234-5678-9012-3456}

Validate Credit Card Exists Under Saved Payment Method
[Arguments]    ${CUSTOMER_ABCD}    ${CreditCard}    ${1234-5678-9012-3456}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${CUSTOMER_ABCD}    ${CreditCard}    ${1234-5678-9012-3456}

Delete Saved Credit Card Payment Method
[Arguments]    ${CUSTOMER_ABCD}    ${CreditCard}    ${1234-5678-9012-3456}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CUSTOMER_ABCD}    ${CreditCard}    ${1234-5678-9012-3456}

Validate Credit Card No Longer Exists Under Saved Payment Method
[Arguments]    ${CUSTOMER_ABCD}    ${CreditCard}    ${1234-5678-9012-3456}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${CUSTOMER_ABCD}    ${CreditCard}    ${1234-5678-9012-3456}

","**Test Case: TC_12 Validate User Can Delete Saved Credit Card Payment Method**

**Purpose:**

The purpose of this test case is to ensure that users can successfully delete a previously saved credit card payment method from their account. This is a vital function for maintaining secure and up-to-date payment methods, helping users manage their payment options efficiently.

**Key Objectives:**

1. **Creation Validation:** Confirm that users can add a new credit card payment method.
2. **Existence Verification:** Ensure the credit card payment method is listed under saved payment methods.
3. **Deletion Mechanism:** Verify that users can delete the saved credit card payment method.
4. **Deletion Validation:** Confirm that the credit card payment method no longer exists under saved payment methods post-deletion."
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_47 Validate Customer Is Able To Update Saved Payment Method With New Details,data-driven,TC_47 Validate Customer Is Able To Update Saved Payment Method With New Details,"*** Settings ***
Documentation    Validate TC_47 Validate Customer Is Able To Update Saved Payment Method With New Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_47 Validate Customer Is Able To Update Saved Payment Method With New Details
[Documentation]    Validate TC_47 Validate Customer Is Able To Update Saved Payment Method With New Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Navigate To Saved Payment Methods    ${account_number}    ${nan}    ${nan}
Update Payment Method Details    ${account_number}    ${new_payment_details}    ${nan}
Validate Updated Payment Method Is Displayed    ${new_payment_details}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Saved Payment Methods
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Update Payment Method Details
[Arguments]    ${account_number}    ${new_payment_details}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${new_payment_details}    ${nan}

Validate Updated Payment Method Is Displayed
[Arguments]    ${new_payment_details}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_payment_details}    ${nan}    ${nan}

","The test case 'TC_47 Validate Customer Is Able To Update Saved Payment Method With New Details' aims to confirm that customers can successfully update the details of their previously saved payment methods. The objectives include:

1. Ensuring the customer can navigate to the section of the application where saved payment methods are listed.
2. Verifying the option to edit or update an existing payment method with new information (e.g., new card number, expiration date).
3. Checking the system correctly saves and displays the updated payment method details.
4. Confirming this can be done seamlessly without errors to enhance the user experience and maintain the reliability and utility of the payment options available.

This verification helps ensure customers have the flexibility to keep their payment information current and accurate."
Create data-driven clientcentral_testcases for customers Testcases TC_55 Validate Merchant Can Apply Discount to an Invoice,data-driven,TC_55 Validate Merchant Can Apply Discount to an Invoice,"*** Settings ***
Documentation    Validate TC_55 Validate Merchant Can Apply Discount to an Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_55 Validate Merchant Can Apply Discount to an Invoice
[Documentation]    Validate TC_55 Validate Merchant Can Apply Discount to an Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}
Apply Discount To Invoice    ${invoice_number}    ${discount_amount}    ${nan}
Validate Discount Applied    ${invoice_number}    ${discount_amount}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Invoices}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Invoices}    ${nan}    ${nan}

Apply Discount To Invoice
[Arguments]    ${invoice_number}    ${discount_amount}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${discount_amount}    ${nan}

Validate Discount Applied
[Arguments]    ${invoice_number}    ${discount_amount}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${discount_amount}    ${nan}
","The test case ""TC_55 Validate Merchant Can Apply Discount to an Invoice"" is designed to ensure that merchants using the system can successfully apply a discount to an invoice. The goal of this test case is to validate that the discount application feature works correctly and that the discounted amount is accurately reflected in the invoice. This is important for merchants who offer discounts to their customers as part of promotional campaigns, customer loyalty programs, or any other marketing strategies. The test will verify that the discount is applied correctly and that the system reflects the updated amount in the invoice, ensuring accurate financial transactions."
Validate data-driven clientcentral_testcases for product management Testcases TC_44 Validate Merchant Can Add New Product To Inventory,data-driven,TC_44 Validate Merchant Can Add New Product To Inventory,"*** Settings ***
Documentation    Validate TC_44 Validate Merchant Can Add New Product To Inventory
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_44 Validate Merchant Can Add New Product To Inventory
[Documentation]    Validate TC_44 Validate Merchant Can Add New Product To Inventory using the following steps
Login As Merchant    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Navigate To Inventory Module    ${}    ${}    ${}
Click Add New Product Button    ${}    ${}    ${}
Enter New Product Details    ${Product_Name}    ${Product_Description}    ${Price}
Click Save Product Button    ${}    ${}    ${}
Validate New Product Is Added    ${Product_Name}    ${}    ${}

*** Keywords ***
Login As Merchant
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Navigate To Inventory Module
[Arguments]    ${}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${}    ${}    ${}

Click Add New Product Button
[Arguments]    ${}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${}    ${}    ${}

Enter New Product Details
[Arguments]    ${Product_Name}    ${Product_Description}    ${Price}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Product_Name}    ${Product_Description}    ${Price}

Click Save Product Button
[Arguments]    ${}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${}    ${}    ${}

Validate New Product Is Added
[Arguments]    ${Product_Name}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Product_Name}    ${}    ${}

","### Test Case: TC_44 Validate Merchant Can Add New Product To Inventory

**Purpose:**

The objective of this test case is to verify that a merchant can successfully add a new product to the inventory system. This ensures that the merchant can maintain an up-to-date catalog of products, which is crucial for sales and inventory management.

**Key Points:**

1. **Merchant Login:** Confirm that the merchant can log in using valid credentials to access the system.
2. **Inventory Module Navigation:** Ensure the merchant can navigate to the inventory module.
3. **Add New Product:** Validate that the functionality to add a new product is operational, including input for product name, description, and price.
4. **Save and Verify:** Confirm that the product details are saved correctly and the new product appears in the inventory list."
Validate data-driven clientcentral_testcases for all transactions Testcases TC_45 Validate Merchant Can Issue Refund For A Successful Transaction,data-driven,TC_45 Validate Merchant Can Issue Refund For A Successful Transaction,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Can Issue Refund For A Successful Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Can Issue Refund For A Successful Transaction
[Documentation]    Validate TC_45 Validate Merchant Can Issue Refund For A Successful Transaction using the following steps
Send Request To Create Customer    ${ACME_CORP}    ${customer_id}    ${nan}
Send Request To Create Invoice For Customer    ${ACME_CORP}    ${customer_id}    ${invoice_id}
Send Request To Process Payment For Credit Card    ${ACME_CORP}    ${customer_id}    ${invoice_id}
Get Gatewayid    ${response}    ${nan}    ${nan}
Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}
Validate Transaction Details Page Is Displayed    ${gateway_id}    ${nan}    ${nan}
Initiate Refund Process    ${gateway_id}    ${nan}    ${nan}
Submit Refund Request    ${gateway_id}    ${refund_amount}    ${nan}
Get Refund Confirmation    ${response}    ${nan}    ${nan}
Validate Refund Confirmation    ${response}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${ACME_CORP}    ${customer_id}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${customer_id}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${ACME_CORP}    ${customer_id}    ${invoice_id}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${customer_id}    ${invoice_id}

Send Request To Process Payment For Credit Card
[Arguments]    ${ACME_CORP}    ${customer_id}    ${invoice_id}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${customer_id}    ${invoice_id}

Get Gatewayid
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
[Arguments]    ${gateway_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${gateway_id}    ${nan}    ${nan}

Validate Transaction Details Page Is Displayed
[Arguments]    ${gateway_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${gateway_id}    ${nan}    ${nan}

Initiate Refund Process
[Arguments]    ${gateway_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${gateway_id}    ${nan}    ${nan}

Submit Refund Request
[Arguments]    ${gateway_id}    ${refund_amount}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${gateway_id}    ${refund_amount}    ${nan}

Get Refund Confirmation
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Validate Refund Confirmation
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

","The test case 'TC_45 Validate Merchant Can Issue Refund For A Successful Transaction' is designed to ensure that merchants have the functionality to refund a transaction that was previously processed successfully. This test verifies that the refund process is correctly implemented and that the system allows for successful completion of the refund request.

**Purpose of the Test Case:**

1. **Transaction Detail Verification:** Ensure that the transaction details are accurately displayed to the merchant before proceeding with the refund.
2"
Build data-driven clientcentral_testcases for all transactions Testcases TC_90 Validate Merchant Can Export Transaction Reports,data-driven,TC_90 Validate Merchant Can Export Transaction Reports,"*** Settings ***
Documentation    Validate TC_90 Validate Merchant Can Export Transaction Reports
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_90 Validate Merchant Can Export Transaction Reports
[Documentation]    Validate TC_90 Validate Merchant Can Export Transaction Reports using the following steps
Login As Merchant    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Navigate To Reports Section    ${All Transactions}    ${}    ${}
Select Date Range    ${Last Month}    ${}    ${}
Export Report As CSV    ${nan}    ${}    ${}
Validate Exported Report    ${report_name}    ${}    ${}

*** Keywords ***
Login As Merchant
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Navigate To Reports Section
[Arguments]    ${All Transactions}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${All Transactions}    ${}    ${}

Select Date Range
[Arguments]    ${Last Month}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Last Month}    ${}    ${}

Export Report As CSV
[Arguments]    ${nan}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${}    ${}

Validate Exported Report
[Arguments]    ${report_name}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${report_name}    ${}    ${}

","**Test Case: TC_90 Validate Merchant Can Export Transaction Reports**

**Purpose:**
The primary objective of this test case is to ensure that a merchant can successfully export transaction reports from the platform. The export function is crucial for merchants as it allows them to download, analyze, and keep records of transaction data for their financial management and reporting needs.

**Key Steps:**
1. **Login:** The merchant logs into their account using valid credentials.
2. **Navigation:** The merchant navigates to the 'Reports' section within the platform.
3. **Select Date Range:** The merchant selects the relevant date range for the transactions they wish to export.
4. **Export Report:** The merchant exports the report in CSV format.
5. **Validation:** The system confirms that the report has been successfully generated and downloaded, ensuring the file contains accurate and complete transaction data."
Generate data-driven clientcentral_testcases for virtual terminal Testcases TC_02 Validate Merchant Is Unable To Process Transaction Without Customer Details,data-driven,TC_02 Validate Merchant Is Unable To Process Transaction Without Customer Details,"*** Settings ***
Documentation    Validate TC_02 Validate Merchant Is Unable To Process Transaction Without Customer Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Merchant Is Unable To Process Transaction Without Customer Details
[Documentation]    Validate TC_02 Validate Merchant Is Unable To Process Transaction Without Customer Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}
Select Module    ${Virtual Terminal}    ${nan}    ${}
Search Customer In Virtual Terminal    ${nan}    ${nan}    ${}
Select Country In Virtual Terminal    ${United States}    ${nan}    ${}
Select Payment Type    ${LumpSum}    ${nan}    ${}
Enter Amount For Payment    ${Sale}    ${100.00}    ${}
Select Payment Method    ${Credit Card}    ${nan}    ${}
Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${}
Validate Error Message In Virtual Terminal    ${Customer details are required to process the transaction.}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${}

Select Module
[Arguments]    ${Virtual Terminal}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Virtual Terminal}    ${nan}    ${}

Search Customer In Virtual Terminal
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Select Country In Virtual Terminal
[Arguments]    ${United States}    ${nan}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${United States}    ${nan}    ${}

Select Payment Type
[Arguments]    ${LumpSum}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${LumpSum}    ${nan}    ${}

Enter Amount For Payment
[Arguments]    ${Sale}    ${100.00}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Sale}    ${100.00}    ${}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${}

Enter Credit Card Details
[Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${}

Validate Error Message In Virtual Terminal
[Arguments]    ${Customer details are required to process the transaction.}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Customer details are required to process the transaction.}    ${nan}    ${}

","The test case ""TC_02 Validate Merchant Is Unable To Process Transaction Without Customer Details"" ensures that the system accurately enforces the requirement for customer details before processing transactions through the virtual terminal.

### Purpose:"
Create data-driven clientcentral_testcases for user profile management Testcases TC_37 Validate User Can Update Email Address Successfully,data-driven,TC_37 Validate User Can Update Email Address Successfully,"*** Settings ***
Documentation    Validate TC_37 Validate User Can Update Email Address Successfully
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_37 Validate User Can Update Email Address Successfully
[Documentation]    Validate TC_37 Validate User Can Update Email Address Successfully using the following steps
Login As Valid User        ${VALID_USER}    ${VALID_PASSWORD}    ${}
Navigate To UserProfile Section    ${nan}    ${nan}    ${}
Update Email Address    ${new_email}    ${nan}    ${}
Save Changes              ${nan}    ${nan}    ${}
Validate Email Is Updated    ${new_email}    ${nan}    ${}

*** Keywords ***
Login As Valid User
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${boolean}
[Documentation]    Login with valid user credentials
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Navigate To UserProfile Section
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Navigate to the user profile section of the application
Log    Navigating to UserProfile Section    ${nan}    ${nan}

Update Email Address
[Arguments]    ${new_email}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Update the email address with the provided new email
Log    Updating Email to ${new_email}    ${nan}    ${}

Save Changes
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Save the updated email address
Log    Saving changes    ${nan}    ${nan}

Validate Email Is Updated
[Arguments]    ${new_email}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Validate that the email address is updated successfully
Log    Validating email is updated to ${new_email}    ${nan}    ${}

","The test case 'TC_37 Validate User Can Update Email Address Successfully' is designed to confirm that a user can update their email address within their profile settings. The purpose of this test is to ensure that the system correctly processes the updating of email addresses, verifying both the input validation and backend update procedures. The steps involve logging in with valid credentials, navigating to the user profile section, updating the email address, saving changes, and finally validating that the email address has been updated successfully. This helps ensure a seamless experience for users managing their profile information."
Create data-driven inventory management test cases for ItemValidation Testcases TC_15 Validate Item Quantity Is Correctly Updated After Each Transaction,data-driven,TC_15 Validate Item Quantity Is Correctly Updated After Each Transaction,"*** Settings ***
Documentation    Validate TC_15 Validate Item Quantity Is Correctly Updated After Each Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       inventoryuser
${VALID_PASSWORD}   invsecret

*** Test Cases ***
TC_15 Validate Item Quantity Is Correctly Updated After Each Transaction
[Documentation]    Validate TC_15 Validate Item Quantity Is Correctly Updated After Each Transaction using the following steps
Generate Random Item Details    ${nan}    ${nan}    ${}
Launch Inventory Management Application    ${ITEM_MANAGEMENT}    ${nan}    ${}
Enter Item Details    ${item_details}    ${ITEM_MANAGEMENT}    ${}
Record Initial Item Quantity    ${initial_quantity}    ${item_details}    ${}
Process Item Addition Transaction    ${item_addition}    ${item_details}    ${initial_quantity}
Validate Item Quantity After Addition    ${item_details.new_quantity}    ${expected_addition_quantity}    ${}
Process Item Deduction Transaction    ${item_deduction}    ${item_details}    ${item_details.new_quantity}
Validate Item Quantity After Deduction    ${item_details.final_quantity}    ${expected_deduction_quantity}    ${}

*** Keywords ***
Generate Random Item Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch Inventory Management Application
[Arguments]    ${ITEM_MANAGEMENT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ITEM_MANAGEMENT}    ${nan}    ${}

Enter Item Details
[Arguments]    ${item_details}    ${ITEM_MANAGEMENT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${item_details}    ${ITEM_MANAGEMENT}    ${}

Record Initial Item Quantity
[Arguments]    ${initial_quantity}    ${item_details}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${initial_quantity}    ${item_details}    ${}

Process Item Addition Transaction
[Arguments]    ${item_addition}    ${item_details}    ${initial_quantity}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${item_addition}    ${item_details}    ${initial_quantity}

Validate Item Quantity After Addition
[Arguments]    ${item_details.new_quantity}    ${expected_addition_quantity}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${item_details.new_quantity}    ${expected_addition_quantity}    ${}

Process Item Deduction Transaction
[Arguments]    ${item_deduction}    ${item_details}    ${item_details.new_quantity}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${item_deduction}    ${item_details}    ${item_details.new_quantity}

Validate Item Quantity After Deduction
[Arguments]    ${item_details.final_quantity}    ${expected_deduction_quantity}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${item_details.final_quantity}    ${expected_deduction_quantity}    ${}

","The test case 'TC_15 Validate Item Quantity Is Correctly Updated After Each Transaction' focuses on verifying that item quantities in an inventory management system are accurately updated after performing various transactions such as additions or deductions.

**Purpose:**
1. **Accurate Quantity Tracking:** Ensure that the system maintains accurate item quantities, reflecting changes from each transaction correctly.
2. **Transaction Validation:** Verify that items added to or removed from the inventory are accurately recorded in the system.
3. **Error Prevention:** Ensure there are no discrepancies or errors in quantity updates, which could affect inventory management and reporting.
4. **User Notifications:** Confirm that users are properly notified of the new item quantities after transactions, helping them make informed decisions."
Validate data-driven clientcentral_testcases for merchant activity reports Testcases TC_45 Validate Merchant Is Able To Generate Activity Report For A Specific Date Range,data-driven,TC_45 Validate Merchant Is Able To Generate Activity Report For A Specific Date Range,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To Generate Activity Report For A Specific Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To Generate Activity Report For A Specific Date Range
[Documentation]    Validate TC_45 Validate Merchant Is Able To Generate Activity Report For A Specific Date Range using the following steps
Send Request To Create Merchant    ${STERLING_COOPER}    ${nan}    ${nan}
Set Date Range For Report    ${start_date}    ${end_date}    ${nan}
Generate Activity Report    ${merchant_id}    ${start_date}    ${end_date}
Retrieve Generated Report    ${merchant_id}    ${report_id}    ${nan}
Validate Report Contains Transactions Within Date Range    ${report_data}    ${start_date}    ${end_date}

*** Keywords ***
Send Request To Create Merchant
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Set Date Range For Report
[Arguments]    ${start_date}    ${end_date}    ${nan}
[Return]    ${tuple}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${nan}

Generate Activity Report
[Arguments]    ${merchant_id}    ${start_date}    ${end_date}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${merchant_id}    ${start_date}    ${end_date}

Retrieve Generated Report
[Arguments]    ${merchant_id}    ${report_id}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${merchant_id}    ${report_id}    ${nan}

Validate Report Contains Transactions Within Date Range
[Arguments]    ${report_data}    ${start_date}    ${end_date}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${report_data}    ${start_date}    ${end_date}

","The test case 'TC_45 Validate Merchant Is Able To Generate Activity Report For A Specific Date Range' is developed to test the functionality that allows merchants to generate activity reports for a particular date range. This ensures that the merchant can delineate specific periods for report generation, which aids in tracking specific transactional activities.

**Purpose of the Test Case:**

1. **Report Accuracy:** Verify that the system can create an activity report that accurately covers the transactions made within the specified date range.
2. **Data Integrity:** Ensure that only transactions within the given date range are included in the report, thereby maintaining the integrity and relevance of the report data.
3. **Functionality:** Confirm that merchants can specify date ranges effectively and retrieve reports without errors, facilitating accurate financial tracking and auditing."
Create data-driven clientcentral_testcases for refunds Testcases TC_15 Validate Customer Is Able To Initiate Refund,data-driven,TC_15 Validate Customer Is Able To Initiate Refund,"*** Settings ***
Documentation    Validate TC_15 Validate Customer Is Able To Initiate Refund
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Customer Is Able To Initiate Refund
[Documentation]    Validate TC_15 Validate Customer Is Able To Initiate Refund using the following steps
Send Request To Create Customer    ${CLIENT_CENTRAL}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${CLIENT_CENTRAL}    ${account_number}    ${nan}
Send Request To Process Payment Through Credit Card    ${CLIENT_CENTRAL}    ${account_number}    ${invoice_number}
Initiate Refund For Invoice    ${account_number}    ${invoice_number}    ${full_amount}
Validate Refund Status    ${account_number}    ${invoice_number}    ${Refunded}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${CLIENT_CENTRAL}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CLIENT_CENTRAL}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${CLIENT_CENTRAL}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CLIENT_CENTRAL}    ${account_number}    ${nan}

Send Request To Process Payment Through Credit Card
[Arguments]    ${CLIENT_CENTRAL}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CLIENT_CENTRAL}    ${account_number}    ${invoice_number}

Initiate Refund For Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${full_amount}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${full_amount}

Validate Refund Status
[Arguments]    ${account_number}    ${invoice_number}    ${Refunded}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${Refunded}

","The test case 'TC_15 Validate Customer Is Able To Initiate Refund' is designed to ensure that customers within the system can successfully initiate refunds for transactions they've completed. The main objective is to verify that the refund process functions correctly from the customer's end, ensuring that the system properly handles the refund request and updates this in the transaction records.

Key goals of this test case include:
"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_95 Validate Merchant Is Able To Search Invoices Using Invoice Number,data-driven,TC_95 Validate Merchant Is Able To Search Invoices Using Invoice Number,"*** Settings ***
Documentation    Validate TC_95 Validate Merchant Is Able To Search Invoices Using Invoice Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_95 Validate Merchant Is Able To Search Invoices Using Invoice Number
[Documentation]    Validate TC_95 Validate Merchant Is Able To Search Invoices Using Invoice Number using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER}    ${invoice_number}
Launch PayNow Application    ${STERLING_COOPER}    ${nan}    ${nan}
Enter Invoice Number In Search Field    ${invoice_number}    ${nan}    ${nan}
Click On Search Button    ${nan}    ${nan}    ${nan}
Validate Search Results Display    ${invoice_number}    ${0}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER}    ${invoice_number}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Enter Invoice Number In Search Field
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Click On Search Button
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Search Results Display
[Arguments]    ${invoice_number}    ${0}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${0}    ${nan}

","The test case 'TC_95 Validate Merchant Is Able To Search Invoices Using Invoice Number' aims to ensure that merchants can effectively use the search functionality within the PayNow application to locate specific invoices by their invoice number.

### Purpose:
1. **Search Functionality:** Validate that merchants can search and find invoices using the invoice number.
2. **User Efficiency:** Ensure that the search feature improves user experience by quickly locating the desired invoices.
3. **System Reliability:** Confirm that the PayNow application reliably returns the correct search results when queries are made using invoice numbers.

### Expected Outcomes:
1. When a merchant enters an invoice number in the search field and clicks the search button, the corresponding invoice should be displayed.
2. The search functionality should swiftly and accurately return results without errors, ensuring high usability of the application."
Create data-driven paynow test cases for all transactions Testcases TC_23 Validate Customer Can View Transaction History After Payment,data-driven,TC_23 Validate Customer Can View Transaction History After Payment,"*** Settings ***
Documentation    Validate TC_23 Validate Customer Can View Transaction History After Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_23 Validate Customer Can View Transaction History After Payment
[Documentation]    Validate TC_23 Validate Customer Can View Transaction History After Payment using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}
Launch PayNow Application    ${PAYNOW_APPLICATION}    ${nan}    ${}
Enter Customer Details    ${customer_details}    ${nan}    ${}
Select Payment Method    ${Credit Card}    ${nan}    ${}
Enter Payment Details    ${100.00}    ${nan}    ${}
Submit Payment    ${nan}    ${nan}    ${}
Navigate To Transaction History Page    ${nan}    ${nan}    ${}
Validate Transaction In History    ${100.00}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch PayNow Application
[Arguments]    ${PAYNOW_APPLICATION}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PAYNOW_APPLICATION}    ${nan}    ${}

Enter Customer Details
[Arguments]    ${customer_details}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${nan}    ${}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${}

Enter Payment Details
[Arguments]    ${100.00}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${100.00}    ${nan}    ${}

Submit Payment
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Navigate To Transaction History Page
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate Transaction In History
[Arguments]    ${100.00}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${100.00}    ${nan}    ${}

","**Test Case Summary: TC_23 Validate Customer Can View Transaction History After Payment**

**Purpose:**
The primary aim of this test case is to ensure that the customer's system accurately displays the transaction history after a payment has been processed. This validation is crucial to confirm that customers can view their transaction details, thereby providing transparency and assurance of successful transaction records.

**Steps involved:**
1. **Generate Random Customer Details:** Simulate customer details for the transaction.
2. **Launch Application:** Open the PayNow application.
3. **Enter Customer Details:** Input the customer's details into the application.
4. **Select Payment Method:** Choose 'Credit Card' as the payment method.
5. **Enter Payment Details:** Input the payment amount.
6. **Submit Payment:** Submit the payment for processing.
7. **Navigate to History:** Switch to the transaction history page.
8. **Validate History:** Confirm that the transaction appears correctly in the history with the accurate amount."
Create data-driven clientcentral_testcases for reports Testcases TC_07 Validate Merchant Is Able To Generate Monthly Sales Report,data-driven,TC_07 Validate Merchant Is Able To Generate Monthly Sales Report,"*** Settings ***
Documentation    Validate TC_07 Validate Merchant Is Able To Generate Monthly Sales Report
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Merchant Is Able To Generate Monthly Sales Report
[Documentation]    Validate TC_07 Validate Merchant Is Able To Generate Monthly Sales Report using the following steps
Select Merchant    ${ABC_CORP}    ${nan}    ${}
Select Module    ${Reports}    ${nan}    ${}
Select Report Type    ${Monthly Sales}    ${nan}    ${}
Select Date Range    ${Jan 2023}    ${Dec 2023}    ${}
Generate Report    ${nan}    ${nan}    ${}
Validate Report Is Generated    ${number_of_pages}    ${Yes}    ${}

*** Keywords ***
Select Merchant
[Arguments]    ${ABC_CORP}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ABC_CORP}    ${nan}    ${}

Select Module
[Arguments]    ${Reports}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Reports}    ${nan}    ${}

Select Report Type
[Arguments]    ${Monthly Sales}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Monthly Sales}    ${nan}    ${}

Select Date Range
[Arguments]    ${Jan 2023}    ${Dec 2023}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Jan 2023}    ${Dec 2023}    ${}

Generate Report
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate Report Is Generated
[Arguments]    ${number_of_pages}    ${Yes}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${number_of_pages}    ${Yes}    ${}

","The test case 'TC_07 Validate Merchant Is Able To Generate Monthly Sales Report' ensures that merchants can successfully generate and view detailed monthly sales reports through the system.

### Purpose:"
Generate data-driven paynow test cases for integrated Testcases TC_10 Validate Customer Can Successfully Complete Payment Using PayPal With Valid Credentials,data-driven,TC_10 Validate Customer Can Successfully Complete Payment Using PayPal With Valid Credentials,"*** Settings ***
Documentation    Validate TC_10 Validate Customer Can Successfully Complete Payment Using PayPal With Valid Credentials
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret
${VALID_PAYPAL_CREDENTIALS}    valid_paypal_user:valid_paypal_password

*** Test Cases ***
TC_10 Validate Customer Can Successfully Complete Payment Using PayPal With Valid Credentials
[Documentation]    Validate TC_10 Validate Customer Can Successfully Complete Payment Using PayPal With Valid Credentials using the following steps
Launch PayNow Application    ${INTEGRATED_MERCHANT}    ${}    ${}
Select Payment Type    ${Lump Sum}    ${}    ${}
Enter Lumpsum Amount    ${20}    ${}    ${}
Select Payment Method    ${PayPal}    ${}    ${}
Enter PayPal Credentials    ${VALID_PAYPAL_CREDENTIALS}    ${}    ${}
Confirm Payment Details    ${nan}    ${}    ${}
Validate Payment Confirmation    ${nan}    ${}    ${}

*** Keywords ***
Launch PayNow Application
[Arguments]    ${INTEGRATED_MERCHANT}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${INTEGRATED_MERCHANT}    ${}    ${}

Select Payment Type
[Arguments]    ${Lump Sum}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Lump Sum}    ${}    ${}

Enter Lumpsum Amount
[Arguments]    ${20}    ${}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${20}    ${}    ${}

Select Payment Method
[Arguments]    ${PayPal}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PayPal}    ${}    ${}

Enter PayPal Credentials
[Arguments]    ${VALID_PAYPAL_CREDENTIALS}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_PAYPAL_CREDENTIALS}    ${}    ${}

Confirm Payment Details
[Arguments]    ${nan}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${}    ${}

Validate Payment Confirmation
[Arguments]    ${nan}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${}    ${}

","**Test Case: TC_10 Validate Customer Can Successfully Complete Payment Using PayPal With Valid Credentials**

**Purpose:**
The purpose of this test case is to ensure that a customer can complete a payment transaction successfully using PayPal as the payment method with valid credentials. This test is crucial for validating the PayNow application's ability to integrate smoothly with PayPal and handle transactions seamlessly.

**Description:**
1. **Setup and Initial State:**
- Customer starts the payment process with a selected lump sum amount.

2. **Action:**
- The customer chooses PayPal as the payment method and enters valid PayPal credentials.

3. **Outcome:**
- The system should confirm that the payment details are correct, and the payment should be processed successfully, displaying a confirmation message or status.

This test also verifies the integration and communication between PayNow and PayPal, ensuring payment security and transaction integrity."
Create data-driven clientcentral_testcases for all transactions Testcases TC_24 Validate Merchant Is Able To Download Transaction Report,data-driven,TC_24 Validate Merchant Is Able To Download Transaction Report,"*** Settings ***
Documentation    Validate TC_24 Validate Merchant Is Able To Download Transaction Report
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_24 Validate Merchant Is Able To Download Transaction Report
[Documentation]    Validate TC_24 Validate Merchant Is Able To Download Transaction Report using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Reports Page    ${nan}    ${nan}    ${nan}
Select Transaction Report    ${current_month}    ${nan}    ${nan}
Download Report    ${Transaction_Report}    ${nan}    ${nan}
Validate Report Downloaded Successfully    ${Transaction_Report}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Reports Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Select Transaction Report
[Arguments]    ${current_month}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${current_month}    ${nan}    ${nan}

Download Report
[Arguments]    ${Transaction_Report}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Transaction_Report}    ${nan}    ${nan}

Validate Report Downloaded Successfully
[Arguments]    ${Transaction_Report}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Transaction_Report}    ${nan}    ${nan}

","### Test Case: TC_24 Validate Merchant Is Able To Download Transaction Report

**Purpose:**

The aim of this test case is to ensure that a merchant can successfully download a transaction report through the system's reporting feature. This is essential for merchants who need to track and keep records of their transactions.

**Key Points:**

1. **Navigation to Reports Page:**
- Verify that the user can navigate to the reports section without any issues.

2. **Selection of Transaction Report:**
- Ensure the correct transaction report, typically for the current month, can be selected.

3. **Report Download:**
- Confirm that the selected report can be downloaded successfully and is saved in the correct format.

4. **Validation of Download:**
- Check that the downloaded report is indeed the transaction report and contains accurate and complete information.

This test case contributes to validating the correct functionality of the reporting features provided to the merchant, ensuring accurate record-keeping and transaction tracking."
Build data-driven paynow test cases for Techstar Testcases TC_34 Validate Customer Is Able To Schedule Monthly AutoPay Payments,data-driven,TC_34 Validate Customer Is Able To Schedule Monthly AutoPay Payments,"*** Settings ***
Documentation    Validate TC_34 Validate Customer Is Able To Schedule Monthly AutoPay Payments
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_34 Validate Customer Is Able To Schedule Monthly AutoPay Payments
[Documentation]    Validate TC_34 Validate Customer Is Able To Schedule Monthly AutoPay Payments using the following steps
Send Request To Create Customer    ${TECHSTAR_MERCHANT}    ${3}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${TECHSTAR_MERCHANT}    ${150.0}
Login To PayNOW And Navigate To Autopay    ${account_number}    ${invoice_number}    ${nan}
Select Monthly As Payment Option    ${nan}    ${nan}    ${nan}
Select Invoices Due For The Payment    ${nan}    ${nan}    ${nan}
Enter Customer And Credit Card Details For AutoPay    ${5500000000000004}    ${nan}    ${nan}
Send Request To Create AutoPay For Monthly    ${account_number}    ${5500000000000004}    ${nan}
Send Event To Process Schedule Payment    ${account_number}    ${invoice_number}    ${nan}
Validate Scheduled Payment Status    ${account_number}    ${invoice_number}    ${Scheduled}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${TECHSTAR_MERCHANT}    ${3}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${TECHSTAR_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${TECHSTAR_MERCHANT}    ${150.0}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${TECHSTAR_MERCHANT}    ${150.0}

Login To PayNOW And Navigate To Autopay
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Select Monthly As Payment Option
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Select Invoices Due For The Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Enter Customer And Credit Card Details For AutoPay
[Arguments]    ${5500000000000004}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${5500000000000004}    ${nan}    ${nan}

Send Request To Create AutoPay For Monthly
[Arguments]    ${account_number}    ${5500000000000004}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${5500000000000004}    ${nan}

Send Event To Process Schedule Payment
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Validate Scheduled Payment Status
[Arguments]    ${account_number}    ${invoice_number}    ${Scheduled}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${Scheduled}

","The test case 'TC_34 Validate Customer Is Able To Schedule Monthly AutoPay Payments' aims to ensure that customers can successfully set up automatic monthly payments using the AutoPay feature within a payment system. This test case is crucial for validating the ease of use and accuracy of the system when scheduling recurring monthly payments.

Key aspects to validate include:
"
Create data-driven clientcentral_testcases for customers Testcases TC_45 Validate Merchant Is Able To Merge Duplicate Customer Records,data-driven,TC_45 Validate Merchant Is Able To Merge Duplicate Customer Records,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To Merge Duplicate Customer Records
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To Merge Duplicate Customer Records
[Documentation]    Validate TC_45 Validate Merchant Is Able To Merge Duplicate Customer Records using the following steps
Send Request To Create Customer    ${CUSTOMER_A}    ${customerA_data}    ${nan}
Send Request To Create Duplicate Customer    ${CUSTOMER_B}    ${customerB_data}    ${nan}
Navigate To Customer Management Page    ${nan}    ${nan}    ${nan}
Select Customers For Merging    ${CUSTOMER_A}    ${CUSTOMER_B}    ${nan}
Initiate Merge Process    ${CUSTOMER_A}    ${CUSTOMER_B}    ${nan}
Confirm Merge Operation    ${merged_customer_data}    ${nan}    ${nan}
Validate Merged Customer Record    ${merged_customer_data}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${CUSTOMER_A}    ${customerA_data}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CUSTOMER_A}    ${customerA_data}    ${nan}

Send Request To Create Duplicate Customer
[Arguments]    ${CUSTOMER_B}    ${customerB_data}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CUSTOMER_B}    ${customerB_data}    ${nan}

Navigate To Customer Management Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Select Customers For Merging
[Arguments]    ${CUSTOMER_A}    ${CUSTOMER_B}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CUSTOMER_A}    ${CUSTOMER_B}    ${nan}

Initiate Merge Process
[Arguments]    ${CUSTOMER_A}    ${CUSTOMER_B}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CUSTOMER_A}    ${CUSTOMER_B}    ${nan}

Confirm Merge Operation
[Arguments]    ${merged_customer_data}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${merged_customer_data}    ${nan}    ${nan}

Validate Merged Customer Record
[Arguments]    ${merged_customer_data}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${merged_customer_data}    ${nan}    ${nan}
","The test case 'TC_45 Validate Merchant Is Able To Merge Duplicate Customer Records' is designed to ensure that a merchant can successfully identify and merge duplicate customer records within the system. The aim of this test case is to validate that the functionality for merging duplicate records operates correctly, allowing merchants to maintain a clean and accurate customer database.

### Purpose:
- **Validation of Functionality:** The primary objective is to verify that the system allows the merchant to efficiently merge duplicate records.
- **Accuracy Check:** Ensures that the merge operation results in a single customer record that consolidates all relevant information from the duplicates.
- **Usability Test:** Confirms that the process for merging records is user-friendly and can be executed without issues.
- **Data Integrity:** Validates that no customer data is lost or corrupted during the merge process, and the merged record is fully accurate and functional.

By ensuring this functionality works correctly, the test case helps maintain the integrity of customer data and enhances the overall user experience for merchants."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_45 Validate Failed Payment Error Message Is Displayed When Invalid Credit Card Is Used,data-driven,TC_45 Validate Failed Payment Error Message Is Displayed When Invalid Credit Card Is Used,"*** Settings ***
Documentation    Validate TC_45 Validate Failed Payment Error Message Is Displayed When Invalid Credit Card Is Used
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Failed Payment Error Message Is Displayed When Invalid Credit Card Is Used
[Documentation]    Validate TC_45 Validate Failed Payment Error Message Is Displayed When Invalid Credit Card Is Used using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Attempt Payment Using Invalid Credit Card    ${integrated_merchant}    ${INVALID_CREDIT_CARD_DETAILS}    ${Mastercard}
Validate Error Message On Payment Failure    ${ERROR_MESSAGE}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Attempt Payment Using Invalid Credit Card
[Arguments]    ${integrated_merchant}    ${INVALID_CREDIT_CARD_DETAILS}    ${Mastercard}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${INVALID_CREDIT_CARD_DETAILS}    ${Mastercard}

Validate Error Message On Payment Failure
[Arguments]    ${ERROR_MESSAGE}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${ERROR_MESSAGE}    ${nan}    ${nan}

","The purpose of the test case 'TC_45 Validate Failed Payment Error Message Is Displayed When Invalid Credit Card Is Used' is to ensure that the payment system correctly handles failed transactions when an invalid credit card is used. This test case aims to verify that the system provides appropriate feedback to the user in terms of error messages, thereby preventing confusion and aiding in a better user experience. The test checks whether the error handling mechanism is triggered and the corresponding error message is displayed correctly, ensuring that users are clearly informed of the payment failure and the reason behind it. By validating this functionality, the test ensures robust error handling and transparency in the payment process."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_120 Validate System Sends Invoice Reminder Email After Invoice Is Generated,data-driven,TC_120 Validate System Sends Invoice Reminder Email After Invoice Is Generated,"*** Settings ***
Documentation    Validate TC_120 Validate System Sends Invoice Reminder Email After Invoice Is Generated
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_120 Validate System Sends Invoice Reminder Email After Invoice Is Generated
[Documentation]    Validate TC_120 Validate System Sends Invoice Reminder Email After Invoice Is Generated using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Validate Invoice Generation    ${invoice_number}    ${nan}    ${nan}
Check Email Notification Sent    ${email_address}    ${nan}    ${nan}
Validate Email Contains Invoice    ${invoice_number}    ${email_address}    ${nan}

*** Keywords ***
Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Validate Invoice Generation
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Check Email Notification Sent
[Arguments]    ${email_address}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${email_address}    ${nan}    ${nan}

Validate Email Contains Invoice
[Arguments]    ${invoice_number}    ${email_address}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${email_address}    ${nan}

","The purpose of the test case 'TC_120 Validate System Sends Invoice Reminder Email After Invoice Is Generated' is to ensure that once an invoice is created within the system, an automated email reminder is sent to the customer's registered email address with the invoice details.

This test case aims to verify the following:"
Create data-driven clientcentral_testcases for all transactions Testcases TC_30 Validate Merchant Can Customize Email Receipt Template,data-driven,TC_30 Validate Merchant Can Customize Email Receipt Template,"*** Settings ***
Documentation    Validate TC_30 Validate Merchant Can Customize Email Receipt Template
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_30 Validate Merchant Can Customize Email Receipt Template
[Documentation]    Validate TC_30 Validate Merchant Can Customize Email Receipt Template using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Get Gatewayid    ${response}    ${nan}    ${nan}
Navigate To Email Template Customization Page    ${nan}    ${nan}    ${nan}
Customize Email Template    ${template_name}    ${template_body}    ${nan}
Save Customized Template    ${nan}    ${nan}    ${nan}
Send Receipt Using Customized Template    ${EMAIL}    ${nan}    ${nan}
Get Transaction ID    ${nan}    ${nan}    ${nan}
Validate Customized Receipt Is Received In Email    ${transaction_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Navigate To Email Template Customization Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Customize Email Template
[Arguments]    ${template_name}    ${template_body}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${template_name}    ${template_body}    ${nan}

Save Customized Template
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Send Receipt Using Customized Template
[Arguments]    ${EMAIL}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${EMAIL}    ${nan}    ${nan}

Get Transaction ID
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Customized Receipt Is Received In Email
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

","The test case 'TC_30 Validate Merchant Can Customize Email Receipt Template' is designed to ensure that merchants have the ability to create and utilize customized email receipt templates within the system. This test case validates the customization feature, ensuring that merchants can personalize their email communications effectively.

Key objectives include:
1. Confirming that the email template customization interface is accessible and functional.
2. Verifying that merchants can modify the content and format of the email template.
3. Ensuring the customized email template is saved correctly.
4."
Create data-driven auth_testcases for user authentication Testcases TC_101 Validate User Is Able To Reset Password,data-driven,TC_101 Validate User Is Able To Reset Password,"*** Settings ***
Documentation    Validate TC_101 Validate User Is Able To Reset Password
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret
${EMAIL}            testuser@example.com

*** Test Cases ***
TC_101 Validate User Is Able To Reset Password
[Documentation]    Validate TC_101 Validate User Is Able To Reset Password using the following steps
Send Password Reset Request    ${EMAIL}    ${nan}    ${nan}
Open Email And Get Reset Link    ${EMAIL}    ${nan}    ${nan}
Access Password Reset Link    ${reset_link}    ${nan}    ${nan}
Enter New Password    ${new_password}    ${confirm_password}    ${nan}
Submit Password Reset Form    ${new_password}    ${confirm_password}    ${nan}
Validate Password Reset Success Message    ${success_message}    ${nan}    ${nan}
Log In With New Password    ${EMAIL}    ${new_password}    ${nan}

*** Keywords ***
Send Password Reset Request
[Arguments]    ${EMAIL}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${EMAIL}    ${nan}    ${nan}

Open Email And Get Reset Link
[Arguments]    ${EMAIL}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${EMAIL}    ${nan}    ${nan}

Access Password Reset Link
[Arguments]    ${reset_link}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${reset_link}    ${nan}    ${nan}

Enter New Password
[Arguments]    ${new_password}    ${confirm_password}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_password}    ${confirm_password}    ${nan}

Submit Password Reset Form
[Arguments]    ${new_password}    ${confirm_password}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_password}    ${confirm_password}    ${nan}

Validate Password Reset Success Message
[Arguments]    ${success_message}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${success_message}    ${nan}    ${nan}

Log In With New Password
[Arguments]    ${EMAIL}    ${new_password}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${EMAIL}    ${new_password}    ${nan}

","The test case ""TC_101 Validate User Is Able To Reset Password"" is designed to verify that users can successfully reset their password through the provided system's functionality. This test case ensures that the user receives a password reset email, accesses the reset link, enters a new password, and confirms the process without any issues. The main objectives of this test case include:

1. **Password Reset Request:** Verifying that the user can initiate a password reset request.
2. **Email Handling:** Ensuring that the user receives a reset link via email and can open it.
3. **Password Entry:** Confirming that the user can enter and confirm a new password.
4. **Submission and Confirmation:** Ensuring that the system successfully processes the new password and displays an appropriate success message.
5. **Login Verification:** Verifying that the user can log in with the newly reset password to ensure the reset was successful."
Validate data-driven paynow test cases for Omnicorp Testcases TC_15 Validate Customer Can Update Account Information Successfully,data-driven,TC_15 Validate Customer Can Update Account Information Successfully,"*** Settings ***
Documentation    Validate TC_15 Validate Customer Can Update Account Information Successfully
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Customer Can Update Account Information Successfully
[Documentation]    Validate TC_15 Validate Customer Can Update Account Information Successfully using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${testuser}    ${nan}
Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
Login With Valid Credentials    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To Account Information Section    ${nan}    ${nan}    ${nan}
Update Customer Details    ${new_details}    ${nan}    ${nan}
Submit Updated Information    ${nan}    ${nan}    ${nan}
Validate Account Information Is Updated Successfully    ${expected_details}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${OMNICORP_MERCHANT}    ${testuser}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${testuser}    ${nan}

Launch PayNow Application
[Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Login With Valid Credentials
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Navigate To Account Information Section
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Update Customer Details
[Arguments]    ${new_details}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_details}    ${nan}    ${nan}

Submit Updated Information
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Account Information Is Updated Successfully
[Arguments]    ${expected_details}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${expected_details}    ${nan}    ${nan}

","**Test Case: TC_15 - Validate Customer Can Update Account Information Successfully**

**Purpose:**
The aim of this test case is to ensure that customers can update their account information successfully within the system. This encompasses the full workflow from accessing the account update section to confirming that the changes have been applied and saved accurately.

**Key Points:**
"
Generate data-driven clientcentral_testcases for transactions Testcases TC_45 Validate Merchant Is Able To Apply Discounts For Bulk Purchases,data-driven,TC_45 Validate Merchant Is Able To Apply Discounts For Bulk Purchases,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To Apply Discounts For Bulk Purchases
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To Apply Discounts For Bulk Purchases
[Documentation]    Validate TC_45 Validate Merchant Is Able To Apply Discounts For Bulk Purchases using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Bulk Purchase    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Apply Bulk Discount    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    ${discount_rate}
Select Module    ${All Transactions}    ${nan}    ${nan}
Validate Bulk Discount Applied    ${account_number}    ${invoice_number}    ${discount_rate}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Bulk Purchase
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Apply Bulk Discount
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    ${discount_rate}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    ${discount_rate}

Select Module
[Arguments]    ${All Transactions}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${All Transactions}    ${nan}    ${nan}

Validate Bulk Discount Applied
[Arguments]    ${account_number}    ${invoice_number}    ${discount_rate}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${discount_rate}

","**Test Case TC_45: Validate Merchant Is Able To Apply Discounts For Bulk Purchases**

**Purpose:**
The test case ""TC_45 Validate Merchant Is Able To Apply Discounts For Bulk Purchases"" aims to verify the merchant's ability to apply appropriate discounts when customers make bulk purchases. This functionality is essential for enhancing customer satisfaction by providing anticipated price reductions and ensuring accurate discount application during the transaction.

**Key Objectives:**
1. **Verification of Discount Application:** Ensure that the system applies the correct discount rate to bulk purchase invoices based on predefined conditions or thresholds.
2. **Accuracy:** Verify the correctness of the discount calculations and its impact on the final invoice amount.
3. **Transparency:** Ensure the merchant can view and verify the applied discounts within the transaction details.
4. **Operational Efficiency:** Confirm that bulk discount application integrates seamlessly with other transaction processing steps without introducing performance issues."
Create data-driven clientcentral_testcases for customers Testcases TC_15 Validate Merchant Can Update Customer's Billing Information,data-driven,TC_15 Validate Merchant Can Update Customer's Billing Information,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Can Update Customer's Billing Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Can Update Customer's Billing Information
[Documentation]    Validate TC_15 Validate Merchant Can Update Customer's Billing Information using the following steps
Send Request To Create Customer    ${ACME_CORP}    ${nan}    ${nan}
Navigate To Customer Details Page    ${customer_id}    ${nan}    ${nan}
Navigate To Billing Information Section    ${nan}    ${nan}    ${nan}
Update Billing Information    ${customer_id}    ${billing_info}    ${nan}
Save Updated Billing Information    ${customer_id}    ${billing_info}    ${nan}
Get Updated Billing Information    ${customer_id}    ${nan}    ${nan}
Validate Updated Billing Information    ${customer_id}    ${expected_billing_info}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${ACME_CORP}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${nan}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${customer_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${nan}    ${nan}

Navigate To Billing Information Section
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Update Billing Information
[Arguments]    ${customer_id}    ${billing_info}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${billing_info}    ${nan}

Save Updated Billing Information
[Arguments]    ${customer_id}    ${billing_info}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${billing_info}    ${nan}

Get Updated Billing Information
[Arguments]    ${customer_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${nan}    ${nan}

Validate Updated Billing Information
[Arguments]    ${customer_id}    ${expected_billing_info}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_id}    ${expected_billing_info}    ${nan}

","The test case 'TC_15 Validate Merchant Can Update Customer's Billing Information' aims to verify that a merchant is able to successfully update the billing information of a customer. Ensuring the accuracy and reliability of updating the billing information is crucial for the correct processing of future transactions and maintaining up-to-date customer data.

Key objectives include:

1. Confirming that the merchant can navigate to the customer's billing information section successfully.
2. Verifying the process of updating the billing information is reliable and without errors.
3. Ensuring that the updated billing information is saved correctly in the system.
4. Validating that the retrieved updated billing information matches the expected data, reflecting correct and accurate changes."
Create data-driven clientcentral_testcases for subscription management Testcases TC_15 Validate Merchant Can Update Subscription Plan Details,data-driven,TC_15 Validate Merchant Can Update Subscription Plan Details,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Can Update Subscription Plan Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Can Update Subscription Plan Details
[Documentation]    Validate TC_15 Validate Merchant Can Update Subscription Plan Details using the following steps
Send Request To Create Customer    ${SUBSCRIPTION_CO}    ${nan}    ${}
Send Request To Create Subscription Plan    ${SUBSCRIPTION_CO}    ${plan_id}    ${}
Select Module    ${Subscription Management}    ${nan}    ${}
Search Subscription Plan    ${plan_id}    ${nan}    ${}
Update Plan Details    ${plan_id}    ${nan}    ${new_plan_details}
Validate Plan Details Updated Successfully    ${plan_id}    ${new_plan_details}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${SUBSCRIPTION_CO}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${SUBSCRIPTION_CO}    ${nan}    ${}

Send Request To Create Subscription Plan
[Arguments]    ${SUBSCRIPTION_CO}    ${plan_id}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${SUBSCRIPTION_CO}    ${plan_id}    ${}

Select Module
[Arguments]    ${Subscription Management}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Subscription Management}    ${nan}    ${}

Search Subscription Plan
[Arguments]    ${plan_id}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${plan_id}    ${nan}    ${}

Update Plan Details
[Arguments]    ${plan_id}    ${nan}    ${new_plan_details}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${plan_id}    ${nan}    ${new_plan_details}

Validate Plan Details Updated Successfully
[Arguments]    ${plan_id}    ${new_plan_details}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${plan_id}    ${new_plan_details}    ${nan}

","The test case ""TC_15 Validate Merchant Can Update Subscription Plan Details"" aims to ensure that a merchant can successfully update details of a subscription plan within the system.

### Purpose:"
Generate data-driven clientcentral_testcases for customers Testcases TC_45 Validate Merchant Is Able To Generate Customer Reports,data-driven,TC_45 Validate Merchant Is Able To Generate Customer Reports,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To Generate Customer Reports
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To Generate Customer Reports
[Documentation]    Validate TC_45 Validate Merchant Is Able To Generate Customer Reports using the following steps
Send Request To Create Customer    ${PAGE_ENTERPRISE}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${PAGE_ENTERPRISE}    ${account_number}    ${nan}
Navigate To Reports Page    ${nan}    ${nan}    ${nan}
Select Report Type    ${Customer Details}    ${nan}    ${nan}
Generate Report    ${PAGE_ENTERPRISE}    ${nan}    ${nan}
Validate Generated Report    ${report_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${PAGE_ENTERPRISE}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PAGE_ENTERPRISE}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${PAGE_ENTERPRISE}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PAGE_ENTERPRISE}    ${account_number}    ${nan}

Navigate To Reports Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Select Report Type
[Arguments]    ${Customer Details}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Customer Details}    ${nan}    ${nan}

Generate Report
[Arguments]    ${PAGE_ENTERPRISE}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PAGE_ENTERPRISE}    ${nan}    ${nan}

Validate Generated Report
[Arguments]    ${report_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${report_id}    ${nan}    ${nan}

","The purpose of the test case 'TC_45 Validate Merchant Is Able To Generate Customer Reports' is to ensure that a merchant user can successfully generate detailed customer reports within the system. This test case aims to verify several essential aspects of the report-generation functionality:
"
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_45 Validate Customer Is Able To Add New Payment Method Successfully,data-driven,TC_45 Validate Customer Is Able To Add New Payment Method Successfully,"*** Settings ***
Documentation    Validate TC_45 Validate Customer Is Able To Add New Payment Method Successfully
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Customer Is Able To Add New Payment Method Successfully
[Documentation]    Validate TC_45 Validate Customer Is Able To Add New Payment Method Successfully using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number    ${account_number}    ${nan}    ${nan}
Navigate To Payment Methods Section    ${nan}    ${nan}    ${nan}
Add New Payment Method    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
Save Payment Method    ${nan}    ${nan}    ${nan}
Validate New Payment Method Added    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Navigate To Payment Methods Section
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Add New Payment Method
[Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Save Payment Method
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate New Payment Method Added
[Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

","**Test Case Summary: TC_45 Validate Customer Is Able To Add New Payment Method Successfully**

**Purpose:**

The purpose of this test case is to ensure that customers are able to add a new payment method (e.g., credit card) to their account successfully and that the new payment method is recognized and listed correctly within the application. This validation covers several key aspects:

1. **Customer Creation:** Ensures that a customer can be created successfully to use the PayNow application.
2. **Payment Method Addition:** Confirms that the customer can navigate to the payment methods section and input new payment method details accurately.
3. **Data Integrity:** Verifies that the new payment method data is saved and displayed correctly within the customer's account settings.
4. **System Response:** Ensures that the system properly acknowledges and stores the new payment method without errors."
Generate data-driven clientcentral_testcases for customers Testcases TC_15 Validate Customer Account Balance Is Updated After Payment,data-driven,TC_15 Validate Customer Account Balance Is Updated After Payment,"*** Settings ***
Documentation    Validate TC_15 Validate Customer Account Balance Is Updated After Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Customer Account Balance Is Updated After Payment
[Documentation]    Validate TC_15 Validate Customer Account Balance Is Updated After Payment using the following steps
Send Request To Create Customer    ${JOHN_DOE}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${JOHN_DOE}    ${customer_id}    ${}
Process Payment Through Credit Card    ${JOHN_DOE}    ${customer_id}    ${invoice_id}
Select Module    ${Customers}    ${nan}    ${}
Filter With Customer ID    ${customer_id}    ${nan}    ${}
Validate Account Balance Is Updated    ${balance_after_payment}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${JOHN_DOE}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${JOHN_DOE}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${JOHN_DOE}    ${customer_id}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${JOHN_DOE}    ${customer_id}    ${}

Process Payment Through Credit Card
[Arguments]    ${JOHN_DOE}    ${customer_id}    ${invoice_id}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${JOHN_DOE}    ${customer_id}    ${invoice_id}

Select Module
[Arguments]    ${Customers}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Customers}    ${nan}    ${}

Filter With Customer ID
[Arguments]    ${customer_id}    ${nan}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${customer_id}    ${nan}    ${}

Validate Account Balance Is Updated
[Arguments]    ${balance_after_payment}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${balance_after_payment}    ${nan}    ${}
","The test case 'TC_15 Validate Customer Account Balance Is Updated After Payment' ensures that a customer's account balance reflects the appropriate changes after a payment is successfully processed.

### Purpose:"
Generate data-driven clientcentral_testcases for all transactions Testcases TC_45 Validate Merchant Can Export Transaction Details To CSV,data-driven,TC_45 Validate Merchant Can Export Transaction Details To CSV,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Can Export Transaction Details To CSV
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Can Export Transaction Details To CSV
[Documentation]    Validate TC_45 Validate Merchant Can Export Transaction Details To CSV using the following steps
Select Module    ${Transaction Summary}    ${}    ${}
Export Transactions To CSV    ${start_date}    ${end_date}    ${}
Validate CSV Export Success    ${response}    ${nan}    ${}

*** Keywords ***
Select Module
[Arguments]    ${Transaction Summary}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Transaction Summary}    ${}    ${}

Export Transactions To CSV
[Arguments]    ${start_date}    ${end_date}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${}

Validate CSV Export Success
[Arguments]    ${response}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${}
","**Test Case Summary: TC_45 Validate Merchant Can Export Transaction Details To CSV**

**Purpose:**
The main goal of this test case is to ensure that a merchant using the transaction system can successfully export transaction details into a CSV (Comma-Separated Values) file. This functionality is crucial for data management, reporting, and further analysis.

**Key Points:**
1. **Trigger Conditions:**
- The process usually starts by navigating to the Transaction Summary module where transaction details are available.

2. **Actions:**
- Exporting the transactions based on a specific date range.
- Validation encompasses checking that the export feature operates smoothly and that a CSV file is generated without any issues.

By validating this feature, we ensure that merchants can easily retrieve and store transaction data in a widely used format, which is essential for business analytics and record-keeping."
Generate data-driven clientcentral_testcases for customers Testcases TC_78 Validate Merchant Is Able To Update Customer's Email Address,data-driven,TC_78 Validate Merchant Is Able To Update Customer's Email Address,"*** Settings ***
Documentation    Validate TC_78 Validate Merchant Is Able To Update Customer's Email Address
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_78 Validate Merchant Is Able To Update Customer's Email Address
[Documentation]    Validate TC_78 Validate Merchant Is Able To Update Customer's Email Address using the following steps
Send Request To Create Customer    ${AWESOME_CUSTOMER}    ${nan}    ${nan}
Navigate To Customer Details Page    ${customer_id}    ${nan}    ${nan}
Select Tab In Customer Page    ${Contact Information}    ${nan}    ${nan}
Enter New Email Address    ${new_email}    ${nan}    ${nan}
Save Customer Changes    ${customer_id}    ${nan}    ${nan}
Validate Updated Email Address    ${new_email}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${AWESOME_CUSTOMER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${AWESOME_CUSTOMER}    ${nan}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${customer_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Contact Information}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Contact Information}    ${nan}    ${nan}

Enter New Email Address
[Arguments]    ${new_email}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_email}    ${nan}    ${nan}

Save Customer Changes
[Arguments]    ${customer_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${nan}    ${nan}

Validate Updated Email Address
[Arguments]    ${new_email}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_email}    ${nan}    ${nan}

","**Test Case: TC_78 Validate Merchant Is Able To Update Customer's Email Address**

**Purpose:**

The objective of this test case is to ensure that a merchant can successfully update a customer's email address within the system. This functionality is critical for maintaining up-to-date contact information, which is essential for effective communication and service provision.

**Key Steps:**
"
Create data-driven clientcentral_testcases for customers Testcases TC_92 Validate Merchant Is Able To Update Customer Information,data-driven,TC_92 Validate Merchant Is Able To Update Customer Information,"*** Settings ***
Documentation    Validate TC_92 Validate Merchant Is Able To Update Customer Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_92 Validate Merchant Is Able To Update Customer Information
[Documentation]    Validate TC_92 Validate Merchant Is Able To Update Customer Information using the following steps
Send Request To Create Customer    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Update Customer Option    ${nan}    ${nan}    ${nan}
Enter New Customer Information    ${new_name}    ${new_email}    ${new_phone}
Validate Customer Information Updated    ${account_number}    ${new_name}    ${new_email}    ${new_phone}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${nan}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Update Customer Option
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Enter New Customer Information
[Arguments]    ${new_name}    ${new_email}    ${new_phone}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_name}    ${new_email}    ${new_phone}

Validate Customer Information Updated
[Arguments]    ${account_number}    ${new_name}    ${new_email}    ${new_phone}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${new_name}    ${new_email}    ${new_phone}

","The test case 'TC_92 Validate Merchant Is Able To Update Customer Information' is designed to ensure that merchants have the ability to update their customer's details within the client central system. This includes verifying changes to essential customer information such as name, email, and phone number.

### Purpose:"
Create data-driven clientcentral_testcases for customer profile updates Testcases TC_21 Validate Merchant Is Able To Update Customer Email Address,data-driven,TC_21 Validate Merchant Is Able To Update Customer Email Address,"*** Settings ***
Documentation    Validate TC_21 Validate Merchant Is Able To Update Customer Email Address
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_21 Validate Merchant Is Able To Update Customer Email Address
[Documentation]    Validate TC_21 Validate Merchant Is Able To Update Customer Email Address using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Profile}    ${nan}    ${nan}
Update Email Address    ${new_email}    ${nan}    ${nan}
Validate Updated Email Address    ${new_email}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Profile}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Profile}    ${nan}    ${nan}

Update Email Address
[Arguments]    ${new_email}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_email}    ${nan}    ${nan}

Validate Updated Email Address
[Arguments]    ${new_email}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_email}    ${nan}    ${nan}

","The test case 'TC_21 Validate Merchant Is Able To Update Customer Email Address' is designed to ensure that merchants can successfully update the email address of a customer within the client central system. The primary objective of this test case includes:
"
Generate data-driven clientcentral_testcases for transactions Testcases TC_12 Validate Merchant Is Able To Refund A Completed Transaction,data-driven,TC_12 Validate Merchant Is Able To Refund A Completed Transaction,"*** Settings ***
Documentation    Validate TC_12 Validate Merchant Is Able To Refund A Completed Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Merchant Is Able To Refund A Completed Transaction
[Documentation]    Validate TC_12 Validate Merchant Is Able To Refund A Completed Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Validate Transaction Is Completed    ${transaction_id}    ${nan}    ${nan}
Navigate To Transaction Details Page    ${transaction_id}    ${nan}    ${nan}
Initialize Refund Process    ${transaction_id}    ${nan}    ${nan}
Enter Refund Details    ${refund_amount}    ${nan}    ${nan}
Confirm Refund Process    ${transaction_id}    ${nan}    ${nan}
Validate Refund Is Successful    ${transaction_id}    ${refund_amount}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Validate Transaction Is Completed
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Navigate To Transaction Details Page
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Initialize Refund Process
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Enter Refund Details
[Arguments]    ${refund_amount}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${refund_amount}    ${nan}    ${nan}

Confirm Refund Process
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Validate Refund Is Successful
[Arguments]    ${transaction_id}    ${refund_amount}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${refund_amount}    ${nan}

","The test case 'TC_12 Validate Merchant Is Able To Refund A Completed Transaction' is designed to ensure that the merchant can successfully issue a refund for a completed transaction. This test case is crucial for verifying the following:
"
Generate data-driven clientcentral_testcases for customers Testcases TC_78 Validate Merchant Is Able To Update Customer Information,data-driven,TC_78 Validate Merchant Is Able To Update Customer Information,"*** Settings ***
Documentation    Validate TC_78 Validate Merchant Is Able To Update Customer Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_78 Validate Merchant Is Able To Update Customer Information
[Documentation]    Validate TC_78 Validate Merchant Is Able To Update Customer Information using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Customer Information}    ${nan}    ${nan}
Update Customer Contact Information    ${new_email}    ${new_phone}    ${new_address}
Save Updated Customer Information    ${nan}    ${nan}    ${nan}
Validate Updated Information Is Displayed    ${new_email}    ${new_phone}    ${new_address}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Customer Information}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Customer Information}    ${nan}    ${nan}

Update Customer Contact Information
[Arguments]    ${new_email}    ${new_phone}    ${new_address}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_email}    ${new_phone}    ${new_address}

Save Updated Customer Information
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Updated Information Is Displayed
[Arguments]    ${new_email}    ${new_phone}    ${new_address}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_email}    ${new_phone}    ${new_address}

","The test case 'TC_78 Validate Merchant Is Able To Update Customer Information' aims to ensure that merchants have the capability to update customer information in the system reliably and accurately. The purpose of this test case is to verify that the interface for editing customer details is functional, that the system processes and saves the changes correctly, and that the updated information is reflected accurately in all relevant sections of the customer profile.

Objectives:

1. **Update Verification:** Ensuring that the merchant can navigate to the customer information section and update details such as email, phone number, and address without encountering any errors.
2. **Data Integrity:** Verifying that the updated customer information is saved correctly and displayed accurately within the user interface and related reports or summaries."
Generate data-driven clientcentral_testcases for shipping status Testcases TC_10 Validate Merchant Is Able To Update Shipping Status From Order Details Page,data-driven,TC_10 Validate Merchant Is Able To Update Shipping Status From Order Details Page,"*** Settings ***
Documentation    Validate TC_10 Validate Merchant Is Able To Update Shipping Status From Order Details Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Merchant Is Able To Update Shipping Status From Order Details Page
[Documentation]    Validate TC_10 Validate Merchant Is Able To Update Shipping Status From Order Details Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Order For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Update Shipping Status    ${STERLING_COOPER}    ${account_number}    ${order_number}    ${SHIPPED}
Navigate To Order Details Page    ${account_number}    ${order_number}    ${nan}
Validate Shipping Status Updated    ${SHIPPED}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Order For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Update Shipping Status
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${order_number}    ${SHIPPED}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${order_number}    ${SHIPPED}

Navigate To Order Details Page
[Arguments]    ${account_number}    ${order_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${order_number}    ${nan}

Validate Shipping Status Updated
[Arguments]    ${SHIPPED}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${SHIPPED}    ${nan}    ${nan}

","Test Case 'TC_10 Validate Merchant Is Able To Update Shipping Status From Order Details Page'

**Purpose:**

The primary objective of this test case is to ensure that a merchant can successfully update the shipping status of an order from the Order Details Page. This functionality is crucial for merchants to keep their customers informed about the current status of their orders and manage shipping logistics effectively. Proper update and display of shipping status help enhance customer satisfaction by providing real-time information on their order shipping progress.

By validating this functionality, we aim to verify that:
1. The system allows merchants to update the shipping status of an order.
2. The updated shipping status is accurately reflected on the Order Details Page.

**Key Steps:**
1. **Login as Merchant:** The merchant logs into their account on the platform.
2. **Navigate to Order Details Page:** The merchant goes to the details page of a specific order.
3. **Update Shipping Status:** The merchant updates the shipping status of the order.
4. **Validation:** The system reflects the updated shipping status accurately.

This test case ensures that the process of updating shipping status is smooth, accurate, and secure, thus improving operational efficiency and customer communication."
Build data-driven paynow test cases for Sterlingcooper Testcases TC_33 Validate User Can Filter Invoices By Date Range,data-driven,TC_33 Validate User Can Filter Invoices By Date Range,"*** Settings ***
Documentation    Validate TC_33 Validate User Can Filter Invoices By Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_33 Validate User Can Filter Invoices By Date Range
[Documentation]    Validate TC_33 Validate User Can Filter Invoices By Date Range using the following steps
Send Request To Create Customer    ${STERLING_COOPER_CLIENT}    ${nan}    ${}
Create Multiple Invoices For Customer    ${account_number}    ${STERLING_COOPER_CLIENT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_CLIENT}    ${nan}    ${}
Enter Account Details To Verify Filtering    ${account_number}    ${nan}    ${}
Apply Date Range Filter    ${start_date}    ${end_date}    ${}
Validate Filtered Invoices Displayed    ${start_date}    ${end_date}    ${}
Compare Filtered Results With Expected    ${expected_invoices_list}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_CLIENT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_CLIENT}    ${nan}    ${}

Create Multiple Invoices For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_CLIENT}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_CLIENT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_CLIENT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_CLIENT}    ${nan}    ${}

Enter Account Details To Verify Filtering
[Arguments]    ${account_number}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${}

Apply Date Range Filter
[Arguments]    ${start_date}    ${end_date}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${}

Validate Filtered Invoices Displayed
[Arguments]    ${start_date}    ${end_date}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${}

Compare Filtered Results With Expected
[Arguments]    ${expected_invoices_list}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${expected_invoices_list}    ${nan}    ${}

","The test case ""TC_33 Validate User Can Filter Invoices By Date Range"" aims to ensure that users can effectively filter invoices by specifying a date range within the PayNow application. The primary objective of this test case is to verify that the filtering functionality works correctly, displaying only the invoices that fall within the specified date range. This ensures users can quickly and efficiently find relevant invoices without having to sift through unrelated data.

Key Objectives:
"
Generate data-driven clientcentral_testcases for all transactions Testcases TC_58 Validate Merchant Receives Confirmation Email Upon Successful Payment,data-driven,TC_58 Validate Merchant Receives Confirmation Email Upon Successful Payment,"*** Settings ***
Documentation    Validate TC_58 Validate Merchant Receives Confirmation Email Upon Successful Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_58 Validate Merchant Receives Confirmation Email Upon Successful Payment
[Documentation]    Validate TC_58 Validate Merchant Receives Confirmation Email Upon Successful Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Verify Payment Process Completed Successfully    ${response}    ${nan}    ${nan}
Navigate To Merchant Email Inbox    ${merchant_email}    ${nan}    ${nan}
Validate Confirmation Email Is Received    ${email_subject}    ${timestamp}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Verify Payment Process Completed Successfully
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Navigate To Merchant Email Inbox
[Arguments]    ${merchant_email}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${merchant_email}    ${nan}    ${nan}

Validate Confirmation Email Is Received
[Arguments]    ${email_subject}    ${timestamp}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${email_subject}    ${timestamp}    ${nan}
","The test case 'TC_58 Validate Merchant Receives Confirmation Email Upon Successful Payment' is designed to verify that a merchant receives an email confirmation after a payment has been successfully processed. The aim of this test case is to ensure that the system sends out the appropriate email notification to the merchant immediately following a successful transaction. This functionality is crucial as it provides real-time confirmation of transactions, ensuring transparency, and allowing the merchant to maintain accurate records of their transactions.

Here are the key aspects of this test case:
1. **Objective:** Confirm that a confirmation email is sent to the merchant after a successful payment.
2. **Preconditions:** A successful payment transaction.
3. **Verification:** Check the merchant's email inbox for the confirmation email and validate its content."
Build data-driven paynow test cases for Sterlingcooper Testcases TC_21 Validate Merchant Is Able To Apply Discounts When Finalizing Invoice Payment,data-driven,TC_21 Validate Merchant Is Able To Apply Discounts When Finalizing Invoice Payment,"*** Settings ***
Documentation    Validate TC_21 Validate Merchant Is Able To Apply Discounts When Finalizing Invoice Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_21 Validate Merchant Is Able To Apply Discounts When Finalizing Invoice Payment
[Documentation]    Validate TC_21 Validate Merchant Is Able To Apply Discounts When Finalizing Invoice Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}
Generate Random Customer Details    ${nan}    ${nan}    ${}
Launch PayNow Application    ${STERLING_COOPER}    ${nan}    ${}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}
Enter Customer Details    ${customer_details}    ${STERLING_COOPER}    ${}
Select Payment Type    ${Specific Invoice}    ${nan}    ${}
Apply Discount To Invoice    ${invoice_number}    ${15}    ${}
Finalize Invoice Payment    ${invoice_number}    ${nan}    ${}
Validate Discount Has Been Applied    ${invoice_number}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Enter Customer Details
[Arguments]    ${customer_details}    ${STERLING_COOPER}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${STERLING_COOPER}    ${}

Select Payment Type
[Arguments]    ${Specific Invoice}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Specific Invoice}    ${nan}    ${}

Apply Discount To Invoice
[Arguments]    ${invoice_number}    ${15}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${15}    ${}

Finalize Invoice Payment
[Arguments]    ${invoice_number}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${}

Validate Discount Has Been Applied
[Arguments]    ${invoice_number}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${}

","**Test Case: TC_21 Validate Merchant Is Able To Apply Discounts When Finalizing Invoice Payment**

**Purpose:**
The purpose of this test case is to ensure that a merchant has the ability to apply discounts while finalizing an invoice payment. This functionality is crucial in scenarios where promotional discounts or customer-specific discounts are offered to encourage timely or bulk payments.

**Description:**
1. **Setup and Initial State:**
- A customer and an invoice are created within the system, and necessary steps are performed to simulate a real-world payment scenario.

2"
Generate data-driven clientcentral_testcases for merchants Testcases TC_22 Validate Merchant Can Update Profile Information,data-driven,TC_22 Validate Merchant Can Update Profile Information,"*** Settings ***
Documentation    Validate TC_22 Validate Merchant Can Update Profile Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret
${NEW_PHONE_NUMBER} 1234567890
${NEW_ADDRESS}      123 New Street, New City, NC

*** Test Cases ***
TC_22 Validate Merchant Can Update Profile Information
[Documentation]    Validate TC_22 Validate Merchant Can Update Profile Information using the following steps
Login As Valid User    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To Profile Page    ${nan}    ${nan}    ${nan}
Update Profile Information    ${NEW_PHONE_NUMBER}    ${NEW_ADDRESS}    ${nan}
Save Updated Profile    ${nan}    ${nan}    ${nan}
Validate Profile Information Updated    ${NEW_PHONE_NUMBER}    ${NEW_ADDRESS}    ${nan}

*** Keywords ***
Login As Valid User
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description","The test case ""TC_22 Validate Merchant Can Update Profile Information"" aims to ensure that the system allows merchants to update their profile information correctly. This includes changing the phone number and address associated with their account.

### Purpose:"
Validate data-driven clientcentral_testcases for refunds Testcases TC_45 Validate Merchant Is Able To Process Full Refund,data-driven,TC_45 Validate Merchant Is Able To Process Full Refund,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To Process Full Refund
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To Process Full Refund
[Documentation]    Validate TC_45 Validate Merchant Is Able To Process Full Refund using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}
Send Request To Process Payment    ${account_number}    ${invoice_number}    ${}
Navigate To Refund Page    ${invoice_number}    ${nan}    ${}
Process Full Refund    ${invoice_number}    ${refund_amount}    ${}
Validate Refund Processed Successfully    ${refund_id}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${}

Send Request To Process Payment
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Navigate To Refund Page
[Arguments]    ${invoice_number}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${}

Process Full Refund
[Arguments]    ${invoice_number}    ${refund_amount}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${refund_amount}    ${}

Validate Refund Processed Successfully
[Arguments]    ${refund_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${refund_id}    ${nan}    ${}

","The test case 'TC_45 Validate Merchant Is Able To Process Full Refund' is designed to ensure that the refund functionality is working correctly, allowing a merchant to issue a full refund to a customer.

**Purpose:**
1. **Validation of Functionality:** Verify the system's capability to handle full refunds accurately.
2. **User Experience:** Ensure that the process for issuing refunds is intuitive and user-friendly for the merchant.
3. **Data Integrity:** Confirm that the refund is correctly recorded in the system and that all related financial data is updated accordingly.
4. **Customer Satisfaction:** Ensure that the refund process operates seamlessly, contributing to a positive customer experience.

**Steps typically involved:**
1. Log in to the merchant account.
2. Create a customer and generate an invoice.
3. Process a payment for the invoice.
4. Navigate to the refund page.
5. Process a full refund for the invoice.
6. Validate that the refund has been successfully processed and recorded."
Create data-driven clientcentral_testcases for all transactions Testcases TC_45 Validate Merchant Can Export Transaction History to CSV,data-driven,TC_45 Validate Merchant Can Export Transaction History to CSV,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Can Export Transaction History to CSV
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Can Export Transaction History to CSV
[Documentation]    Validate TC_45 Validate Merchant Can Export Transaction History to CSV using the following steps
Send Request To Create Customer    ${DUNDER MIFFLIN}    ${nan}    ${nan}
Send Request To Create Multiple Invoices    ${DUNDER MIFFLIN}    ${account_number}    ${nan}
Process Payments For Multiple Invoices    ${DUNDER MIFFLIN}    ${account_number}    @{invoices_list}
Navigate To Transaction History Page    ${account_number}    ${nan}    ${nan}
Verify Transaction Entries Are Listed    ${account_number}    ${nan}    ${nan}
Click Export Button    ${CSV}    ${nan}    ${nan}
Validate CSV Export Is Successful    ${DOWNLOAD_PATH}    ${account_number}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DUNDER MIFFLIN}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER MIFFLIN}    ${nan}    ${nan}

Send Request To Create Multiple Invoices
[Arguments]    ${DUNDER MIFFLIN}    ${account_number}    ${nan}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${DUNDER MIFFLIN}    ${account_number}    ${nan}

Process Payments For Multiple Invoices
[Arguments]    ${DUNDER MIFFLIN}    ${account_number}    @{invoices_list}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${DUNDER MIFFLIN}    ${account_number}    @{invoices_list}

Navigate To Transaction History Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Verify Transaction Entries Are Listed
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Click Export Button
[Arguments]    ${CSV}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CSV}    ${nan}    ${nan}

Validate CSV Export Is Successful
[Arguments]    ${DOWNLOAD_PATH}    ${account_number}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${DOWNLOAD_PATH}    ${account_number}    ${nan}

","The test case 'TC_45 Validate Merchant Can Export Transaction History to CSV' is designed to verify that a merchant can successfully export the transaction history to a CSV file. This is an important functionality to confirm so that merchants can easily access and analyze transaction data offline or import it into other systems for further processing.

**Purpose**:"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_22 Validate Customer Payment Processing Functionality,data-driven,TC_22 Validate Customer Payment Processing Functionality,"*** Settings ***
Documentation    Validate TC_22 Validate Customer Payment Processing Functionality
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Customer Payment Processing Functionality
[Documentation]    Validate TC_22 Validate Customer Payment Processing Functionality using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Create Multiple Invoices Through API    ${account_number}    ${integrated_merchant}    ${}
Generate Random Customer Details    ${nan}    ${nan}    ${}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Enter Account Number And Invoice    ${account_number}    ${invoice.0}    ${}
Select Payment Type    ${Credit Card}    ${nan}    ${}
Enter Payment Details    ${credit_card_details}    ${nan}    ${}
Validate Payment Status    ${payment_status}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Create Multiple Invoices Through API
[Arguments]    ${account_number}    ${integrated_merchant}    ${}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${account_number}    ${integrated_merchant}    ${}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice.0}    ${}
[Return]    ${float}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice.0}    ${}

Select Payment Type
[Arguments]    ${Credit Card}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${}

Enter Payment Details
[Arguments]    ${credit_card_details}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${credit_card_details}    ${nan}    ${}

Validate Payment Status
[Arguments]    ${payment_status}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${payment_status}    ${nan}    ${}

","The test case 'TC_22 Validate Customer Payment Processing Functionality' is designed to ensure that customers using the PayNow application can successfully complete payments using a credit card. The primary objective is to verify the functionality of the payment processing system within the customer interface, assessing whether it accurately handles credit card transactions and provides confirmation of successful payments. This test case aims to confirm that the payment system works seamlessly, manages payment details securely, and delivers prompt feedback on the payment status to the customer, thus maintaining a reliable and efficient transaction process."
Create data-driven clientcentral_testcases for payments Testcases TC_45 Validate Merchant Can Apply Discount To Invoice,data-driven,TC_45 Validate Merchant Can Apply Discount To Invoice,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Can Apply Discount To Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Can Apply Discount To Invoice
[Documentation]    Validate TC_45 Validate Merchant Can Apply Discount To Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}
Select Module    ${Invoices}    ${nan}    ${}
Filter Details In Invoices    ${account_number}    ${invoice_number}    ${}
Navigate To Details Page From Invoices    ${invoice_number}    ${nan}    ${}
Apply Discount To Invoice    ${discount_code}    ${nan}    ${}
Validate Discount Applied To Invoice    ${invoice_number}    ${discount_amount}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${}

Select Module
[Arguments]    ${Invoices}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Invoices}    ${nan}    ${}

Filter Details In Invoices
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Navigate To Details Page From Invoices
[Arguments]    ${invoice_number}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${}

Apply Discount To Invoice
[Arguments]    ${discount_code}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${discount_code}    ${nan}    ${}

Validate Discount Applied To Invoice
[Arguments]    ${invoice_number}    ${discount_amount}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${discount_amount}    ${}

","The test case 'TC_45 Validate Merchant Can Apply Discount To Invoice' is designed to ensure that a merchant can successfully apply a discount to an invoice within the system. The purpose of this test case is to verify that the discount feature functions correctly, allowing the merchant to input a discount code and apply it to the specified invoice. It validates that the discount amount is accurately reflected in the invoice total, ensuring that the financial transactions are handled correctly.

By validating this functionality, the test case helps to maintain the accuracy and integrity of the billing process, ensuring that discounts are correctly applied and reflected in the customer's invoice. This contributes to enhanced financial accuracy and customer satisfaction by enabling merchants to offer and manage discounts efficiently. The test case ensures that the system handles discounts as intended without any errors or inconsistencies."
Create data-driven clientcentral_testcases for refund transactions Testcases TC_22 Validate Merchant Is Able To Process Refund For A Transaction,data-driven,TC_22 Validate Merchant Is Able To Process Refund For A Transaction,"*** Settings ***
Documentation    Validate TC_22 Validate Merchant Is Able To Process Refund For A Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Merchant Is Able To Process Refund For A Transaction
[Documentation]    Validate TC_22 Validate Merchant Is Able To Process Refund For A Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}
Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${payment_details}
Send Request To Process Refund For Transaction    ${STERLING_COOPER}    ${account_number}    ${transaction_id}
Validate Refund Processed Successfully    ${transaction_id}    ${refund_details}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Process Payment Through ACH/Echeck Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${payment_details}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${payment_details}

Send Request To Process Refund For Transaction
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${transaction_id}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${transaction_id}

Validate Refund Processed Successfully
[Arguments]    ${transaction_id}    ${refund_details}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${refund_details}    ${}

","The test case **'TC_22 Validate Merchant Is Able To Process Refund For A Transaction'** aims to verify that the refund functionality within the merchant's system is operating correctly. This involves ensuring that a merchant can initiate and complete a refund for a specific transaction effectively.

**Key Points of the Test Case:**
1. **Initial State:** A transaction has been successfully processed.
2. **Action:** The merchant issues a refund for this transaction.
3. **Expected Outcome:** The refund is processed correctly, and the corresponding details are updated in the system."
Generate data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker FTC_02 Validate Payment Processing,data-driven,FTC_02 Validate Payment Processing,"*** Settings ***
Documentation    Validate FTC_02 Validate Payment Processing
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
FTC_02 Validate Payment Processing
[Documentation]    Validate FTC_02 Validate Payment Processing using the following steps
Launch PayNow Application    ${INTEGRATED_MERCHANT}    ${nan}    ${}
Enter Customer Details    ${customer_details}    ${INTEGRATED_MERCHANT}    ${}
Select Payment Type    ${Recurring}    ${nan}    ${}
Enter Recurring Amount    ${50}    ${nan}    ${}
Select Payment Method    ${Credit Card}    ${nan}    ${}
Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${}
Validate Errors After Clicking On Process Payment    ${customer_details.Error_Message}    ${nan}    ${}
Process Payment    ${nan}    ${nan}    ${}
Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${}

*** Keywords ***
Launch PayNow Application
[Arguments]    ${INTEGRATED_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
[Arguments]    ${customer_details}    ${INTEGRATED_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${INTEGRATED_MERCHANT}    ${}

Select Payment Type
[Arguments]    ${Recurring}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Recurring}    ${nan}    ${}

Enter Recurring Amount
[Arguments]    ${50}    ${nan}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${50}    ${nan}    ${}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${}

Enter Credit Card Details
[Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${}

Validate Errors After Clicking On Process Payment
[Arguments]    ${customer_details.Error_Message}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_details.Error_Message}    ${nan}    ${}

Process Payment
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate Payment Receipt Is Generated
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

","The test case 'FTC_02 Validate Payment Processing' is designed to verify the correct operation and functionality of the payment processing system within a financial application. Its principal aim is to ensure the system accurately handles and processes recurring payments, adhering to predefined rules and criteria, such as amount, method, and successful completion.

Key objectives might include:
1. Ensuring the recurring payment amount meets the specified criteria and limits set by the system standards.
2. Validating that the payment method (e.g., Credit Card) is appropriately selected and processed.
3. Checking that payment details adhere to the organizational or industry-specific guidelines (e.g., card validity, permissible amount limits).
4. Confirming that the system responds with accurate feedback or error messages during processing, and generates a correct payment receipt upon successful processing."
Generate data-driven shopassist test cases for RetailPro Testcases TC_76 Validate Customer Is Able To Add Items To Cart And Checkout,data-driven,TC_76 Validate Customer Is Able To Add Items To Cart And Checkout,"*** Settings ***
Documentation    Validate TC_76 Validate Customer Is Able To Add Items To Cart And Checkout
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       retailcustomer
${VALID_PASSWORD}   shopsecure

*** Test Cases ***
TC_76 Validate Customer Is Able To Add Items To Cart And Checkout
[Documentation]    Validate TC_76 Validate Customer Is Able To Add Items To Cart And Checkout using the following steps
Send Request To Create Customer Account    ${RETAIL_PRO}    ${nan}    ${nan}
Generate Random Item    ${item_details}    ${nan}    ${nan}
Add Item To Cart    ${customer_account}    ${item_details}    ${nan}
View Cart    ${customer_account}    ${nan}    ${nan}
Validate Item In Cart    ${item_details}    ${nan}    ${nan}
Proceed To Checkout    ${customer_account}    ${nan}    ${nan}
Enter Shipping And Payment Details    ${shipping_details}    ${payment_details}    ${nan}
Confirm Order    ${order_details}    ${nan}    ${nan}
Validate Order Confirmation    ${order_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer Account
[Arguments]    ${RETAIL_PRO}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${RETAIL_PRO}    ${nan}    ${nan}

Generate Random Item
[Arguments]    ${item_details}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${item_details}    ${nan}    ${nan}

Add Item To Cart
[Arguments]    ${customer_account}    ${item_details}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_account}    ${item_details}    ${nan}

View Cart
[Arguments]    ${customer_account}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_account}    ${nan}    ${nan}

Validate Item In Cart
[Arguments]    ${item_details}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${item_details}    ${nan}    ${nan}

Proceed To Checkout
[Arguments]    ${customer_account}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_account}    ${nan}    ${nan}

Enter Shipping And Payment Details
[Arguments]    ${shipping_details}    ${payment_details}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${shipping_details}    ${payment_details}    ${nan}

Confirm Order
[Arguments]    ${order_details}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_details}    ${nan}    ${nan}

Validate Order Confirmation
[Arguments]    ${order_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_id}    ${nan}    ${nan}
","The test case 'TC_76 Validate Customer Is Able To Add Items To Cart And Checkout' aims to ensure that customers using the RetailPro system can perform essential e-commerce functionalities such as adding items to their cart and successfully proceeding to checkout. The primary purpose of this test case is to verify that the shopping process, from selecting items to placing an order, is seamless and error-free.

Key points to verify include:"
Generate data-driven login test cases for Scenario TC_01 Validate Customer Is Able To Login With Valid Credentials,data-driven,TC_01 Validate Customer Is Able To Login With Valid Credentials,"*** Settings ***
Documentation    Validate TC_01 Validate Customer Is Able To Login With Valid Credentials
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Customer Is Able To Login With Valid Credentials
[Documentation]    Validate TC_01 Validate Customer Is Able To Login With Valid Credentials using the following steps
Launch Login Application    ${nan}    ${nan}    ${nan}
Enter Username    ${VALID_USER}    ${nan}    ${nan}
Enter Password    ${VALID_PASSWORD}    ${nan}    ${nan}
Click Login Button    ${nan}    ${nan}    ${nan}
Validate User Is Logged In    ${VALID_USER}    ${Login Successful}    ${nan}

*** Keywords ***
Launch Login Application
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Enter Username
[Arguments]    ${VALID_USER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${nan}    ${nan}

Enter Password
[Arguments]    ${VALID_PASSWORD}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_PASSWORD}    ${nan}    ${nan}

Click Login Button
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate User Is Logged In
[Arguments]    ${VALID_USER}    ${Login Successful}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${Login Successful}    ${nan}

","The test case ""TC_01 Validate Customer Is Able To Login With Valid Credentials"" aims to verify that customers can successfully log in to the application using valid credentials. The primary objective of this test case is to ensure that the authentication mechanism correctly verifies valid user credentials and allows the user to access the system.

The test checks the following aspects:"
Build data-driven paynow test cases for Initech TC_10 Validate Customer Can Update Payment Method For Recurring Payments,data-driven,TC_10 Validate Customer Can Update Payment Method For Recurring Payments,"*** Settings ***
Documentation    Validate TC_10 Validate Customer Can Update Payment Method For Recurring Payments
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Customer Can Update Payment Method For Recurring Payments
[Documentation]    Validate TC_10 Validate Customer Can Update Payment Method For Recurring Payments using the following steps
Send Request To Create Customer    ${INITECH_MERCHANT}    ${nan}    ${nan}
Send Request To Create Recurring Payment    ${account_number}    ${INITECH_MERCHANT}    ${nan}
Login To PayNOW And Navigate To Recurring Payments    ${account_number}    ${recurring_payment_id}    ${nan}
Select Payment Method Update Option    ${nan}    ${nan}    ${nan}
Enter New Payment Method Details    ${new_payment_method}    ${nan}    ${nan}
Validate Payment Method Update    ${recurring_payment_id}    ${new_payment_method}    ${nan}
Send Request To Confirm Payment Method Update    ${account_number}    ${recurring_payment_id}    ${new_payment_method}
Validate Updated Payment Method In Recurring Payments    ${account_number}    ${recurring_payment_id}    ${new_payment_method}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${INITECH_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${INITECH_MERCHANT}    ${nan}    ${nan}

Send Request To Create Recurring Payment
[Arguments]    ${account_number}    ${INITECH_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${INITECH_MERCHANT}    ${nan}

Login To PayNOW And Navigate To Recurring Payments
[Arguments]    ${account_number}    ${recurring_payment_id}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${recurring_payment_id}    ${nan}

Select Payment Method Update Option
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Enter New Payment Method Details
[Arguments]    ${new_payment_method}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_payment_method}    ${nan}    ${nan}

Validate Payment Method Update
[Arguments]    ${recurring_payment_id}    ${new_payment_method}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${recurring_payment_id}    ${new_payment_method}    ${nan}

Send Request To Confirm Payment Method Update
[Arguments]    ${account_number}    ${recurring_payment_id}    ${new_payment_method}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${recurring_payment_id}    ${new_payment_method}

Validate Updated Payment Method In Recurring Payments
[Arguments]    ${account_number}    ${recurring_payment_id}    ${new_payment_method}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${recurring_payment_id}    ${new_payment_method}

","The test case 'TC_10 Validate Customer Can Update Payment Method For Recurring Payments' ensures that customers are able to change their payment method for scheduled recurring payments successfully. This involves verifying the following aspects:

1. The customer can log in and navigate to the section for managing recurring payments.
2. The customer can select the option to update the payment method for a recurring payment.
3. The new payment method details entered by the customer are accepted and saved by the system.
4. The system correctly reflects the updated payment method in the recurring payments data.

This validation is crucial for providing flexibility and improving customer experience by allowing them to manage and update their payment details as needed efficiently."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_87 Validate Merchant Can Update Payment Method For Recurring Transactions,data-driven,TC_87 Validate Merchant Can Update Payment Method For Recurring Transactions,"*** Settings ***
Documentation    Validate TC_87 Validate Merchant Can Update Payment Method For Recurring Transactions
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_87 Validate Merchant Can Update Payment Method For Recurring Transactions
[Documentation]    Validate TC_87 Validate Merchant Can Update Payment Method For Recurring Transactions using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Recurring Profile    ${account_number}    ${STERLING_COOPER}    ${monthly}
Launch PayNow Application    ${STERLING_COOPER}    ${nan}    ${nan}
Enter Account Number And Recurring Profile    ${account_number}    ${profile_id}    ${nan}
Update Payment Method For Recurring Transaction    ${account_number}    ${new_payment_method}    ${profile_id}
Validate Updated Payment Method    ${account_number}    ${profile_id}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Recurring Profile
[Arguments]    ${account_number}    ${STERLING_COOPER}    ${monthly}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER}    ${monthly}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Enter Account Number And Recurring Profile
[Arguments]    ${account_number}    ${profile_id}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${profile_id}    ${nan}

Update Payment Method For Recurring Transaction
[Arguments]    ${account_number}    ${new_payment_method}    ${profile_id}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${new_payment_method}    ${profile_id}

Validate Updated Payment Method
[Arguments]    ${account_number}    ${profile_id}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${profile_id}    ${nan}

","**Test Case Summary: TC_87 - Validate Merchant Can Update Payment Method For Recurring Transactions**

**Purpose:**
This test case aims to ensure that merchants can effectively update the payment method for their recurring transactions using the PayNow application. The process involves creating a customer, setting up a recurring profile, and subsequently changing the payment method associated with that recurring profile.

**Key Objectives:**
1. **Functionality Validation:** Confirm that merchants can update their payment method for recurring transactions without any issues.
2. **User Interaction:** Validate that the system prompts and processes the payment method update correctly.
3. **Data Accuracy:** Ensure that the updated payment method is accurately recorded in the system and associated with the correct recurring profile."
Validate data-driven clientcentral_testcases for refund transactions Testcases TC_25 Validate Merchant Is Able To Process Refund Transaction,data-driven,TC_25 Validate Merchant Is Able To Process Refund Transaction,"*** Settings ***
Documentation    Validate TC_25 Validate Merchant Is Able To Process Refund Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_25 Validate Merchant Is Able To Process Refund Transaction
[Documentation]    Validate TC_25 Validate Merchant Is Able To Process Refund Transaction using the following steps
Send Request To Create Customer    ${DAWSON}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${DAWSON}    ${account_number}    ${nan}
Send Request To Process Payment Through Credit Card    ${DAWSON}    ${account_number}    ${invoice_number}
Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}
Request Refund For Transaction    ${gateway_id}    ${nan}    ${nan}
Validate Refund Status In Transaction Details    ${gateway_id}    ${Refunded}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DAWSON}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DAWSON}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${DAWSON}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DAWSON}    ${account_number}    ${nan}

Send Request To Process Payment Through Credit Card
[Arguments]    ${DAWSON}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DAWSON}    ${account_number}    ${invoice_number}

Navigate To Transaction Details Page
[Arguments]    ${gateway_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${gateway_id}    ${nan}    ${nan}

Request Refund For Transaction
[Arguments]    ${gateway_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${gateway_id}    ${nan}    ${nan}

Validate Refund Status In Transaction Details
[Arguments]    ${gateway_id}    ${Refunded}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${gateway_id}    ${Refunded}    ${nan}

","The test case 'TC_25 Validate Merchant Is Able To Process Refund Transaction' is designed to ensure that a merchant can successfully initiate and complete a refund for a transaction. This test case covers the following objectives:

1. **Transaction Creation:** Validate that a customer and corresponding transaction details can be set up.
2. **Refund Process:** Confirm that the system can process a refund request for a specific transaction.
3. **Status Verification:** Ensure that the refund status is accurately updated and displayed in the transaction details page, confirming the processing of the refund.
4. **User Interaction:** Verify the system's user interface and its capability to handle refund requests, enhancing merchant confidence and operational reliability in managing refunds."
Build data-driven clientcentral_testcases for subscribers Testcases TC_42 Validate Subscriber Can Receive Notification For Upcoming Renewal,data-driven,TC_42 Validate Subscriber Can Receive Notification For Upcoming Renewal,"*** Settings ***
Documentation    Validate TC_42 Validate Subscriber Can Receive Notification For Upcoming Renewal
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_42 Validate Subscriber Can Receive Notification For Upcoming Renewal
[Documentation]    Validate TC_42 Validate Subscriber Can Receive Notification For Upcoming Renewal using the following steps
Send Request To Create Subscriber    ${JOHN_DOE}    ${email}    ${subscription_type}
Send Request To Check Subscription Expiration    ${JOHN_DOE}    ${email}    ${subscription_id}
Validate Notification Sent    ${JOHN_DOE}    ${email}    ${subscription_type}

*** Keywords ***
Send Request To Create Subscriber
[Arguments]    ${JOHN_DOE}    ${email}    ${subscription_type}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${JOHN_DOE}    ${email}    ${subscription_type}

Send Request To Check Subscription Expiration
[Arguments]    ${JOHN_DOE}    ${email}    ${subscription_id}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${JOHN_DOE}    ${email}    ${subscription_id}

Validate Notification Sent
[Arguments]    ${JOHN_DOE}    ${email}    ${subscription_type}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${JOHN_DOE}    ${email}    ${subscription_type}

","### Summary of Test Case: TC_42 Validate Subscriber Can Receive Notification For Upcoming Renewal

**Purpose:**
The primary objective of test case TC_42 is to verify that a subscriber receives a notification for an upcoming subscription renewal. This test ensures that the notification system is working correctly and subscribers are adequately informed about their subscription status to take necessary actions.

**Key Objectives:**
1. To confirm that the system sends renewal notifications to subscribers.
2. To ensure that the subscriber's contact details are being used accurately to send notifications.
3. To validate the timely dispatch of notifications as per subscription renewal schedules.
4. To check that the content of the notification includes relevant details about the upcoming renewal."
Validate data-driven paynow test cases for SchedulePayment Testcases TC_12 Validate Customer Is Able To Cancel Scheduled Payment For Future Date,data-driven,TC_12 Validate Customer Is Able To Cancel Scheduled Payment For Future Date,"*** Settings ***
Documentation    Validate TC_12 Validate Customer Is Able To Cancel Scheduled Payment For Future Date
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Customer Is Able To Cancel Scheduled Payment For Future Date
[Documentation]    Validate TC_12 Validate Customer Is Able To Cancel Scheduled Payment For Future Date using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${5}    ${nan}
Create Single Invoice Through API    ${account_number}    ${OMNICORP_MERCHANT}    ${today}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
Select Payment Method    ${Credit Card}    ${nan}    ${nan}
Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
Select Payment Date    ${today+10}    ${nan}    ${nan}
Create Schedule Payment    ${nan}    ${nan}    ${nan}
Cancel Scheduled Payment    ${account_number}    ${invoice_number}    ${nan}
Validate Cancellation Status    ${account_number}    ${invoice_number}    ${Cancelled}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${OMNICORP_MERCHANT}    ${5}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${5}    ${nan}

Create Single Invoice Through API
[Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${today}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${OMNICORP_MERCHANT}    ${today}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${float}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
[Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Select Payment Date
[Arguments]    ${today+10}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${today+10}    ${nan}    ${nan}

Create Schedule Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Cancel Scheduled Payment
[Arguments]    ${account_number}    ${invoice_number}",
Build data-driven paynow test cases for Sterlingcooper Testcases TC_15 Validate Customer Can Modify Scheduled Payment Date And View Changes In Scheduled Payments Section,data-driven,TC_15 Validate Customer Can Modify Scheduled Payment Date And View Changes In Scheduled Payments Section,"*** Settings ***
Documentation    Validate TC_15 Validate Customer Can Modify Scheduled Payment Date And View Changes In Scheduled Payments Section
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Customer Can Modify Scheduled Payment Date And View Changes In Scheduled Payments Section
[Documentation]    Validate TC_15 Validate Customer Can Modify Scheduled Payment Date And View Changes In Scheduled Payments Section using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Select Payment Method    ${Credit Card}    ${nan}    ${nan}
Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
Select Payment Date    ${today+1}    ${nan}    ${nan}
Create Schedule Payment    ${nan}    ${nan}    ${nan}
Modify Scheduled Payment Date    ${today+3}    ${nan}    ${nan}
Navigate To Schedule Payments Tab    ${account_number}    ${invoice_number}    ${nan}
Validate Modified Scheduled Payment Date Is Displayed    ${today+3}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
[Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Select Payment Date
[Arguments]    ${today+1}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${today+1}    ${nan}    ${nan}

Create Schedule Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Modify Scheduled Payment Date
[Arguments]    ${today+3}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${today+3}    ${nan}    ${nan}

Navigate To Schedule Payments Tab
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Validate Modified Scheduled Payment Date Is Displayed
[Arguments]    ${today+3",
Generate data-driven clientcentral_testcases for customers Testcases TC_28 Validate Merchant Is Able To Update Customer Information,data-driven,TC_28 Validate Merchant Is Able To Update Customer Information,"*** Settings ***
Documentation    Validate TC_28 Validate Merchant Is Able To Update Customer Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_28 Validate Merchant Is Able To Update Customer Information
[Documentation]    Validate TC_28 Validate Merchant Is Able To Update Customer Information using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Update Customer Information    ${STERLING_COOPER}    ${new_details}    ${nan}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Validate Customer Information Is Updated    ${new_details}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Update Customer Information
[Arguments]    ${STERLING_COOPER}    ${new_details}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${new_details}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Validate Customer Information Is Updated
[Arguments]    ${new_details}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_details}    ${nan}    ${nan}

","The test case ""TC_28 Validate Merchant Is Able To Update Customer Information"" is designed to verify that a merchant can successfully update customer details in the platform. The main objectives are to check that the details can be edited, saved, and correctly reflected in the system. The case inspects the user interface for smooth editing functionality and confirms that all changes are accurately processed and displayed. This ensures merchants can manage and maintain up-to-date customer information effectively, which is critical for customer interactions, billing, and service personalization. The overall goal is to confirm that customer data management features are reliable and efficient.
"
Generate data-driven clientcentral_testcases for bank transaction verifications Testcases TC_15 Validate Merchant Is Able To Verify Bank Transaction Details,data-driven,TC_15 Validate Merchant Is Able To Verify Bank Transaction Details,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Is Able To Verify Bank Transaction Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Is Able To Verify Bank Transaction Details
[Documentation]    Validate TC_15 Validate Merchant Is Able To Verify Bank Transaction Details using the following steps
Send Request To Create Merchant Account    ${BANK_MERCHANT}    ${nan}    ${nan}
Generate Bank Transaction    ${BANK_MERCHANT}    ${transaction_id}    ${nan}
Send Request To Process Bank Transaction    ${BANK_MERCHANT}    ${transaction_id}    ${nan}
Login To Bank Portal With Valid Credentials    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Select Merchant Transactions Module    ${Banking Transactions}    ${nan}    ${nan}
Filter Transactions By Merchant    ${BANK_MERCHANT}    ${nan}    ${nan}
Expand Transaction Details    ${transaction_id}    ${nan}    ${nan}","The test case 'TC_15 Validate Merchant Is Able To Verify Bank Transaction Details' is designed to ensure that a merchant can successfully verify the details of their bank transactions within a given system. This test case is crucial for confirming that merchants can view and validate the exact amounts and details related to transactions,"
Generate data-driven clientcentral_testcases for customer profiles Testcases TC_08 Validate Merchant Can Update Customer Email Address Successfully,data-driven,TC_08 Validate Merchant Can Update Customer Email Address Successfully,"*** Settings ***
Documentation    Validate TC_08 Validate Merchant Can Update Customer Email Address Successfully
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_08 Validate Merchant Can Update Customer Email Address Successfully
[Documentation]    Validate TC_08 Validate Merchant Can Update Customer Email Address Successfully using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}
Select Module    ${Customer Profiles}    ${nan}    ${}
Search Customer In Profiles    ${customer_number}    ${nan}    ${}
Update Customer Email Address    ${customer_number}    ${new_email_address}    ${}
Validate Customer Email Address Updated    ${customer_number}    ${new_email_address}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Select Module
[Arguments]    ${Customer Profiles}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Customer Profiles}    ${nan}    ${}

Search Customer In Profiles
[Arguments]    ${customer_number}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_number}    ${nan}    ${}

Update Customer Email Address
[Arguments]    ${customer_number}    ${new_email_address}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_number}    ${new_email_address}    ${}

Validate Customer Email Address Updated
[Arguments]    ${customer_number}    ${new_email_address}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_number}    ${new_email_address}    ${}

","The test case 'TC_08 Validate Merchant Can Update Customer Email Address Successfully' is designed to ensure that a merchant is able to update a customer's email address within the customer profiles module.

Purpose:
1. **Verify Functionality:** Ensure that the system allows the merchant to update the customer's email address smoothly and accurately.
2. **Maintain Data Accuracy:** Confirm that the updated email address is reflected correctly in the system, maintaining data accuracy and integrity.
3. **User Experience:** Assess the process to ensure that the email update functionality is user-friendly and efficient, providing a seamless experience for the merchant.
4. **Compliance:** Ensure that any email updates comply with organizational guidelines and data handling policies, preventing issues related to incorrect email information."
Generate data-driven payplease_testcases for all transactions Testcases TC_33 Validate Merchant Can Properly Void A Transaction,data-driven,TC_33 Validate Merchant Can Properly Void A Transaction,"*** Settings ***
Documentation    Validate TC_33 Validate Merchant Can Properly Void A Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_33 Validate Merchant Can Properly Void A Transaction
[Documentation]    Validate TC_33 Validate Merchant Can Properly Void A Transaction using the following steps
Send Request To Create Customer    ${ACME_CORP}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${ACME_CORP}    ${account_number}    ${nan}
Send Request To Process Payment For Credit Card    ${ACME_CORP}    ${account_number}    ${invoice_number}
Send Request To Void Transaction    ${invoice_number}    ${nan}    ${nan}
Validate Transaction Status Is Void    ${transaction_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${ACME_CORP}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${ACME_CORP}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
[Arguments]    ${ACME_CORP}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${account_number}    ${invoice_number}

Send Request To Void Transaction
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Validate Transaction Status Is Void
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

","The test case ""TC_33 Validate Merchant Can Properly Void A Transaction"" aims to ensure that the merchant can successfully void a transaction that has been previously processed. This is essential for handling situations where a transaction needs to be cancelled or corrected.

### Purpose:"
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_48 Validate Customer Is Able To Update Payment Method Details,data-driven,TC_48 Validate Customer Is Able To Update Payment Method Details,"*** Settings ***
Documentation    Validate TC_48 Validate Customer Is Able To Update Payment Method Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_48 Validate Customer Is Able To Update Payment Method Details
[Documentation]    Validate TC_48 Validate Customer Is Able To Update Payment Method Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Use Saved Payment Method    ${existing_payment_method_id}    ${nan}    ${nan}
Update Payment Method Details    ${integrated_merchant}    ${new_payment_details}    ${nan}
Validate Payment Method Is Updated    ${new_payment_details}    ${nan}    ${nan}
Validate New Payment Method Can Be Used For Payment    ${integrated_merchant}    ${new_payment_details}    ${nan}
Process Invoice Payment    ${nan}    ${nan}    ${nan}
Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Use Saved Payment Method
[Arguments]    ${existing_payment_method_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${existing_payment_method_id}    ${nan}    ${nan}

Update Payment Method Details
[Arguments]    ${integrated_merchant}    ${new_payment_details}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${new_payment_details}    ${nan}

Validate Payment Method Is Updated
[Arguments]    ${new_payment_details}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_payment_details}    ${nan}    ${nan}

Validate New Payment Method Can Be Used For Payment
[Arguments]    ${integrated_merchant}    ${new_payment_details}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${new_payment_details}    ${nan}

Process Invoice Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Payment Receipt Is Generated
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

",The purpose of the test case 'TC_48 Validate Customer Is Able To Update Payment Method Details' is to ensure that customers can modify their saved payment information accurately within the
Build data-driven accounts_testcases for Customers Testcases TC_91 Validate Account Is Locked After Exceeding Maximum Login Attempts,data-driven,TC_91 Validate Account Is Locked After Exceeding Maximum Login Attempts,"*** Settings ***
Documentation    Validate TC_91 Validate Account Is Locked After Exceeding Maximum Login Attempts
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_91 Validate Account Is Locked After Exceeding Maximum Login Attempts
[Documentation]    Validate TC_91 Validate Account Is Locked After Exceeding Maximum Login Attempts using the following steps
Send Request To Create Customer    ${NEW_CUSTOMER}    ${nan}    ${nan}
Attempt Multiple Invalid Logins    ${USERNAME}    ${incorrect_password}    ${max_attempts}
Validate Account Lock Status       ${USERNAME}    ${account_locked_message}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${NEW_CUSTOMER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_CUSTOMER}    ${nan}    ${nan}

Attempt Multiple Invalid Logins
[Arguments]    ${USERNAME}    ${incorrect_password}    ${max_attempts}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${USERNAME}    ${incorrect_password}    ${max_attempts}

Validate Account Lock Status
[Arguments]    ${USERNAME}    ${account_locked_message}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${USERNAME}    ${account_locked_message}    ${nan}
","**Test Case TC_91: Validate Account Is Locked After Exceeding Maximum Login Attempts**

**Purpose:**
The purpose of this test case is to validate that an account is securely locked after the user exceeds the maximum number of allowed login attempts with incorrect credentials. This feature is essential for preventing unauthorized access to sensitive user accounts through brute-force attacks. The test ensures that the system accurately tracks the number of failed login attempts and enforces the locking mechanism once the threshold is reached. This not only helps in securing user data but also in maintaining the integrity of the authentication process. The test aims to confirm that the appropriate account lock message is displayed to the user after the account is locked, thus enhancing the overall security and user experience."
Create data-driven autopay test cases for Invoice Payment Testcases TC_12 Validate Bulk Invoice Payment Processing,data-driven,TC_12 Validate Bulk Invoice Payment Processing,"*** Settings ***
Documentation    Validate TC_12 Validate Bulk Invoice Payment Processing
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       bulkpayer
${VALID_PASSWORD}   bulksecret

*** Test Cases ***
TC_12 Validate Bulk Invoice Payment Processing
[Documentation]    Validate TC_12 Validate Bulk Invoice Payment Processing using the following steps
Initiate Bulk Payment Session    ${nan}    ${nan}    ${}
Add Multiple Invoices To Payment Batch    ${bulk_invoices}    ${nan}    ${}
Select Payment Method For Bulk Payment    ${Wire Transfer}    ${nan}    ${}
Enter Wire Transfer Details    ${WIRE_TRANSFER_DETAILS}    ${nan}    ${}
Validate All Invoices Are In Payment Batch    ${bulk_invoices}    ${batch_summary}    ${}
Process Bulk Payment    ${nan}    ${nan}    ${}
Validate Bulk Payment Receipt Is Generated    ${payment_receipt}    ${nan}    ${}

*** Keywords ***
Initiate Bulk Payment Session
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    Starting bulk payment session    ${nan}    ${nan}

Add Multiple Invoices To Payment Batch
[Arguments]    ${bulk_invoices}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description","The test case 'TC_12 Validate Bulk Invoice Payment Processing' is designed to ensure that when processing multiple invoices in bulk, the payment system accurately handles all relevant tasks and validations. Its purpose can be summarized as follows:

**Purpose of the Test Case:**

1. **Batch Payment Efficiency:** To verify that the system can handle multiple invoices in a single transaction efficiently, minimizing the time and effort needed to process bulk payments.
2. **Payment Method Consistency:** To confirm that the selected payment method (e.g., Wire Transfer) is applied consistently across all invoices in the batch.
3. **Detailed Validation:** To ensure that each invoice added to the batch is included in the payment summary, maintaining the integrity of the bulk payment process.
4. **Receipt Generation:** To validate that a receipt is generated for the entire batch payment, providing proof of successful transaction processing."
Generate data-driven paynow test cases for RefundPayment Testcases TC_07 Validate Customer Is Able To Request A Refund For A Specific Invoice,data-driven,TC_07 Validate Customer Is Able To Request A Refund For A Specific Invoice,"*** Settings ***
Documentation    Validate TC_07 Validate Customer Is Able To Request A Refund For A Specific Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Customer Is Able To Request A Refund For A Specific Invoice
[Documentation]    Validate TC_07 Validate Customer Is Able To Request A Refund For A Specific Invoice using the following steps
Send Request To Create Customer    ${CustomCorp_MERCHANT}    ${5}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${CustomCorp_MERCHANT}    ${500.0}
Pay An Invoice As Customer    ${account_number}    ${invoice_number}    ${PAYMENT_DETAILS}
Login To PayNOW And Navigate To Payment History    ${customer_id}    ${nan}    ${nan}
Locate Specific Invoice For Refund    ${invoice_number}    ${nan}    ${nan}
Request Refund For Selected Invoice    ${invoice_number}    ${refund_reason}    ${nan}
Confirm Refund Request Submission    ${invoice_number}    ${nan}    ${nan}
Validate Refund Request Is Processed    ${invoice_number}    ${refund_status}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${CustomCorp_MERCHANT}    ${5}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CustomCorp_MERCHANT}    ${5}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${CustomCorp_MERCHANT}    ${500.0}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${CustomCorp_MERCHANT}    ${500.0}

Pay An Invoice As Customer
[Arguments]    ${account_number}    ${invoice_number}    ${PAYMENT_DETAILS}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${PAYMENT_DETAILS}

Login To PayNOW And Navigate To Payment History
[Arguments]    ${customer_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${nan}    ${nan}

Locate Specific Invoice For Refund
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Request Refund For Selected Invoice
[Arguments]    ${invoice_number}    ${refund_reason}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${refund_reason}    ${nan}

Confirm Refund Request Submission
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Validate Refund Request Is Processed
[Arguments]    ${invoice_number}    ${refund_status}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${refund_status}    ${nan}

","The test case ""TC_07 Validate Customer Is Able To Request A Refund For A Specific Invoice"" aims to ensure that customers can successfully request a refund for a specific invoice using the application. The objectives of this test are:
"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_70 Validate Paid Invoices Are Archived Correctly,data-driven,TC_70 Validate Paid Invoices Are Archived Correctly,"*** Settings ***
Documentation    Validate TC_70 Validate Paid Invoices Are Archived Correctly
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_70 Validate Paid Invoices Are Archived Correctly
[Documentation]    Validate TC_70 Validate Paid Invoices Are Archived Correctly using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
Make Payment For Invoice    ${100.00}    ${Credit Card}    ${CC_DETAILS}
Process Invoice Payment    ${nan}    ${nan}    ${nan}
Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${nan}
Check Invoice Status    ${invoice_number}    ${Paid}    ${nan}
Verify Invoice Is Archived Correctly    ${invoice_number}    ${Archived}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}

Make Payment For Invoice
[Arguments]    ${100.00}    ${Credit Card}    ${CC_DETAILS}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${100.00}    ${Credit Card}    ${CC_DETAILS}

Process Invoice Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Payment Receipt Is Generated
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Check Invoice Status
[Arguments]    ${invoice_number}    ${Paid}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${Paid}    ${nan}

Verify Invoice Is Archived Correctly
[Arguments]    ${invoice_number}    ${Archived}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${Archived}    ${nan}

","The test case 'TC_70 Validate Paid Invoices Are Archived Correctly' ensures that once an invoice is fully paid, it is correctly moved to an archived state within the system.

**Purpose:**
"
Generate data-driven clientcentral_testcases for orders Testcases TC_34 Validate Merchant Is Able To Create And View Order Details,data-driven,TC_34 Validate Merchant Is Able To Create And View Order Details,"*** Settings ***
Documentation    Validate TC_34 Validate Merchant Is Able To Create And View Order Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_34 Validate Merchant Is Able To Create And View Order Details
[Documentation]    Validate TC_34 Validate Merchant Is Able To Create And View Order Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Create New Order For Customer    ${STERLING_COOPER}    ${order_details}    ${nan}
Send Request To Process Order    ${STERLING_COOPER}    ${order_id}    ${nan}
Fetch Order Details    ${order_id}    ${response}    ${nan}
Validate Order Summary    ${order_id}    ${order_summary}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create New Order For Customer
[Arguments]    ${STERLING_COOPER}    ${order_details}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${order_details}    ${nan}

Send Request To Process Order
[Arguments]    ${STERLING_COOPER}    ${order_id}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${order_id}    ${nan}

Fetch Order Details
[Arguments]    ${order_id}    ${response}    ${nan}
[Return]    ${dict}
[Documentation]    Keyword description
Log    ${order_id}    ${response}    ${nan}

Validate Order Summary
[Arguments]    ${order_id}    ${order_summary}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_id}    ${order_summary}    ${nan}

","The test case 'TC_34 Validate Merchant Is Able To Create And View Order Details' is designed to ensure that merchants can create a new order for a customer and subsequently view the details of the created order. The primary purpose of this test case is to confirm that the system allows merchants to generate orders and access a comprehensive summary of those orders. This functionality typically involves verifying the sequence of creating an order, processing it, and then retrieving detailed information which includes order content, customer details, status, and other pertinent data. Successfully passing this test case ensures that the order creation and viewing features are working correctly, enabling merchants to efficiently manage their order processes."
Generate data-driven clientcentral_testcases for payments Testcases TC_09 Validate Merchant Is Able To Refund A Processed Payment,data-driven,TC_09 Validate Merchant Is Able To Refund A Processed Payment,"*** Settings ***
Documentation    Validate TC_09 Validate Merchant Is Able To Refund A Processed Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_09 Validate Merchant Is Able To Refund A Processed Payment
[Documentation]    Validate TC_09 Validate Merchant Is Able To Refund A Processed Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Payment History    ${account_number}    ${nan}    ${nan}
Select Payment For Refund    ${invoice_number}    ${nan}    ${nan}
Process Refund For Payment    ${invoice_number}    ${refund_amount}    ${nan}
Validate Refund Is Processed Successfully    ${invoice_number}    ${refund_amount}    ${OK}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Payment History
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Payment For Refund
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Process Refund For Payment
[Arguments]    ${invoice_number}    ${refund_amount}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${refund_amount}    ${nan}

Validate Refund Is Processed Successfully
[Arguments]    ${invoice_number}    ${refund_amount}    ${OK}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${refund_amount}    ${OK}

","The test case 'TC_09 Validate Merchant Is Able To Refund A Processed Payment' aims to ensure that merchants can successfully refund a payment that has already been processed. This test case is crucial for confirming that the system or platform provides a functional refund mechanism, which is essential for customer service and transaction accuracy.

### Purpose:"
Build data-driven paynow test cases for PaymentValidation Testcases TC_22 Validate Customer Is Notified For Payment Failure Due To Insufficient Funds,data-driven,TC_22 Validate Customer Is Notified For Payment Failure Due To Insufficient Funds,"*** Settings ***
Documentation    Validate TC_22 Validate Customer Is Notified For Payment Failure Due To Insufficient Funds
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Customer Is Notified For Payment Failure Due To Insufficient Funds
[Documentation]    Validate TC_22 Validate Customer Is Notified For Payment Failure Due To Insufficient Funds using the following steps
Send Request To Create Customer    ${ABC_CORP}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${ABC_CORP}    ${nan}
Launch PayNow Application    ${ABC_CORP}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Select Payment Method    ${Debit Card}    ${nan}    ${nan}
Enter Insufficient Funds Card Details    ${INSUFFICIENT_FUNDS_CARD_DETAILS}    ${nan}    ${nan}
Attempt Payment Process    ${account_number}    ${invoice_number}    ${nan}
Validate Payment Failure Notification    ${account_number}    ${Failure}    ${Insufficient Funds}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${ABC_CORP}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ABC_CORP}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${ABC_CORP}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${ABC_CORP}    ${nan}

Launch PayNow Application
[Arguments]    ${ABC_CORP}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ABC_CORP}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${float}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Select Payment Method
[Arguments]    ${Debit Card}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Debit Card}    ${nan}    ${nan}

Enter Insufficient Funds Card Details
[Arguments]    ${INSUFFICIENT_FUNDS_CARD_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${INSUFFICIENT_FUNDS_CARD_DETAILS}    ${nan}    ${nan}

Attempt Payment Process
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Validate Payment Failure Notification
[Arguments]    ${account_number}    ${Failure}    ${Insufficient Funds}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${Failure}    ${Insufficient Funds}

","**Test Case TC_22: Validate Customer Is Notified For Payment Failure Due To Insufficient Funds**

**Purpose:**
The purpose of this test case is to ensure that the Paynow system adequately notifies customers when a payment attempt fails due to insufficient funds in the selected payment method, such as a debit card. This functionality is critical for maintaining transparency with customers, helping them to understand why their payment could not be processed. The test verifies that the failure notification is clearly and accurately displayed, specifying ""Insufficient Funds"" as the reason for the failure. By validating this aspect, we ensure the system enhances user experience by providing clear communication and prompts for corrective action, such as selecting an alternative payment method or ensuring sufficient balance."
Create data-driven clientcentral_testcases for refund processing Testcases TC_11 Validate Merchant Is Able To Process Refund For A Transaction,data-driven,TC_11 Validate Merchant Is Able To Process Refund For A Transaction,"*** Settings ***
Documentation    Validate TC_11 Validate Merchant Is Able To Process Refund For A Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_11 Validate Merchant Is Able To Process Refund For A Transaction
[Documentation]    Validate TC_11 Validate Merchant Is Able To Process Refund For A Transaction using the following steps
Send Request To Create Customer    ${globo_mart}    ${2}    ${nan}
Send Request To Create Invoice For Customer    ${globo_mart}    ${account_number}    ${nan}
Send Request To Process Payment For Debit Card    ${globo_mart}    ${account_number}    ${invoice_number}
Retrieve Transaction Details    ${transaction_id}    ${nan}    ${nan}
Initiate Refund Process    ${transaction_id}    ${refund_amount}    ${reason_code}
Validate Refund Status    ${transaction_id}    ${refund_amount}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${globo_mart}    ${2}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${globo_mart}    ${2}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${globo_mart}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${globo_mart}    ${account_number}    ${nan}

Send Request To Process Payment For Debit Card
[Arguments]    ${globo_mart}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${globo_mart}    ${account_number}    ${invoice_number}

Retrieve Transaction Details
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Initiate Refund Process
[Arguments]    ${transaction_id}    ${refund_amount}    ${reason_code}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${refund_amount}    ${reason_code}

Validate Refund Status
[Arguments]    ${transaction_id}    ${refund_amount}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${refund_amount}    ${nan}

","**Test Case: TC_11 Validate Merchant Is Able To Process Refund For A Transaction**

**Purpose:**
The test case 'TC_11 Validate Merchant Is Able To Process Refund For A Transaction' aims to verify that the merchant can initiate and complete a refund for a transaction. It checks whether all the necessary steps to process a refund are correctly followed and documented in the system. This ensures that merchants can offer refunds efficiently and that the system accurately tracks and processes refund requests.

**Key Points:**
1. **Creating a Customer and Invoice:** Confirm that the system correctly handles the creation of a customer and their associated invoice.
2. **Processing Payment:** Ensure the payment can be processed accurately using a debit card.
3. **Initiating Refund:** Verify the ability to initiate the refund process using required transaction details like the transaction ID and refund amount.
4. **Validating Refund Status:** Ensure that the refund status is accurately reflected in the system, thereby confirming the refund has been successfully processed."
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_75 Validate Customer Is Able To View Payment History After Successful Payment,data-driven,TC_75 Validate Customer Is Able To View Payment History After Successful Payment,"*** Settings ***
Documentation    Validate TC_75 Validate Customer Is Able To View Payment History After Successful Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_75 Validate Customer Is Able To View Payment History After Successful Payment
[Documentation]    Validate TC_75 Validate Customer Is Able To View Payment History After Successful Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}
Pay The Invoice Using Credit Card    ${integrated_merchant}    ${4111111111111111}    ${09/26}
Validate Payment Success Message Is Displayed    ${Payment Successful}    ${nan}    ${}
Navigate To Payment History Page    ${nan}    ${nan}    ${}
Validate Payment History Is Displayed    ${invoice_number}    ${4111111111111111}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Pay The Invoice Using Credit Card
[Arguments]    ${integrated_merchant}    ${4111111111111111}    ${09/26}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${4111111111111111}    ${09/26}

Validate Payment Success Message Is Displayed
[Arguments]    ${Payment Successful}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Payment Successful}    ${nan}    ${}

Navigate To Payment History Page
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate Payment History Is Displayed
[Arguments]    ${invoice_number}    ${4111111111111111}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${4111111111111111}    ${}

","**Test Case Summary: TC_75 Validate Customer Is Able To View Payment History After Successful Payment**

**Purpose:**

The goal of this test case is to ensure that after a successful payment, the customer has the capability to view their payment history. This validation includes several key steps:

1. **Successful Payment Process:**
- Confirm that the customer can successfully complete a payment using a credit card.

2. **Verification of Success Message:**
- Ensure that the system displays a ""Payment Successful"" message upon the completion of the payment.

3. **Access to Payment History:**
- Validate that the customer can navigate to the payment history page and see the details of the recent transaction.

By confirming these functionalities, the test case ensures that customers can easily view their past payments, contributing to transparency and better financial tracking within the PayNow application."
Build data-driven clientcentral_testcases for customers Testcases TC_35 Validate Merchant Can Filter Transactions By Date Range,data-driven,TC_35 Validate Merchant Can Filter Transactions By Date Range,"*** Settings ***
Documentation    Validate TC_35 Validate Merchant Can Filter Transactions By Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_35 Validate Merchant Can Filter Transactions By Date Range
[Documentation]    Validate TC_35 Validate Merchant Can Filter Transactions By Date Range using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Multiple Transactions For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Transactions}    ${nan}    ${nan}
Apply Filter On Transactions By Date Range    ${start_date}    ${end_date}    ${nan}
Validate Filtered Transactions Displayed Correctly    ${start_date}    ${end_date}    ${expected_transaction_count}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Multiple Transactions For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Transactions}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Transactions}    ${nan}    ${nan}

Apply Filter On Transactions By Date Range
[Arguments]    ${start_date}    ${end_date}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${nan}

Validate Filtered Transactions Displayed Correctly
[Arguments]    ${start_date}    ${end_date}    ${expected_transaction_count}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${expected_transaction_count}

",
Create data-driven clientcentral_testcases for customers Testcases TC_30 Validate Merchant Is Able To Refund A Processed Payment,data-driven,TC_30 Validate Merchant Is Able To Refund A Processed Payment,"*** Settings ***
Documentation    Validate TC_30 Validate Merchant Is Able To Refund A Processed Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_30 Validate Merchant Is Able To Refund A Processed Payment
[Documentation]    Validate TC_30 Validate Merchant Is Able To Refund A Processed Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Get Gatewayid    ${response}    ${nan}    ${nan}
Navigate To Transaction Details Page    ${transaction_id}    ${nan}    ${nan}
Initiate Refund Process    ${transaction_id}    ${refund_amount}    ${nan}
Confirm Refund    ${transaction_id}    ${refund_amount}    ${nan}
Validate Refund Status    ${transaction_id}    ${Refunded}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Initiate Refund Process
[Arguments]    ${transaction_id}    ${refund_amount}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${refund_amount}    ${nan}

Confirm Refund
[Arguments]    ${transaction_id}    ${refund_amount}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${refund_amount}    ${nan}

Validate Refund Status
[Arguments]    ${transaction_id}    ${Refunded}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${Refunded}    ${nan}

","The test case 'TC_30 Validate Merchant Is Able To Refund A Processed Payment' is designed to ensure that merchants can successfully initiate and complete a refund for a previously processed payment within the system. The primary purpose of this test case is to guarantee that the refund functionality works as intended, allowing merchants to reverse transactions accurately.

### Objectives:
- **Refund Process Validation:** To verify that the refund process initiates correctly and completes without errors.
- **Accuracy Check:** Ensures the refunded amount matches the specified value and that all financial records are updated properly.
- **User Experience:** Confirms that the refund process is user-friendly and that the interface guides the merchant through the necessary steps efficiently.
- **Error Handling:** Verify that the system handles errors gracefully if the refund process encounters any issues.

Successfully passing this test case is crucial for maintaining financial integrity and providing a reliable refund option for merchants, enhancing customer satisfaction and trust in the system."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_35 Validate Merchant Is Able To Export Transaction Details In CSV Format,data-driven,TC_35 Validate Merchant Is Able To Export Transaction Details In CSV Format,"*** Settings ***
Documentation    Validate TC_35 Validate Merchant Is Able To Export Transaction Details In CSV Format
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_35 Validate Merchant Is Able To Export Transaction Details In CSV Format
[Documentation]    Validate TC_35 Validate Merchant Is Able To Export Transaction Details In CSV Format using the following steps
Send Request To Create Customer    ${COMPANY_XYZ}    ${nan}    ${nan}
Create Invoice For Customer    ${COMPANY_XYZ}    ${account_number}    ${nan}
Process Payment And Capture Transaction     ${account_number}    ${invoice_number}    ${nan}
Get Transaction Details    ${transaction_id}    ${nan}    ${nan}
Navigate To Transaction Export Page    ${nan}    ${nan}    ${nan}
Export Transaction Details As CSV   ${transaction_id}    ${csv_format}    ${nan}
Validate CSV Export Is Successful    ${transaction_id}    ${csv_content}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${COMPANY_XYZ}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${COMPANY_XYZ}    ${nan}    ${nan}

Create Invoice For Customer
[Arguments]    ${COMPANY_XYZ}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${COMPANY_XYZ}    ${account_number}    ${nan}

Process Payment And Capture Transaction
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${transaction_id}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Get Transaction Details
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Navigate To Transaction Export Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Export Transaction Details As CSV
[Arguments]    ${transaction_id}    ${csv_format}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${csv_format}    ${nan}

Validate CSV Export Is Successful
[Arguments]    ${transaction_id}    ${csv_content}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${csv_content}    ${nan}

","**Test Case Summary 'TC_35: Validate Merchant Is Able To Export Transaction Details In CSV Format'**

**Purpose:**
This test case aims to ensure that a merchant can successfully export transaction details in CSV format. It verifies that the export functionality works correctly by creating a customer, generating an invoice, processing a payment, and then exporting the transaction details. The test confirms that the CSV file contains the accurate transaction information, which is vital for record-keeping, analysis, and reporting purposes.

**Key Steps:**
1. **Customer Creation:** Ensure a new customer can be created successfully.
2. **Invoice Generation:** Validate the ability to generate an invoice for the customer.
3. **Payment Processing:** Process the payment and capture the transaction details.
4. **Navigation:** Navigate to the transaction export page with ease.
5. **CSV Export:** Confirm the successful export of transaction details in CSV format.
6. **Validation:** Check the CSV content for accuracy and completeness."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_45 Validate Customer Can Update Profile Information,data-driven,TC_45 Validate Customer Can Update Profile Information,"*** Settings ***
Documentation    Validate TC_45 Validate Customer Can Update Profile Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Customer Can Update Profile Information
[Documentation]    Validate TC_45 Validate Customer Can Update Profile Information using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Send Request To Create Profile For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Login Using Valid Credentials    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Navigate To Profile Tab    ${account_number}    ${}
Update Profile Information    ${account_number}    ${UPDATED_PROFILE_INFORMATION}    ${}
Save Updated Profile Information    ${account_number}    ${}
Validate Profile Information Is Updated    ${account_number}    ${UPDATED_PROFILE_INFORMATION}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Profile For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Login Using Valid Credentials
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Navigate To Profile Tab
[Arguments]    ${account_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${}

Update Profile Information
[Arguments]    ${account_number}    ${UPDATED_PROFILE_INFORMATION}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${UPDATED_PROFILE_INFORMATION}    ${}

Save Updated Profile Information
[Arguments]    ${account_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${}

Validate Profile Information Is Updated
[Arguments]    ${account_number}    ${UPDATED_PROFILE_INFORMATION}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${UPDATED_PROFILE_INFORMATION}    ${}

","**Test Case Summary: TC_45 Validate Customer Can Update Profile Information**

**Purpose**:
The objective of this test case is to ensure that customers can update their profile information successfully within the application. Accurate and up-to-date profile information is crucial for account management and communication between the service provider and the customer. This test case verifies the effectiveness and user experience of the profile update functionality.

**Key Goals**:
1. Verify the customer can access the profile update section within the application.
2. Ensure that profile information fields are editable and can be updated with new data.
3. Confirm that the updated profile information is saved correctly within the system.
4. Validate that the changes are reflected in the customer’s profile after the update."
Create data-driven clientcentral_testcases for subscriptions Testcases TC_32 Validate Merchant Can Update Subscription Billing Date,data-driven,TC_32 Validate Merchant Can Update Subscription Billing Date,"*** Settings ***
Documentation    Validate TC_32 Validate Merchant Can Update Subscription Billing Date
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_32 Validate Merchant Can Update Subscription Billing Date
[Documentation]    Validate TC_32 Validate Merchant Can Update Subscription Billing Date using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Subscription For Customer    ${STERLING_COOPER}    ${account_number}    ${plan_id}
Navigate To Subscription Details Page    ${subscription_id}    ${nan}    ${nan}
Select Tab In Subscription Page    ${Billing}    ${nan}    ${nan}
Edit Billing Date    ${new_billing_date}    ${nan}    ${nan}
Update Billing Date    ${nan}    ${nan}    ${nan}
Validate Billing Date Is Updated    ${new_billing_date}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Subscription For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${plan_id}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${plan_id}

Navigate To Subscription Details Page
[Arguments]    ${subscription_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${subscription_id}    ${nan}    ${nan}

Select Tab In Subscription Page
[Arguments]    ${Billing}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Billing}    ${nan}    ${nan}

Edit Billing Date
[Arguments]    ${new_billing_date}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_billing_date}    ${nan}    ${nan}

Update Billing Date
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Billing Date Is Updated
[Arguments]    ${new_billing_date}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_billing_date}    ${nan}    ${nan}
","The test case titled 'TC_32 Validate Merchant Can Update Subscription Billing Date' aims to verify that a merchant using a subscription management system can successfully update the billing date for a subscription. The primary purpose of this test is to ensure that merchants have the flexibility to change the billing date, which could be necessary for aligning billing cycles with customer preferences, handling special billing requests, or making adjustments due to accounting requirements. Successfully passing this test case confirms that the system is built with user control in mind and helps maintain accurate and timely subscription management."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_27 Validate Merchant Is Able To Process Refund For A Completed Transaction,data-driven,TC_27 Validate Merchant Is Able To Process Refund For A Completed Transaction,"*** Settings ***
Documentation    Validate TC_27 Validate Merchant Is Able To Process Refund For A Completed Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_27 Validate Merchant Is Able To Process Refund For A Completed Transaction
[Documentation]    Validate TC_27 Validate Merchant Is Able To Process Refund For A Completed Transaction using the following steps
Send Request To Create Customer    ${OLSON_GROUP}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${OLSON_GROUP}    ${account_number}    ${nan}
Send Request To Process Payment    ${OLSON_GROUP}    ${account_number}    ${invoice_number}    ${completed}
Select Module    ${All Transactions}    ${nan}    ${nan}
Initiate Refund For Transaction    ${account_number}    ${invoice_number}    ${refund_amount}
Validate Refund Status In Transaction Grid    ${account_number}    ${invoice_number}    ${refund_status}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${OLSON_GROUP}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OLSON_GROUP}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${OLSON_GROUP}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OLSON_GROUP}    ${account_number}    ${nan}

Send Request To Process Payment
[Arguments]    ${OLSON_GROUP}    ${account_number}    ${invoice_number}    ${completed}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OLSON_GROUP}    ${account_number}    ${invoice_number}    ${completed}

Select Module
[Arguments]    ${All Transactions}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${All Transactions}    ${nan}    ${nan}

Initiate Refund For Transaction
[Arguments]    ${account_number}    ${invoice_number}    ${refund_amount}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${refund_amount}

Validate Refund Status In Transaction Grid
[Arguments]    ${account_number}    ${invoice_number}    ${refund_status}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${refund_status}

","The test case 'TC_27 Validate Merchant Is Able To Process Refund For A Completed Transaction' aims to confirm that a merchant can effectively process a refund for a transaction that has been successfully completed. This test ensures that after a customer completes a transaction, the merchant can initiate and finalize a refund process if needed.

This validation is crucial for maintaining accurate financial records and providing excellent customer service by enabling merchants to manage refunds directly within the system. The key steps include creating a customer and invoice, completing a transaction, and then verifying the refund operation and its status in the transaction grid."
Generate data-driven clientcentral_testcases for profile management Testcases TC_15 Validate Merchant Is Able To Update Profile Information,data-driven,TC_15 Validate Merchant Is Able To Update Profile Information,"
*** Settings ***
Documentation    Validate TC_15 Validate Merchant Is Able To Update Profile Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Is Able To Update Profile Information
[Documentation]    Validate TC_15 Validate Merchant Is Able To Update Profile Information using the following steps
Login As Valid User    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To Profile Page    ${Profile}    ${nan}    ${nan}
Update Profile Information    ${new_email}    ${new_phone_number}    ${new_address}
Validate Profile Update Success Message    ${Success}    ${Profile updated successfully}    ${nan}
Log Out    ${nan}    ${nan}    ${nan}

*** Keywords ***
Login As Valid User
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description","**TC_15 Validate Merchant Is Able To Update Profile Information**

**Purpose:** The purpose of this test case is to ensure that a merchant can successfully update their profile information within the system. This includes making changes to email, phone number, and physical address details. The test validates that the system processes the updates correctly and displays an appropriate success message confirming the changes.

The test aims to confirm the following:

1. **Profile Accessibility:** The merchant can access the profile page without issues.
2. **Update Functionality:** Profile information such as email, phone number, and address can be updated successfully.
3. **User Feedback:** A success message is displayed, confirming that the profile updates have been applied.
4. **Session Management:** The merchant can log out after updating the profile information."
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_85 Validate Customer Receives Notification For Payment Due On Current Month In Summary Of Outstanding Invoices,data-driven,TC_85 Validate Customer Receives Notification For Payment Due On Current Month In Summary Of Outstanding Invoices,"*** Settings ***
Documentation    Validate TC_85 Validate Customer Receives Notification For Payment Due On Current Month In Summary Of Outstanding Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_85 Validate Customer Receives Notification For Payment Due On Current Month In Summary Of Outstanding Invoices
[Documentation]    Validate TC_85 Validate Customer Receives Notification For Payment Due On Current Month In Summary Of Outstanding Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER_CUST}    ${nan}    ${nan}
Send Request To Create Invoice For Current Month    ${account_number}    ${STERLING_COOPER_CUST}    ${current_month}
Launch PayNow Application    ${STERLING_COOPER_CUST}    ${valid_user}    ${valid_password}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${current_month}
Validate Notification For Current Month Payment Due    ${current_month}    ${notification_message}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_CUST}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_CUST}    ${nan}    ${nan}

Send Request To Create Invoice For Current Month
[Arguments]    ${account_number}    ${STERLING_COOPER_CUST}    ${current_month}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_CUST}    ${current_month}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_CUST}    ${valid_user}    ${valid_password}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_CUST}    ${valid_user}    ${valid_password}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${current_month}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${current_month}

Validate Notification For Current Month Payment Due
[Arguments]    ${current_month}    ${notification_message}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${current_month}    ${notification_message}    ${nan}
","**Test Case Summary: TC_85 - Validate Customer Receives Notification For Payment Due On Current Month In Summary Of Outstanding Invoices**

**Purpose:**
The objective of this test case is to confirm that customers receive an accurate notification for any payments due within the current month. This ensures that the notification and reminder system for outstanding invoices is functional and prompts customers appropriately.

**Key Objectives:**
1. **Customer Reminder:** Verify that the system generates a notification indicating a payment due within the current month, encouraging timely payments by the customers.
2. **Notification Accuracy:** Ensure that customers get the correct invoice details and due date information as a notification for the current month on the summary page of outstanding invoices."
Generate data-driven clientcentral_testcases for appointments Testcases TC_112 Validate Merchant Is Able To Schedule An Appointment And Modify Details,data-driven,TC_112 Validate Merchant Is Able To Schedule An Appointment And Modify Details,"*** Settings ***
Documentation    Validate TC_112 Validate Merchant Is Able To Schedule An Appointment And Modify Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_112 Validate Merchant Is Able To Schedule An Appointment And Modify Details
[Documentation]    Validate TC_112 Validate Merchant Is Able To Schedule An Appointment And Modify Details using the following steps
Send Request To Create Customer    ${STERLING_HUDSON}    ${nan}    ${nan}
Schedule New Appointment    ${STERLING_HUDSON}    ${appointment_date}    ${appointment_time}
Navigate To Appointment Details Page    ${appointment_id}    ${nan}    ${nan}
Edit Appointment Details    ${appointment_id}    ${new_appointment_date}    ${new_appointment_time}
Save Modified Appointment    ${appointment_id}    ${nan}    ${nan}
Validate Modified Appointment Details    ${appointment_id}    ${new_appointment_date}    ${new_appointment_time}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_HUDSON}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_HUDSON}    ${nan}    ${nan}

Schedule New Appointment
[Arguments]    ${STERLING_HUDSON}    ${appointment_date}    ${appointment_time}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_HUDSON}    ${appointment_date}    ${appointment_time}

Navigate To Appointment Details Page
[Arguments]    ${appointment_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${appointment_id}    ${nan}    ${nan}

Edit Appointment Details
[Arguments]    ${appointment_id}    ${new_appointment_date}    ${new_appointment_time}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${appointment_id}    ${new_appointment_date}    ${new_appointment_time}

Save Modified Appointment
[Arguments]    ${appointment_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${appointment_id}    ${nan}    ${nan}

Validate Modified Appointment Details
[Arguments]    ${appointment_id}    ${new_appointment_date}    ${new_appointment_time}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${appointment_id}    ${new_appointment_date}    ${new_appointment_time}

","The test case 'TC_112 Validate Merchant Is Able To Schedule An Appointment And Modify Details' is designed to ensure that merchants can efficiently manage appointments by scheduling new ones and modifying existing ones.

### Purpose:"
Create data-driven clientcentral_testcases for client profile updates Testcases TC_45 Validate Merchant Is Able To Update Client Profile Information,data-driven,TC_45 Validate Merchant Is Able To Update Client Profile Information,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To Update Client Profile Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To Update Client Profile Information
[Documentation]    Validate TC_45 Validate Merchant Is Able To Update Client Profile Information using the following steps
Send Request To Create Customer    ${Global_Company}    ${nan}    ${nan}
Login And Navigate To Client Profile    ${Global_Company}    ${username}    ${password}
Update Client Profile Information    ${new_contact_number}    ${new_email}    ${nan}
Save And Confirm Profile Update    ${username}    ${new_contact_number}    ${new_email}
Validate Updated Profile Information    ${username}    ${new_contact_number}    ${new_email}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${Global_Company}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Global_Company}    ${nan}    ${nan}

Login And Navigate To Client Profile
[Arguments]    ${Global_Company}    ${username}    ${password}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Global_Company}    ${username}    ${password}

Update Client Profile Information
[Arguments]    ${new_contact_number}    ${new_email}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_contact_number}    ${new_email}    ${nan}

Save And Confirm Profile Update
[Arguments]    ${username}    ${new_contact_number}    ${new_email}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${username}    ${new_contact_number}    ${new_email}

Validate Updated Profile Information
[Arguments]    ${username}    ${new_contact_number}    ${new_email}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${username}    ${new_contact_number}    ${new_email}

","The test case 'TC_45 Validate Merchant Is Able To Update Client Profile Information' is designed to ensure that merchants can successfully update the profile information of their clients within the application. This involves changing contact details, email addresses, and other relevant information.

### Purpose:"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_45 Validate Customer Can Add And Remove Saved Payment Methods,data-driven,TC_45 Validate Customer Can Add And Remove Saved Payment Methods,"*** Settings ***
Documentation    Validate TC_45 Validate Customer Can Add And Remove Saved Payment Methods
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Customer Can Add And Remove Saved Payment Methods
[Documentation]    Validate TC_45 Validate Customer Can Add And Remove Saved Payment Methods using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Navigate To Saved Payment Methods    ${nan}    ${nan}    ${}
Add New Payment Method    ${NEW_PAYMENT_DETAILS}    ${nan}    ${}
Validate Payment Method Added Successfully    ${nan}    ${nan}    ${}
Remove Payment Method    ${EXISTING_PAYMENT_METHOD}    ${nan}    ${}
Validate Payment Method Removed Successfully    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Navigate To Saved Payment Methods
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Add New Payment Method
[Arguments]    ${NEW_PAYMENT_DETAILS}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NEW_PAYMENT_DETAILS}    ${nan}    ${}

Validate Payment Method Added Successfully
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Remove Payment Method
[Arguments]    ${EXISTING_PAYMENT_METHOD}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${EXISTING_PAYMENT_METHOD}    ${nan}    ${}

Validate Payment Method Removed Successfully
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

","### Summary of Test Case: TC_45 - Validate Customer Can Add And Remove Saved Payment Methods

**Purpose:**

The primary purpose of Test Case TC_45 is to ensure that the customer has the capability to both add a new payment method and remove an existing saved payment method from their account through the PayNow application. This is critical for maintaining flexibility and security for the customer's payment options.

**Key Points:**
1. **Add Payment Method:** The test verifies that a new payment method can be added successfully to the customer's saved payment methods.
2. **Remove Payment Method:** It checks the ability of the customer to remove an existing payment method.
3. **Validation:** Ensures that the corresponding success and validation messages appear accurately to confirm the addition or removal of payment methods."
Create data-driven paynow test cases for Omnicorp Testcases TC_15 Validate Customer Can Apply Discount Codes On Invoices,data-driven,TC_15 Validate Customer Can Apply Discount Codes On Invoices,"*** Settings ***
Documentation    Validate TC_15 Validate Customer Can Apply Discount Codes On Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Customer Can Apply Discount Codes On Invoices
[Documentation]    Validate TC_15 Validate Customer Can Apply Discount Codes On Invoices using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Apply Discount Code To Invoice    ${DISCOUNT_CODE}    ${invoice_number}    ${nan}
Validate Discount Applied Correctly    ${invoice_number}    ${DISCOUNT_CODE}    ${discounted_amount}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Apply Discount Code To Invoice
[Arguments]    ${DISCOUNT_CODE}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DISCOUNT_CODE}    ${invoice_number}    ${nan}

Validate Discount Applied Correctly
[Arguments]    ${invoice_number}    ${DISCOUNT_CODE}    ${discounted_amount}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${DISCOUNT_CODE}    ${discounted_amount}

","The purpose of the test case 'TC_15 Validate Customer Can Apply Discount Codes On Invoices' is to ensure that customers are able to successfully apply discount codes to their invoices during the payment process. This test case evaluates the functionality of the discount code feature to confirm that the codes are correctly validated and applied, resulting in the expected discount on the invoice amount.

Key objectives of the test case include:

1. Verifying that the user interface allows the input of valid discount codes.
2. Checking that the system correctly validates the discount codes and applies the appropriate discount to the invoice.
3. Ensuring that the final invoice amount reflects the applied discount correctly, and the payment process proceeds as expected with the discounted amount."
Build data-driven clientcentral_testcases for orders Testcases TC_33 Validate User Can View Order Summary After Placing An Order,data-driven,TC_33 Validate User Can View Order Summary After Placing An Order,"*** Settings ***
Documentation    Validate TC_33 Validate User Can View Order Summary After Placing An Order
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_33 Validate User Can View Order Summary After Placing An Order
[Documentation]    Validate TC_33 Validate User Can View Order Summary After Placing An Order using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Add Item To Order Cart    ${item_id}    ${quantity}    ${nan}
Update Order Cart    ${cart_id}    ${nan}    ${nan}
Place Order For Customer    ${STERLING_COOPER}    ${cart_id}    ${nan}
Confirm Order Placement    ${order_id}    ${nan}    ${nan}
Navigate To Order Summary Page    ${order_id}    ${nan}    ${nan}
Validate Order Summary Details Are Correct    ${order_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Add Item To Order Cart
[Arguments]    ${item_id}    ${quantity}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${item_id}    ${quantity}    ${nan}

Update Order Cart
[Arguments]    ${cart_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${cart_id}    ${nan}    ${nan}

Place Order For Customer
[Arguments]    ${STERLING_COOPER}    ${cart_id}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${cart_id}    ${nan}

Confirm Order Placement
[Arguments]    ${order_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_id}    ${nan}    ${nan}

Navigate To Order Summary Page
[Arguments]    ${order_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_id}    ${nan}    ${nan}

Validate Order Summary Details Are Correct
[Arguments]    ${order_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_id}    ${nan}    ${nan}

","The test case 'TC_33 Validate User Can View Order Summary After Placing An Order' aims to confirm that a user can successfully view the full summary of their order after completing the order placement process. The primary purpose of this test case is to ensure that the system accurately displays all relevant order details, allowing the user to verify their purchase information promptly.

Key aspects include:
"
Create data-driven paymentsystem_testcases for invoices Testcases TC_45 Validate Merchant Can Void a Payment After Processing,data-driven,TC_45 Validate Merchant Can Void a Payment After Processing,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Can Void a Payment After Processing
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Can Void a Payment After Processing
[Documentation]    Validate TC_45 Validate Merchant Can Void a Payment After Processing using the following steps
Send Request To Create Customer    ${PAYMENT_SYSTEM}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${account_number}    ${PAYMENT_SYSTEM}    ${}
Send Request To Process Payment For Credit Card    ${PAYMENT_SYSTEM}    ${account_number}    ${invoice_number}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${}
Verify Payment Is Processed    ${transaction_id}    ${nan}    ${}
Send Request To Void Payment    ${PAYMENT_SYSTEM}    ${transaction_id}    ${}
Validate Payment Status Is Void    ${transaction_id}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${PAYMENT_SYSTEM}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PAYMENT_SYSTEM}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${PAYMENT_SYSTEM}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${PAYMENT_SYSTEM}    ${}

Send Request To Process Payment For Credit Card
[Arguments]    ${PAYMENT_SYSTEM}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PAYMENT_SYSTEM}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${}

Verify Payment Is Processed
[Arguments]    ${transaction_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${}

Send Request To Void Payment
[Arguments]    ${PAYMENT_SYSTEM}    ${transaction_id}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PAYMENT_SYSTEM}    ${transaction_id}    ${}

Validate Payment Status Is Void
[Arguments]    ${transaction_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${}

","**Test Case Summary: TC_45 Validate Merchant Can Void a Payment After Processing**

**Purpose**:
The objective of this test case is to ensure that the payment system permits a merchant to void a payment after it has been processed. Below are the core aims:
"
Create data-driven billingcentral_testcases for payment plans Testcases TC_35 Validate Admin Can Activate Payment Plan And Apply It To New Invoices,data-driven,TC_35 Validate Admin Can Activate Payment Plan And Apply It To New Invoices,"*** Settings ***
Documentation    Validate TC_35 Validate Admin Can Activate Payment Plan And Apply It To New Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       adminuser
${VALID_PASSWORD}   adminpass

*** Test Cases ***
TC_35 Validate Admin Can Activate Payment Plan And Apply It To New Invoices
[Documentation]    Validate TC_35 Validate Admin Can Activate Payment Plan And Apply It To New Invoices using the following steps
Login To BillingCentral    ${adminuser}    ${adminpass}    ${nan}
Navigate To Payment Plans Section    ${nan}    ${nan}    ${nan}
Activate Payment Plan    ${PaymentPlanA}    ${nan}    ${nan}
Validate Payment Plan Is Active    ${PaymentPlanA}    ${nan}    ${nan}
Generate New Invoice For Customer    ${customer_id}    ${PaymentPlanA}    ${nan}
Validate Payment Plan Applied To Invoice    ${invoice_id}    ${PaymentPlanA}    ${nan}

*** Keywords ***
Login To BillingCentral
[Arguments]    ${adminuser}    ${adminpass}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${adminuser}    ${adminpass}    ${nan}

Navigate To Payment Plans Section
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Activate Payment Plan
[Arguments]    ${PaymentPlanA}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${PaymentPlanA}    ${nan}    ${nan}

Validate Payment Plan Is Active
[Arguments]    ${PaymentPlanA}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${PaymentPlanA}    ${nan}    ${nan}

Generate New Invoice For Customer
[Arguments]    ${customer_id}    ${PaymentPlanA}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${PaymentPlanA}    ${nan}

Validate Payment Plan Applied To Invoice
[Arguments]    ${invoice_id}    ${PaymentPlanA}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_id}    ${PaymentPlanA}    ${nan}

","The test case 'TC_35 Validate Admin Can Activate Payment Plan And Apply It To New Invoices' is designed to ensure that administrative users of the billing central system can successfully activate a payment plan and apply it to new invoices generated for customers.

**Purpose:**

1. **Payment Plan Activation:** Verify that the system allows administrators to activate specific payment plans. This functionality is essential for providing flexible payment options to customers.

2. **Application to New Invoices:** Ensure that once a payment plan is activated, it can be correctly applied to new invoices generated for customers. This step confirms that the system integrates the active payment plans into its invoicing process.

3. **System Integration and Consistency:** Validate that the entire workflow operates smoothly without errors, from activation to application on new invoices, maintaining data consistency and system reliability.

The test ensures that the billing system adheres to the business rules allowing only active payment plans to be applied, offering precise and reliable payment scheduling for customers."
Create data-driven paynow test cases for non integrated Testcases TC_33 Validate Customer Can View Their Payment History,data-driven,TC_33 Validate Customer Can View Their Payment History,"*** Settings ***
Documentation    Validate TC_33 Validate Customer Can View Their Payment History
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_33 Validate Customer Can View Their Payment History
[Documentation]    Validate TC_33 Validate Customer Can View Their Payment History using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
Navigate To Payment History Section    ${nan}    ${nan}    ${}
Validate Payment History Is Visible    ${nan}    ${nan}    ${}
Validate Payment History Data Is Correct    ${payment_history}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch PayNow Application
[Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
[Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Navigate To Payment History Section
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate Payment History Is Visible
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate Payment History Data Is Correct
[Arguments]    ${payment_history}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${payment_history}    ${nan}    ${}

","The purpose of the test case 'TC_33 Validate Customer Can View Their Payment History' is to ensure that customers have the ability to access and view their payment history within the application. This involves verifying that the option to view payment history is present, functional, and displays accurate information. The test case aims to confirm the accessibility of payment history data, guaranteeing that users can easily review their past transactions, which is a crucial feature for tracking and managing their financial activities systematically. This enhances user confidence and satisfaction by providing a transparent view of their payment records."
Build data-driven paynow test cases for Sterlingcooper Testcases TC_44 Validate Customer Is Able To Delete Saved Payment Method,data-driven,TC_44 Validate Customer Is Able To Delete Saved Payment Method,"*** Settings ***
Documentation    Validate TC_44 Validate Customer Is Able To Delete Saved Payment Method
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_44 Validate Customer Is Able To Delete Saved Payment Method
[Documentation]    Validate TC_44 Validate Customer Is Able To Delete Saved Payment Method using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Pay The Invoice Using Credit Card And Save The Payment Method    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}
Navigate To Saved Payments Tab    ${nan}    ${nan}    ${nan}
Select Saved Payment Method For Deletion    ${41111}    ${Visa card}    ${nan}
Confirm Deletion Of Saved Payment Method    ${41111}    ${Visa card}    ${nan}
Validate Payment Method Is Deleted    ${41111}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using Credit Card And Save The Payment Method
[Arguments]    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}

Navigate To Saved Payments Tab
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Select Saved Payment Method For Deletion
[Arguments]    ${41111}    ${Visa card}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${41111}    ${Visa card}    ${nan}

Confirm Deletion Of Saved Payment Method
[Arguments]    ${41111}    ${Visa card}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${41111}    ${Visa card}    ${nan}

Validate Payment Method Is Deleted
[Arguments]    ${41111}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${41111}    ${nan}    ${nan}

","The test case 'TC_44 Validate Customer Is Able To Delete Saved Payment Method' is aimed at verifying the functionality that allows customers to delete a saved payment method from their profile or account settings. This action is crucial for maintaining the security and relevance of their stored payment options.

Key aspects of this test case include:
"
Create data-driven clientcentral_testcases for virtual terminal Testcases TC_45 Validate Merchant Is Able To Update Customer Email,data-driven,TC_45 Validate Merchant Is Able To Update Customer Email,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To Update Customer Email
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To Update Customer Email
[Documentation]    Validate TC_45 Validate Merchant Is Able To Update Customer Email using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Select Module    ${Virtual Terminal}    ${nan}    ${nan}
Search Customer In Virtual Terminal    ${account_number}    ${nan}    ${nan}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Edit Customer Email In Details Page    ${new_email_address}    ${nan}    ${nan}
Validate Updated Email Is Displayed    ${new_email_address}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Select Module
[Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Virtual Terminal}    ${nan}    ${nan}

Search Customer In Virtual Terminal
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Edit Customer Email In Details Page
[Arguments]    ${new_email_address}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_email_address}    ${nan}    ${nan}

Validate Updated Email Is Displayed
[Arguments]    ${new_email_address}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_email_address}    ${nan}    ${nan}

","**Summary of Test Case 'TC_45 Validate Merchant Is Able To Update Customer Email':**

**Purpose:**
The primary objective of this test case is to verify that a merchant can successfully update a customer's email address within the merchant interface. This functionality is crucial for maintaining accurate customer information, which is essential for communication, transaction notifications, and overall customer relationship management.

**Key Points:**
1. **Customer Management:** Ensure that the process of updating customer email information is smooth and error-free, contributing to better customer management practices.

2. **Data Integrity:** Validate that the new email address is correctly saved and displayed, ensuring that the data integrity within the system is maintained.

3. **User Interface:** Confirm that the navigation to the customer details page and the interaction to update the email address are intuitive and function as expected."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_52 Validate Merchant Is Able To Apply Coupon Code To Invoice During Payment,data-driven,TC_52 Validate Merchant Is Able To Apply Coupon Code To Invoice During Payment,"*** Settings ***
Documentation    Validate TC_52 Validate Merchant Is Able To Apply Coupon Code To Invoice During Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_52 Validate Merchant Is Able To Apply Coupon Code To Invoice During Payment
[Documentation]    Validate TC_52 Validate Merchant Is Able To Apply Coupon Code To Invoice During Payment using the following steps
Send Request To Create Customer    ${GRAYSON_CORP}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${GRAYSON_CORP}    ${account_number}    ${nan}
Generate Coupon Code    ${coupon_code}    ${nan}    ${nan}
Send Request To Apply Coupon To Invoice    ${account_number}    ${invoice_number}    ${coupon_code}
Validate Coupon Applied Successfully    ${account_number}    ${invoice_number}    ${coupon_code}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${GRAYSON_CORP}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GRAYSON_CORP}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${GRAYSON_CORP}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GRAYSON_CORP}    ${account_number}    ${nan}

Generate Coupon Code
[Arguments]    ${coupon_code}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${coupon_code}    ${nan}    ${nan}

Send Request To Apply Coupon To Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${coupon_code}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${coupon_code}

Validate Coupon Applied Successfully
[Arguments]    ${account_number}    ${invoice_number}    ${coupon_code}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${coupon_code}

","The test case 'TC_52 Validate Merchant Is Able To Apply Coupon Code To Invoice During Payment' aims to verify the functionality that allows merchants to apply a coupon code to an invoice during the payment process. This test case checks if the coupon code can be generated, applied correctly, and whether it effectively reduces the invoice amount as expected. It ensures that the system responds appropriately to the coupon application, updates the relevant records, and reflects the discount in the invoice summary. Successful validation of this test case will provide confidence that merchants can offer and manage coupon-based promotions efficiently, enhancing customer satisfaction and sales strategies."
Build data-driven paynow test cases for Sterlingcooper Testcases TC_50 Validate Customer Can Reset Password Successfully,data-driven,TC_50 Validate Customer Can Reset Password Successfully,"*** Settings ***
Documentation    Validate TC_50 Validate Customer Can Reset Password Successfully
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_50 Validate Customer Can Reset Password Successfully
[Documentation]    Validate TC_50 Validate Customer Can Reset Password Successfully using the following steps
Send Request To Verify User Email    ${VALID_USER}    ${nan}    ${}
Send Request To Send Reset Password Link    ${email}    ${nan}    ${}
Launch PayNow Application    ${nan}    ${nan}    ${}
Enter Email For Password Reset    ${email}    ${nan}    ${}
Verify Reset Password Link Received In Email    ${email}    ${nan}    ${}
Enter New Password    ${new_password}    ${nan}    ${}
Validate Password Reset Success Notification    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Verify User Email
[Arguments]    ${email}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${email}    ${nan}    ${}

Send Request To Send Reset Password Link
[Arguments]    ${email}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${email}    ${nan}    ${}

Launch PayNow Application
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Enter Email For Password Reset
[Arguments]    ${email}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${email}    ${nan}    ${}

Verify Reset Password Link Received In Email
[Arguments]    ${email}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${email}    ${nan}    ${}

Enter New Password
[Arguments]    ${new_password}    ${nan}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${new_password}    ${nan}    ${}

Validate Password Reset Success Notification
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

","**Test Case Summary for TC_50 Validate Customer Can Reset Password Successfully**

**Purpose:**
The primary aim of this test case is to validate whether a customer can successfully reset their password using the PayNow application. This test verifies the entire password reset process, from initiating the request to confirming the password reset notification.

**Steps Involved:**
1. **Email Verification:** Ensure the user's email is verified correctly before sending the reset link.
2. **Password Reset Link:** Validate that the reset password link is sent and received.
3. **Application Launch:** Confirm that the PayNow application launches without issues.
4. **Email Submission:** Ensure that the customer can enter their email correctly to request a password reset.
5. **Link Verification:** Verify that the reset password link is received and functions correctly.
6. **New Password Entry:** Validate the ability to enter and confirm the new password.
7. **Success Notification:** Ensure that the application displays a success notification after the password is reset.

By ensuring these steps are executed properly, we can confirm that the password reset functionality is working as intended and that customers have the ability to manage their account security with ease."
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_78 Validate Merchant Is Unable To Delete Paid Invoice,data-driven,TC_78 Validate Merchant Is Unable To Delete Paid Invoice,"*** Settings ***
Documentation    Validate TC_78 Validate Merchant Is Unable To Delete Paid Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_78 Validate Merchant Is Unable To Delete Paid Invoice
[Documentation]    Validate TC_78 Validate Merchant Is Unable To Delete Paid Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
Generate Random Customer Details    ${nan}    ${nan}    ${}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}
Process Payment For Invoice    ${invoice_number}    ${valid_payment_details}    ${}
Attempt To Delete Paid Invoice    ${invoice_number}    ${STERLING_COOPER_MERCHANT}    ${}
Validate Error Message For Deleting Paid Invoice    ${You cannot delete a paid invoice}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Process Payment For Invoice
[Arguments]    ${invoice_number}    ${valid_payment_details}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${valid_payment_details}    ${}

Attempt To Delete Paid Invoice
[Arguments]    ${invoice_number}    ${STERLING_COOPER_MERCHANT}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${STERLING_COOPER_MERCHANT}    ${}

Validate Error Message For Deleting Paid Invoice
[Arguments]    ${You cannot delete a paid invoice}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${You cannot delete a paid invoice}    ${nan}    ${}
","The test case ""TC_78 Validate Merchant Is Unable To Delete Paid Invoice"" is designed to confirm that merchants cannot delete an invoice that has already been paid. This test is crucial to ensure that the system maintains accurate financial records and prevents inadvertent or unauthorized deletion of critical transactional data.

**Objectives:**
1. **System Integrity:** Ensure that an invoice, once paid, cannot be deleted, maintaining the integrity of the financial records.
2. **User Feedback:** Validate that appropriate error messages are displayed to inform the merchant of the action’s impossibility.
3. **Data Accuracy:** Verify that attempts to delete a paid invoice do not affect the database or record of the transaction."
Build data-driven clientcentral_testcases for freight billing Testcases TC_55 Validate Merchant Can Generate Invoice For Multiple Shipments,data-driven,TC_55 Validate Merchant Can Generate Invoice For Multiple Shipments,"*** Settings ***
Documentation    Validate TC_55 Validate Merchant Can Generate Invoice For Multiple Shipments
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_55 Validate Merchant Can Generate Invoice For Multiple Shipments
[Documentation]    Validate TC_55 Validate Merchant Can Generate Invoice For Multiple Shipments using the following steps
Send Request To Create Customer    ${GLOBAL_SHIPPERS}    ${nan}    ${nan}
Send Request To Create Shipment    ${GLOBAL_SHIPPERS}    ${account_number}    ${shipment_details_1}
Send Request To Create Another Shipment    ${GLOBAL_SHIPPERS}    ${account_number}    ${shipment_details_2}
Navigate To Billing Module    ${nan}    ${nan}    ${nan}
Generate Invoice For Multiple Shipments    ${account_number}    ${shipment_ids}    ${nan}
Validate Generated Invoice Details    ${invoice_number}    ${correct}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${GLOBAL_SHIPPERS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBAL_SHIPPERS}    ${nan}    ${nan}

Send Request To Create Shipment
[Arguments]    ${GLOBAL_SHIPPERS}    ${account_number}    ${shipment_details_1}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBAL_SHIPPERS}    ${account_number}    ${shipment_details_1}

Send Request To Create Another Shipment
[Arguments]    ${GLOBAL_SHIPPERS}    ${account_number}    ${shipment_details_2}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBAL_SHIPPERS}    ${account_number}    ${shipment_details_2}

Navigate To Billing Module
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Generate Invoice For Multiple Shipments
[Arguments]    ${account_number}    ${shipment_ids}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${shipment_ids}    ${nan}

Validate Generated Invoice Details
[Arguments]    ${invoice_number}    ${correct}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${correct}    ${nan}

","The test case ""TC_55 Validate Merchant Can Generate Invoice For Multiple Shipments"" aims to ensure that merchants can successfully generate a consolidated invoice for multiple shipments. This process involves sending requests to create customer accounts and shipping orders, and then validating that the final invoice accurately includes all shipments. The primary objectives are to confirm the system's ability to handle multiple shipments under a single invoice and to validate the correctness of the generated invoice details. This ensures that merchants can efficiently manage and bill multiple shipments, improving operational efficiency and accuracy in billing."
Create data-driven UserManagement test cases for clients Testcases TC_45 Validate Admin Can Update User Roles And Permissions,data-driven,TC_45 Validate Admin Can Update User Roles And Permissions,"*** Settings ***
Documentation    Validate TC_45 Validate Admin Can Update User Roles And Permissions
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_ADMIN_USER}       adminuser
${VALID_ADMIN_PASSWORD}   adminsecret

*** Test Cases ***
TC_45 Validate Admin Can Update User Roles And Permissions
[Documentation]    Validate TC_45 Validate Admin Can Update User Roles And Permissions using the following steps
Log In As Admin    ${VALID_ADMIN_USER}    ${VALID_ADMIN_PASSWORD}    ${nan}
Navigate To User Management    ${nan}    ${nan}    ${nan}
Select User For Role Update    ${username}    ${nan}    ${nan}
Update User Role    ${username}    ${new_role}    ${nan}
Save Changes    ${nan}    ${nan}    ${nan}
Log Out Admin    ${nan}    ${nan}    ${nan}
Log In As Updated User    ${username}    ${user_password}    ${nan}
Navigate To User Profile    ${username}    ${nan}    ${nan}
Validate Updated Role And Permissions    ${new_role}    ${nan}    ${nan}

*** Keywords ***
Log In As Admin
[Arguments]    ${VALID_ADMIN_USER}    ${VALID_ADMIN_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_ADMIN_USER}    ${VALID_ADMIN_PASSWORD}    ${nan}

Navigate To User Management
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Select User For Role Update
[Arguments]    ${username}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${username}    ${nan}    ${nan}

Update User Role
[Arguments]    ${username}    ${new_role}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${username}    ${new_role}    ${nan}

Save Changes
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Log Out Admin
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Log In As Updated User
[Arguments]    ${username}    ${user_password}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${username}    ${user_password}    ${nan}

Navigate To User Profile
[Arguments]    ${username}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${username}    ${nan}    ${nan}

Validate Updated Role And Permissions
[Arguments]    ${new_role}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_role}    ${nan}    ${nan}

","### Summary for Test Case 'TC_45 Validate Admin Can Update User Roles And Permissions'

**Purpose:**
The main goal of the test case ""TC_45 Validate Admin Can Update User Roles And Permissions"" is to verify that an admin user can successfully update the roles and permissions of other users within the system. This validation ensures that the administrative functions for user management are working as expected, allowing for the proper delegation of access and authority.

**Key Actions:**
1. **Log In As Admin:** Authenticate as an admin to access management features.
2. **Navigate To User Management:** Move to the user management section to locate the user.
3. **Select User:** Choose the user whose role and permissions need updating.
4. **Update Role:** Change the user's role to the new specified role.
5. **Save Changes:** Commit the role update changes in the system.
6. **Re-authentication:** Log in as the updated user to verify the changes.
7. **Validate Changes:** Confirm that the new role and permissions have been correctly applied.
"
Create data-driven clientcentral_testcases for payments Testcases TC_52 Validate Merchant Can Process Refund via ACH,data-driven,TC_52 Validate Merchant Can Process Refund via ACH,"*** Settings ***
Documentation    Validate TC_52 Validate Merchant Can Process Refund via ACH
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_52 Validate Merchant Can Process Refund via ACH
[Documentation]    Validate TC_52 Validate Merchant Can Process Refund via ACH using the following steps
Send Request To Create Customer    ${HORIZON_CORP}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${HORIZON_CORP}    ${account_number}    ${nan}
Send Request To Process Payment Through ACH/Echeck Card    ${HORIZON_CORP}    ${account_number}    ${invoice_number}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Refunds}    ${nan}    ${nan}
Select Refund Payment Method    ${ACH / eCheck}    ${nan}    ${nan}
Enter Refund Details    ${REFUND_DETAILS}    ${account_number}    ${nan}
Process Refund Payment    ${nan}    ${nan}    ${nan}
Validate Refund Confirmation Page Is Displayed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${HORIZON_CORP}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${HORIZON_CORP}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${HORIZON_CORP}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${HORIZON_CORP}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
[Arguments]    ${HORIZON_CORP}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${HORIZON_CORP}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Refunds}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Refunds}    ${nan}    ${nan}

Select Refund Payment Method
[Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter Refund Details
[Arguments]    ${REFUND_DETAILS}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${REFUND_DETAILS}    ${account_number}    ${nan}

Process Refund Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Refund Confirmation Page Is Displayed
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_52 Validate Merchant Can Process Refund via ACH' is designed to verify that a merchant can successfully process a refund through Automated Clearing House (ACH). The purpose of this test case is to ensure that the refund process, which involves sending the funds back to the customer's bank account via ACH, is functioning correctly and efficiently.

Key aspects of the test include:"
Generate data-driven clientcentral_testcases for transactions Testcases TC_12 Validate Merchant Can Export Transaction History,data-driven,TC_12 Validate Merchant Can Export Transaction History,"*** Settings ***
Documentation    Validate TC_12 Validate Merchant Can Export Transaction History
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Merchant Can Export Transaction History
[Documentation]    Validate TC_12 Validate Merchant Can Export Transaction History using the following steps
Login To Merchant Dashboard    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To Transaction History    ${nan}    ${nan}    ${nan}
Select Export Option    ${CSV}    ${nan}    ${nan}
Confirm Export File Download    ${transactions.csv}    ${nan}    ${nan}
Validate Exported File Content    ${transactions.csv}    ${TRANSACTION_DETAILS}    ${nan}

*** Keywords ***
Login To Merchant Dashboard
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Navigate To Transaction History
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Select Export Option
[Arguments]    ${CSV}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CSV}    ${nan}    ${nan}

Confirm Export File Download
[Arguments]    ${transactions.csv}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transactions.csv}    ${nan}    ${nan}

Validate Exported File Content
[Arguments]    ${transactions.csv}    ${TRANSACTION_DETAILS}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transactions.csv}    ${TRANSACTION_DETAILS}    ${nan}

","**TC_12 Validate Merchant Can Export Transaction History**
"
Generate data-driven clientcentral_testcases for refunds Testcases TC_66 Validate Merchant Is Able To Process Refund For Specific Transaction,data-driven,TC_66 Validate Merchant Is Able To Process Refund For Specific Transaction,"*** Settings ***
Documentation    Validate TC_66 Validate Merchant Is Able To Process Refund For Specific Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_66 Validate Merchant Is Able To Process Refund For Specific Transaction
[Documentation]    Validate TC_66 Validate Merchant Is Able To Process Refund For Specific Transaction using the following steps
Send Request To Create Customer    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}
Send Request To Process Payment Through Credit Card    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}
Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}
Select Refund Option For Transaction    ${gateway_id}    ${nan}    ${nan}
Confirm Refund Amount    ${refund_amount}    ${nan}    ${nan}
Process Refund    ${nan}    ${nan}    ${nan}
Validate Refund Confirmation Page Is Displayed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${account_number}    ${nan}

Send Request To Process Payment Through Credit Card
[Arguments]    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN}    ${account_number}    ${invoice_number}

Navigate To Transaction Details Page
[Arguments]    ${gateway_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${gateway_id}    ${nan}    ${nan}

Select Refund Option For Transaction
[Arguments]    ${gateway_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${gateway_id}    ${nan}    ${nan}

Confirm Refund Amount
[Arguments]    ${refund_amount}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${refund_amount}    ${nan}    ${nan}

Process Refund
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Refund Confirmation Page Is Displayed
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}
","The test case 'TC_66 Validate Merchant Is Able To Process Refund For Specific Transaction' aims to verify that merchants can successfully initiate and complete a refund for specific transactions. This process ensures that the payment processing system provides an accurate and user-friendly interface for handling refunds.

**Purpose:**
1. **Refund Functionality:** To ensure merchants can identify and select transactions for refunds, confirming the system supports accurate refund processing.
2. **User Interface Verification:** To confirm that the refund option is visible and accessible in the transaction details page, providing merchants a seamless way to initiate refunds.
3. **System Accuracy:** To validate that the entered refund amount is processed correctly and the refund confirmation page is displayed, reflecting the transaction’s updated status accurately.

By achieving these objectives, this test case ensures the reliability and ease-of-use of the refund process within the payment system."
Generate data-driven clientcentral_testcases for tokens Testcases TC_05 Validate Merchant Can Export Transactions History,data-driven,TC_05 Validate Merchant Can Export Transactions History,"*** Settings ***
Documentation    Validate TC_05 Validate Merchant Can Export Transactions History
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Merchant Can Export Transactions History
[Documentation]    Validate TC_05 Validate Merchant Can Export Transactions History using the following steps
Login As Merchant    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To Transactions History Page    ${nan}    ${nan}    ${}
Click Export Button    ${nan}    ${nan}    ${}
Validate Export Success    ${export_status}    ${expected_status}    ${}

*** Keywords ***
Login As Merchant
[Arguments]    ${user}    ${password}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    Logging in with user ${user}    ${nan}    ${}

Navigate To Transactions History Page
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    Navigating to Transactions History Page    ${nan}    ${nan}

Click Export Button
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    Clicking on Export Button    ${nan}    ${nan}

Validate Export Success
[Arguments]    ${export_status}    ${expected_status}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description","**Test Case Summary: TC_05 Validate Merchant Can Export Transactions History**

**Purpose:**

The purpose of this test case is to validate that a merchant can successfully export their transaction history from the application. This functionality enables merchants to download and review their transaction data for analysis, record-keeping, and reporting purposes. The test focuses on ensuring that the export feature is accessible, functions correctly, and provides the expected output.

**Key Objectives:**

1. **Authentication Verification:** Confirm that a valid merchant can log into the application with appropriate credentials.
2. **Navigation to Transactions History Page:** Ensure the merchant can access the transactions history page.
3. **Export Process:** Validate that the export button is functional and initiates the export process.
4. **Export Success Verification:** Check that the export is completed successfully, producing a file that meets the expected format and content requirements."
Create data-driven clientcentral_testcases for payments Testcases TC_22 Validate Merchant Can Successfully Process a Payment Through Virtual Terminal,data-driven,TC_22 Validate Merchant Can Successfully Process a Payment Through Virtual Terminal,"*** Settings ***
Documentation    Validate TC_22 Validate Merchant Can Successfully Process a Payment Through Virtual Terminal
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Merchant Can Successfully Process a Payment Through Virtual Terminal
[Documentation]    Validate TC_22 Validate Merchant Can Successfully Process a Payment Through Virtual Terminal using the following steps
Login As Merchant    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Navigate To Module    ${Virtual Terminal}    ${nan}    ${}
Initiate Payment Process    ${amount}    ${customer_id}    ${nan}
Enter Payment Details    ${card_number}    ${expiration_date}    ${cvv}
Submit Payment    ${nan}    ${nan}    ${}
Verify Payment Success    ${transaction_id}    ${nan}    ${}

*** Keywords ***
Login As Merchant
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Navigate To Module
[Arguments]    ${Virtual Terminal}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Virtual Terminal}    ${nan}    ${}

Initiate Payment Process
[Arguments]    ${amount}    ${customer_id}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${amount}    ${customer_id}    ${nan}

Enter Payment Details
[Arguments]    ${card_number}    ${expiration_date}    ${cvv}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${card_number}    ${expiration_date}    ${cvv}

Submit Payment
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Verify Payment Success
[Arguments]    ${transaction_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${}
","The purpose of the test case 'TC_22 Validate Merchant Can Successfully Process a Payment Through Virtual Terminal' is to verify that a merchant can complete the end-to-end payment process using the Virtual Terminal feature. This involves authenticating the merchant, navigating to the Virtual Terminal module, initiating a payment, entering the required payment details, submitting the payment, and validating that the payment was processed successfully. Successful execution of this test case confirms that the Virtual Terminal is functioning as intended, ensuring smooth, seamless, and secure processing of payments for merchants."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_15 Validate Merchant Is Able To Export Payment History As CSV,data-driven,TC_15 Validate Merchant Is Able To Export Payment History As CSV,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Is Able To Export Payment History As CSV
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Is Able To Export Payment History As CSV
[Documentation]    Validate TC_15 Validate Merchant Is Able To Export Payment History As CSV using the following steps
Send Request To Authenticate Merchant    ${STERLING_COOPER}    ${VALID_USER}    ${VALID_PASSWORD}
Navigate To Payment History Module    ${STERLING_COOPER}    ${nan}    ${nan}
Initiate Export Payment History As CSV    ${export_button}    ${nan}    ${nan}
Validate CSV Export Is Successful    ${download_path}    ${expected_filename}    ${nan}
Verify Exported CSV Content    ${expected_content}    ${download_path}    ${expected_filename}

*** Keywords ***
Send Request To Authenticate Merchant
[Arguments]    ${STERLING_COOPER}    ${VALID_USER}    ${VALID_PASSWORD}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${VALID_USER}    ${VALID_PASSWORD}

Navigate To Payment History Module
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Initiate Export Payment History As CSV
[Arguments]    ${export_button}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${export_button}    ${nan}    ${nan}

Validate CSV Export Is Successful
[Arguments]    ${download_path}    ${expected_filename}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${download_path}    ${expected_filename}    ${nan}

Verify Exported CSV Content
[Arguments]    ${expected_content}    ${download_path}    ${expected_filename}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${expected_content}    ${download_path}    ${expected_filename}
","## Test Case: TC_15 - Validate Merchant Is Able To Export Payment History As CSV

### Purpose:
The aim of this test case is to ensure that merchants can successfully export their payment history data as a CSV file. This function is essential for merchants who require data analysis or reporting outside the application.

### Summary:
1. **Setup:**
- Ensure the merchant is authenticated and logged into the system.
- Navigate to the payment history module within their account.

2. **Execution Steps:**
- Locate and initiate the CSV export function within the payment history module.
- Validate that the export is successfully triggered and the CSV file is downloaded.
- Verify that the contents of the exported CSV file match the expected data.

3. **Verification:**
- Confirm that the file is named correctly and located in the specified download path.
- Ensure the data within the CSV file is accurate and complete based on the transaction records."
Generate data-driven clientcentral_testcases for customers Testcases TC_15 Validate Merchant Is Able To Remove Customer From List,data-driven,TC_15 Validate Merchant Is Able To Remove Customer From List,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Is Able To Remove Customer From List
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Is Able To Remove Customer From List
[Documentation]    Validate TC_15 Validate Merchant Is Able To Remove Customer From List using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Navigate To Customer List Page    ${nan}    ${nan}    ${nan}
Remove Customer From List    ${account_number}    ${nan}    ${nan}
Validate Customer Is Removed From List    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Navigate To Customer List Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Remove Customer From List
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Validate Customer Is Removed From List
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

","**Test Case: TC_15 – Validate Merchant Is Able To Remove Customer From List**

**Purpose:**
The purpose of this test case is to ensure that the merchant has the ability to remove a customer from the list of customers through the application interface. This functionality is critical for maintaining accurate and up-to-date customer records and should be handled correctly to prevent errors in customer management.

**Key Objectives:**
1. **Verify Customer Creation:** Confirm that a new customer can be created and added to the customer list.
2. **Navigation to Customer List Page:** Ensure that the merchant can successfully navigate to the page containing the list of customers.
3. **Removal Process Validation:** Validate that the merchant can remove the selected customer from the list without errors.
4. **Post-Removal Confirmation:** Confirm that the customer is no longer displayed in the customer list after the removal process is completed.

"
Create data-driven payment_testcases for refund process Testcases TC_15 Validate Merchant Is Able To Process Refund For An Order,data-driven,TC_15 Validate Merchant Is Able To Process Refund For An Order,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Is Able To Process Refund For An Order
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Is Able To Process Refund For An Order
[Documentation]    Validate TC_15 Validate Merchant Is Able To Process Refund For An Order using the following steps
Send Request To Create Customer    ${RETRO_ENTERPRISES}    ${nan}    ${}
Send Request To Create Order For Customer    ${order_id}    ${RETRO_ENTERPRISES}    ${nan}
Select Module    ${Orders}    ${nan}    ${}
Process Refund For Order    ${order_id}    ${nan}    ${refund_amount}
Validate Refund Processed Successfully    ${order_id}    ${nan}    ${refund_amount}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${RETRO_ENTERPRISES}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${RETRO_ENTERPRISES}    ${nan}    ${}

Send Request To Create Order For Customer
[Arguments]    ${order_id}    ${RETRO_ENTERPRISES}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_id}    ${RETRO_ENTERPRISES}    ${nan}

Select Module
[Arguments]    ${Orders}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Orders}    ${nan}    ${}

Process Refund For Order
[Arguments]    ${order_id}    ${nan}    ${refund_amount}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_id}    ${nan}    ${refund_amount}

Validate Refund Processed Successfully
[Arguments]    ${order_id}    ${nan}    ${refund_amount}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_id}    ${nan}    ${refund_amount}

","The test case **'TC_15 Validate Merchant Is Able To Process Refund For An Order'** aims to verify the functionality of the refund process within a merchant's order management system. This test case ensures that the merchant can successfully process refunds for orders through the application's interface. Key aspects being tested include:

1. **Order Creation:** Verifying that an order can be created for a customer.
2. **Navigation:** Ensuring the merchant can navigate to the Orders module within the system.
3. **Refund Processing:** Checking that the refund process functionality works correctly for the specified order.
4. **Confirmation:** Validating that the refund is successfully processed and the appropriate amount is returned.

This test case ensures that the refund mechanism is robust and reliable, allowing merchants to manage customer returns efficiently, thereby maintaining good customer service and operational accuracy."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_65 Validate Late Fees Are Accurately Assessed For Overdue Invoices,data-driven,TC_65 Validate Late Fees Are Accurately Assessed For Overdue Invoices,"*** Settings ***
Documentation    Validate TC_65 Validate Late Fees Are Accurately Assessed For Overdue Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_65 Validate Late Fees Are Accurately Assessed For Overdue Invoices
[Documentation]    Validate TC_65 Validate Late Fees Are Accurately Assessed For Overdue Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${invoice_amount}
Set Invoice Due Date To Past Day    ${invoice_number}    ${days_past_due}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Validate Late Fee Is Correctly Assessed    ${expected_late_fee}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${invoice_amount}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${invoice_amount}

Set Invoice Due Date To Past Day
[Arguments]    ${invoice_number}    ${days_past_due}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${days_past_due}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Validate Late Fee Is Correctly Assessed
[Arguments]    ${expected_late_fee}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${expected_late_fee}    ${nan}    ${nan}

","The test case 'TC_65 Validate Late Fees Are Accurately Assessed For Overdue Invoices' is designed to confirm that the system correctly calculates late fees for invoices that have exceeded their due dates. The primary goal of this test case is to ensure that any additional charges for late payments are correctly computed and applied to the overdue amount. By validating this functionality, it ensures the system's financial integrity and compliance with the defined late fee policies, thus maintaining the accuracy of customer billing records and ensuring timely revenue collection."
Construct data-driven clientcentral_testcases for inventory management Testcases TC_12 Validate Merchant Is Able To Update Item Prices,data-driven,TC_12 Validate Merchant Is Able To Update Item Prices,"*** Settings ***
Documentation    Validate TC_12 Validate Merchant Is Able To Update Item Prices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Merchant Is Able To Update Item Prices
[Documentation]    Validate TC_12 Validate Merchant Is Able To Update Item Prices using the following steps
Select Module    ${Inventory}    ${}    ${}
Filter Item By SKU    ${item_sku}    ${}    ${}
Open Item Details    ${item_sku}    ${}    ${}
Update Item Price    ${item_sku}    ${new_price}    ${}
Save Changes    ${nan}    ${}    ${}
Validate Price Update    ${item_sku}    ${new_price}    ${}

*** Keywords ***
Select Module
[Arguments]    ${Inventory}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Inventory}    ${}    ${}

Filter Item By SKU
[Arguments]    ${item_sku}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${item_sku}    ${}    ${}

Open Item Details
[Arguments]    ${item_sku}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${item_sku}    ${}    ${}

Update Item Price
[Arguments]    ${item_sku}    ${new_price}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${item_sku}    ${new_price}    ${}

Save Changes
[Arguments]    ${nan}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${}    ${}

Validate Price Update
[Arguments]    ${item_sku}    ${new_price}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${item_sku}    ${new_price}    ${}

","The test case 'TC_12 Validate Merchant Is Able To Update Item Prices' aims to ensure that merchants can successfully update the prices of various items in their inventory. This verification process involves a series of steps to access the inventory management system, locate the specific item through its SKU, modify the price, and save the changes.

Key objectives include:
"
Build data-driven clientcentral_testcases for customers Testcases TC_12 Validate Merchant Is Able To Export Customer Data to CSV,data-driven,TC_12 Validate Merchant Is Able To Export Customer Data to CSV,"*** Settings ***
Documentation    Validate TC_12 Validate Merchant Is Able To Export Customer Data to CSV
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Merchant Is Able To Export Customer Data to CSV
[Documentation]    Validate TC_12 Validate Merchant Is Able To Export Customer Data to CSV using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Navigate To Customer Data Page    ${STERLING_COOPER}    ${nan}    ${nan}
Select Customer Data Tab    ${Customer_Data}    ${nan}    ${nan}
Click Export To CSV Button    ${Customer_Data}    ${nan}    ${nan}
Validate Customer Data Exported    ${Customer_Data}    ${CSV_File_Path}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Navigate To Customer Data Page
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Select Customer Data Tab
[Arguments]    ${Customer_Data}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Customer_Data}    ${nan}    ${nan}

Click Export To CSV Button
[Arguments]    ${Customer_Data}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Customer_Data}    ${nan}    ${nan}

Validate Customer Data Exported
[Arguments]    ${Customer_Data}    ${CSV_File_Path}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Customer_Data}    ${CSV_File_Path}    ${nan}

","**Test Case: TC_12 Validate Merchant Is Able To Export Customer Data to CSV**

**Purpose:**

This test case ensures that merchants can successfully export customer data to a CSV file. This feature is crucial for data analysis, backup, and reporting purposes. It confirms that:

1. Merchants have access to the customer data export function.
2. The system accurately compiles and exports the data into a CSV format.
3. The exported file contains the correct and complete customer data as seen in the system.

Testing this feature guarantees that merchants can efficiently utilize the exported data for their operational needs, ensuring better data management and easier integration with other tools."
Generate data-driven paynow test cases for Omnicorp Testcases TC_45 Validate User Can Successfully Delete Saved Payment Method,data-driven,TC_45 Validate User Can Successfully Delete Saved Payment Method,"*** Settings ***
Documentation    Validate TC_45 Validate User Can Successfully Delete Saved Payment Method
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate User Can Successfully Delete Saved Payment Method
[Documentation]    Validate TC_45 Validate User Can Successfully Delete Saved Payment Method using the following steps
Send Request To Create Customer    ${OMNICORP_USER}    ${nan}    ${nan}
Launch PayNow Application    ${OMNICORP_USER}    ${nan}    ${nan}
Enter Account Number And View Payment Methods    ${account_number}    ${nan}    ${nan}
Select Existing Payment Method    ${Card_ending_1234}    ${nan}    ${nan}
Initiate Delete Payment Method Request    ${account_number}    ${Card_ending_1234}    ${nan}
Confirm Deletion Of Payment Method    ${account_number}    ${Card_ending_1234}    ${Yes}
Validate Payment Method Is Deleted    ${account_number}    ${Card_ending_1234}    ${True}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${OMNICORP_USER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_USER}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${OMNICORP_USER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_USER}    ${nan}    ${nan}

Enter Account Number And View Payment Methods
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Existing Payment Method
[Arguments]    ${Card_ending_1234}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Card_ending_1234}    ${nan}    ${nan}

Initiate Delete Payment Method Request
[Arguments]    ${account_number}    ${Card_ending_1234}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${Card_ending_1234}    ${nan}

Confirm Deletion Of Payment Method
[Arguments]    ${account_number}    ${Card_ending_1234}    ${Yes}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${Card_ending_1234}    ${Yes}

Validate Payment Method Is Deleted
[Arguments]    ${account_number}    ${Card_ending_1234}    ${True}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${Card_ending_1234}    ${True}

","The test case 'TC_45 Validate User Can Successfully Delete Saved Payment Method' aims to confirm that users have the ability to delete an existing payment method through the user interface. This test is crucial for ensuring that users can effectively manage their saved payment methods. The primary objective is to verify the user's ability to select and remove a specific payment method and ensure that the deletion process is accurately reflected in the system. The test involves verifying the correct UI flow, proper functioning of backend services, and confirming the update in the payment methods list. Ensuring this functionality enhances user control over their payment information and maintains data cleanliness."
Create data-driven clientcentral_testcases for dashboard Testcases TC_07 Validate Merchant Is Able To Export Customer Data To CSV,data-driven,TC_07 Validate Merchant Is Able To Export Customer Data To CSV,"*** Settings ***
Documentation    Validate TC_07 Validate Merchant Is Able To Export Customer Data To CSV
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Merchant Is Able To Export Customer Data To CSV
[Documentation]    Validate TC_07 Validate Merchant Is Able To Export Customer Data To CSV using the following steps
Send Request To Create Customer List    ${STERLING_COOPER}    ${nan}    ${nan}
Navigate To Customer Management Page    ${nan}    ${nan}    ${nan}
Click Export To CSV Button    ${nan}    ${nan}    ${nan}
Validate CSV Download Is Triggered    ${nan}    ${nan}    ${nan}
Verify CSV File Content    ${expected_csv_content}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer List
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Navigate To Customer Management Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Click Export To CSV Button
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate CSV Download Is Triggered
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Verify CSV File Content
[Arguments]    ${expected_csv_content}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${expected_csv_content}    ${nan}    ${nan}
","**Test Case: TC_07 - Validate Merchant Is Able To Export Customer Data To CSV**

**Purpose:**
The goal of this test case is to confirm that a merchant can successfully export customer data to a CSV file from the application. This function is important for allowing merchants to obtain, analyze, and store customer information outside of the application, facilitating data management and reporting.

**Key Objectives:**"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_25 Validate Customer Can Successfully Apply Promotional Codes For Discounts,data-driven,TC_25 Validate Customer Can Successfully Apply Promotional Codes For Discounts,"*** Settings ***
Documentation    Validate TC_25 Validate Customer Can Successfully Apply Promotional Codes For Discounts
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_25 Validate Customer Can Successfully Apply Promotional Codes For Discounts
[Documentation]    Validate TC_25 Validate Customer Can Successfully Apply Promotional Codes For Discounts using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Generate Random Promotional Code    ${percentage}    ${20}    ${}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}
Apply Promotional Code    ${promo_code}    ${nan}    ${}
Validate Discounted Amount    ${original_amount}    ${discounted_amount}    ${20}
Process Invoice Payment    ${nan}    ${nan}    ${nan}
Validate Payment Receipt    ${discounted_amount}    ${promo_code}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Promotional Code
[Arguments]    ${percentage}    ${20}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${percentage}    ${20}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${float}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Apply Promotional Code
[Arguments]    ${promo_code}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${promo_code}    ${nan}    ${}

Validate Discounted Amount
[Arguments]    ${original_amount}    ${discounted_amount}    ${20}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${original_amount}    ${discounted_amount}    ${20}

Process Invoice Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Payment Receipt
[Arguments]    ${discounted_amount}    ${promo_code}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${discounted_amount}    ${promo_code}    ${nan}

","**Test Case Summary: ""TC_25 Validate Customer Can Successfully Apply Promotional Codes For Discounts""**

**Purpose:**

The objective of this test case is to ensure that customers can successfully apply promotional codes to receive discounts on their invoices. This validation is crucial for ensuring that the promotional feature works correctly and the correct discount amount is applied and reflected in the payment process.

**Key Steps Involved:**

1. **Generate and Apply Promotional Code:** Ensure a promotional code is generated with a specific discount percentage and that this code can be applied to the invoice.

2. **Validate Discount Calculation:** Confirm that the discount is accurately calculated and applied to the invoice amount, reducing the total payable amount accordingly.

3. **Process and Validate Payment:** Ensure the payment process completes successfully with the discounted amount and that the payment receipt reflects"
Create data-driven clientcentral_testcases for payment gateway Testcases TC_15 Validate Merchant Is Able To Process Refund,data-driven,TC_15 Validate Merchant Is Able To Process Refund,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Is Able To Process Refund
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Is Able To Process Refund
[Documentation]    Validate TC_15 Validate Merchant Is Able To Process Refund using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}
Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Get Transaction ID    ${response}    ${}    ${}
Send Request To Process Refund    ${transaction_id}    ${nan}    ${}
Validate Refund Processed Successfully    ${transaction_id}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${}

Send Request To Process Payment Through ACH/Echeck Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Transaction ID
[Arguments]    ${response}    ${}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${}    ${}

Send Request To Process Refund
[Arguments]    ${transaction_id}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${}

Validate Refund Processed Successfully
[Arguments]    ${transaction_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${}

","The test case ""TC_15 Validate Merchant Is Able To Process Refund"" is designed to ensure the functionality of the refund processing system within the merchant's interface. The primary objective is to verify that after a payment has been successfully processed, a merchant can process a refund for that transaction accurately and efficiently.

Key objectives include:

1. Confirming that the merchant interface allows for the creation of customer and invoice records.
2. Ensuring payments can be processed successfully through the preferred payment method.
3. Verifying the transaction ID is correctly generated and captured.
4. Validating the refund request can be processed using the generated transaction ID.
5. Checking that the system handles the refund accurately and updates the transaction status accordingly.

Ensuring this functionality is critical to maintaining customer trust and providing a reliable transaction management experience for the merchant."
Generate data-driven merchant portal test cases for Report Generation Testcases TC_12 Validate Merchant Is Able To Generate Monthly Sales Report,data-driven,TC_12 Validate Merchant Is Able To Generate Monthly Sales Report,"*** Settings ***
Documentation    Validate TC_12 Validate Merchant Is Able To Generate Monthly Sales Report
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Merchant Is Able To Generate Monthly Sales Report
[Documentation]    Validate TC_12 Validate Merchant Is Able To Generate Monthly Sales Report using the following steps
Login To Merchant Portal    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Navigate To Reports Section    ${nan}    ${nan}    ${nan}
Select Report Type    ${Monthly Sales}    ${nan}    ${nan}
Enter Date Range For Report    ${first_day_of_month}    ${last_day_of_month}    ${nan}
Generate Report    ${nan}    ${nan}    ${nan}
Validate Report Generation    ${Monthly Sales Report}    ${first_day_of_month}    ${last_day_of_month}
Verify Report Content    ${total_sales}    ${number_of_sales}    ${nan}

*** Keywords ***
Login To Merchant Portal
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Navigate To Reports Section
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Select Report Type
[Arguments]    ${Monthly Sales}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Monthly Sales}    ${nan}    ${nan}

Enter Date Range For Report
[Arguments]    ${first_day_of_month}    ${last_day_of_month}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${first_day_of_month}    ${last_day_of_month}    ${nan}

Generate Report
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Report Generation
[Arguments]    ${Monthly Sales Report}    ${first_day_of_month}    ${last_day_of_month}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Monthly Sales Report}    ${first_day_of_month}    ${last_day_of_month}

Verify Report Content
[Arguments]    ${total_sales}    ${number_of_sales}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${total_sales}    ${number_of_sales}    ${nan}

","**Test Case: TC_12 Validate Merchant Is Able To Generate Monthly Sales Report**

**Purpose:**
The purpose of this test case is to ensure that a merchant can generate an accurate and detailed sales report for a specific month. This functionality is essential for merchants to analyze their monthly sales performance, track revenue, and manage financial records effectively.

**Key Points:**
1. **Login and Navigation:** Ensure the merchant can log in to the portal and navigate to the reports section seamlessly.
2. **Report Selection:** Validate that the merchant can select the 'Monthly Sales' report type and specify the correct date range.
3. **Report Generation:** Confirm that the report is generated successfully and contains accurate and relevant sales data for the selected month.
4. **Content Verification:** Verify that the report includes the total sales amount and the number of sales transactions correctly.

Executing this test case will confirm the reliability and accuracy of the monthly sales report generation feature in the merchant portal."
Generate data-driven clientcentral_testcases for digital wallet Top-Up functionality Testcases TC_21 Validate Merchant Is Able To Top-Up Digital Wallet,data-driven,TC_21 Validate Merchant Is Able To Top-Up Digital Wallet,"*** Settings ***
Documentation    Validate TC_21 Validate Merchant Is Able To Top-Up Digital Wallet
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_21 Validate Merchant Is Able To Top-Up Digital Wallet
[Documentation]    Validate TC_21 Validate Merchant Is Able To Top-Up Digital Wallet using the following steps
Send Request To Create Customer    ${SHOPMART}    ${nan}    ${nan}
Send Request To Link Digital Wallet    ${SHOPMART}    ${account_number}    ${nan}
Generate Digital Wallet Details    ${nan}    ${nan}    ${nan}
Select Merchant    ${Shopmart}    ${nan}    ${nan}
Select Module    ${Digital Wallet}    ${nan}    ${nan}
Top-Up Wallet    ${account_number}    ${amount}    ${nan}
Navigate To Wallet Summary Page    ${account_number}    ${nan}    ${nan}
Validate Wallet Balance Is Updated    ${account_number}    ${amount}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${SHOPMART}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${SHOPMART}    ${nan}    ${nan}

Send Request To Link Digital Wallet
[Arguments]    ${SHOPMART}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${SHOPMART}    ${account_number}    ${nan}

Generate Digital Wallet Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Select Merchant
[Arguments]    ${Shopmart}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Shopmart}    ${nan}    ${nan}

Select Module
[Arguments]    ${Digital Wallet}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Digital Wallet}    ${nan}    ${nan}

Top-Up Wallet
[Arguments]    ${account_number}    ${amount}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${amount}    ${nan}

Navigate To Wallet Summary Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Validate Wallet Balance Is Updated
[Arguments]    ${account_number}    ${amount}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${amount}    ${nan}

","**Test Case Summary: TC_21 Validate Merchant Is Able To Top-Up Digital Wallet**

**Purpose:**
The primary objective of this test case is to verify that merchants can successfully top-up digital wallets through the system interface. This functionality ensures that merchants can increase their digital wallet balance as needed.

By validating this functionality, the test case aims to:
- Ensure that the top-up process works correctly and updates the wallet balance accurately.
- Confirm that the system interface is intuitive and user-friendly during the top-up process.
- Check that the top-up transactions are reflected in the wallet balance without delay.
- Validate that any related notifications or confirmations are appropriately displayed to the user.

This test is critical to guarantee that the digital wallet's top-up mechanism is reliable and functions efficiently, promoting a smooth and uninterrupted merchant experience with financial transactions."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_27 Validate Merchant Can Issue A Refund For A Customer Payment,data-driven,TC_27 Validate Merchant Can Issue A Refund For A Customer Payment,"*** Settings ***
Documentation    Validate TC_27 Validate Merchant Can Issue A Refund For A Customer Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_27 Validate Merchant Can Issue A Refund For A Customer Payment
[Documentation]    Validate TC_27 Validate Merchant Can Issue A Refund For A Customer Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
Process Customer Payment    ${account_number}    ${invoice_number}    ${validated_ach}
Initiate Refund For Payment    ${account_number}    ${payment_id}    ${}
Validate Refund Status    ${refund_id}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Process Customer Payment
[Arguments]    ${account_number}    ${invoice_number}    ${validated_ach}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${validated_ach}

Initiate Refund For Payment
[Arguments]    ${account_number}    ${payment_id}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${payment_id}    ${}

Validate Refund Status
[Arguments]    ${refund_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${refund_id}    ${nan}    ${}
","The test case 'TC_27 Validate Merchant Can Issue A Refund For A Customer Payment' is designed to ensure that a merchant can successfully refund a payment made by a customer. The purpose is to validate the refund functionality within the application, ensuring that it operates correctly, handles necessary transactions properly, and updates the system accordingly. This includes creating a customer, processing a customer payment, and issuing a refund for that payment to verify that all steps in the refund process are executable and reliable. This is critical for maintaining accurate financial records and providing customer satisfaction."
Create data-driven paynow_testcases for Sterlingcooper Testcases TC_45 Validate Integrated Customer Can Apply Discount Code At Checkout,data-driven,TC_45 Validate Integrated Customer Can Apply Discount Code At Checkout,"*** Settings ***
Documentation    Validate TC_45 Validate Integrated Customer Can Apply Discount Code At Checkout
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret
${DISCOUNT_CODE}    ""SAVE20""

*** Test Cases ***
TC_45 Validate Integrated Customer Can Apply Discount Code At Checkout
[Documentation]    Validate TC_45 Validate Integrated Customer Can Apply Discount Code At Checkout using the following steps
Send Request To Create Customer    ${STERLING_COOPER_CUSTOMER}    ${nan}    ${}
Create Single Invoice Through API    ${account_number}    ${integrated_customer}    ${}
Launch PayNow Application    ${STERLING_COOPER_CUSTOMER}    ${nan}    ${}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}
Apply Discount Code At Checkout    ${DISCOUNT_CODE}    ${nan}    ${}
Validate Discount Applied Successfully    ${invoice_number}    ${discount_amount}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_CUSTOMER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_CUSTOMER}    ${nan}    ${}

Create Single Invoice Through API
[Arguments]    ${account_number}    ${integrated_customer}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${integrated_customer}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_CUSTOMER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_CUSTOMER}    ${nan}    ${}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${float}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Apply Discount Code At Checkout
[Arguments]    ${DISCOUNT_CODE}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${DISCOUNT_CODE}    ${nan}    ${}

Validate Discount Applied Successfully
[Arguments]    ${invoice_number}    ${discount_amount}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${discount_amount}    ${}

","The purpose of the test case 'TC_45 Validate Integrated Customer Can Apply Discount Code At Checkout' is to ensure that a customer, integrated within the system, can apply a discount code during the checkout process. This test case verifies that the functionality for entering and validating discount codes is operational and that the appropriate discount is applied to the invoice. The test steps include:

1. Ensuring the customer account is created successfully.
2. Creating a single invoice for the customer.
3. Launching the PayNow application.
4. Entering the account number and the invoice number.
5. Applying the discount code at checkout.
6. Validating that the discount has been applied correctly and that the total amount reflects the discount.

This test ensures that discount codes function as intended, providing customers with the expected benefits and ensuring accurate billing."
Build data-driven paynow test cases for non integrated Testcases TC_45 Validate Error When Customer Pays With Insufficient Funds,data-driven,TC_45 Validate Error When Customer Pays With Insufficient Funds,"*** Settings ***
Documentation    Validate TC_45 Validate Error When Customer Pays With Insufficient Funds
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Error When Customer Pays With Insufficient Funds
[Documentation]    Validate TC_45 Validate Error When Customer Pays With Insufficient Funds using the following steps
Send Request To Create Customer    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${account_number}    ${NON_INTEGRATED_MERCHANT}    ${}
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}
Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
Select Payment Type    ${Lump Sum}    ${nan}    ${}
Enter Lumpsum Amount    ${1000}    ${nan}    ${}
Select Payment Method    ${ACH / eCheck}    ${nan}    ${}
Enter ACH/ECheck Details    ${VALID_ACH}    ${INSUFFICIENT_FUNDS_ACCT}    ${}
Validate Errors After Clicking On Process Invoice    ${Insufficient funds}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${NON_INTEGRATED_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${NON_INTEGRATED_MERCHANT}    ${}

Launch PayNow Application
[Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Enter Customer Details
[Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
[Arguments]    ${Lump Sum}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
[Arguments]    ${1000}    ${nan}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${1000}    ${nan}    ${}

Select Payment Method
[Arguments]    ${ACH / eCheck}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACH / eCheck}    ${nan}    ${}

Enter ACH/ECheck Details
[Arguments]    ${VALID_ACH}    ${INSUFFICIENT_FUNDS_ACCT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_ACH}    ${INSUFFICIENT_FUNDS_ACCT}    ${}

Validate Errors After Clicking On Process Invoice
[Arguments]    ${Insufficient funds}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Insufficient funds}    ${nan}    ${}

",The purpose of the test case 'TC_45 Validate Error When Customer Pays With Insufficient Funds' is to ensure that the application's payment processing system correctly identifies and handles situations where a customer attempts to make a payment
Create data-driven paynow test cases for Sterlingcooper Testcases TC_45 Validate Customer Is Able To Apply Discount Code During Payment,data-driven,TC_45 Validate Customer Is Able To Apply Discount Code During Payment,"*** Settings ***
Documentation    Validate TC_45 Validate Customer Is Able To Apply Discount Code During Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Customer Is Able To Apply Discount Code During Payment
[Documentation]    Validate TC_45 Validate Customer Is Able To Apply Discount Code During Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}
Enter Discount Code During Payment    ${discount_code}    ${nan}    ${}
Process Invoice Payment With Discount    ${nan}    ${nan}    ${nan}
Validate Discount Applied Successfully    ${discount_amount}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Enter Discount Code During Payment
[Arguments]    ${discount_code}    ${nan}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${discount_code}    ${nan}    ${}

Process Invoice Payment With Discount
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Discount Applied Successfully
[Arguments]    ${discount_amount}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${discount_amount}    ${nan}    ${}

","**Test Case 'TC_45 Validate Customer Is Able To Apply Discount Code During Payment':**

**Purpose:**
The purpose of this test case is to confirm that customers can apply a valid discount code during the payment process and that the discount is correctly calculated and deducted from the total amount payable. This validates the functionality and user-friendliness of the discount application feature within the payment system.

**Details:**
1. **Scope:** This test case focuses on verifying the application and acceptance of discount codes during the checkout process.
2. **Preconditions:** The customer should have an active account, should be in the process of making a payment, and possess a valid discount code.
3. **Steps:**
- Log in to the PayNow application.
- Enter the account number and invoice details.
- Apply a given discount code during the payment process.
- Verify that the discount is correctly applied and reflected in the final payment amount.
- Process the payment and ensure the transaction completes with the discounted amount.

Ensuring customers can apply discount codes correctly is crucial for maintaining a seamless and satisfactory purchasing experience, thereby enhancing overall customer satisfaction."
Create data-driven clientcentral_testcases for payments Testcases TC_30 Validate Payment Gateway Failure Handling For Customers,data-driven,TC_30 Validate Payment Gateway Failure Handling For Customers,"*** Settings ***
Documentation    Validate TC_30 Validate Payment Gateway Failure Handling For Customers
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_30 Validate Payment Gateway Failure Handling For Customers
[Documentation]    Validate TC_30 Validate Payment Gateway Failure Handling For Customers using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Initiate Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Simulate Payment Gateway Failure    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Validate Payment Failure Response    ${invoice_number}    ${error_code}    ${nan}
Verify Invoice Status Is Unpaid    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Initiate Payment For Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Simulate Payment Gateway Failure
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Validate Payment Failure Response
[Arguments]    ${invoice_number}    ${error_code}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${error_code}    ${nan}

Verify Invoice Status Is Unpaid
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}
","### Summary of Test Case: TC_30 Validate Payment Gateway Failure Handling For Customers

**Purpose:**

The objective of this test case is to ensure that the payment processing system correctly handles payment gateway failures when customers attempt to make payments. This includes verifying that the system provides appropriate error responses and maintains accurate invoice status.

**Key Goals:**
"
Validate data-driven clientcentral_testcases for customers Testcases TC_80 Validate Merchant Is Able To Resend Unsuccessful Email,data-driven,TC_80 Validate Merchant Is Able To Resend Unsuccessful Email,"*** Settings ***
Documentation    Validate TC_80 Validate Merchant Is Able To Resend Unsuccessful Email
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_80 Validate Merchant Is Able To Resend Unsuccessful Email
[Documentation]    Validate TC_80 Validate Merchant Is Able To Resend Unsuccessful Email using the following steps
Send Request To Create Customer    ${ACME_CORP}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${ACME_CORP}    ${account_number}    ${nan}
Send Email To Customer    ${ACME_CORP}    ${account_number}    ${invoice_number}
Navigate To Failed Email Page    ${account_number}    ${nan}    ${nan}
Validate Failed Email Entry    ${account_number}    ${invoice_number}    ${nan}
Resend Failed Emails    ${account_number}    ${invoice_number}    ${EMAIL_DOMAIN}
Validate Email Resend Success    ${account_number}    ${invoice_number}    ${EMAIL_DOMAIN}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${ACME_CORP}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${ACME_CORP}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${account_number}    ${nan}

Send Email To Customer
[Arguments]    ${ACME_CORP}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ACME_CORP}    ${account_number}    ${invoice_number}

Navigate To Failed Email Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Validate Failed Email Entry
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Resend Failed Emails
[Arguments]    ${account_number}    ${invoice_number}    ${EMAIL_DOMAIN}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${EMAIL_DOMAIN}

Validate Email Resend Success
[Arguments]    ${account_number}    ${invoice_number}    ${EMAIL_DOMAIN}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${EMAIL_DOMAIN}

","The test case 'TC_80 Validate Merchant Is Able To Resend Unsuccessful Email' is designed to ensure that merchants can effectively resend emails that failed to deliver to customers.

### Purpose:"
Build data-driven clientcentral_testcases for customers Testcases TC_77 Validate Merchant Is Able To Update Customer Information,data-driven,TC_77 Validate Merchant Is Able To Update Customer Information,"*** Settings ***
Documentation    Validate TC_77 Validate Merchant Is Able To Update Customer Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_77 Validate Merchant Is Able To Update Customer Information
[Documentation]    Validate TC_77 Validate Merchant Is Able To Update Customer Information using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${}
Update Customer Information    ${account_number}    ${updated_details}    ${}
Validate Customer Information Is Updated    ${account_number}    ${updated_details}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${}

Update Customer Information
[Arguments]    ${account_number}    ${updated_details}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${updated_details}    ${}

Validate Customer Information Is Updated
[Arguments]    ${account_number}    ${updated_details}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${updated_details}    ${}

","**Test Case: TC_77 Validate Merchant Is Able To Update Customer Information**

**Purpose:**

The purpose of this test case is to ensure that a merchant can successfully update a customer's information. This functionality is essential for maintaining accurate customer records and for providing personalized services. The test will confirm that the user interface allows for the easy modification of customer details and that these changes are correctly saved and reflected in subsequent queries. This validation helps ensure that customer data remains up-to-date and reliable, facilitating effective customer relationship management and operational efficiency."
Generate data-driven clientcentral_testcases for transaction history Testcases TC_05 Validate User Is Able To Filter Transaction History By Transaction Type,data-driven,TC_05 Validate User Is Able To Filter Transaction History By Transaction Type,"*** Settings ***
Documentation    Validate TC_05 Validate User Is Able To Filter Transaction History By Transaction Type
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate User Is Able To Filter Transaction History By Transaction Type
[Documentation]    Validate TC_05 Validate User Is Able To Filter Transaction History By Transaction Type using the following steps
Select Module    ${Transaction History}    ${nan}    ${}
Filter By Transaction Type    ${Payment}    ${nan}    ${}
Validate Filtered Transaction Type Is Displayed    ${Payment}    ${nan}    ${}
Filter By Transaction Type    ${Refund}    ${nan}    ${}
Validate Filtered Transaction Type Is Displayed    ${Refund}    ${nan}    ${}

*** Keywords ***
Select Module
[Arguments]    ${Transaction History}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Transaction History}    ${nan}    ${}

Filter By Transaction Type
[Arguments]    ${Payment}    ${nan}    ${}
[Arguments]    ${Refund}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Payment}    ${nan}    ${}
Log    ${Refund}    ${nan}    ${}

Validate Filtered Transaction Type Is Displayed
[Arguments]    ${Payment}    ${nan}    ${}
[Arguments]    ${Refund}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Payment}    ${nan}    ${}
Log    ${Refund}    ${nan}    ${}

","**Test Case: TC_05 Validate User Is Able To Filter Transaction History By Transaction Type**

**Purpose:**
The purpose of this test case is to verify that a user has the functionality to filter their transaction history based on different transaction types. This is essential for users to efficiently manage and review their financial activities by focusing on specific types of transactions, such as payments or refunds.

**Key Points:**
1. **Transaction Type Filter:** Ensure the user can select a specific transaction type (e.g., Payment, Refund) to filter the transaction history accordingly.
2. **Filtered Results Verification:** Validate that once a transaction type is selected, the system accurately displays only the transactions that match the chosen type, providing a clear and organized view of the user's financial activities."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_63 Validate Transaction Filter By Date Range,data-driven,TC_63 Validate Transaction Filter By Date Range,"*** Settings ***
Documentation    Validate TC_63 Validate Transaction Filter By Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_63 Validate Transaction Filter By Date Range
[Documentation]    Validate TC_63 Validate Transaction Filter By Date Range using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}
Navigate To Menu Tab    ${Transaction History}    ${nan}    ${}
Select Date Range    ${Start Date}    ${End Date}    ${}
Validate Transactions In Date Range    ${account_number}    ${Start Date}    ${End Date}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${}

Navigate To Menu Tab
[Arguments]    ${Transaction History}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Transaction History}    ${nan}    ${}

Select Date Range
[Arguments]    ${Start Date}    ${End Date}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Start Date}    ${End Date}    ${}

Validate Transactions In Date Range
[Arguments]    ${account_number}    ${Start Date}    ${End Date}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${Start Date}    ${End Date}

","The purpose of the test case 'TC_63 Validate Transaction Filter By Date Range' is to ensure that the application's function for filtering transactions by a specific date range operates correctly. This involves verifying that when a customer selects a start date and an end date from the date picker, the application accurately displays all transactions falling within the specified date range. The test case aims to confirm that the filter functionality is precise, promptly reflects changes in the date range, and presents all relevant transactions to the user, thereby enhancing user experience and ensuring efficient transaction tracking."
Create data-driven clientcentral_testcases for payments Testcases TC_25 Validate Merchant Is Able To Apply Discount on Invoice,data-driven,TC_25 Validate Merchant Is Able To Apply Discount on Invoice,"*** Settings ***
Documentation    Validate TC_25 Validate Merchant Is Able To Apply Discount on Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_25 Validate Merchant Is Able To Apply Discount on Invoice
[Documentation]    Validate TC_25 Validate Merchant Is Able To Apply Discount on Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Apply Discount To Invoice    ${invoice_number}    ${DISCOUNT_CODE}    ${nan}
Validate Discount Is Applied    ${invoice_number}    ${EXPECTED_DISCOUNT_AMOUNT}    ${nan}
Send Invoice To Customer    ${account_number}    ${invoice_number}    ${nan}
Confirm Customer Receives Invoice With Discount    ${account_number}    ${invoice_number}    ${EXPECTED_DISCOUNT_AMOUNT}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Apply Discount To Invoice
[Arguments]    ${invoice_number}    ${DISCOUNT_CODE}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${invoice_number}    ${DISCOUNT_CODE}    ${nan}

Validate Discount Is Applied
[Arguments]    ${invoice_number}    ${EXPECTED_DISCOUNT_AMOUNT}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${EXPECTED_DISCOUNT_AMOUNT}    ${nan}

Send Invoice To Customer
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Confirm Customer Receives Invoice With Discount
[Arguments]    ${account_number}    ${invoice_number}    ${EXPECTED_DISCOUNT_AMOUNT}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${EXPECTED_DISCOUNT_AMOUNT}
","**Test Case TC_25: Validate Merchant Is Able To Apply Discount on Invoice**

**Purpose:**
The objective of this test case is to verify that a merchant can successfully apply a discount to an invoice before sending it to the customer. This includes ensuring that the discount code is valid, correctly applied to the total amount, and that the customer receives the invoice with the applied discount. This functionality is significant as it allows merchants to provide promotional discounts and maintain accurate billing records.

**Key Steps:**"
Generate data-driven clientcentral_testcases for customers Testcases TC_50 Validate Customer Is Able To Update Billing Address,data-driven,TC_50 Validate Customer Is Able To Update Billing Address,"*** Settings ***
Documentation    Validate TC_50 Validate Customer Is Able To Update Billing Address
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_50 Validate Customer Is Able To Update Billing Address
[Documentation]    Validate TC_50 Validate Customer Is Able To Update Billing Address using the following steps
Send Request To Create Customer    ${DON_DRAPER}    ${nan}    ${nan}
Navigate To Customer Details Page    ${customer_id}    ${nan}    ${nan}
Select Tab In Customer Page    ${Billing Information}    ${nan}    ${nan}
Update Billing Address    ${123 New Street}    ${New York}    ${NY}    ${10001}
Save Billing Address    ${nan}    ${nan}    ${nan}
Validate Billing Address Updated    ${customer_id}    ${123 New Street}    ${New York}    ${NY}    ${10001}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DON_DRAPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DON_DRAPER}    ${nan}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${customer_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_id}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Billing Information}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Billing Information}    ${nan}    ${nan}

Update Billing Address
[Arguments]    ${123 New Street}    ${New York}    ${NY}    ${10001}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${123 New Street}    ${New York}    ${NY}    ${10001}

Save Billing Address
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Billing Address Updated
[Arguments]    ${customer_id}    ${123 New Street}    ${New York}    ${NY}    ${10001}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_id}    ${123 New Street}    ${New York}    ${NY}    ${10001}
","**Test Case Summary: TC_50 Validate Customer Is Able To Update Billing Address**

**Purpose**:
The objective of this test case is to ensure that a customer can successfully update their billing address within the system. Here are the detailed objectives and verification points for this test case:
"
Create data-driven clientcentral_testcases for invoices Testcases TC_20 Validate Merchant Can Export Invoice Details To PDF,data-driven,TC_20 Validate Merchant Can Export Invoice Details To PDF,"*** Settings ***
Documentation    Validate TC_20 Validate Merchant Can Export Invoice Details To PDF
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_20 Validate Merchant Can Export Invoice Details To PDF
[Documentation]    Validate TC_20 Validate Merchant Can Export Invoice Details To PDF using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Select Module    ${Invoices}    ${nan}    ${nan}
Filter Details In Invoices    ${account_number}    ${invoice_number}    ${nan}
Navigate To Details Page From Invoices    ${invoice_number}    ${nan}    ${nan}
Export Invoice Details As PDF    ${invoice_number}    ${nan}    ${nan}
Validate PDF Export    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Select Module
[Arguments]    ${Invoices}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Invoices}    ${nan}    ${nan}

Filter Details In Invoices
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Details Page From Invoices
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Export Invoice Details As PDF
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Validate PDF Export
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}
","The purpose of the test case **'TC_20 Validate Merchant Can Export Invoice Details To PDF'** is to ensure that merchants using a system or application can successfully export invoice details into a PDF format. This test case verifies the functionality of exporting detailed invoice information into a PDF file and ensures that the exported PDF contains accurate and complete details of the specified invoice.

**Key Points of the Test Case:**
1. **Initial State:** The merchant is on the Invoice Details Page of a selected invoice.
2. **Action:** The merchant selects the option to export the invoice details.
3. **Expected Outcome:** The system generates and downloads a PDF file containing the details of the invoice.
4. **Verification:** The test checks that the exported PDF file is accurate and complete, matching the information present on the Invoice Details Page."
Build data-driven merchantportal_testcases for subscription management Testcases TC_32 Validate Merchant Is Able To Cancel Subscription For A Non Integrated Customer,data-driven,TC_32 Validate Merchant Is Able To Cancel Subscription For A Non Integrated Customer,"*** Settings ***
Documentation    Validate TC_32 Validate Merchant Is Able To Cancel Subscription For A Non Integrated Customer
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_32 Validate Merchant Is Able To Cancel Subscription For A Non Integrated Customer
[Documentation]    Validate TC_32 Validate Merchant Is Able To Cancel Subscription For A Non Integrated Customer using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}
Launch Merchant Portal Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
Create Subscription    ${customer_details}    ${SUBSCRIPTION_TYPE}    ${monthly}
Validate Subscription Is Active    ${subscription_id}    ${nan}    ${}
Navigate To Subscription Management    ${subscription_id}    ${nan}    ${}
Cancel Subscription    ${subscription_id}    ${nan}    ${}
Validate Subscription Is Cancelled    ${subscription_id}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch Merchant Portal Application
[Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
[Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Create Subscription
[Arguments]    ${customer_details}    ${SUBSCRIPTION_TYPE}    ${monthly}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${SUBSCRIPTION_TYPE}    ${monthly}

Validate Subscription Is Active
[Arguments]    ${subscription_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${subscription_id}    ${nan}    ${}

Navigate To Subscription Management
[Arguments]    ${subscription_id}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${subscription_id}    ${nan}    ${}

Cancel Subscription
[Arguments]    ${subscription_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${subscription_id}    ${nan}    ${}

Validate Subscription Is Cancelled
[Arguments]    ${subscription_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${subscription_id}    ${nan}    ${}

","The test case 'TC_32 Validate Merchant Is Able To Cancel Subscription For A Non Integrated Customer' is intended to confirm that a merchant can effectively cancel a subscription for customers who are not integrated with external systems or services. This test ensures that the subscription management functionality allows for the proper handling of subscription cancellations, providing a smooth and user-friendly experience for merchants dealing with non-integrated customers. The process involves creating a subscription, validating its active status, navigating to the subscription management section, cancelling the subscription, and finally confirming that the subscription has been successfully cancelled."
Build data-driven paynow test cases for Omnicorp Testcases TC_12 Validate Customer Can Update Existing Payment Methods,data-driven,TC_12 Validate Customer Can Update Existing Payment Methods,"*** Settings ***
Documentation    Validate TC_12 Validate Customer Can Update Existing Payment Methods
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Customer Can Update Existing Payment Methods
[Documentation]    Validate TC_12 Validate Customer Can Update Existing Payment Methods using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${nan}    ${}
Send Request To Add Payment Method For Customer    ${account_number}    ${5555555555554444}    ${}
Navigate To Payment Methods    ${account_number}    ${nan}    ${}
Select Existing Payment Method To Update    ${5555555555554444}    ${nan}    ${}
Enter New Payment Information    ${4111111111111111}    ${12/24}    ${123}
Save Updated Payment Method    ${account_number}    ${4111111111111111}    ${}
Validate Updated Payment Method Is Displayed    ${4111111111111111}    ${12/24}    ${123}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${nan}    ${}

Send Request To Add Payment Method For Customer
[Arguments]    ${account_number}    ${5555555555554444}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${5555555555554444}    ${}

Navigate To Payment Methods
[Arguments]    ${account_number}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${}

Select Existing Payment Method To Update
[Arguments]    ${5555555555554444}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${5555555555554444}    ${nan}    ${}

Enter New Payment Information
[Arguments]    ${4111111111111111}    ${12/24}    ${123}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${4111111111111111}    ${12/24}    ${123}

Save Updated Payment Method
[Arguments]    ${account_number}    ${4111111111111111}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${4111111111111111}    ${}

Validate Updated Payment Method Is Displayed
[Arguments]    ${4111111111111111}    ${12/24}    ${123}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${4111111111111111}    ${12/24}    ${123}

","**Summary for Test Case 'TC_12: Validate Customer Can Update Existing Payment Methods'**

**Purpose:**
The primary objective of this test case is to ensure that customers have the capability to update their existing payment methods within their account. This functionality is crucial for maintaining current and accurate payment information, which facilitates seamless transactions and reduces the risk of payment failures.

**Goals:**
1. **Verification of Update Functionality:** Confirm that the system allows customers to select an existing payment method and update its details, including card number, expiration date, and CVV.
2. **Accuracy of Updated Data:** Ensure that the new payment information is correctly saved and displayed, reflecting the changes made by the customer.
3. **User Experience:** Validate that the update process is user-friendly, secure, and does not encounter any errors or complications."
Create data-driven clientcentral_testcases for refunds Testcases TC_20 Validate Merchant Is Able To Process Refund For A Transaction,data-driven,TC_20 Validate Merchant Is Able To Process Refund For A Transaction,"*** Settings ***
Documentation    Validate TC_20 Validate Merchant Is Able To Process Refund For A Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_20 Validate Merchant Is Able To Process Refund For A Transaction
[Documentation]    Validate TC_20 Validate Merchant Is Able To Process Refund For A Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Select Module    ${All Transactions}    ${nan}    ${nan}
Filter Details In Transactions    ${account_number}    ${invoice_number}    ${nan}
Navigate To Details Page From Transactions    ${transaction_id}    ${nan}    ${nan}
Select Tab In Transaction Details Page    ${Refund}    ${nan}    ${nan}
Process Refund    ${refund_amount}    ${refund_reason}    ${nan}
Validate Refund Receipt Is Generated    ${refund_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
[Arguments]    ${All Transactions}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${All Transactions}    ${nan}    ${nan}

Filter Details In Transactions
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Details Page From Transactions
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Select Tab In Transaction Details Page
[Arguments]    ${Refund}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Refund}    ${nan}    ${nan}

Process Refund
[Arguments]    ${refund_amount}    ${refund_reason}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${refund_amount}    ${refund_reason}    ${nan}

Validate Refund Receipt Is Generated
[Arguments]    ${refund_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${refund_id}    ${nan}    ${nan}

","The test case ""TC_20 Validate Merchant Is Able To Process Refund For A Transaction"" is designed to ensure that merchants can successfully process a refund for a given transaction through their system. This functionality is critical to customer service, providing merchants the ability to handle returns and refunds efficiently, ensuring customer satisfaction and maintaining accurate financial records.

### Purpose:

1. **Functionality Verification**:
- Ensure that the refund process works as intended and that merchants can initiate and complete a refund for a transaction.

2. **User Experience**:
- Confirm that the merchant can easily navigate through the system to process a refund, contributing to a seamless user experience.

3. **Accuracy and Compliance**:
- Validate that the refund amount and reason are correctly captured and"
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_67 Validate Merchant Can Successfully Refund A Processed Payment,data-driven,TC_67 Validate Merchant Can Successfully Refund A Processed Payment,"*** Settings ***
Documentation    Validate TC_67 Validate Merchant Can Successfully Refund A Processed Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_67 Validate Merchant Can Successfully Refund A Processed Payment
[Documentation]    Validate TC_67 Validate Merchant Can Successfully Refund A Processed Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
Process Payment Through Credit Card    ${account_number}    ${invoice_number}    ${payment_amount}
Initiate Refund For Processed Payment    ${account_number}    ${invoice_number}    ${refund_amount}
Validate Refund Is Reflected In Transaction History    ${invoice_number}    ${refund_amount}    ${boolean}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Process Payment Through Credit Card
[Arguments]    ${account_number}    ${invoice_number}    ${payment_amount}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${payment_amount}

Initiate Refund For Processed Payment
[Arguments]    ${account_number}    ${invoice_number}    ${refund_amount}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${refund_amount}

Validate Refund Is Reflected In Transaction History
[Arguments]    ${invoice_number}    ${refund_amount}    ${boolean}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${refund_amount}    ${boolean}

","The test case 'TC_67 Validate Merchant Can Successfully Refund A Processed Payment' aims to confirm that merchants can effectively process refunds within the payment system for transactions that have already been completed.

**Purpose:**

1. **Refund Functionality:**
- To verify that the refund process works as intended, allowing merchants to refund payments without errors.

2. **Transaction Accuracy:**
- To ensure that the refunded amount is accurately reflected in the transaction history, maintaining precise financial records.

3. **Merchant Usability:**
- To validate that the refund process is straightforward for merchants, promoting efficient management of their transactions.

This test case checks the system's responsiveness to refund requests and ensures that records are updated appropriately, contributing to reliable and transparent transaction management for merchants."
Build data-driven paynow_testcases for transaction Testcases TC_05 Validate Customer Is Unable To Create Duplicate Payment,data-driven,TC_05 Validate Customer Is Unable To Create Duplicate Payment,"*** Settings ***
Documentation    Validate TC_05 Validate Customer Is Unable To Create Duplicate Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Customer Is Unable To Create Duplicate Payment
[Documentation]    Validate TC_05 Validate Customer Is Unable To Create Duplicate Payment using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${}
Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${123.45}
Login To PayNOW And Make Payment    ${account_number}    ${invoice_number}    ${nan}
Attempt To Duplicate Payment    ${account_number}    ${invoice_number}    ${nan}
Validate Error Message Is Displayed For Duplicate Payment    ${This payment already exists}    ${}    ${}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${OMNICORP_MERCHANT}    ${3}    ${}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${123.45}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${OMNICORP_MERCHANT}    ${123.45}

Login To PayNOW And Make Payment
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Attempt To Duplicate Payment
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Validate Error Message Is Displayed For Duplicate Payment
[Arguments]    ${This payment already exists}    ${}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${This payment already exists}    ${}    ${}

","The test case ""TC_05 Validate Customer Is Unable To Create Duplicate Payment"" is designed to ensure that the payment processing system prevents the creation of duplicate payments by the customer.

### Purpose:
The primary aim is to verify that the system identifies and blocks any attempt to make an identical payment for an invoice that has already been paid. This functionality is crucial for avoiding multiple charges for the same invoice, which could lead to financial discrepancies and customer dissatisfaction.

### Key Objectives:"
Create data-driven clientcentral_testcases for inventory management Testcases TC_40 Validate Merchant Is Able To Add Update And Delete Inventory,data-driven,TC_40 Validate Merchant Is Able To Add Update And Delete Inventory,"*** Settings ***
Documentation    Validate TC_40 Validate Merchant Is Able To Add Update And Delete Inventory
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret
${ITEM_NAME}        Test Item
${ITEM_UPDATE}      Updated Item
${ITEM_QUANTITY}    10
${ITEM_UPDATE_QUANTITY} 5

*** Test Cases ***
TC_40 Validate Merchant Is Able To Add Update And Delete Inventory
[Documentation]    Validate TC_40 Validate Merchant Is Able To Add Update And Delete Inventory using the following steps
Send Request To Login As Merchant    ${VALID_USER}    ${VALID_PASSWORD}
Add Item To Inventory    ${ITEM_NAME}    ${ITEM_QUANTITY}    ${nan}
Update Item In Inventory    ${ITEM_NAME}    ${ITEM_UPDATE}    ${ITEM_UPDATE_QUANTITY}
Validate Inventory Update    ${ITEM_UPDATE}    ${ITEM_UPDATE_QUANTITY}    ${nan}
Delete Item From Inventory    ${ITEM_UPDATE}    ${nan}    ${nan}
Validate Item Deletion    ${ITEM_UPDATE}    ${nan}    ${nan}

*** Keywords ***
Send Request To Login As Merchant
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}

Add Item To Inventory
[Arguments]    ${ITEM_NAME}    ${ITEM_QUANTITY}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ITEM_NAME}    ${ITEM_QUANTITY}    ${nan}

Update Item In Inventory
[Arguments]    ${ITEM_NAME}    ${ITEM_UPDATE}    ${ITEM_UPDATE_QUANTITY}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ITEM_NAME}    ${ITEM_UPDATE}    ${ITEM_UPDATE_QUANTITY}

Validate Inventory Update
[Arguments]    ${ITEM_UPDATE}    ${ITEM_UPDATE_QUANTITY}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${ITEM_UPDATE}    ${ITEM_UPDATE_QUANTITY}    ${nan}

Delete Item From Inventory
[Arguments]    ${ITEM_UPDATE}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${ITEM_UPDATE}    ${nan}    ${nan}

Validate Item Deletion
[Arguments]    ${ITEM_UPDATE}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${ITEM_UPDATE}    ${nan}    ${nan}

","### Test Case: TC_40 Validate Merchant Is Able To Add Update And Delete Inventory

**Purpose:**

The test case 'TC_40 Validate Merchant Is Able To Add Update And Delete Inventory' aims to ensure that merchants can manage their inventory efficiently by adding, updating, and deleting items. Proper inventory management ensures that the merchant can track stock levels accurately and make necessary adjustments as needed.

**Key Points:**

1. **Add Inventory Item:** Confirm that a merchant can successfully add a new item to the inventory with the specified quantity. This step verifies that the system allows for the creation of new inventory records.

2. **Update Inventory Item:** Ensure the merchant can update the details of an existing inventory item, including changing the item name and the quantity. This step is crucial for maintaining current and accurate inventory data.

3. **Delete Inventory Item:** Validate that an item can be removed from the inventory, ensuring that obsolete or unavailable items no longer appear in the inventory list.

Successful execution of this test case confirms that the merchant has full control over inventory management operations, enhancing efficiency and accuracy in inventory tracking."
Create data-driven clientcentral_testcases for orders Testcases TC_18 Validate Merchant Is Able To Cancel An Order Successfully,data-driven,TC_18 Validate Merchant Is Able To Cancel An Order Successfully,"*** Settings ***
Documentation    Validate TC_18 Validate Merchant Is Able To Cancel An Order Successfully
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_18 Validate Merchant Is Able To Cancel An Order Successfully
[Documentation]    Validate TC_18 Validate Merchant Is Able To Cancel An Order Successfully using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Create New Order For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Fetch Order Details    ${response}    ${order_id}    ${nan}
Send Request To Cancel Order    ${order_id}    ${nan}    ${nan}
Navigate To Orders Page    ${account_number}    ${nan}    ${nan}
Validate Order Is Cancelled    ${order_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create New Order For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Fetch Order Details
[Arguments]    ${response}    ${order_id}    ${nan}
[Return]    ${object}
[Documentation]    Keyword description
Log    ${response}    ${order_id}    ${nan}

Send Request To Cancel Order
[Arguments]    ${order_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_id}    ${nan}    ${nan}

Navigate To Orders Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Validate Order Is Cancelled
[Arguments]    ${order_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_id}    ${nan}    ${nan}

","**Test Case Summary: TC_18 Validate Merchant Is Able To Cancel An Order Successfully**

**Purpose:**

The primary aim of this test case is to ensure that merchants can successfully cancel an existing order. This feature is essential for maintaining order management flexibility and enhancing customer service by accommodating order modifications and cancellations. This test verifies the following key aspects:

1. **Order Creation:** Ensures the initial creation of an order is successful.
2. **Order Fetching:** Confirms that order details can be retrieved accurately post-creation.
3. **Order Cancellation Process:** Validates that the cancellation request processes correctly and cancels the order.
4. **Order Status Verification:** Ensures the system reflects the cancelled status accurately and promptly in the merchant interface."
Generate data-driven clientcentral_testcases for dashboard Testcases TC_10 Validate User Login With Invalid Credentials,data-driven,TC_10 Validate User Login With Invalid Credentials,"*** Settings ***
Documentation    Validate TC_10 Validate User Login With Invalid Credentials
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   wrongpassword

*** Test Cases ***
TC_10 Validate User Login With Invalid Credentials
[Documentation]    Validate TC_10 Validate User Login With Invalid Credentials using the following steps
Launch ClientCentral Application    ${nan}    ${nan}    ${nan}
Attempt Login With Invalid Credentials    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Capture Error Message Displayed    ${nan}    ${nan}    ${nan}
Validate Error Message    ${Invalid username or password}    ${nan}    ${nan}

*** Keywords ***
Launch ClientCentral Application
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    Launching ClientCentral Application

Attempt Login With Invalid Credentials
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description","The test case 'TC_10 Validate User Login With Invalid Credentials' aims to ensure that the ClientCentral application properly handles login attempts with invalid credentials. The purpose is to verify that when a user inputs incorrect username or password, the system correctly displays an error message indicating that the credentials are invalid. This is crucial for security functionality, ensuring that users are properly informed of failed login attempts and cannot gain unauthorized access with incorrect information.

Key points include:
- Ensuring that the error message is displayed when invalid credentials are entered.
- Confirming that the error message is accurate and user-friendly.
- Verifying that the system does not allow login with invalid credentials, maintaining the security and integrity of the application."
Generate data-driven clientcentral_testcases for dashboard Testcases TC_15 Validate Merchant Is Able To Update Profile Information,data-driven,TC_15 Validate Merchant Is Able To Update Profile Information,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Is Able To Update Profile Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Is Able To Update Profile Information
[Documentation]    Validate TC_15 Validate Merchant Is Able To Update Profile Information using the following steps
Login To The System    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Navigate To Profile Section    ${}    ${}    ${}
Update Profile Details    ${new_email@example.com}    ${new_phone}    ${new_address}
Save Updated Profile    ${}    ${}    ${}
Validate Profile Information Is Updated    ${new_email@example.com}    ${new_phone}    ${new_address}

*** Keywords ***
Login To The System
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${string}
[Documentation]    This keyword performs the login action.
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Navigate To Profile Section
[Arguments]    ${}    ${}    ${}
[Return]    ${string}
[Documentation]    This keyword navigates to the profile section of the merchant system.
Log    ${}    ${}    ${}

Update Profile Details
[Arguments]    ${new_email@example.com}    ${new_phone}    ${new_address}
[Return]    ${string}
[Documentation]    This keyword updates the profile details.
Log    ${new_email@example.com}    ${new_phone}    ${new_address}

Save Updated Profile
[Arguments]    ${}    ${}    ${}
[Return]    ${string}
[Documentation]    This keyword saves the updated profile details.
Log    ${}    ${}    ${}

Validate Profile Information Is Updated
[Arguments]    ${new_email@example.com}    ${new_phone}    ${new_address}
[Return]    ${boolean}
[Documentation]    This keyword validates that the profile information is correctly updated.
Log    ${new_email@example.com}    ${new_phone}    ${new_address}

","The test case 'TC_15 Validate Merchant Is Able To Update Profile Information' primarily aims to verify that a merchant can successfully update their profile information within the system. The objectives of this test case are as follows:
"
Create data-driven uar test cases for PayNOW Datadriver Testcases Ramashanker FTC_78 Validate Payment Type Selection,data-driven,FTC_78 Validate Payment Type Selection,"*** Settings ***
Documentation    Validate FTC_78 Validate Payment Type Selection
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
FTC_78 Validate Payment Type Selection
[Documentation]    Validate FTC_78 Validate Payment Type Selection using the following steps
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
Navigate To Payment Page    ${nan}    ${nan}    ${}
Validate Available Payment Types Are Displayed    ${nan}    ${nan}    ${}
Select Payment Type    ${Payment_Type}    ${nan}    ${}
Validate Selected Payment Type    ${Payment_Type}    ${nan}    ${}
Confirm Payment Proceeded With Selected Payment Type    ${Payment_Type}    ${nan}    ${}
Validate Payment Receipts Are Generated Correctly    ${Payment_Type}    ${nan}    ${}

*** Keywords ***
Launch PayNow Application
[Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
[Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Navigate To Payment Page
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate Available Payment Types Are Displayed
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Select Payment Type
[Arguments]    ${Payment_Type}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Payment_Type}    ${nan}    ${}

Validate Selected Payment Type
[Arguments]    ${Payment_Type}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Payment_Type}    ${nan}    ${}

Confirm Payment Proceeded With Selected Payment Type
[Arguments]    ${Payment_Type}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Payment_Type}    ${nan}    ${}

Validate Payment Receipts Are Generated Correctly
[Arguments]    ${Payment_Type}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Payment_Type}    ${nan}    ${}

","The test case 'FTC_78 Validate Payment Type Selection' aims to ensure that the payment type selection functionality within the PayNow application operates correctly. This involves verifying that users can view and choose from available payment types and that the selected payment type is properly processed and recorded by the system.

Key objectives include:
1. Ensuring that all available payment types are correctly displayed to the user.
2. Verifying that the user can select a desired payment type and that this selection is accurately captured by the system.
3. Confirming that the payment process proceeds with the chosen payment type and that all subsequent transactions reflect this choice.
4. Validating that payment receipts are generated correctly and correspond to the selected payment type.

By testing these components, the test case aims to confirm that users can seamlessly interact with the payment type selection feature, thereby ensuring accurate and user-friendly transaction processing within the system."
Generate data-driven Test Outcome Search test cases for Account Management Testcases TC_35 Validate Customer Search Functionality By Account Number,data-driven,TC_35 Validate Customer Search Functionality By Account Number,"*** Settings ***
Documentation    Validate TC_35 Validate Customer Search Functionality By Account Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_35 Validate Customer Search Functionality By Account Number
[Documentation]    Validate TC_35 Validate Customer Search Functionality By Account Number using the following steps
Send Request To Create Customer    ${GLOBAL_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${GLOBAL_MERCHANT}    ${account_number}    ${nan}
Launch Search Application    ${GLOBAL_MERCHANT}    ${nan}    ${nan}
Enter Account Number In Search Bar    ${account_number}    ${nan}    ${nan}
Execute Search    ${nan}    ${nan}    ${nan}
Validate Search Results Displayed    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${GLOBAL_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBAL_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${GLOBAL_MERCHANT}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBAL_MERCHANT}    ${account_number}    ${nan}

Launch Search Application
[Arguments]    ${GLOBAL_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${GLOBAL_MERCHANT}    ${nan}    ${nan}

Enter Account Number In Search Bar
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Execute Search
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Search Results Displayed
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}
","**Summary of Test Case TC_35: Validate Customer Search Functionality By Account Number**

**Purpose:**
This test case aims to ensure that customers can successfully use the search functionality by entering their account number and retrieving relevant results. The primary goal is to confirm that search interactions are functioning correctly, and valid customer data is being displayed accordingly.

**Key Objectives:**

1. **Search Execution Verification:** Ensure that the search feature accepts customer account numbers and returns accurate results.
2. **Result Validation:** Verify that the relevant customer information associated with the account number is displayed correctly in the search results."
Generate data-driven paynow test cases for RefundRequest Testcases TC_45 Validate Customer Is Able To Request Refund For Specific Transaction,data-driven,TC_45 Validate Customer Is Able To Request Refund For Specific Transaction,"*** Settings ***
Documentation    Validate TC_45 Validate Customer Is Able To Request Refund For Specific Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Customer Is Able To Request Refund For Specific Transaction
[Documentation]    Validate TC_45 Validate Customer Is Able To Request Refund For Specific Transaction using the following steps
Send Request To Create Customer    ${DUNDER_MIFFLIN_INC}    ${7}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${DUNDER_MIFFLIN_INC}    ${7}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${DUNDER_MIFFLIN_INC}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Enter Customer Details    ${customer_details}    ${DUNDER_MIFFLIN_INC}    ${nan}
Select Payment Method    ${Credit Card}    ${nan}    ${nan}
Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
Process Payment    ${account_number}    ${invoice_number}    ${nan}
Navigate To Transaction Details Page    ${transaction_id}    ${nan}    ${nan}
Initiate Refund Request    ${transaction_id}    ${refund_amount}    ${nan}
Validate Refund Request Status    ${transaction_id}    ${refund_status}    ${Approved}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${DUNDER_MIFFLIN_INC}    ${7}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN_INC}    ${7}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${DUNDER_MIFFLIN_INC}    ${7}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${DUNDER_MIFFLIN_INC}    ${7}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${DUNDER_MIFFLIN_INC}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${DUNDER_MIFFLIN_INC}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${DUNDER_MIFFLIN_INC}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${DUNDER_MIFFLIN_INC}    ${nan}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
[Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Process Payment
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Transaction Details Page
[Arguments]    ${transaction_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${transaction_id}    ${nan}    ${nan}

Initiate Refund Request
[Arguments]    ${transaction_id}    ${refund_amount}    ${nan}
[",
Create data-driven clientcentral_testcases for login scenarios Testcases TC_09 Validate Merchant Is Able To Log In With Valid Credentials,data-driven,TC_09 Validate Merchant Is Able To Log In With Valid Credentials,"*** Settings ***
Documentation    Validate TC_09 Validate Merchant Is Able To Log In With Valid Credentials
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_09 Validate Merchant Is Able To Log In With Valid Credentials
[Documentation]    Validate TC_09 Validate Merchant Is Able To Log In With Valid Credentials using the following steps
Navigate To LoginPage    ${nan}    ${nan}    ${nan}
Enter Username    ${VALID_USER}    ${nan}    ${nan}
Enter Password    ${VALID_PASSWORD}    ${nan}    ${nan}
Click Login Button    ${nan}    ${nan}    ${nan}
Validate Merchant Dashboard Is Loaded    ${nan}    ${nan}    ${nan}

*** Keywords ***
Navigate To LoginPage
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Navigate to the login page.
Log    Navigated to login page successfully.    ${nan}    ${nan}

Enter Username
[Arguments]    ${VALID_USER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Enter the username into the login form.","The test case ""TC_09 Validate Merchant Is Able To Log In With Valid Credentials"" aims to verify that a merchant can successfully log in to a system or application using valid credentials. The purpose of this test is to ensure that the login functionality works as expected, allowing authorized users to gain access to the merchant dashboard. This involves navigating to the login page, entering the correct username and password, and verifying that the login attempt results in the merchant dashboard being displayed. The successful execution of this test case confirms the reliability and usability of the login feature with valid credentials."
Create data-driven clientcentral_testcases for payment Testcases TC_24 Validate Payment Notification Is Sent To Customer After Successful Payment,data-driven,TC_24 Validate Payment Notification Is Sent To Customer After Successful Payment,"*** Settings ***
Documentation    Validate TC_24 Validate Payment Notification Is Sent To Customer After Successful Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_24 Validate Payment Notification Is Sent To Customer After Successful Payment
[Documentation]    Validate TC_24 Validate Payment Notification Is Sent To Customer After Successful Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Process Payment Using ACH/E_check    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Validate Payment Confirmation Message    ${account_number}    ${invoice_number}    ${nan}
Check Email For Payment Notification    ${CUSTOMER_EMAIL}    ${nan}    ${nan}
Validate Notification Email Details    ${TEST-QA Payment Confirmation from Sterling Cooper}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Process Payment Using ACH/E_check
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Validate Payment Confirmation Message
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Check Email For Payment Notification
[Arguments]    ${CUSTOMER_EMAIL}    ${nan}    ${nan}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${CUSTOMER_EMAIL}    ${nan}    ${nan}

Validate Notification Email Details
[Arguments]    ${TEST-QA Payment Confirmation from Sterling Cooper}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${TEST-QA Payment Confirmation from Sterling Cooper}    ${nan}    ${nan}
","The test case 'TC_24 Validate Payment Notification Is Sent To Customer After Successful Payment' serves to confirm that customers receive timely notifications regarding their payments. The key objectives of this test case are:

1. Ensure that the system is capable of sending an email notification to the customer after a payment is successfully processed.
2. Verify that the notification email contains accurate details about the payment transaction.
3. Check the system's reliability in notifying customers promptly, enhancing transparency and communication.

This validation helps maintain user trust by providing immediate confirmations of payment transactions, crucial for customer satisfaction and operational transparency."
Create data-driven clientcentral_testcases for customers Testcases TC_22 Validate Merchant Is Able To Update Customer Details Successfully,data-driven,TC_22 Validate Merchant Is Able To Update Customer Details Successfully,"*** Settings ***
Documentation    Validate TC_22 Validate Merchant Is Able To Update Customer Details Successfully
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Merchant Is Able To Update Customer Details Successfully
[Documentation]    Validate TC_22 Validate Merchant Is Able To Update Customer Details Successfully using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Update Customer Details    ${account_number}    ${updated_customer_details}    ${nan}
Confirm Update Operation    ${account_number}    ${nan}    ${nan}
Validate Updated Customer Details    ${account_number}    ${updated_customer_details}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Update Customer Details
[Arguments]    ${account_number}    ${updated_customer_details}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${updated_customer_details}    ${nan}

Confirm Update Operation
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Validate Updated Customer Details
[Arguments]    ${account_number}    ${updated_customer_details}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${updated_customer_details}    ${nan}

","The test case 'TC_22 Validate Merchant Is Able To Update Customer Details Successfully' is structured to verify the functionality of updating customer details within the system. The test ensures that:
"
Generate data-driven clientcentral_testcases for reports Testcases TC_22 Validate Report Generation For Invoice Summary,data-driven,TC_22 Validate Report Generation For Invoice Summary,"*** Settings ***
Documentation    Validate TC_22 Validate Report Generation For Invoice Summary
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Report Generation For Invoice Summary
[Documentation]    Validate TC_22 Validate Report Generation For Invoice Summary using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Create Multiple Invoices Through API    ${STERLING_COOPER}    ${account_number}    ${nan}
Navigate To Reports Module    ${Reports}    ${nan}    ${nan}
Select Report Type    ${Invoice Summary}    ${nan}    ${nan}
Apply Date Filter    ${start_date}    ${end_date}    ${nan}
Generate Report    ${nan}    ${nan}    ${nan}
Validate Report Is Generated And Displayed    ${Invoice Summary}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create Multiple Invoices Through API
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    @{list}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Navigate To Reports Module
[Arguments]    ${Reports}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Reports}    ${nan}    ${nan}

Select Report Type
[Arguments]    ${Invoice Summary}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Invoice Summary}    ${nan}    ${nan}

Apply Date Filter
[Arguments]    ${start_date}    ${end_date}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${start_date}    ${end_date}    ${nan}

Generate Report
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Report Is Generated And Displayed
[Arguments]    ${Invoice Summary}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Invoice Summary}    ${nan}    ${nan}

","The test case 'TC_22 Validate Report Generation For Invoice Summary' is intended to verify that merchants can efficiently generate an invoice summary report within the system.

### Purpose:"
Build data-driven clientcentral_testcases for customers Testcases TC_72 Validate Merchant Is Able To Process Refund For A Successful Payment,data-driven,TC_72 Validate Merchant Is Able To Process Refund For A Successful Payment,"*** Settings ***
Documentation    Validate TC_72 Validate Merchant Is Able To Process Refund For A Successful Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_72 Validate Merchant Is Able To Process Refund For A Successful Payment
[Documentation]    Validate TC_72 Validate Merchant Is Able To Process Refund For A Successful Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment Through Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Transactions}    ${nan}    ${nan}
Select Transaction From Grid    ${invoice_number}    ${nan}    ${nan}
Click Refund Button    ${nan}    ${nan}    ${nan}
Enter Refund Amount    ${10}    ${nan}    ${nan}
Confirm Refund    ${nan}    ${nan}    ${nan}
Validate Refund Status    ${invoice_number}    ${Refunded}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Transactions}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Transactions}    ${nan}    ${nan}

Select Transaction From Grid
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Click Refund Button
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Enter Refund Amount
[Arguments]    ${10}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${10}    ${nan}    ${nan}

Confirm Refund
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Refund Status
[Arguments]    ${invoice_number}    ${Refunded}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${invoice_number}    ${Refunded}    ${nan}
","The test case ""TC_72 Validate Merchant Is Able To Process Refund For A Successful Payment"" ensures that merchants can initiate and process refunds for previously completed transactions. This test case is critical for verifying the functionality and reliability of the refund process within the system, which is essential for customer satisfaction and financial accuracy.

### Purpose:"
Generate data-driven clientcentral_testcases for customer search functionality Testcases TC_45 Validate Merchant Is Able To Search Customer By Email,data-driven,TC_45 Validate Merchant Is Able To Search Customer By Email,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To Search Customer By Email
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To Search Customer By Email
[Documentation]    Validate TC_45 Validate Merchant Is Able To Search Customer By Email using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${email}    ${nan}
Send Request To Assign Email To Customer    ${STERLING_COOPER}    ${account_number}    ${email_address}
Navigate To Customer Search Page    ${nan}    ${nan}    ${nan}
Enter Email In Search Field And Submit    ${email_address}    ${nan}    ${nan}
Validate Customer Details Displayed    ${STERLING_COOPER}    ${account_number}    ${email_address}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${email}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${email}    ${nan}

Send Request To Assign Email To Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${email_address}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${email_address}

Navigate To Customer Search Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Enter Email In Search Field And Submit
[Arguments]    ${email_address}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${email_address}    ${nan}    ${nan}

Validate Customer Details Displayed
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${email_address}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${email_address}

","### Summary of Test Case 'TC_45: Validate Merchant Is Able To Search Customer By Email'

#### Purpose:

The test case aims to verify that a merchant using the system can efficiently search for a customer using their email address.

#### Key Objectives:
1. **Customer Creation:** Ensure that a customer can be created with a valid email address.
2. **Email Assignment:** Confirm that the email address is accurately assigned to the customer's record.
3. **Search Functionality:** Validate that entering the customer’s email into the search field on the Customer Search Page retrieves the correct customer details.
4. **Result Accuracy:** Ensure that the correct customer details are displayed based on the searched email address."
Create data-driven paynow test cases for non integrated Testcases TC_10 Validate Error Message Is Displayed For Invalid Credit Card Number,data-driven,TC_10 Validate Error Message Is Displayed For Invalid Credit Card Number,"*** Settings ***
Documentation    Validate TC_10 Validate Error Message Is Displayed For Invalid Credit Card Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Error Message Is Displayed For Invalid Credit Card Number
[Documentation]    Validate TC_10 Validate Error Message Is Displayed For Invalid Credit Card Number using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
Select Payment Type    ${Lump Sum}    ${nan}    ${}
Enter Lumpsum Amount    ${1}    ${nan}    ${}
Select Payment Method    ${Credit Card}    ${nan}    ${}
Enter Credit Card Details    ${4111111111111111}    ${nan}    ${}
Validate Errors After Clicking On Process Invoice    ${Invalid Credit Card Number}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch PayNow Application
[Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
[Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
[Arguments]    ${Lump Sum}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
[Arguments]    ${1}    ${nan}    ${}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${1}    ${nan}    ${}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${}

Enter Credit Card Details
[Arguments]    ${4111111111111111}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${4111111111111111}    ${nan}    ${}

Validate Errors After Clicking On Process Invoice
[Arguments]    ${Invalid Credit Card Number}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${Invalid Credit Card Number}    ${nan}    ${}

","**Test Case: TC_10 Validate Error Message Is Displayed For Invalid Credit Card Number**

**Purpose:**
The main objective of this test case is to ensure that the payment system properly displays an error message when a user enters an invalid credit card number during the payment process. This helps in validating the system's capability to detect and prevent fraudulent or incorrect card details, ensuring secure and accurate transactions.

**Key Points:**"
Create data-driven clientcentral_testcases for transactions Testcases TC_22 Validate Merchant Is Able To Issue a Refund,data-driven,TC_22 Validate Merchant Is Able To Issue a Refund,"*** Settings ***
Documentation    Validate TC_22 Validate Merchant Is Able To Issue a Refund
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Merchant Is Able To Issue a Refund
[Documentation]    Validate TC_22 Validate Merchant Is Able To Issue a Refund using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}
Send Request To Process Payment Through Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
Get Gatewayid    ${response}    ${nan}    ${nan}
Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}
Select Tab In Customer Page    ${Transactions}    ${nan}    ${nan}
Select Transaction For Refund    ${invoice_number}    ${nan}    ${nan}
Enter Refund Amount    ${10}    ${nan}    ${nan}
Process Refund    ${nan}    ${nan}    ${nan}
Validate Refund Is Processed Successfully    ${account_number}    ${invoice_number}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through Credit Card
[Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
[Arguments]    ${response}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${response}    ${nan}    ${nan}

Navigate To Customer Details Page
[Arguments]    ${account_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
[Arguments]    ${Transactions}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Transactions}    ${nan}    ${nan}

Select Transaction For Refund
[Arguments]    ${invoice_number}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${invoice_number}    ${nan}    ${nan}

Enter Refund Amount
[Arguments]    ${10}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${10}    ${nan}    ${nan}

Process Refund
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Refund Is Processed Successfully
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

","The test case ""TC_22 Validate Merchant Is Able To Issue a Refund"" is designed to ensure that merchants using the payment processing system can successfully issue refunds for completed transactions. This functionality is critical for customer satisfaction and ensuring that businesses can handle returns and refunds efficiently.

The purpose of this test case is to verify that the refund process works smoothly and accurately from the merchant's dashboard or transaction details page. This ensures that the payment amount is correctly refunded to the customer's account and properly recorded within the system.

Key aspects to validate include:
1"
Create data-driven clientcentral_testcases for user authentication Testcases TC_07 Validate User Is Able To Reset Forgotten Password,data-driven,TC_07 Validate User Is Able To Reset Forgotten Password,"*** Settings ***
Documentation    Validate TC_07 Validate User Is Able To Reset Forgotten Password
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_EMAIL}      testuser@example.com

*** Test Cases ***
TC_07 Validate User Is Able To Reset Forgotten Password
[Documentation]    Validate TC_07 Validate User Is Able To Reset Forgotten Password using the following steps
Navigate To Login Page    ${nan}    ${nan}    ${nan}
Click Forgot Password Link    ${nan}    ${nan}    ${nan}
Enter Registered Email Address    ${VALID_EMAIL}    ${nan}    ${nan}
Submit Forgot Password Request    ${nan}    ${nan}    ${nan}
Retrieve Password Reset Email    ${VALID_EMAIL}    ${nan}    ${nan}
Open Password Reset Link    ${reset_link}    ${nan}    ${nan}
Enter New Password    ${new_password}    ${nan}    ${nan}
Confirm New Password    ${new_password}    ${nan}    ${nan}
Submit New Password    ${nan}    ${nan}    ${nan}
Validate Password Reset Successfully    ${VALID_USER}    ${new_password}    ${nan}

*** Keywords ***
Navigate To Login Page
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    Navigating to login page    ${nan}    ${nan}

Click Forgot Password Link
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    Clicking forgot password link    ${nan}    ${nan}

Enter Registered Email Address
[Arguments]    ${VALID_EMAIL}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    Entering registered email address    ${VALID_EMAIL}    ${nan}

Submit Forgot Password Request
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    Submitting forgot password request    ${nan}    ${nan}

Retrieve Password Reset Email
[Arguments]    ${VALID_EMAIL}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    Retrieving password reset email    ${VALID_EMAIL}    ${nan}

Open Password Reset Link
[Arguments]    ${reset_link}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    Opening password reset link    ${reset_link}    ${nan}

Enter New Password
[Arguments]    ${new_password}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    Entering new password    ${new_password}    ${nan}

Confirm New Password
[Arguments]    ${new_password}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    Confirming new password    ${new_password}    ${nan}

Submit New Password
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    Submitting new password    ${nan}    ${nan}

Validate Password Reset Successfully
[Arguments]    ${VALID_USER}    ${new_password}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    Validating password reset successfully    ${VALID_USER}    ${new_password}    ${nan}

","**Test Case 'TC_07 Validate User Is Able To Reset Forgotten Password':**

**Purpose:**
The primary objective of this test case is to ensure that users can successfully reset their forgotten passwords through the application's recovery process. This feature is essential for maintaining account security and accessibility.

**Details:**
1. **Scope:** This test case includes the entire password reset process from the login page, through email verification, to setting a new password.
2. **Preconditions:** The user must have a registered email address that is active and accessible.
3. **Steps:**
- Navigate to the login page and click on the 'Forgot Password' link.
- Enter the registered email address and submit the"
Create data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker TC_22 Validate Credit Card Expiry Date During Payment Process,data-driven,TC_22 Validate Credit Card Expiry Date During Payment Process,"*** Settings ***
Documentation    Validate TC_22 Validate Credit Card Expiry Date During Payment Process
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Credit Card Expiry Date During Payment Process
[Documentation]    Validate TC_22 Validate Credit Card Expiry Date During Payment Process using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}
Launch PayNow Application    ${INTEGRATED_MERCHANT}    ${nan}    ${}
Enter Customer Details    ${customer_details}    ${INTEGRATED_MERCHANT}    ${}
Select Payment Type    ${Credit Card}    ${nan}    ${}
Enter Credit Card Details    ${INVALID_EXPIRY_DATE_CARD}    ${nan}    ${}
Validate Error Message For Expired Card    ${customer_details.ExpiryErrorMessage}    ${nan}    ${}
Enter Credit Card Details    ${VALID_EXPIRY_DATE_CARD}    ${nan}    ${}
Process Invoice Payment    ${nan}    ${nan}    ${}
Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Launch PayNow Application
[Arguments]    ${INTEGRATED_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
[Arguments]    ${customer_details}    ${INTEGRATED_MERCHANT}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${INTEGRATED_MERCHANT}    ${}

Select Payment Type
[Arguments]    ${Credit Card}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${}

Enter Credit Card Details
[Arguments]    ${INVALID_EXPIRY_DATE_CARD}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${INVALID_EXPIRY_DATE_CARD}    ${nan}    ${}

Validate Error Message For Expired Card
[Arguments]    ${customer_details.ExpiryErrorMessage}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_details.ExpiryErrorMessage}    ${nan}    ${}

Enter Credit Card Details
[Arguments]    ${VALID_EXPIRY_DATE_CARD}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_EXPIRY_DATE_CARD}    ${nan}    ${}

Process Invoice Payment
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

Validate Payment Receipt Is Generated
[Arguments]    ${nan}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${}

","The test case 'TC_22 Validate Credit Card Expiry Date During Payment Process' is designed to ensure that the payment processing system correctly validates the expiry date of credit cards.

### Purpose:"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_52 Validate Customer Is Able To Update Email Address In Profile Settings,data-driven,TC_52 Validate Customer Is Able To Update Email Address In Profile Settings,"*** Settings ***
Documentation    Validate TC_52 Validate Customer Is Able To Update Email Address In Profile Settings
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_52 Validate Customer Is Able To Update Email Address In Profile Settings
[Documentation]    Validate TC_52 Validate Customer Is Able To Update Email Address In Profile Settings using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Login With Valid Credentials    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To Profile Settings    ${nan}    ${nan}    ${nan}
Update Email Address    ${new_email_address}    ${nan}    ${nan}
Save Profile Settings    ${nan}    ${nan}    ${nan}
Validate Email Address Updated    ${new_email_address}    ${VALID_USER}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Login With Valid Credentials
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Navigate To Profile Settings
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Update Email Address
[Arguments]    ${new_email_address}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_email_address}    ${nan}    ${nan}

Save Profile Settings
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Email Address Updated
[Arguments]    ${new_email_address}    ${VALID_USER}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_email_address}    ${VALID_USER}    ${nan}

","The purpose of the test case 'TC_52 Validate Customer Is Able To Update Email Address In Profile Settings' is to verify that customers can successfully change their email address within the profile settings section of the application. This includes ensuring that the new email address is saved correctly and the system reflects the updated information accurately. Key goals of this test case include:
"
Generate data-driven clientcentral_testcases for users Testcases TC_23 Validate User Can Update Account Settings,data-driven,TC_23 Validate User Can Update Account Settings,"*** Settings ***
Documentation    Validate TC_23 Validate User Can Update Account Settings
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_23 Validate User Can Update Account Settings
[Documentation]    Validate TC_23 Validate User Can Update Account Settings using the following steps
Login User Account    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
Navigate To Account Settings    ${nan}    ${nan}    ${nan}
Update Email Address    ${new_email@example.com}    ${nan}    ${nan}
Update Phone Number    ${1234567890}    ${nan}    ${nan}
Save Account Settings    ${nan}    ${nan}    ${nan}
Validate Account Settings Updated    ${new_email@example.com}    ${1234567890}    ${nan}

*** Keywords ***
Login User Account
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${nan}

Navigate To Account Settings
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Update Email Address
[Arguments]    ${new_email@example.com}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${new_email@example.com}    ${nan}    ${nan}

Update Phone Number
[Arguments]    ${1234567890}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${1234567890}    ${nan}    ${nan}

Save Account Settings
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Account Settings Updated
[Arguments]    ${new_email@example.com}    ${1234567890}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${new_email@example.com}    ${1234567890}    ${nan}

","The test case 'TC_23 Validate User Can Update Account Settings' is aimed at ensuring that a user can successfully update their account settings within the system. This includes making changes to the email address and phone number associated with their account. The purpose is to confirm that the user interface and backend processes for updating account details function properly, reflecting changes accurately and maintaining data integrity. Successfully verifying this functionality is crucial for user satisfaction and security, as it involves sensitive personal information."
Validate data-driven subscription_testcases for recurring payments Testcases TC_08 Validate Merchant Can Update Recurring Payment Details,data-driven,TC_08 Validate Merchant Can Update Recurring Payment Details,"*** Settings ***
Documentation    Validate TC_08 Validate Merchant Can Update Recurring Payment Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_08 Validate Merchant Can Update Recurring Payment Details
[Documentation]    Validate TC_08 Validate Merchant Can Update Recurring Payment Details using the following steps
Send Request To Create Customer    ${recurring_corp}    ${nan}    ${nan}
Send Request To Create Subscription For Customer    ${account_number}    ${recurring_corp}    ${nan}
Login To Subscription Portal    ${account_number}    ${subscription_id}    ${nan}
Navigate To Recurring Payment Details    ${subscription_id}    ${nan}    ${nan}
Update Payment Amount For Subscription    ${subscription_id}    ${50.00}    ${nan}
Save Updated Recurring Payment Details    ${subscription_id}    ${nan}    ${nan}
Validate Updated Payment Details Are Saved    ${subscription_id}    ${50.00}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${recurring_corp}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${recurring_corp}    ${nan}    ${nan}

Send Request To Create Subscription For Customer
[Arguments]    ${account_number}    ${recurring_corp}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${recurring_corp}    ${nan}

Login To Subscription Portal
[Arguments]    ${account_number}    ${subscription_id}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${subscription_id}    ${nan}

Navigate To Recurring Payment Details
[Arguments]    ${subscription_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${subscription_id}    ${nan}    ${nan}

Update Payment Amount For Subscription
[Arguments]    ${subscription_id}    ${50.00}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${subscription_id}    ${50.00}    ${nan}

Save Updated Recurring Payment Details
[Arguments]    ${subscription_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${subscription_id}    ${nan}    ${nan}

Validate Updated Payment Details Are Saved
[Arguments]    ${subscription_id}    ${50.00}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${subscription_id}    ${50.00}    ${nan}

","**Test Case: TC_08 - Validate Merchant Can Update Recurring Payment Details**

**Purpose:**

This test case (TC_08) aims to ensure that a merchant can effectively and accurately update the recurring payment details within a subscription service platform. The crucial aspects of this test case include:
"
Generate data-driven paynow test cases for non integrated Testcases TC_05 Validate Payment Confirmation Email Is Sent To Non Integrated Customer,data-driven,TC_05 Validate Payment Confirmation Email Is Sent To Non Integrated Customer,"*** Settings ***
Documentation    Validate TC_05 Validate Payment Confirmation Email Is Sent To Non Integrated Customer
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Payment Confirmation Email Is Sent To Non Integrated Customer
[Documentation]    Validate TC_05 Validate Payment Confirmation Email Is Sent To Non Integrated Customer using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${nan}
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}
Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}
Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}
Click On Add Invoice    ${nan}    ${nan}    ${nan}
Add Invoice Details    ${23456}    ${500}    ${1}
Select Payment Method    ${Credit Card}    ${nan}    ${nan}
Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}
Validate Total Charges Under Summary Of Payment    ${$5.00}    ${nan}    ${nan}
Process Invoice Payment    ${nan}    ${nan}    ${nan}
Validate Confirmation Email Sent    ${customer_details}    ${payment_receipt}    ${nan}

*** Keywords ***
Generate Random Customer Details
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
[Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}

Enter Customer Details
[Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}

Select Payment Type
[Arguments]    ${Specific Invoice}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Specific Invoice}    ${nan}    ${nan}

Click On Add Invoice
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Add Invoice Details
[Arguments]    ${23456}    ${500}    ${1}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${23456}    ${500}    ${1}

Select Payment Method
[Arguments]    ${Credit Card}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
[Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Validate Total Charges Under Summary Of Payment
[Arguments]    ${$5.00}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${$5.00}    ${nan}    ${nan}

Process Invoice Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Confirmation Email Sent
[Arguments]    ${customer_details}    ${payment_receipt}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_details}    ${payment_receipt}    ${nan}

",Test Case 'TC_05 Validate Payment Confirmation Email Is Sent To Non Integrated Customer' aims to verify that non-integrated
Build data-driven paynow test cases for Superstore Testcases TC_05 Validate User Can Add Item To Cart And Remove It Successfully,data-driven,TC_05 Validate User Can Add Item To Cart And Remove It Successfully,"*** Settings ***
Documentation    Validate TC_05 Validate User Can Add Item To Cart And Remove It Successfully
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate User Can Add Item To Cart And Remove It Successfully
[Documentation]    Validate TC_05 Validate User Can Add Item To Cart And Remove It Successfully using the following steps
Launch Superstore Application    ${SUPERSTORE_MERCHANT}    ${nan}    ${}
Login To Account    ${VALID_USER}    ${VALID_PASSWORD}    ${}
Search For Item    ${item_name}    ${nan}    ${}
Add Item To Cart    ${item_id}    ${nan}    ${}
Validate Item Is In Cart    ${item_name}    ${item_id}    ${}
Remove Item From Cart    ${item_id}    ${nan}    ${}
Validate Cart Is Empty    ${item_id}    ${nan}    ${}

*** Keywords ***
Launch Superstore Application
[Arguments]    ${SUPERSTORE_MERCHANT}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${SUPERSTORE_MERCHANT}    ${nan}    ${}

Login To Account
[Arguments]    ${VALID_USER}    ${VALID_PASSWORD}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${VALID_USER}    ${VALID_PASSWORD}    ${}

Search For Item
[Arguments]    ${item_name}    ${nan}    ${}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${item_name}    ${nan}    ${}

Add Item To Cart
[Arguments]    ${item_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${item_id}    ${nan}    ${}

Validate Item Is In Cart
[Arguments]    ${item_name}    ${item_id}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${item_name}    ${item_id}    ${}

Remove Item From Cart
[Arguments]    ${item_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${item_id}    ${nan}    ${}

Validate Cart Is Empty
[Arguments]    ${item_id}    ${nan}    ${}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${item_id}    ${nan}    ${}

","### Summary for Test Case: TC_05 Validate User Can Add Item To Cart And Remove It Successfully

#### Purpose:
The primary goal of this test case is to ensure that users can successfully add an item to their shopping cart and then remove it within the Superstore application. This involves verifying the crucial functionalities of adding items to the cart and ensuring that items can be removed without issues.

#### Objectives:"
Validate data-driven ordersystem test cases for Order Management Testcases TC_10 Validate Admin Is Able To Cancel Unprocessed Orders,data-driven,TC_10 Validate Admin Is Able To Cancel Unprocessed Orders,"*** Settings ***
Documentation    Validate TC_10 Validate Admin Is Able To Cancel Unprocessed Orders
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       adminuser
${VALID_PASSWORD}   strongpassword

*** Test Cases ***
TC_10 Validate Admin Is Able To Cancel Unprocessed Orders
[Documentation]    Validate TC_10 Validate Admin Is Able To Cancel Unprocessed Orders using the following steps
Send Request To Create Customer    ${CUSTOMER_JANE_DOE}    ${nan}    ${nan}
Send Request To Create Order For Customer    ${CUSTOMER_JANE_DOE}    ${order_id}    ${nan}
Send Request To Process Order Creation    ${CUSTOMER_JANE_DOE}    ${order_id}    ${nan}
Select Module    ${Order Management}    ${nan}    ${nan}
Filter With Order ID In Order Management    ${order_id}    ${nan}    ${nan}
Send Request To Cancel Order    ${order_id}    ${nan}    ${nan}
Validate Order Status Is Cancelled    ${order_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${CUSTOMER_JANE_DOE}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CUSTOMER_JANE_DOE}    ${nan}    ${nan}

Send Request To Create Order For Customer
[Arguments]    ${CUSTOMER_JANE_DOE}    ${order_id}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CUSTOMER_JANE_DOE}    ${order_id}    ${nan}

Send Request To Process Order Creation
[Arguments]    ${CUSTOMER_JANE_DOE}    ${order_id}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${CUSTOMER_JANE_DOE}    ${order_id}    ${nan}

Select Module
[Arguments]    ${Order Management}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${Order Management}    ${nan}    ${nan}

Filter With Order ID In Order Management
[Arguments]    ${order_id}    ${nan}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${order_id}    ${nan}    ${nan}

Send Request To Cancel Order
[Arguments]    ${order_id}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${order_id}    ${nan}    ${nan}

Validate Order Status Is Cancelled
[Arguments]    ${order_id}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${order_id}    ${nan}    ${nan}

","**Test Case Summary: TC_10 Validate Admin Is Able To Cancel Unprocessed Orders**

**Purpose:**

The purpose of this test case is to confirm that an admin can successfully cancel orders that have not yet been processed. This validation ensures several key aspects:

1. **Order Creation:** Verifies that the order creation request is successful and that the order is accurately created for the customer.
2. **Order Filtering:** Confirms that the system can correctly filter and retrieve the desired order based on the order ID within the order management module.
3. **Order Cancellation:** Ensures that the admin can send a cancellation request for the selected order and that this request is processed without errors.
4. **Status Update:** Confirms that the order status changes correctly from 'Unprocessed' to 'Cancelled' after the cancellation request is executed.

By checking these functionalities, the test validates that the order management system is functioning correctly for order cancellations and that admins have the necessary capabilities to manage and control orders effectively."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_23 Validate Customer Email Notification Upon Successful Payment,data-driven,TC_23 Validate Customer Email Notification Upon Successful Payment,"*** Settings ***
Documentation    Validate TC_23 Validate Customer Email Notification Upon Successful Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_23 Validate Customer Email Notification Upon Successful Payment
[Documentation]    Validate TC_23 Validate Customer Email Notification Upon Successful Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
Send Request To Process Payment Through ACH/Echeck Card    ${integrated_merchant}    ${account_number}    ${invoice_number}
Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}
Process The Payment    ${nan}    ${nan}    ${nan}
Validate Email Notification Received    ${customer_email}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
[Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
[Arguments]    ${integrated_merchant}    ${account_number}    ${invoice_number}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${integrated_merchant}    ${account_number}    ${invoice_number}

Launch PayNow Application
[Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
[Arguments]    ${account_number}    ${invoice_number}    ${nan}
[Return]    ${integer}
[Documentation]    Keyword description
Log    ${account_number}    ${invoice_number}    ${nan}

Process The Payment
[Arguments]    ${nan}    ${nan}    ${nan}
[Return]    ${string}
[Documentation]    Keyword description
Log    ${nan}    ${nan}    ${nan}

Validate Email Notification Received
[Arguments]    ${customer_email}    ${nan}    ${nan}
[Return]    ${boolean}
[Documentation]    Keyword description
Log    ${customer_email}    ${nan}    ${nan}

","**Test Case Summary: ""TC_23 Validate Customer Email Notification Upon Successful Payment""**

**Purpose:**

The goal of this test case is to ensure that after a customer successfully completes a payment, they receive an email notification confirming the transaction. This functionality is vital for maintaining transparency and trust with customers, as it provides them with immediate confirmation and a record of their payment.

**Key Steps Involved:**

1. **Payment Completion:** A customer completes a payment for an outstanding invoice.
2. **Email Notification:** Validate that the email containing payment confirmation details is sent to the customer's registered email address.
3. **Email Verification:** Ensure that the email received includes accurate information such as payment amount, date, and relevant invoice or transaction ID.

By following these steps, the test case ensures that the system reliably informs customers of their successful payments, contributing to an overall positive user experience."
Build data-driven paynow test cases for Autopay Testcases TC_01 Validate Customer Is Able To Schedule AutoPay Payments On A Daily Basis,data-driven,TC_01 Validate Customer Is Able To Schedule AutoPay Payments On A Daily Basis,"*** Settings ***
Documentation    Validate TC_01 Validate Customer Is Able To Schedule AutoPay Payments On A Daily Basis
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Customer Is Able To Schedule AutoPay Payments On A Daily Basis
    [Documentation]    Validate TC_01 Validate Customer Is Able To Schedule AutoPay Payments On A Daily Basis using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3}    
    Login To PayNOW And Navigate To Autopay    ${account_number}    ${invoice_number}    ${nan}    
    Select Each Day As Payment Option    ${nan}    ${nan}    ${nan}    
    Select Invoices Due For The Payment    ${nan}    ${nan}    ${nan}    
    Enter Customer And Credit Card Details For AutoPay    ${4111111111111111}    ${nan}    ${nan}    
    Send Request To Create AutoPay For Each Day    ${account_number}    ${4111111111111111}    ${nan}    
    Send Event To Process Schedule Payment    ${account_number}    ${invoice_number}    ${nan}    
    Validate Scheduled Payment Status    ${account_number}    ${invoice_number}    ${Completed}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3}

Login To PayNOW And Navigate To Autopay
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Select Each Day As Payment Option
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Invoices Due For The Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Enter Customer And Credit Card Details For AutoPay
    [Arguments]    ${4111111111111111}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${4111111111111111}    ${nan}    ${nan}

Send Request To Create AutoPay For Each Day
    [Arguments]    ${account_number}    ${4111111111111111}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${4111111111111111}    ${nan}

Send Event To Process Schedule Payment
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Scheduled Payment Status
    [Arguments]    ${account_number}    ${invoice_number}    ${Completed}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${Completed}

","The test case 'TC_01 Validate Customer Is Able To Schedule AutoPay Payments On A Daily Basis' is designed to verify that customers can successfully set up automatic payments on a daily basis using the AutoPay feature of a given payment system. The primary purpose of this test case is to ensure that the functionality for scheduling daily payments operates as expected and is user-friendly. 

Key aspects to validate include:

1. **User Interface**: The process of setting up daily AutoPay should be clear and intuitive, including navigation to the AutoPay setup section, selection of daily frequency, and input of necessary payment details.

2. **Functionality**: The system should accurately schedule the payments to occur daily. This includes validating the calendar functionality to ensure no dates"
Validate data-driven paynow test cases for Autopay Testcases TC_02 Validate Customer Is Able To Schedule AutoPay For Credit Card,data-driven,TC_02 Validate Customer Is Able To Schedule AutoPay For Credit Card,"*** Settings ***
Documentation    Validate TC_02 Validate Customer Is Able To Schedule AutoPay For Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Customer Is Able To Schedule AutoPay For Credit Card
    [Documentation]    Validate TC_02 Validate Customer Is Able To Schedule AutoPay For Credit Card using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3}    
    Login To PayNOW And Navigate To Autopay    ${account_number}    ${invoice_number}    ${nan}    
    Select Each Day As Payment Option    ${nan}    ${nan}    ${nan}    
    Select Invoices Due For The Payment    ${nan}    ${nan}    ${nan}    
    Enter Customer And Credit Card Details For AutoPay    ${5555555555554444}    ${nan}    ${nan}    
    Send Request To Create AutoPay For Each Day    ${account_number}    ${5555555555554444}    ${nan}    
    Validate AutoPay Origin In Scheduled Payments    ${account_number}    ${invoice_number}    ${AutoPay}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3}

Login To PayNOW And Navigate To Autopay
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Select Each Day As Payment Option
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Invoices Due For The Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Enter Customer And Credit Card Details For AutoPay
    [Arguments]    ${5555555555554444}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${5555555555554444}    ${nan}    ${nan}

Send Request To Create AutoPay For Each Day
    [Arguments]    ${account_number}    ${5555555555554444}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${5555555555554444}    ${nan}

Validate AutoPay Origin In Scheduled Payments
    [Arguments]    ${account_number}    ${invoice_number}    ${AutoPay}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${AutoPay}

","The purpose of the test case 'TC_02 - Validate Customer Is Able To Schedule AutoPay For Credit Card' is to ensure that users can successfully set up an automatic payment schedule for their credit card accounts through the user interface of a banking or financial application. This test case focuses on verifying the functional aspects of the AutoPay feature, including:

1. **Navigation:** Confirming that users can find and access the AutoPay setup option within the application.
2. **Input Validation:** Ensuring that the required information (such as payment amount, payment schedule, bank account details, etc.) can be entered correctly without errors.
3. **Confirmation:** Verifying that after inputting the necessary details, users receive appropriate confirmations that the AutoPay has been"
Create data-driven paynow test cases for Autopay Testcases TC_03 Validate Customer Is Able To Schedule AutoPay For Debit Card,data-driven,TC_03 Validate Customer Is Able To Schedule AutoPay For Debit Card,"*** Settings ***
Documentation    Validate TC_03 Validate Customer Is Able To Schedule AutoPay For Debit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate Customer Is Able To Schedule AutoPay For Debit Card
    [Documentation]    Validate TC_03 Validate Customer Is Able To Schedule AutoPay For Debit Card using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3}    
    Login To PayNOW And Navigate To Autopay    ${account_number}    ${invoice_number}    ${nan}    
    Select Each Day As Payment Option    ${nan}    ${nan}    ${nan}    
    Select Invoices Due For The Payment    ${nan}    ${nan}    ${nan}    
    Enter Customer And Credit Card Details For AutoPay    ${4217651111111119}    ${nan}    ${nan}    
    Send Request To Create AutoPay For Each Day    ${account_number}    ${4217651111111119}    ${nan}    
    Validate AutoPay Origin In Scheduled Payments    ${account_number}    ${invoice_number}    ${AutoPay}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3}

Login To PayNOW And Navigate To Autopay
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Select Each Day As Payment Option
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Invoices Due For The Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Enter Customer And Credit Card Details For AutoPay
    [Arguments]    ${4217651111111119}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${4217651111111119}    ${nan}    ${nan}

Send Request To Create AutoPay For Each Day
    [Arguments]    ${account_number}    ${4217651111111119}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${4217651111111119}    ${nan}

Validate AutoPay Origin In Scheduled Payments
    [Arguments]    ${account_number}    ${invoice_number}    ${AutoPay}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${AutoPay}

","The test case 'TC_03 Validate Customer Is Able To Schedule AutoPay For Debit Card' is designed to ensure that customers can successfully set up an automatic payment for their debit card within a financial institution's digital platform (such as a mobile app or website). The key purpose of this test case includes:

1. **User Authentication**: Verify that the customer can log into their account securely.
2. **Navigation**: Ensure the customer can navigate to the AutoPay feature for debit cards without any issues.
3. **Input Validation**: Check that all necessary fields for scheduling AutoPay (such as payment amount, date, and account details) accept valid inputs and provide appropriate error messages for invalid inputs.
4. **Scheduling**: Confirm that"
Generate data-driven paynow test cases for Autopay Testcases TC_04 Validate Customer Is Able To Delete Saved AutoPay Schedule,data-driven,TC_04 Validate Customer Is Able To Delete Saved AutoPay Schedule,"*** Settings ***
Documentation    Validate TC_04 Validate Customer Is Able To Delete Saved AutoPay Schedule
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate Customer Is Able To Delete Saved AutoPay Schedule
    [Documentation]    Validate TC_04 Validate Customer Is Able To Delete Saved AutoPay Schedule using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}    
    Login To PayNOW And Navigate To Autopay    ${account_number}    ${invoice_number}    ${nan}    
    Select Each Day As Payment Option    ${nan}    ${nan}    ${nan}    
    Select Invoices Due For The Payment    ${nan}    ${nan}    ${nan}    
    Enter Customer And Credit Card Details For AutoPay    ${4000000000000069}    ${nan}    ${nan}    
    Delete AutoPay Details    ${nan}    ${nan}    ${nan}    
    Validate AutoPay Details Are Deleted    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}

Login To PayNOW And Navigate To Autopay
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Select Each Day As Payment Option
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Invoices Due For The Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Enter Customer And Credit Card Details For AutoPay
    [Arguments]    ${4000000000000069}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${4000000000000069}    ${nan}    ${nan}

Delete AutoPay Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate AutoPay Details Are Deleted
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case ""TC_04 Validate Customer Is Able To Delete Saved AutoPay Schedule"" is designed to verify that a customer has the functionality to successfully delete an existing AutoPay schedule through the application or platform. The purpose of this test is to ensure that users can manage their AutoPay settings as per their preference, particularly the ability to remove an automatic payment schedule that they no longer wish to maintain. This helps in confirming that the feature operates correctly and provides users with the necessary flexibility to manage their financial transactions as per their current needs or changes in circumstances. The successful deletion of an AutoPay schedule implies that the system properly updates records and no unintended automatic payments are processed after the schedule has been deleted."
Build data-driven paynow test cases for Autopay Testcases TC_05 Validate Customer Is Able To Close Delete AutoPay Confirmation Popup,data-driven,TC_05 Validate Customer Is Able To Close Delete AutoPay Confirmation Popup,"*** Settings ***
Documentation    Validate TC_05 Validate Customer Is Able To Close Delete AutoPay Confirmation Popup
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Customer Is Able To Close Delete AutoPay Confirmation Popup
    [Documentation]    Validate TC_05 Validate Customer Is Able To Close Delete AutoPay Confirmation Popup using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}    
    Login To PayNOW And Navigate To Autopay    ${account_number}    ${invoice_number}    ${nan}    
    Select Each Day As Payment Option    ${nan}    ${nan}    ${nan}    
    Select Invoices Due For The Payment    ${nan}    ${nan}    ${nan}    
    Enter Customer And Credit Card Details For AutoPay    ${4000000000009987}    ${nan}    ${nan}    
    Close Delete AutoPay Confirmation Popup    ${nan}    ${nan}    ${nan}    
    Validate Delete AutoPay Confirmation Popup Is Closed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}

Login To PayNOW And Navigate To Autopay
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Select Each Day As Payment Option
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Invoices Due For The Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Enter Customer And Credit Card Details For AutoPay
    [Arguments]    ${4000000000009987}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${4000000000009987}    ${nan}    ${nan}

Close Delete AutoPay Confirmation Popup
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Delete AutoPay Confirmation Popup Is Closed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The purpose of the test case 'TC_05 Validate Customer Is Able To Close Delete AutoPay Confirmation Popup' is to ensure that a customer can successfully close the confirmation popup that appears when they attempt to delete an AutoPay setup for their account.

The test focuses on verifying the functionality and user experience of the confirmation popup, specifically checking that:
1. The confirmation popup appears when the user initiates the deletion of AutoPay.
2. There is an option or button to close the popup without completing the deletion action.
3. The popup closes successfully when the user selects the close option, leaving the AutoPay settings unchanged.

This test case helps ensure that users have control over the deletion process and can easily cancel the action, thereby improving usability and preventing accidental"
Generate data-driven paynow test cases for Autopay Testcases TC_06 Validate Customer Is Able To Schedule AutoPay Payments on a Designated Monthly Date,data-driven,TC_06 Validate Customer Is Able To Schedule AutoPay Payments on a Designated Monthly Date,"*** Settings ***
Documentation    Validate TC_06 Validate Customer Is Able To Schedule AutoPay Payments on a Designated Monthly Date
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_06 Validate Customer Is Able To Schedule AutoPay Payments on a Designated Monthly Date
    [Documentation]    Validate TC_06 Validate Customer Is Able To Schedule AutoPay Payments on a Designated Monthly Date using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3}    
    Login To PayNOW And Navigate To Autopay    ${account_number}    ${invoice_number}    ${nan}    
    Select Specific Day Of The Month    ${nan}    ${nan}    ${nan}    
    Select Invoices That Are Within Due Date    ${2}    ${nan}    ${nan}    
    Enter Customer And Credit Card Details For AutoPay    ${5555555555554444}    ${nan}    ${nan}    
    Validate Created AutoPay Details For Sepecific Day Of Month    ${Specific Day}    ${Invoices Within Due Date}    ${10}    
    Send Request To Create AutoPay For Day Of The Month    ${account_number}    ${4111111111111111}    ${nan}    
    Validate AutoPay Origin In Scheduled Payments    ${account_number}    ${invoice_number}    ${AutoPay}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3}

Login To PayNOW And Navigate To Autopay
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Select Specific Day Of The Month
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Invoices That Are Within Due Date
    [Arguments]    ${2}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${2}    ${nan}    ${nan}

Enter Customer And Credit Card Details For AutoPay
    [Arguments]    ${5555555555554444}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${5555555555554444}    ${nan}    ${nan}

Validate Created AutoPay Details For Sepecific Day Of Month
    [Arguments]    ${Specific Day}    ${Invoices Within Due Date}    ${10}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Specific Day}    ${Invoices Within Due Date}    ${10}

Send Request To Create AutoPay For Day Of The Month
    [Arguments]    ${account_number}    ${4111111111111111}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${4111111111111111}    ${nan}

Validate AutoPay Origin In Scheduled Payments
    [Arguments]    ${account_number}    ${invoice_number}    ${AutoPay}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${AutoPay}

","### Summary of Test Case 'TC_06: Validate Customer Is Able To Schedule AutoPay Payments on a Designated Monthly Date':

**Purpose:**
The primary objective of this test case is to ensure that customers can successfully schedule automatic payments (AutoPay) to be processed on a specific, designated date each month. This functionality is crucial for enhancing user convenience, ensuring timely bill payments, and improving overall customer satisfaction with the service.

**Key Points:**
1. **Functionality Verification:** The test verifies that the AutoPay feature is working as intended, allowing users to set up recurring payments on a specified monthly date.
2. **User Experience:** Ensures the setup process is intuitive and accessible, guaranteeing a seamless user experience.
3. **Payment"
Generate data-driven paynow test cases for Autopay Testcases TC_07 Validate Customer Unable To Create AutoPay For The Invoices that Past 500 days,data-driven,TC_07 Validate Customer Unable To Create AutoPay For The Invoices that Past 500 days,"*** Settings ***
Documentation    Validate TC_07 Validate Customer Unable To Create AutoPay For The Invoices that Past 500 days
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Customer Unable To Create AutoPay For The Invoices that Past 500 days
    [Documentation]    Validate TC_07 Validate Customer Unable To Create AutoPay For The Invoices that Past 500 days using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}    
    Login To PayNOW And Navigate To Autopay    ${account_number}    ${invoice_number}    ${nan}    
    Select Each Day As Payment Option    ${nan}    ${nan}    ${nan}    
    Select Invoices That Are Past The Invoice Date    ${501}    ${nan}    ${nan}    
    Enter Customer And Credit Card Details For AutoPay    ${4217651111111119}    ${nan}    ${nan}    
    Validate Error Message Is Displayed    ${Days past invoice date must be a number between 1 & 500}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}

Login To PayNOW And Navigate To Autopay
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Select Each Day As Payment Option
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Invoices That Are Past The Invoice Date
    [Arguments]    ${501}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${501}    ${nan}    ${nan}

Enter Customer And Credit Card Details For AutoPay
    [Arguments]    ${4217651111111119}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${4217651111111119}    ${nan}    ${nan}

Validate Error Message Is Displayed
    [Arguments]    ${Days past invoice date must be a number between 1 & 500}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Days past invoice date must be a number between 1 & 500}    ${nan}    ${nan}

","The test case 'TC_07 Validate Customer Unable To Create AutoPay For The Invoices that Past 500 days' aims to ensure that the system correctly enforces a restriction on setting up automatic payments (AutoPay) for invoices that are older than 500 days. The primary objective is to validate that when a customer attempts to schedule AutoPay for any invoice exceeding this 500-day threshold, the system either prevents the action or displays an appropriate error message. This validation helps maintain adherence to business rules and system constraints, ensuring that outdated invoices are handled appropriately and reducing the risk of processing errors or financial discrepancies."
Create data-driven paynow test cases for Autopay Testcases TC_08 Validate Customer Unable To Create AutoPay For The Invoices That Due More Than 31 Days,data-driven,TC_08 Validate Customer Unable To Create AutoPay For The Invoices That Due More Than 31 Days,"*** Settings ***
Documentation    Validate TC_08 Validate Customer Unable To Create AutoPay For The Invoices That Due More Than 31 Days
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_08 Validate Customer Unable To Create AutoPay For The Invoices That Due More Than 31 Days
    [Documentation]    Validate TC_08 Validate Customer Unable To Create AutoPay For The Invoices That Due More Than 31 Days using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}    
    Login To PayNOW And Navigate To Autopay    ${account_number}    ${invoice_number}    ${nan}    
    Select Each Day As Payment Option    ${nan}    ${nan}    ${nan}    
    Select Invoices That Are Within Due Date    ${32}    ${nan}    ${nan}    
    Enter Customer And Credit Card Details For AutoPay    ${4217651111111119}    ${nan}    ${nan}    
    Validate Error Message Is Displayed    ${Due within days must be a number between 1 & 30}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}

Login To PayNOW And Navigate To Autopay
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Select Each Day As Payment Option
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Invoices That Are Within Due Date
    [Arguments]    ${32}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${32}    ${nan}    ${nan}

Enter Customer And Credit Card Details For AutoPay
    [Arguments]    ${4217651111111119}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${4217651111111119}    ${nan}    ${nan}

Validate Error Message Is Displayed
    [Arguments]    ${Due within days must be a number between 1 & 30}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Due within days must be a number between 1 & 30}    ${nan}    ${nan}

","The purpose of the test case 'TC_08 Validate Customer Unable To Create AutoPay For The Invoices That Due More Than 31 Days' is to ensure that the system enforces a restriction preventing customers from setting up automatic payments (AutoPay) for invoices that are due more than 31 days in the future. The validation check is designed to guarantee that AutoPay can only be scheduled for invoices within a reasonable timeframe, adhering to the defined business rules and billing policies. This test verifies that the system correctly identifies and restricts attempts to create AutoPay schedules for invoices with due dates extending beyond the permissible 31-day limit, thereby preventing any potential misconfigurations or errors in the billing process."
Build data-driven paynow test cases for Omnicorp Testcases TC_01 Validate Customer Is Able To Process The Lump Sum Payment,data-driven,TC_01 Validate Customer Is Able To Process The Lump Sum Payment,"*** Settings ***
Documentation    Validate TC_01 Validate Customer Is Able To Process The Lump Sum Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Customer Is Able To Process The Lump Sum Payment
    [Documentation]    Validate TC_01 Validate Customer Is Able To Process The Lump Sum Payment using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Use Valid Credit Card And Pay The Amount    ${97.99}    ${CREDIT_CARD_DETAILS}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Use Valid Credit Card And Pay The Amount
    [Arguments]    ${97.99}    ${CREDIT_CARD_DETAILS}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${97.99}    ${CREDIT_CARD_DETAILS}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_01 Validate Customer Is Able To Process The Lump Sum Payment' aims to verify that customers can successfully initiate and complete a lump sum payment transaction within the system. The purpose of this test case is to ensure the functionality and reliability of the payment processing feature, specifically for lump sum payments. This involves checking that all required steps and validations are correctly implemented and functioning as expected, such as:

1. **User Authentication**: Ensuring that the customer is correctly logged in or authenticated before proceeding with the payment.
2. **Payment Initiation**: Confirming that the customer can access the payment section and initiate a lump sum payment.
3. **Data Validation**: Verifying that all necessary information, such as payment amount,"
Validate data-driven paynow test cases for Omnicorp Testcases TC_02 Validate Customer Is Able To Process The Specific Invoice Payment,data-driven,TC_02 Validate Customer Is Able To Process The Specific Invoice Payment,"*** Settings ***
Documentation    Validate TC_02 Validate Customer Is Able To Process The Specific Invoice Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Customer Is Able To Process The Specific Invoice Payment
    [Documentation]    Validate TC_02 Validate Customer Is Able To Process The Specific Invoice Payment using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","**Test Case: TC_02 - Validate Customer Is Able To Process The Specific Invoice Payment**

**Purpose:**
The primary objective of this test case is to ensure that customers can successfully process a payment for a specific invoice within a financial or billing system. This involves verifying the end-to-end functionality of the payment process, from the selection of the specific invoice to the confirmation of payment.

**Key Points:**

1. **Invoice Selection**: Verify that customers can navigate to and select a specific invoice intended for payment.
2. **Payment Details Entry**: Check that customers can correctly input necessary payment details, such as payment method (credit card, bank transfer, etc.), payment amount, and any other required information.
3. **Validation Checks**"
Create data-driven paynow test cases for Omnicorp Testcases TC_03 Validate Customer Is Unable To Process Partial Lump Sum Payment,data-driven,TC_03 Validate Customer Is Unable To Process Partial Lump Sum Payment,"*** Settings ***
Documentation    Validate TC_03 Validate Customer Is Unable To Process Partial Lump Sum Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate Customer Is Unable To Process Partial Lump Sum Payment
    [Documentation]    Validate TC_03 Validate Customer Is Unable To Process Partial Lump Sum Payment using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Use Valid Credit Card And Pay The Amount    ${97}    ${CREDIT_CARD_DETAILS}    ${nan}    
    Validate Errors After Clicking On Process Invoice    ${Short Pays not allowed}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Use Valid Credit Card And Pay The Amount
    [Arguments]    ${97}    ${CREDIT_CARD_DETAILS}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${97}    ${CREDIT_CARD_DETAILS}    ${nan}

Validate Errors After Clicking On Process Invoice
    [Arguments]    ${Short Pays not allowed}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Short Pays not allowed}    ${nan}    ${nan}

","The test case 'TC_03 Validate Customer Is Unable To Process Partial Lump Sum Payment' is designed to verify that the system correctly prevents customers from making a partial lump sum payment on their accounts. The main purpose of this test case is to ensure compliance with business rules or regulatory requirements that mandate either full payment or no payment at all in certain scenarios. The test involves attempting to process a lump sum payment that is less than the full amount due and confirming that the system denies the transaction, providing appropriate error messages or feedback to the user. This validation aims to maintain the accuracy and integrity of financial transactions within the system."
Build data-driven paynow test cases for Omnicorp Testcases TC_04 Validate Customer Is Unable To Process Payment Through Debit Cards,data-driven,TC_04 Validate Customer Is Unable To Process Payment Through Debit Cards,"*** Settings ***
Documentation    Validate TC_04 Validate Customer Is Unable To Process Payment Through Debit Cards
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate Customer Is Unable To Process Payment Through Debit Cards
    [Documentation]    Validate TC_04 Validate Customer Is Unable To Process Payment Through Debit Cards using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${4462030000000000}    ${12/28}    ${123.0}    
    Validate Error Message Is Displayed    ${Debit cards are not accepted.}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${4462030000000000}    ${12/28}    ${123.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${4462030000000000}    ${12/28}    ${123.0}

Validate Error Message Is Displayed
    [Arguments]    ${Debit cards are not accepted.}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Debit cards are not accepted.}    ${nan}    ${nan}

","The purpose of the test case 'TC_04 Validate Customer Is Unable To Process Payment Through Debit Cards' is to assess and confirm that the system correctly identifies and disallows payment attempts made through debit cards. This test case is designed to ensure that any transaction initiated using debit card details does not proceed and that appropriate error messages or alerts are displayed to inform the customer that debit card payments are not accepted. This could be in line with certain business rules or processing limitations implemented by the system.

Key Objectives:
1. Verify that the system blocks payment attempts made using debit cards.
2. Check that user-friendly and clear error messages are displayed to inform the customer of the payment restriction.
3. Ensure that no monetary transactions are executed when a debit card is used"
Validate data-driven paynow test cases for Omnicorp Testcases TC_05 Validate Customer Is Able To Process Payment Through Visa Credit Cards,data-driven,TC_05 Validate Customer Is Able To Process Payment Through Visa Credit Cards,"*** Settings ***
Documentation    Validate TC_05 Validate Customer Is Able To Process Payment Through Visa Credit Cards
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Customer Is Able To Process Payment Through Visa Credit Cards
    [Documentation]    Validate TC_05 Validate Customer Is Able To Process Payment Through Visa Credit Cards using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${2223000048400011}    ${12/29}    ${123.0}    
    Save Payment Method For Future Use    ${Credit Card}    ${Visa}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${nan}    
    Return To Open Invoices Page    ${nan}    ${nan}    ${nan}    
    Validate Account Number Exists Under Saved Payment Method    ${2223}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${2223000048400011}    ${12/29}    ${123.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${2223000048400011}    ${12/29}    ${123.0}

Save Payment Method For Future Use
    [Arguments]    ${Credit Card}    ${Visa}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${Visa}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Return To Open Invoices Page
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Account Number Exists Under Saved Payment Method
    [Arguments]    ${2223}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${2223}    ${nan}    ${nan}

","The test case 'TC_05 Validate Customer Is Able To Process Payment Through Visa Credit Cards' aims to ensure that customers can successfully complete transactions using Visa credit cards. The primary objective is to verify that the payment gateway and associated processes handle Visa credit card details correctly and securely, and that payments are processed without errors. This involves testing various scenarios including valid card details, invalid details, edge cases like expired cards, insufficient funds, and ensuring compliance with security standards such as PCI-DSS. Successfully passing this test ensures a reliable and seamless payment experience for customers using Visa credit cards."
Build data-driven paynow test cases for Omnicorp Testcases TC_06 Validate Customer Is Able To Process Payment Through Master Credit Card,data-driven,TC_06 Validate Customer Is Able To Process Payment Through Master Credit Card,"*** Settings ***
Documentation    Validate TC_06 Validate Customer Is Able To Process Payment Through Master Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_06 Validate Customer Is Able To Process Payment Through Master Credit Card
    [Documentation]    Validate TC_06 Validate Customer Is Able To Process Payment Through Master Credit Card using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${2223000048400011}    ${12/29}    ${123.0}    
    Save Payment Method For Future Use    ${Credit Card}    ${master}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${2223000048400011}    ${12/29}    ${123.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${2223000048400011}    ${12/29}    ${123.0}

Save Payment Method For Future Use
    [Arguments]    ${Credit Card}    ${master}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${master}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The purpose of the test case 'TC_06 Validate Customer Is Able To Process Payment Through Master Credit Card' is to ensure that the payment processing system of an e-commerce platform or any other transactional application correctly handles and processes payments made using a MasterCard credit card. This involves verifying that a customer can successfully complete a transaction using their MasterCard, and that the system appropriately handles different stages of the payment process, including card validation, transaction approval, and confirmation.

The test case will typically involve:

1. Logging into the application or website with valid user credentials.
2. Adding items to the shopping cart or proceeding to the payment section.
3. Selecting the MasterCard credit card as the payment method.
4. Entering valid MasterCard details (card"
Generate data-driven paynow test cases for SchedulePayment Testcases TC_01 Validate Customer Is Able To Schedule Payment For Past Invoice Due Date,data-driven,TC_01 Validate Customer Is Able To Schedule Payment For Past Invoice Due Date,"*** Settings ***
Documentation    Validate TC_01 Validate Customer Is Able To Schedule Payment For Past Invoice Due Date
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Customer Is Able To Schedule Payment For Past Invoice Due Date
    [Documentation]    Validate TC_01 Validate Customer Is Able To Schedule Payment For Past Invoice Due Date using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Select Payment Date    ${today+1}    ${nan}    ${nan}    
    Create Schedule Payment    ${nan}    ${nan}    ${nan}    
    Send Event To Process Schedule Payment    ${account_number}    ${invoice_number}    ${nan}    
    Validate Scheduled Payment Status    ${account_number}    ${invoice_number}    ${Completed}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Select Payment Date
    [Arguments]    ${today+1}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${today+1}    ${nan}    ${nan}

Create Schedule Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Event To Process Schedule Payment
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Scheduled Payment Status
    [Arguments]    ${account_number}    ${invoice_number}    ${Completed}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${Completed}

","The test case 'TC_01 Validate Customer Is Able To Schedule Payment For Past Invoice Due Date' aims to ensure that a customer has the capability to schedule a payment for an invoice that is already past its due date. This validation checks the flexibility and user-friendliness of the payment system by confirming that users are not restricted from making payments even if the invoice is overdue. The purpose of this test case is to verify that the system handles late payments appropriately, allowing users to rectify outstanding account issues without complications, thereby maintaining a seamless user experience and ensuring financial operations continuity."
Create data-driven paynow test cases for SchedulePayment Testcases TC_02 Validate Customer Is Able To Schedule Payment For Current Invoice Due Date,data-driven,TC_02 Validate Customer Is Able To Schedule Payment For Current Invoice Due Date,"*** Settings ***
Documentation    Validate TC_02 Validate Customer Is Able To Schedule Payment For Current Invoice Due Date
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Customer Is Able To Schedule Payment For Current Invoice Due Date
    [Documentation]    Validate TC_02 Validate Customer Is Able To Schedule Payment For Current Invoice Due Date using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Select Payment Date    ${today+1}    ${nan}    ${nan}    
    Create Schedule Payment    ${nan}    ${nan}    ${nan}    
    Send Event To Process Schedule Payment    ${account_number}    ${invoice_number}    ${nan}    
    Validate Scheduled Payment Status    ${account_number}    ${invoice_number}    ${Completed}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Select Payment Date
    [Arguments]    ${today+1}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${today+1}    ${nan}    ${nan}

Create Schedule Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Event To Process Schedule Payment
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Scheduled Payment Status
    [Arguments]    ${account_number}    ${invoice_number}    ${Completed}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${Completed}

","The test case ""TC_02 Validate Customer Is Able To Schedule Payment For Current Invoice Due Date"" aims to verify that customers can successfully schedule a payment specifically for the due date of their current invoice. The primary objective is to ensure that the functionality allowing customers to select and confirm the due date for their payment operates correctly and without errors. This entails checking user interface elements, system response, payment processing, and confirmation notifications to ascertain that all parts of the scheduling process are seamless and accurate. If the customer can complete this process without issues, it confirms that the system meets the required specifications for managing invoice payments on their due dates."
Validate data-driven paynow test cases for SchedulePayment Testcases TC_03 Validate Customer Is Able To Schedule Payment For Future Invoice Due Date,data-driven,TC_03 Validate Customer Is Able To Schedule Payment For Future Invoice Due Date,"*** Settings ***
Documentation    Validate TC_03 Validate Customer Is Able To Schedule Payment For Future Invoice Due Date
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate Customer Is Able To Schedule Payment For Future Invoice Due Date
    [Documentation]    Validate TC_03 Validate Customer Is Able To Schedule Payment For Future Invoice Due Date using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Select All Invoices    ${nan}    ${nan}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Select Payment Date    ${today+1}    ${nan}    ${nan}    
    Create Schedule Payment    ${nan}    ${nan}    ${nan}    
    Send Event To Process Schedule Payment    ${account_number}    ${invoice_number}    ${nan}    
    Validate Scheduled Payment Status    ${account_number}    ${invoice_number}    ${Completed}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select All Invoices
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Select Payment Date
    [Arguments]    ${today+1}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${today+1}    ${nan}    ${nan}

Create Schedule Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Event To Process Schedule Payment
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Scheduled Payment Status
    [Arguments]    ${account_number}    ${invoice_number}    ${Completed}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${Completed}

","The test case 'TC_03 Validate Customer Is Able To Schedule Payment For Future Invoice Due Date' aims to verify the functionality that allows customers to schedule payments of their invoices on a future date, beyond the current day. The primary purpose is to ensure that the system correctly supports this feature, enabling customers to conveniently plan their financial transactions without immediate payment. This test ensures the user interface, date selection, and backend processes work seamlessly together to permit future-dated transactions, reflecting the desired payment schedule and notifying the customer of the successful scheduling. By validating this ability, the test case confirms that customers have the flexibility to manage their finances proactively and that the system accommodates their scheduling preferences accurately and efficiently."
Build data-driven paynow test cases for SchedulePayment Testcases TC_04 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Current Invoice Due Date,data-driven,TC_04 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Current Invoice Due Date,"*** Settings ***
Documentation    Validate TC_04 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Current Invoice Due Date
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Current Invoice Due Date
    [Documentation]    Validate TC_04 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Current Invoice Due Date using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Create Multiple Invoices Through API    ${account_number}    ${OMNICORP_MERCHANT}    ${today}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoices_list.0}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Select Payment Date    ${today+1}    ${nan}    ${nan}    
    Create Schedule Payment    ${nan}    ${nan}    ${nan}    
    Send Event To Process Schedule Payment    ${account_number}    ${invoices_list.0}    ${nan}    
    Validate Scheduled Payment Status    ${account_number}    ${invoices_list.0}    ${Completed}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${today}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${today}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoices_list.0}    ${nan}
    [Return]    ${float}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoices_list.0}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Select Payment Date
    [Arguments]    ${today+1}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${today+1}    ${nan}    ${nan}

Create Schedule Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Event To Process Schedule Payment
    [Arguments]    ${account_number}    ${invoices_list.0}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoices_list.0}    ${nan}

Validate Scheduled Payment Status
    [Arguments]    ${account_number}    ${invoices_list.0}    ${Completed}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoices_list.0}    ${Completed}

","**Test Case TC_04: Validate Customer Is Able To Schedule Payment To Multiple Invoices For Current Invoice Due Date**

**Purpose:**
The objective of this test case is to ensure that a customer can successfully schedule a payment that applies to multiple invoices, all of which share the same due date. This functionality is critical for users who have several outstanding invoices due on the same day and wish to streamline the payment process by scheduling a single, consolidated payment. The test aims to verify the system's ability to handle such requests accurately and to confirm that the payment is correctly distributed across the selected invoices, ensuring that all due amounts are settled by the designated due date. This enhances user convenience and ensures efficient payment management within the system."
Build data-driven paynow test cases for SchedulePayment Testcases TC_05 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Past Invoice Due Date,data-driven,TC_05 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Past Invoice Due Date,"*** Settings ***
Documentation    Validate TC_05 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Past Invoice Due Date
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Past Invoice Due Date
    [Documentation]    Validate TC_05 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Past Invoice Due Date using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Create Multiple Invoices Through API    ${account_number}    ${OMNICORP_MERCHANT}    ${today-2}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoices_list.0}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Select Payment Date    ${today+1}    ${nan}    ${nan}    
    Create Schedule Payment    ${nan}    ${nan}    ${nan}    
    Send Event To Process Schedule Payment    ${account_number}    ${invoices_list.0}    ${nan}    
    Validate Scheduled Payment Status    ${account_number}    ${invoices_list.0}    ${Completed}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${today-2}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${today-2}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoices_list.0}    ${nan}
    [Return]    ${float}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoices_list.0}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Select Payment Date
    [Arguments]    ${today+1}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${today+1}    ${nan}    ${nan}

Create Schedule Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Event To Process Schedule Payment
    [Arguments]    ${account_number}    ${invoices_list.0}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoices_list.0}    ${nan}

Validate Scheduled Payment Status
    [Arguments]    ${account_number}    ${invoices_list.0}    ${Completed}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoices_list.0}    ${Completed}

","The test case 'TC_05 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Past Invoice Due Date' aims to ensure that the payment scheduling system in a software application allows customers to select multiple invoices, even if those invoices have past due dates, for scheduled payment. The purpose is to confirm that the system supports flexibility in managing overdue payments. By allowing customers to group and schedule payments for past due invoices, it facilitates better financial management and improves user experience. The test verifies that the system correctly processes the scheduled payments and adheres to any business rules or constraints related to overdue invoices."
Validate data-driven paynow test cases for SchedulePayment Testcases TC_06 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Future Invoice Due Date,data-driven,TC_06 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Future Invoice Due Date,"*** Settings ***
Documentation    Validate TC_06 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Future Invoice Due Date
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_06 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Future Invoice Due Date
    [Documentation]    Validate TC_06 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Future Invoice Due Date using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Create Multiple Invoices Through API    ${account_number}    ${OMNICORP_MERCHANT}    ${today+2}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoices_list.0}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Select All Invoices    ${nan}    ${nan}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Select Payment Date    ${today+1}    ${nan}    ${nan}    
    Create Schedule Payment    ${nan}    ${nan}    ${nan}    
    Send Event To Process Schedule Payment    ${account_number}    ${invoices_list.0}    ${nan}    
    Validate Scheduled Payment Status    ${account_number}    ${invoices_list.0}    ${Completed}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${today+2}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${today+2}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoices_list.0}    ${nan}
    [Return]    ${float}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoices_list.0}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select All Invoices
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Select Payment Date
    [Arguments]    ${today+1}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${today+1}    ${nan}    ${nan}

Create Schedule Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Event To Process Schedule Payment
    [Arguments]    ${account_number}    ${invoices_list.0}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoices_list.0}    ${nan}

Validate Scheduled Payment Status
    [Arguments]    ${account_number}    ${invoices_list.0}    ${Completed}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoices_list.0}    ${Completed}

","The purpose of the test case 'TC_06 Validate Customer Is Able To Schedule Payment To Multiple Invoices For Future Invoice Due Date' is to ensure that the functionality of scheduling payments for multiple invoices with future due dates is working correctly in the system. 

In this test case, the goal is to verify that a customer is able to:
1. Select multiple invoices that have a future due date.
2. Schedule a payment for these selected invoices on a specified future date.

Success criteria for the test include confirming that:
- The customer is able to navigate to the payment scheduling interface.
- Multiple invoices can be selected simultaneously.
- A future date can be set for the payment.
- The system successfully schedules the payment without errors.
- The customer receives"
Create data-driven paynow test cases for SchedulePayment Testcases TC_07 Validate Customer Is Able To Schedule Payment To Multiple Invoices With Multiple Invoice Due Dates,data-driven,TC_07 Validate Customer Is Able To Schedule Payment To Multiple Invoices With Multiple Invoice Due Dates,"*** Settings ***
Documentation    Validate TC_07 Validate Customer Is Able To Schedule Payment To Multiple Invoices With Multiple Invoice Due Dates
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Customer Is Able To Schedule Payment To Multiple Invoices With Multiple Invoice Due Dates
    [Documentation]    Validate TC_07 Validate Customer Is Able To Schedule Payment To Multiple Invoices With Multiple Invoice Due Dates using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Create Multiple Invoices With Multiple Due Dates    ${account_number}    ${OMNICORP_MERCHANT}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoices_list.1}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Select All Invoices    ${nan}    ${nan}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Select Payment Date    ${today+1}    ${nan}    ${nan}    
    Create Schedule Payment    ${nan}    ${nan}    ${nan}    
    Send Event To Process Schedule Payment    ${account_number}    ${invoices_list.1}    ${nan}    
    Validate Scheduled Payment Status    ${account_number}    ${invoices_list.1}    ${Completed}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Create Multiple Invoices With Multiple Due Dates
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoices_list.1}    ${nan}
    [Return]    ${float}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoices_list.1}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select All Invoices
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Select Payment Date
    [Arguments]    ${today+1}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${today+1}    ${nan}    ${nan}

Create Schedule Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Event To Process Schedule Payment
    [Arguments]    ${account_number}    ${invoices_list.1}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoices_list.1}    ${nan}

Validate Scheduled Payment Status
    [Arguments]    ${account_number}    ${invoices_list.1}    ${Completed}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoices_list.1}    ${Completed}

","The test case 'TC_07 Validate Customer Is Able To Schedule Payment To Multiple Invoices With Multiple Invoice Due Dates' is designed to ensure that a customer can successfully schedule payments for several invoices that have different due dates. The primary aim is to confirm that the payment system handles multiple invoice entries accurately and allows the customer to specify unique payment schedules for each. This involves verifying the following:

1. **Invoice Selection**: The customer can select multiple invoices from their account.
2. **Payment Scheduling**: The customer can set specific payment dates for each selected invoice, especially focusing on different due dates.
3. **System Handling**: The scheduling system correctly processes these entries without errors or overlaps.
4. **User Interface**: The user interface accurately"
Generate data-driven paynow test cases for SchedulePayment Testcases TC_08 Validate Customer Is Able To Cancel Schedule Payment,data-driven,TC_08 Validate Customer Is Able To Cancel Schedule Payment,"*** Settings ***
Documentation    Validate TC_08 Validate Customer Is Able To Cancel Schedule Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_08 Validate Customer Is Able To Cancel Schedule Payment
    [Documentation]    Validate TC_08 Validate Customer Is Able To Cancel Schedule Payment using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Select Payment Date    ${today+1}    ${nan}    ${nan}    
    Create Schedule Payment    ${nan}    ${nan}    ${nan}    
    Navigate To Schedule Payments Tab    ${account_number}    ${invoice_number}    ${nan}    
    Cancel Schedule Payment    ${nan}    ${nan}    ${nan}    
    Validate Scheduled Payment Status    ${account_number}    ${invoice_number}    ${Cancelled}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Select Payment Date
    [Arguments]    ${today+1}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${today+1}    ${nan}    ${nan}

Create Schedule Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Navigate To Schedule Payments Tab
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Cancel Schedule Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Scheduled Payment Status
    [Arguments]    ${account_number}    ${invoice_number}    ${Cancelled}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${Cancelled}

","The purpose of the test case 'TC_08 Validate Customer Is Able To Cancel Schedule Payment' is to verify that a customer can successfully cancel a payment that they have previously scheduled. This test checks the functionality of the cancellation process, ensuring that it is intuitive and operates correctly within the application. Successful execution of this test case confirms that the user interface correctly reflects the canceled status of the payment and that no further actions are taken to process the payment once it has been canceled. This helps maintain user trust and satisfaction by providing them control over their scheduled transactions."
Generate data-driven paynow test cases for SchedulePayment Testcases TC_09 Validate Customer Is Able To View Scheduled Payment Date And Origin In Scheduled Payments,data-driven,TC_09 Validate Customer Is Able To View Scheduled Payment Date And Origin In Scheduled Payments,"*** Settings ***
Documentation    Validate TC_09 Validate Customer Is Able To View Scheduled Payment Date And Origin In Scheduled Payments
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_09 Validate Customer Is Able To View Scheduled Payment Date And Origin In Scheduled Payments
    [Documentation]    Validate TC_09 Validate Customer Is Able To View Scheduled Payment Date And Origin In Scheduled Payments using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Select Payment Date    ${today+1}    ${nan}    ${nan}    
    Create Schedule Payment    ${nan}    ${nan}    ${nan}    
    Navigate To Schedule Payments Tab    ${account_number}    ${invoice_number}    ${nan}    
    Validate Scheduled Payment Date Is Displayed    ${today+1}    ${nan}    ${nan}    
    Validate Scheduled Payment Origin Is Displyed    ${invoice_number}    ${PayNOW}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Select Payment Date
    [Arguments]    ${today+1}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${today+1}    ${nan}    ${nan}

Create Schedule Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Navigate To Schedule Payments Tab
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Scheduled Payment Date Is Displayed
    [Arguments]    ${today+1}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${today+1}    ${nan}    ${nan}

Validate Scheduled Payment Origin Is Displyed
    [Arguments]    ${invoice_number}    ${PayNOW}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${PayNOW}    ${nan}

","### Test Case Summary: TC_09 Validate Customer Is Able To View Scheduled Payment Date And Origin In Scheduled Payments

**Purpose:** 
This test case aims to verify that customers can view the details of scheduled payments within a financial management system, specifically the date each payment is scheduled and the origin of the payment.

**Context and Importance:**
Scheduled payments are a critical feature for many users who rely on automated transactions for bills, subscriptions, and other recurring charges. Ensuring that customers can see both the date when these payments are scheduled and the origin (such as the bank account, credit card, or digital wallet from which the payment will be deducted) is essential for transparency and user trust. This functionality helps customers manage their finances more effectively, avoiding missed"
Validate data-driven paynow test cases for SchedulePayment Testcases TC_10 Validate Merchant Is Able To Navigate To Invoice Page In Schedule Payments,data-driven,TC_10 Validate Merchant Is Able To Navigate To Invoice Page In Schedule Payments,"*** Settings ***
Documentation    Validate TC_10 Validate Merchant Is Able To Navigate To Invoice Page In Schedule Payments
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Merchant Is Able To Navigate To Invoice Page In Schedule Payments
    [Documentation]    Validate TC_10 Validate Merchant Is Able To Navigate To Invoice Page In Schedule Payments using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Select Payment Date    ${today+1}    ${nan}    ${nan}    
    Create Schedule Payment    ${nan}    ${nan}    ${nan}    
    Navigate To Schedule Payments Tab    ${account_number}    ${invoice_number}    ${nan}    
    Navigate To Invoice Page    ${invoice_number}    ${nan}    ${nan}    
    Validate Invoice Page Is Displayed    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${3.0}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Select Payment Date
    [Arguments]    ${today+1}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${today+1}    ${nan}    ${nan}

Create Schedule Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Navigate To Schedule Payments Tab
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Invoice Page
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Validate Invoice Page Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","The test case 'TC_10 Validate Merchant Is Able To Navigate To Invoice Page In Schedule Payments' is designed to ensure that merchants can successfully access the Invoice page from the Schedule Payments section of an application. The purpose of this test case is to verify the navigational functionality and confirm that it accurately directs the user to the Invoice page without errors or unnecessary delays. This ensures that merchants can efficiently manage their invoicing and payment scheduling tasks, thereby maintaining a seamless workflow within the platform. The test might include steps such as logging in as a merchant, navigating to the Schedule Payments section, and then selecting the option to view or create invoices, ensuring that each step leads to the desired outcome."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_01 Validate That Customer Is Able To Navigate To Invoice Page,data-driven,TC_01 Validate That Customer Is Able To Navigate To Invoice Page,"*** Settings ***
Documentation    Validate TC_01 Validate That Customer Is Able To Navigate To Invoice Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate That Customer Is Able To Navigate To Invoice Page
    [Documentation]    Validate TC_01 Validate That Customer Is Able To Navigate To Invoice Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Navigate To Invoice Page    ${invoice_number}    ${nan}    ${}    
    Validate Invoice Page Is Displayed    ${invoice_number}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Navigate To Invoice Page
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

Validate Invoice Page Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

","The test case ""TC_01 Validate That Customer Is Able To Navigate To Invoice Page"" aims to ensure that users can successfully reach the invoice page within an application or website. The primary purpose is to verify the navigation functionality, confirming that when a user selects the appropriate action or link for viewing invoices, they are redirected to the correct page without errors or issues.

To achieve this, the test case will likely include steps such as logging into the system, selecting the 'Invoices' option from a menu or dashboard, and verifying that the URL and displayed content match the expected invoice page. This test ensures a seamless user experience by allowing users to access their invoices easily and efficiently as part of routine activities like billing or payment tracking."
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_02 Validate That Customer Is Able To Expand And Collapse Line Items In Invoice Page,data-driven,TC_02 Validate That Customer Is Able To Expand And Collapse Line Items In Invoice Page,"*** Settings ***
Documentation    Validate TC_02 Validate That Customer Is Able To Expand And Collapse Line Items In Invoice Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate That Customer Is Able To Expand And Collapse Line Items In Invoice Page
    [Documentation]    Validate TC_02 Validate That Customer Is Able To Expand And Collapse Line Items In Invoice Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Navigate To Invoice Page    ${invoice_number}    ${nan}    ${}    
    Expand All Line Items    ${nan}    ${nan}    ${}    
    Validate Line Item Is Expanded    ${nan}    ${nan}    ${}    
    Collapse All Line Items    ${nan}    ${nan}    ${}    
    Validate Line Item Is Collapsed    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Navigate To Invoice Page
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

Expand All Line Items
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Line Item Is Expanded
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Collapse All Line Items
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Line Item Is Collapsed
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","**Test Case: TC_02 Validate That Customer Is Able To Expand And Collapse Line Items In Invoice Page**

**Purpose:**

The purpose of this test case is to ensure that customers can efficiently manage the visibility of detailed information for each line item on the invoice page of an application. Specifically, it aims to validate that:

1. **Expand Line Items:** Customers can click to expand individual line items on the invoice, which should reveal detailed information such as item description, quantity, price, and any other relevant data associated with that specific line item.

2. **Collapse Line Items:** Customers can click to collapse the expanded line items to hide the detailed information, ensuring a cleaner and more navigable interface.

This functionality is crucial for improving user experience by"
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_03 Validate That Customer Is Able To Expand And Collapse Line Items With '+ & -' Icons In invoice Page,data-driven,TC_03 Validate That Customer Is Able To Expand And Collapse Line Items With '+ & -' Icons In invoice Page,"*** Settings ***
Documentation    Validate TC_03 Validate That Customer Is Able To Expand And Collapse Line Items With '+ & -' Icons In invoice Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate That Customer Is Able To Expand And Collapse Line Items With '+ & -' Icons In invoice Page
    [Documentation]    Validate TC_03 Validate That Customer Is Able To Expand And Collapse Line Items With '+ & -' Icons In invoice Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Navigate To Invoice Page    ${invoice_number}    ${nan}    ${}    
    Expand Specific Line Item    ${nan}    ${nan}    ${}    
    Validate Line Item Is Expanded    ${nan}    ${nan}    ${}    
    Collapse Specific Line Item    ${nan}    ${nan}    ${}    
    Validate Line Item Is Collapsed    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Navigate To Invoice Page
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

Expand Specific Line Item
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Line Item Is Expanded
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Collapse Specific Line Item
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Line Item Is Collapsed
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","### Test Case Summary: TC_03 - Validate That Customer Is Able To Expand And Collapse Line Items With '+ & −' Icons In Invoice Page

**Purpose:**
The objective of Test Case TC_03 is to ensure that the functionality for expanding and collapsing line items in the Invoice Page of an application works as intended. This test case aims to verify that users can conveniently view detailed information of individual line items by expanding them and can minimize the clutter by collapsing these details when they are no longer needed. 

### Steps Involved:

1. **Navigate to Invoice Page:**
   - Log in as a valid customer.
   - Navigate to the section where past invoices or the particular invoice page is listed.

2. **Locate Line Items:**"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_04 Validate Customer Is Unable To Login Into Paynow With Empty Account Number And Invoice Number,data-driven,TC_04 Validate Customer Is Unable To Login Into Paynow With Empty Account Number And Invoice Number,"*** Settings ***
Documentation    Validate TC_04 Validate Customer Is Unable To Login Into Paynow With Empty Account Number And Invoice Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate Customer Is Unable To Login Into Paynow With Empty Account Number And Invoice Number
    [Documentation]    Validate TC_04 Validate Customer Is Unable To Login Into Paynow With Empty Account Number And Invoice Number using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${}    ${}    
    Enter Account Number And Invoice    ${nan}    ${}    ${}    
    Validate Error Message For Empty Login Details    ${nan}    ${}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${}    ${}

Enter Account Number And Invoice
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Validate Error Message For Empty Login Details
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

","The purpose of test case 'TC_04 Validate Customer Is Unable To Login Into Paynow With Empty Account Number And Invoice Number' is to ensure the application's login functionality enforces mandatory fields. Specifically, this test case verifies that customers cannot proceed with the login process on the Paynow platform if they leave the 'Account Number' and 'Invoice Number' fields blank. By validating this scenario, the test ensures the system's robustness in handling incomplete or invalid input, thereby maintaining data integrity and preventing unauthorized access or errors during transactions."
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_05 Validate Customer Is Able To Login Into Paynow With Empty Invoice Number,data-driven,TC_05 Validate Customer Is Able To Login Into Paynow With Empty Invoice Number,"*** Settings ***
Documentation    Validate TC_05 Validate Customer Is Able To Login Into Paynow With Empty Invoice Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Customer Is Able To Login Into Paynow With Empty Invoice Number
    [Documentation]    Validate TC_05 Validate Customer Is Able To Login Into Paynow With Empty Invoice Number using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${nan}    ${}    
    Validate Account Number Is Displayed    ${account_number}    ${SDT_account_number}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Validate Account Number Is Displayed
    [Arguments]    ${account_number}    ${SDT_account_number}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${SDT_account_number}    ${}

","The test case ""TC_05 Validate Customer Is Able To Login Into Paynow With Empty Invoice Number"" is designed to verify the system's behavior when a user attempts to log in to the Paynow platform without providing an invoice number. The purpose is to assess the robustness and error handling capabilities of the login functionality, ensuring that the system responds appropriately to missing critical data. This validation is crucial for maintaining data integrity and enhancing user experience by providing clear feedback or prompts when required information is not supplied."
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_07 Validate Integrated Customer Is Able To Save Credit Card Payment Method For Future Use,data-driven,TC_07 Validate Integrated Customer Is Able To Save Credit Card Payment Method For Future Use,"*** Settings ***
Documentation    Validate TC_07 Validate Integrated Customer Is Able To Save Credit Card Payment Method For Future Use
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Integrated Customer Is Able To Save Credit Card Payment Method For Future Use
    [Documentation]    Validate TC_07 Validate Integrated Customer Is Able To Save Credit Card Payment Method For Future Use using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Pay The Invoice Using Credit Card And Save The Payment Method    ${integrated_merchant}    ${4111111111111111}    ${12/26}    
    Validate Account Number Exists Under Saved Payment Method    ${411111}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using Credit Card And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${4111111111111111}    ${12/26}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${4111111111111111}    ${12/26}

Validate Account Number Exists Under Saved Payment Method
    [Arguments]    ${411111}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${411111}    ${nan}    ${nan}

","The test case 'TC_07 Validate Integrated Customer Is Able To Save Credit Card Payment Method For Future Use' aims to ensure that customers who are logged into an integrated system (such as an e-commerce platform or a financial application) can successfully save their credit card details for future transactions. 

### Purpose:
1. **Enhance User Experience**: Streamline the payment process for returning customers by allowing them to save credit card information, which reduces the need to enter payment details for every purchase.
2. **Functional Integrity**: Verify that the system correctly stores, retrieves, and manages credit card data in a secure manner.
3. **Security Compliance**: Ensure that the process complies with relevant security standards, such as PCI-DSS, to protect"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_06 Validate Integrated Customer Is Able To Click on Payment Secured Link And Close It,data-driven,TC_06 Validate Integrated Customer Is Able To Click on Payment Secured Link And Close It,"*** Settings ***
Documentation    Validate TC_06 Validate Integrated Customer Is Able To Click on Payment Secured Link And Close It
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_06 Validate Integrated Customer Is Able To Click on Payment Secured Link And Close It
    [Documentation]    Validate TC_06 Validate Integrated Customer Is Able To Click on Payment Secured Link And Close It using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${}    ${}    
    Validate Secure Payments Dialog Box Is Displayed    ${nan}    ${}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${}    ${}

Validate Secure Payments Dialog Box Is Displayed
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

","The purpose of the test case 'TC_06 Validate Integrated Customer Is Able To Click on Payment Secured Link And Close It' is to ensure that a user who is logged into an integrated system (e.g., a website or app) can successfully interact with the payment secured link. Specifically, the test case verifies that the customer can:

1. Locate and click on the payment secured link within the user interface.
2. Access the payment secure page or pop-up that appears upon clicking the link.
3. Close the payment secure page or pop-up successfully after it is displayed.

This test case ensures that the functionality related to secure payment links is working correctly, providing a seamless and secure user experience for completing transactions. The overall goal is to confirm that"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_08 Validate Integrated Customer Able To Add Two or More Credit Cards For Future Use,data-driven,TC_08 Validate Integrated Customer Able To Add Two or More Credit Cards For Future Use,"*** Settings ***
Documentation    Validate TC_08 Validate Integrated Customer Able To Add Two or More Credit Cards For Future Use
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_08 Validate Integrated Customer Able To Add Two or More Credit Cards For Future Use
    [Documentation]    Validate TC_08 Validate Integrated Customer Able To Add Two or More Credit Cards For Future Use using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Pay The Invoice Using Credit Card And Save The Payment Method    ${integrated_merchant}    ${4111111111111111}    ${12/26}    
    Pay The Invoice Using Credit Card And Save The Payment Method    ${integrated_merchant}    ${4005519200000004}    ${06/29}    
    Validate Account Number Exists Under Saved Payment Method    ${411111******1111}    ${nan}    ${nan}    
    Validate Account Number Exists Under Saved Payment Method    ${400551******0004}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using Credit Card And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${4111111111111111}    ${12/26}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${4111111111111111}    ${12/26}

Pay The Invoice Using Credit Card And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${4005519200000004}    ${06/29}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${4005519200000004}    ${06/29}

Validate Account Number Exists Under Saved Payment Method
    [Arguments]    ${411111******1111}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${411111******1111}    ${nan}    ${nan}

Validate Account Number Exists Under Saved Payment Method
    [Arguments]    ${400551******0004}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${400551******0004}    ${nan}    ${nan}

","**Test Case TC_08: Validate Integrated Customer Able to Add Two or More Credit Cards for Future Use**

**Purpose:**
The primary aim of this test case is to ensure that an integrated customer—one who has existing credentials and can access multiple services within the system—has the capability to securely add multiple credit cards to their account for future transactions. This functionality is crucial for user convenience and enhances the customer experience by providing flexibility in payment options.

**Objectives:**
1. Verify that the user interface allows the addition of multiple credit cards.
2. Ensure that the input fields for credit card details (e.g., card number, expiration date, CVV) accept valid values and provide validation for incorrect inputs.
3. Confirm that the system securely"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_09 Validate Integrated Customer Is Able To Add Two Or More ACHoreCheck Payment Method Of Same Account Type For Future Use,data-driven,TC_09 Validate Integrated Customer Is Able To Add Two Or More ACHoreCheck Payment Method Of Same Account Type For Future Use,"*** Settings ***
Documentation    Validate TC_09 Validate Integrated Customer Is Able To Add Two Or More ACHoreCheck Payment Method Of Same Account Type For Future Use
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_09 Validate Integrated Customer Is Able To Add Two Or More ACHoreCheck Payment Method Of Same Account Type For Future Use
    [Documentation]    Validate TC_09 Validate Integrated Customer Is Able To Add Two Or More ACHoreCheck Payment Method Of Same Account Type For Future Use using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Pay The Invoice Using ACH/Echeck And Save The Payment Method    ${integrated_merchant}    ${Business Checking}    ${12345.0}    
    Pay The Invoice Using ACH/Echeck And Save The Payment Method    ${integrated_merchant}    ${Business Checking}    ${23456.0}    
    Validate Account Number Exists Under Saved Payment Method    ${12}    ${nan}    ${nan}    
    Validate Account Number Exists Under Saved Payment Method    ${23}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using ACH/Echeck And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${Business Checking}    ${12345.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${Business Checking}    ${12345.0}

Pay The Invoice Using ACH/Echeck And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${Business Checking}    ${23456.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${Business Checking}    ${23456.0}

Validate Account Number Exists Under Saved Payment Method
    [Arguments]    ${12}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${12}    ${nan}    ${nan}

Validate Account Number Exists Under Saved Payment Method
    [Arguments]    ${23}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${23}    ${nan}    ${nan}

","**Test Case: TC_09 - Validate Integrated Customer Is Able To Add Two Or More ACH/Check Payment Methods Of Same Account Type For Future Use**

**Purpose:**

The purpose of this test case is to verify that an integrated customer (i.e., a user whose information and account are integrated within the system) can successfully add multiple ACH (Automated Clearing House) or check payment methods of the same account type for future transactions. Essentially, this test aims to ensure that the system allows for the storage and future use of more than one ACH/check payment method, even if they are of the same type (e.g., multiple checking accounts).

**Key Objectives:**

1. **Integration Check:** Confirm that the customer’s integrated profile correctly supports"
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_10 Validate Integrated Customer Is Able To Save ACHorEcheck For Future Use With Account Type - Business Savings,data-driven,TC_10 Validate Integrated Customer Is Able To Save ACHorEcheck For Future Use With Account Type - Business Savings,"*** Settings ***
Documentation    Validate TC_10 Validate Integrated Customer Is Able To Save ACHorEcheck For Future Use With Account Type - Business Savings
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Integrated Customer Is Able To Save ACHorEcheck For Future Use With Account Type - Business Savings
    [Documentation]    Validate TC_10 Validate Integrated Customer Is Able To Save ACHorEcheck For Future Use With Account Type - Business Savings using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Pay The Invoice Using ACH/Echeck And Save The Payment Method    ${integrated_merchant}    ${Business Savings}    ${ACH_ECHECK_DETAILS}    
    Validate Account Number Exists Under Saved Payment Method    ${11}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using ACH/Echeck And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${Business Savings}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${Business Savings}    ${ACH_ECHECK_DETAILS}

Validate Account Number Exists Under Saved Payment Method
    [Arguments]    ${11}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${11}    ${nan}    ${nan}

","The test case ""TC_10 Validate Integrated Customer Is Able To Save ACHorEcheck For Future Use With Account Type - Business Savings"" aims to ensure that customers who have integrated their accounts with a payment platform can successfully save their ACH (Automated Clearing House) or e-check information for future transactions. Specifically, this validation focuses on the functionality for the 'Business Savings' account type. 

The purpose of this test case is to confirm that:
1. The system allows the customer to enter and save their ACH/e-check details.
2. The saved payment information is securely stored and can be retrieved for future use.
3. The process meets all required security and compliance standards applicable to handling sensitive financial data.
4. The operation is seamless and user"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_11 Validate Integrated Customer Is Able To Save ACHorEcheck for future Use With Account Type - Personal Checking,data-driven,TC_11 Validate Integrated Customer Is Able To Save ACHorEcheck for future Use With Account Type - Personal Checking,"*** Settings ***
Documentation    Validate TC_11 Validate Integrated Customer Is Able To Save ACHorEcheck for future Use With Account Type - Personal Checking
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_11 Validate Integrated Customer Is Able To Save ACHorEcheck for future Use With Account Type - Personal Checking
    [Documentation]    Validate TC_11 Validate Integrated Customer Is Able To Save ACHorEcheck for future Use With Account Type - Personal Checking using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Pay The Invoice Using ACH/Echeck And Save The Payment Method    ${integrated_merchant}    ${Personal Checking}    ${ACH_ECHECK_DETAILS}    
    Validate Account Number Exists Under Saved Payment Method    ${11}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using ACH/Echeck And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${Personal Checking}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${Personal Checking}    ${ACH_ECHECK_DETAILS}

Validate Account Number Exists Under Saved Payment Method
    [Arguments]    ${11}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${11}    ${nan}    ${nan}

","The purpose of test case 'TC_11 Validate Integrated Customer Is Able To Save ACH or E-check for Future Use With Account Type - Personal Checking' is to ensure that customers who have integrated their accounts with the system can successfully save their Automated Clearing House (ACH) or e-check payment information for future transactions. Specifically, the test case focuses on verifying that the payment method is correctly saved when the account type is designated as 'Personal Checking'. The objective is to confirm that the functionality works as intended, allowing seamless future payments for users without the need to re-enter their banking details each time they make a purchase or a transaction. This test case helps in enhancing user convenience and improving the overall user experience by providing a reliable and secure method for saving and re"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_12 Validate Integrated Customer Is Able To Save ACHorEcheck for future Use With Account Type - Personal Savings,data-driven,TC_12 Validate Integrated Customer Is Able To Save ACHorEcheck for future Use With Account Type - Personal Savings,"*** Settings ***
Documentation    Validate TC_12 Validate Integrated Customer Is Able To Save ACHorEcheck for future Use With Account Type - Personal Savings
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Integrated Customer Is Able To Save ACHorEcheck for future Use With Account Type - Personal Savings
    [Documentation]    Validate TC_12 Validate Integrated Customer Is Able To Save ACHorEcheck for future Use With Account Type - Personal Savings using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Pay The Invoice Using ACH/Echeck And Save The Payment Method    ${integrated_merchant}    ${Personal Savings}    ${ACH_ECHECK_DETAILS}    
    Validate Account Number Exists Under Saved Payment Method    ${11}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using ACH/Echeck And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${Personal Savings}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${Personal Savings}    ${ACH_ECHECK_DETAILS}

Validate Account Number Exists Under Saved Payment Method
    [Arguments]    ${11}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${11}    ${nan}    ${nan}

","**Test Case Summary:**

**Title:**
TC_12 Validate Integrated Customer Is Able To Save ACH or Echeck for Future Use With Account Type - Personal Savings

**Purpose:**
The purpose of Test Case TC_12 is to ensure that an integrated customer using the system can successfully save Automated Clearing House (ACH) or electronic check (eCheck) payment information for future transactions. Specifically, this test case focuses on the scenario where the payment method being saved is linked to a 'Personal Savings' account type.

**Objectives:**
1. Validate that the user interface prompts the customer to enter necessary details for ACH/eCheck payment.
2. Confirm that the system correctly identifies and accepts 'Personal Savings' as the account type during the payment information"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_13 Validate Integrated Customer Is Able To Save ACHorEcheck For Future Use With Account Type - Business Checking,data-driven,TC_13 Validate Integrated Customer Is Able To Save ACHorEcheck For Future Use With Account Type - Business Checking,"*** Settings ***
Documentation    Validate TC_13 Validate Integrated Customer Is Able To Save ACHorEcheck For Future Use With Account Type - Business Checking
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_13 Validate Integrated Customer Is Able To Save ACHorEcheck For Future Use With Account Type - Business Checking
    [Documentation]    Validate TC_13 Validate Integrated Customer Is Able To Save ACHorEcheck For Future Use With Account Type - Business Checking using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Pay The Invoice Using ACH/Echeck And Save The Payment Method    ${integrated_merchant}    ${Business Checking}    ${ACH_ECHECK_DETAILS}    
    Validate Account Number Exists Under Saved Payment Method    ${11}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using ACH/Echeck And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${Business Checking}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${Business Checking}    ${ACH_ECHECK_DETAILS}

Validate Account Number Exists Under Saved Payment Method
    [Arguments]    ${11}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${11}    ${nan}    ${nan}

","The test case ""TC_13 Validate Integrated Customer Is Able To Save ACH or E-check For Future Use With Account Type - Business Checking"" is designed to verify that a customer, whose account is integrated with the system, can securely and successfully save their Automated Clearing House (ACH) or electronic check (E-check) payment information for future transactions, specifically when their account type is set to ""Business Checking.""

### Purpose:
1. **Functionality Validation**: The test ensures that the system correctly allows a Business Checking account customer to save their ACH/E-check information for streamlined future payments, without having to re-enter the information every time.
2. **User Experience**: It assesses the user interface and user experience, ensuring the process is straightforward, user"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_14 Validate Integrated Customer Is Able To Save All Account Type In ACHorEcheck Payment Method For Future Use,data-driven,TC_14 Validate Integrated Customer Is Able To Save All Account Type In ACHorEcheck Payment Method For Future Use,"*** Settings ***
Documentation    Validate TC_14 Validate Integrated Customer Is Able To Save All Account Type In ACHorEcheck Payment Method For Future Use
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_14 Validate Integrated Customer Is Able To Save All Account Type In ACHorEcheck Payment Method For Future Use
    [Documentation]    Validate TC_14 Validate Integrated Customer Is Able To Save All Account Type In ACHorEcheck Payment Method For Future Use using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Pay The Invoice Using ACH/Echeck And Save The Payment Method    ${integrated_merchant}    ${Business Checking}    ${12345.0}    
    Pay The Invoice Using ACH/Echeck And Save The Payment Method    ${integrated_merchant}    ${Business Savings}    ${23456.0}    
    Pay The Invoice Using ACH/Echeck And Save The Payment Method    ${integrated_merchant}    ${Personal Checking}    ${34567.0}    
    Pay The Invoice Using ACH/Echeck And Save The Payment Method    ${integrated_merchant}    ${Personal Savings}    ${45678.0}    
    Validate Account Number Exists Under Saved Payment Method    ${12}    ${nan}    ${nan}    
    Validate Account Number Exists Under Saved Payment Method    ${23}    ${nan}    ${nan}    
    Validate Account Number Exists Under Saved Payment Method    ${34}    ${nan}    ${nan}    
    Validate Account Number Exists Under Saved Payment Method    ${78}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using ACH/Echeck And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${Business Checking}    ${12345.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${Business Checking}    ${12345.0}

Pay The Invoice Using ACH/Echeck And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${Business Savings}    ${23456.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${Business Savings}    ${23456.0}

Pay The Invoice Using ACH/Echeck And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${Personal Checking}    ${34567.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${Personal Checking}    ${34567.0}

Pay The Invoice Using ACH/Echeck And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${Personal Savings}    ${45678.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${Personal Savings}    ${45678.0}

Validate Account Number Exists Under Saved Payment Method
    [Arguments]    ${12}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${12}    ${nan}    ${nan}

Validate Account Number Exists Under Saved Payment Method
    [Arguments]    ${23}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${23}    ${nan}    ${nan}

Validate Account Number Exists Under Saved Payment Method
    [Arguments]    ${34}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${34}    ${nan}    ${nan}

Validate Account Number Exists Under Saved Payment Method
    [Arguments]    ${78}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${78}    ${nan}    ${nan}

","The test case 'TC_14 Validate Integrated Customer Is Able To Save All Account Type In ACH or Echeck Payment Method For Future Use' aims to verify that the software system correctly allows an integrated customer to save different types of bank accounts (such as checking, savings, etc.) when making payments through the ACH (Automated Clearing House) or Echeck payment methods. The primary purpose of this test case is to ensure that once a customer sets up their account details for these payment methods, they should be able to securely save this information for future transactions. This ability enhances user convenience by precluding the need to re-enter bank details for each transaction and ensures that the system supports the functionality as intended."
Build data-driven paynow test cases for Sterlingcooper Testcases TC_15 Validate Integrated Customer Is Able To Click On 'Find Routing Number' In ACHorEcheck,data-driven,TC_15 Validate Integrated Customer Is Able To Click On 'Find Routing Number' In ACHorEcheck,"*** Settings ***
Documentation    Validate TC_15 Validate Integrated Customer Is Able To Click On 'Find Routing Number' In ACHorEcheck
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Integrated Customer Is Able To Click On 'Find Routing Number' In ACHorEcheck
    [Documentation]    Validate TC_15 Validate Integrated Customer Is Able To Click On 'Find Routing Number' In ACHorEcheck using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${}    
    Validate Find Routing Number Popover Is Displayed    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${}

Validate Find Routing Number Popover Is Displayed
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The purpose of the test case 'TC_15 Validate Integrated Customer Is Able To Click On 'Find Routing Number' In ACHorEcheck' is to verify that an integrated customer (one who has access to financial transaction features) can successfully navigate and interact with the 'Find Routing Number' functionality within the ACH (Automated Clearing House) or E-check section of the application.

Key Objectives:
1. Ensure the integrated customer can locate the 'Find Routing Number' option.
2. Validate that clicking on this option operates correctly, leading to the appropriate action, such as displaying an interface or assistance to find the routing number.
3. Confirm that the feature works without any technical errors or usability issues, thereby facilitating seamless ACH or E-check transactions.

The"
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_16 Validate Customer Is Able To Verify Paid Invoices After Processing Payment,data-driven,TC_16 Validate Customer Is Able To Verify Paid Invoices After Processing Payment,"*** Settings ***
Documentation    Validate TC_16 Validate Customer Is Able To Verify Paid Invoices After Processing Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_16 Validate Customer Is Able To Verify Paid Invoices After Processing Payment
    [Documentation]    Validate TC_16 Validate Customer Is Able To Verify Paid Invoices After Processing Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${integrated_merchant}    ${account_number}    ${invoice_number}    
    Navigate To Menu Tab    ${Paid Invoices}    ${nan}    ${nan}    
    Validate Invoice Status Is Paid    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${integrated_merchant}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${account_number}    ${invoice_number}

Navigate To Menu Tab
    [Arguments]    ${Paid Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Paid Invoices}    ${nan}    ${nan}

Validate Invoice Status Is Paid
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","**Test Case Summary: TC_16 Validate Customer Is Able To Verify Paid Invoices After Processing Payment**

**Purpose:**

The purpose of this test case is to ensure that once a customer processes a payment for any pending invoices, they are subsequently able to access, verify, and confirm that these invoices are marked as 'Paid' within the system. This validation covers several key aspects:

1. **Payment Processing:** Ensures that the payment transaction is successfully recorded and applied to the correct invoice(s) without errors.
2. **Invoice Status Update:** Confirms that the status of the invoice changes appropriately from 'Pending' or 'Unpaid' to 'Paid' after the payment is processed.
3. **Customer Access:** Verifies that the customer"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_17 Validate That The Customer Is Able To Navigate To Invoice Page From Paid Invoices,data-driven,TC_17 Validate That The Customer Is Able To Navigate To Invoice Page From Paid Invoices,"*** Settings ***
Documentation    Validate TC_17 Validate That The Customer Is Able To Navigate To Invoice Page From Paid Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_17 Validate That The Customer Is Able To Navigate To Invoice Page From Paid Invoices
    [Documentation]    Validate TC_17 Validate That The Customer Is Able To Navigate To Invoice Page From Paid Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${integrated_merchant}    ${account_number}    ${invoice_number}    
    Navigate To Menu Tab    ${Paid Invoices}    ${nan}    ${nan}    
    Navigate To Invoice Page    ${invoice_number}    ${nan}    ${nan}    
    Validate Invoice Page Is Displayed    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${integrated_merchant}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${account_number}    ${invoice_number}

Navigate To Menu Tab
    [Arguments]    ${Paid Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Paid Invoices}    ${nan}    ${nan}

Navigate To Invoice Page
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Validate Invoice Page Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","**Summary of Test Case TC_17: Validate That The Customer Is Able To Navigate To Invoice Page From Paid Invoices**

**Purpose:**
This test case aims to verify that customers can successfully navigate from the 'Paid Invoices' section to the detailed 'Invoice Page' within the application. The primary goal is to ensure that all interactions and navigation pathways work as intended, allowing users to access detailed information about their paid invoices.

**Key Objectives:**

1. **User Interface Verification:** Confirm that the 'Paid Invoices' section is accessible from the main dashboard or relevant menu.
2. **Navigation Functionality:** Ensure that clicking on a paid invoice within the 'Paid Invoices' list redirects the customer to the corresponding detailed 'Invoice Page'."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_18 Validate That The Customer Is Able To View Paid Payment Status On Invoice Page,data-driven,TC_18 Validate That The Customer Is Able To View Paid Payment Status On Invoice Page,"*** Settings ***
Documentation    Validate TC_18 Validate That The Customer Is Able To View Paid Payment Status On Invoice Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_18 Validate That The Customer Is Able To View Paid Payment Status On Invoice Page
    [Documentation]    Validate TC_18 Validate That The Customer Is Able To View Paid Payment Status On Invoice Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${integrated_merchant}    ${account_number}    ${invoice_number}    
    Navigate To Menu Tab    ${Paid Invoices}    ${nan}    ${nan}    
    Validate Invoice Status Is Paid    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${integrated_merchant}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${account_number}    ${invoice_number}

Navigate To Menu Tab
    [Arguments]    ${Paid Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Paid Invoices}    ${nan}    ${nan}

Validate Invoice Status Is Paid
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","**Test Case Summary: ""TC_18 Validate That The Customer Is Able To View Paid Payment Status On Invoice Page""**

**Purpose:**

The objective of this test case is to ensure that customers can see the payment status marked as ""Paid"" on the invoice page after they have successfully completed a payment. This validation is crucial for customer transparency and satisfaction, as it confirms that their payment has been processed correctly and reflects accurately in their records.

**Key Steps Involved:**

1. **Navigate to the Invoice Page:** The user must access the invoice page, typically by logging into their account and selecting the relevant invoice from their transaction history.

2. **Completed Payment:** Ensure that the payment process for the selected invoice has been completed prior to checking"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_19 Validate Customer Is Able Resume The Process Payment After Resolving Errors,data-driven,TC_19 Validate Customer Is Able Resume The Process Payment After Resolving Errors,"*** Settings ***
Documentation    Validate TC_19 Validate Customer Is Able Resume The Process Payment After Resolving Errors
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_19 Validate Customer Is Able Resume The Process Payment After Resolving Errors
    [Documentation]    Validate TC_19 Validate Customer Is Able Resume The Process Payment After Resolving Errors using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${}    
    Enter ACH/ECheck Details    ${12345}    ${123456789}    ${}    
    Save Payment Method For Future Use    ${ACH / eCheck}    ${nickname}    ${}    
    Validate Error Message Is Displayed    ${Invalid Routing Number}    ${nan}    ${}    
    Enter ACH/ECheck Details    ${ACH_ECHECK_DETAILS}    ${nan}    ${}    
    Process Invoice Payment    ${nan}    ${nan}    ${}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${}

Enter ACH/ECheck Details
    [Arguments]    ${12345}    ${123456789}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${12345}    ${123456789}    ${}

Save Payment Method For Future Use
    [Arguments]    ${ACH / eCheck}    ${nickname}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nickname}    ${}

Validate Error Message Is Displayed
    [Arguments]    ${Invalid Routing Number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Invalid Routing Number}    ${nan}    ${}

Enter ACH/ECheck Details
    [Arguments]    ${ACH_ECHECK_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH_ECHECK_DETAILS}    ${nan}    ${}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","**Test Case Summary: TC_19 - Validate Customer Is Able to Resume the Payment Process After Resolving Errors**

**Purpose:**
The primary objective of this test case is to ensure that customers can successfully continue and complete the payment process after encountering and resolving errors. This involves verifying that the system correctly handles payment disruptions, provides relevant error messages or prompts to users, and allows them to rectify the issues and continue without having to restart the entire payment process.

The test aims to validate:
1. **Error Detection:** The system accurately identifies errors related to payments (e.g., incorrect card details, insufficient funds, network issues).
2. **User Notification:** Appropriate and clear error messages are displayed to inform the customer of the issues.
3. **Error"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_20 Validate Customer Is Able To Navigate To Gounified Website From PayNOW Application,data-driven,TC_20 Validate Customer Is Able To Navigate To Gounified Website From PayNOW Application,"*** Settings ***
Documentation    Validate TC_20 Validate Customer Is Able To Navigate To Gounified Website From PayNOW Application
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_20 Validate Customer Is Able To Navigate To Gounified Website From PayNOW Application
    [Documentation]    Validate TC_20 Validate Customer Is Able To Navigate To Gounified Website From PayNOW Application using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Validate Cloud Based Modular Page Is Displayed    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Validate Cloud Based Modular Page Is Displayed
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","### Summary for Test Case: TC_20 Validate Customer Is Able To Navigate To Gounified Website From PayNOW Application

#### Purpose:
The primary goal of this test case is to ensure that customers using the PayNOW application can successfully navigate to the Gounified website. This involves verifying that any links, buttons, or calls to action within the PayNOW application that are intended to direct the user to the Gounified website are functioning as expected. 

#### Objectives:
1. **Verification of Navigation Paths**: Confirm that all designed navigation pathways from PayNOW to the Gounified website are active and lead to the correct web address.
2. **User Experience**: Ensure that the transition from the PayNOW application to the Gounified"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_21 Validate Customer Is Able To Navigate To PayNOW Application From Payment Receipt Page,data-driven,TC_21 Validate Customer Is Able To Navigate To PayNOW Application From Payment Receipt Page,"*** Settings ***
Documentation    Validate TC_21 Validate Customer Is Able To Navigate To PayNOW Application From Payment Receipt Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_21 Validate Customer Is Able To Navigate To PayNOW Application From Payment Receipt Page
    [Documentation]    Validate TC_21 Validate Customer Is Able To Navigate To PayNOW Application From Payment Receipt Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Use Valid Check And Pay The Amount    ${1}    ${Business Checking}    ${ACH_ECHECK_DETAILS}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Return To Open Invoices Page    ${nan}    ${nan}    ${nan}    
    Validate Account Number Is Displayed    ${account_number}    ${SDTaccount_number}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}

Use Valid Check And Pay The Amount
    [Arguments]    ${1}    ${Business Checking}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${1}    ${Business Checking}    ${ACH_ECHECK_DETAILS}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Return To Open Invoices Page
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Account Number Is Displayed
    [Arguments]    ${account_number}    ${SDTaccount_number}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${SDTaccount_number}    ${nan}

","The purpose of the test case 'TC_21 Validate Customer Is Able To Navigate To PayNOW Application From Payment Receipt Page' is to ensure that a customer, after completing a payment transaction and receiving the payment receipt, can successfully navigate to the PayNOW application. This test case verifies the seamless transition and functionality of the user interface, ensuring that the link or button to the PayNOW application is present, correctly placed, and functioning as intended. It aims to enhance user experience by providing a smooth and intuitive workflow for customers needing to access the PayNOW application post-payment confirmation."
Build data-driven paynow test cases for Sterlingcooper Testcases TC_22 Validate Customer Is Able To View Paid Invoices Depending On Selected Start Date And End Date,data-driven,TC_22 Validate Customer Is Able To View Paid Invoices Depending On Selected Start Date And End Date,"*** Settings ***
Documentation    Validate TC_22 Validate Customer Is Able To View Paid Invoices Depending On Selected Start Date And End Date
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Customer Is Able To View Paid Invoices Depending On Selected Start Date And End Date
    [Documentation]    Validate TC_22 Validate Customer Is Able To View Paid Invoices Depending On Selected Start Date And End Date using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${integrated_merchant}    ${account_number}    ${invoice_number}    
    Navigate To Menu Tab    ${Paid Invoices}    ${nan}    ${nan}    
    Select Date Range From Calendar    ${15}    ${18}    ${nan}    
    Validate Invoice Number Is Displayed    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${integrated_merchant}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${account_number}    ${invoice_number}

Navigate To Menu Tab
    [Arguments]    ${Paid Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Paid Invoices}    ${nan}    ${nan}

Select Date Range From Calendar
    [Arguments]    ${15}    ${18}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${15}    ${18}    ${nan}

Validate Invoice Number Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","The test case 'TC_22 Validate Customer Is Able To View Paid Invoices Depending On Selected Start Date And End Date' aims to ensure that the application correctly displays a list of paid invoices to the customer when they specify a start and end date. The purpose of this test is to verify that the date filtering functionality works as intended, confirming that the system retrieves and presents only those invoices that were paid within the selected date range.

This involves checking that the user interface correctly allows the user to input and select the desired date range, and that the backend accurately processes these dates to query the relevant invoices. The expected outcome is that the system should display a list of paid invoices that fall within the specified dates, and the user should not see any invoices outside"
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_23 Validate Customer Is Not Able To Process Partial Payment For More Than Two Invoices Without Giving Notes For All,data-driven,TC_23 Validate Customer Is Not Able To Process Partial Payment For More Than Two Invoices Without Giving Notes For All,"*** Settings ***
Documentation    Validate TC_23 Validate Customer Is Not Able To Process Partial Payment For More Than Two Invoices Without Giving Notes For All
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_23 Validate Customer Is Not Able To Process Partial Payment For More Than Two Invoices Without Giving Notes For All
    [Documentation]    Validate TC_23 Validate Customer Is Not Able To Process Partial Payment For More Than Two Invoices Without Giving Notes For All using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Create Multiple Invoices Through API    ${account_number}    ${integrated_merchant}    ${}    
    Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice.0}    ${}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${}    
    Validate Total Amount After Selecting Invoices    ${Total Payment Amount: $195.98}    ${nan}    ${}    
    Select Multiple Invoices    ${invoice}    ${nan}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${}    
    Validate Error Message Is Displayed    ${Please specify a Note in the invoice grid for any invoices that are not being paid in full.}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Create Multiple Invoices Through API
    [Arguments]    ${account_number}    ${integrated_merchant}    ${}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${account_number}    ${integrated_merchant}    ${}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice.0}    ${}
    [Return]    ${float}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice.0}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${}

Validate Total Amount After Selecting Invoices
    [Arguments]    ${Total Payment Amount: $195.98}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Total Payment Amount: $195.98}    ${nan}    ${}

Select Multiple Invoices
    [Arguments]    ${invoice}    ${nan}    ${}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${invoice}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${}

Validate Error Message Is Displayed
    [Arguments]    ${Please specify a Note in the invoice grid for any invoices that are not being paid in full.}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Please specify a Note in the invoice grid for any invoices that are not being paid in full.}    ${nan}    ${}

","The test case 'TC_23 Validate Customer Is Not Able To Process Partial Payment For More Than Two Invoices Without Giving Notes For All' is designed to ensure the proper functioning of a billing or payment processing system with a specific restriction.

### Purpose:
- **Validation of Payment Rules**: The test checks that the system enforces a rule where a customer is not allowed to make partial payments for more than two invoices unless they provide notes explaining the partial payments for each of the invoices.
- **User Prompt and Compliance**: The purpose is to ensure that users comply with the requirement of providing an explanation when processing multiple partial payments, thereby capturing necessary information for partial payments which might be crucial for auditing and customer service.
- **System Integrity and User Guidance"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_24 Validate Customer Is Unable To Change Amount To Pay To A Negative Value Or Value More Than Amount Due,data-driven,TC_24 Validate Customer Is Unable To Change Amount To Pay To A Negative Value Or Value More Than Amount Due,"*** Settings ***
Documentation    Validate TC_24 Validate Customer Is Unable To Change Amount To Pay To A Negative Value Or Value More Than Amount Due
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_24 Validate Customer Is Unable To Change Amount To Pay To A Negative Value Or Value More Than Amount Due
    [Documentation]    Validate TC_24 Validate Customer Is Unable To Change Amount To Pay To A Negative Value Or Value More Than Amount Due using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}    
    Select Specific Invoice And Enter Amount    ${invoice_number}    ${-10}    ${}    
    Add Reason For Less Than Due Amount    ${invoice_number}    ${Testing}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${}    
    Validate Error Message Is Displayed    ${You cannot pay a negative amount on an invoice}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}

Select Specific Invoice And Enter Amount
    [Arguments]    ${invoice_number}    ${-10}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${-10}    ${}

Add Reason For Less Than Due Amount
    [Arguments]    ${invoice_number}    ${Testing}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${Testing}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${}

Validate Error Message Is Displayed
    [Arguments]    ${You cannot pay a negative amount on an invoice}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${You cannot pay a negative amount on an invoice}    ${nan}    ${}

","The test case 'TC_24 Validate Customer Is Unable To Change Amount To Pay To A Negative Value Or Value More Than Amount Due' aims to ensure that a system handling customer payments enforces appropriate restrictions on the amount the customer can designate to pay on their invoice or bill.

### Purpose:
1. **Prevent Overpayment or Erroneous Payment Entries:** Ensure that customers cannot input a negative amount as the payment amount, which would be illogical and likely a result of an error or misuse.
2. **Prevent Excessive Payment Entries:** Ensure that customers cannot input a value greater than the total amount due. This prevents overpayment which could lead to complications in payment processing and financial reconciliation.

### Expected Results:
- **Negative Values:** If a customer"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_25 Validate Customer Is Unable To Process Payment With Negative Amount Due,data-driven,TC_25 Validate Customer Is Unable To Process Payment With Negative Amount Due,"*** Settings ***
Documentation    Validate TC_25 Validate Customer Is Unable To Process Payment With Negative Amount Due
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_25 Validate Customer Is Unable To Process Payment With Negative Amount Due
    [Documentation]    Validate TC_25 Validate Customer Is Unable To Process Payment With Negative Amount Due using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Select Specific Invoice And Enter Amount    ${invoice_number}    ${10}    ${nan}    
    Add Reason For Less Than Due Amount    ${invoice_number}    ${Testing}    ${nan}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}    
    Validate Error Message Is Displayed    ${You cannot take a positive amount on a credit}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}

Select Specific Invoice And Enter Amount
    [Arguments]    ${invoice_number}    ${10}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${10}    ${nan}

Add Reason For Less Than Due Amount
    [Arguments]    ${invoice_number}    ${Testing}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${Testing}    ${nan}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Validate Error Message Is Displayed
    [Arguments]    ${You cannot take a positive amount on a credit}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${You cannot take a positive amount on a credit}    ${nan}    ${nan}

","### Summary of Test Case 'TC_25: Validate Customer Is Unable To Process Payment With Negative Amount Due'

#### **Purpose:**
The primary objective of this test case is to ensure that the payment processing system effectively prevents transactions when a customer attempts to process a payment with a negative amount. This validation helps maintain the integrity and correctness of financial transactions within the system.

#### **Key Goals:**

1. **Error Handling:** Verify that the system properly identifies and handles scenarios where a negative payment amount is entered.
2. **User Feedback:** Ensure that an appropriate error message is displayed to the user, providing clear information about the restriction against processing negative payment amounts.
3. **Data Integrity:** Confirm that no negative payment transactions are processed or recorded in the"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_26 Validate Customer Is Able To Process Payment By Using Saved Credit Card Payment Method,data-driven,TC_26 Validate Customer Is Able To Process Payment By Using Saved Credit Card Payment Method,"*** Settings ***
Documentation    Validate TC_26 Validate Customer Is Able To Process Payment By Using Saved Credit Card Payment Method
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_26 Validate Customer Is Able To Process Payment By Using Saved Credit Card Payment Method
    [Documentation]    Validate TC_26 Validate Customer Is Able To Process Payment By Using Saved Credit Card Payment Method using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Pay The Invoice Using Credit Card And Save The Payment Method    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}    
    Select Use Saved Payment Method    ${nan}    ${nan}    ${nan}    
    Select Any Saved Payment Method    ${41111}    ${nan}    ${nan}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${nan}    
    Enter Lumpsum Amount    ${10}    ${nan}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using Credit Card And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}

Select Use Saved Payment Method
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Any Saved Payment Method
    [Arguments]    ${41111}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${41111}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${nan}

Enter Lumpsum Amount
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The purpose of the test case 'TC_26 Validate Customer Is Able To Process Payment By Using Saved Credit Card Payment Method' is to ensure that customers can seamlessly complete transactions using previously saved credit card information. This test aims to verify the functionality and usability of the saved credit card payment option within the checkout process. It tests whether customers can select their saved credit card, all necessary payment information is auto-filled and processed correctly, and the transaction is successfully completed without errors. By validating this functionality, the test ensures a streamlined and convenient payment experience for customers, enhancing overall user satisfaction."
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_27 Validate Customer Is Able To Edit Only The Nickname Of The Customer In The Saved Payment Method,data-driven,TC_27 Validate Customer Is Able To Edit Only The Nickname Of The Customer In The Saved Payment Method,"*** Settings ***
Documentation    Validate TC_27 Validate Customer Is Able To Edit Only The Nickname Of The Customer In The Saved Payment Method
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_27 Validate Customer Is Able To Edit Only The Nickname Of The Customer In The Saved Payment Method
    [Documentation]    Validate TC_27 Validate Customer Is Able To Edit Only The Nickname Of The Customer In The Saved Payment Method using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Pay The Invoice Using Credit Card And Save The Payment Method    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}    
    Select Use Saved Payment Method    ${nan}    ${nan}    ${nan}    
    Select Any Saved Payment Method    ${41111}    ${nan}    ${nan}    
    Edit Nickname Of Saved Payment Method    ${41111}    ${Visa card}    ${nan}    
    Validate Nickname Of Saved Payment Method Is Edited    ${Visa credit card}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using Credit Card And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}

Select Use Saved Payment Method
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Any Saved Payment Method
    [Arguments]    ${41111}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${41111}    ${nan}    ${nan}

Edit Nickname Of Saved Payment Method
    [Arguments]    ${41111}    ${Visa card}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${41111}    ${Visa card}    ${nan}

Validate Nickname Of Saved Payment Method Is Edited
    [Arguments]    ${Visa credit card}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Visa credit card}    ${nan}    ${nan}

","The test case 'TC_27 Validate Customer Is Able To Edit Only The Nickname Of The Customer In The Saved Payment Method' aims to verify that a customer has the capability to modify only the nickname associated with a saved payment method in their profile or account settings. The purpose of this test case is to ensure that the system restricts editing capabilities in such a way that the critical payment details (such as card number, expiry date, and CVV) remain unalterable for security reasons, while allowing users the flexibility to change the nickname to something more relevant or convenient for their reference. The test will confirm that the user can successfully update the nickname and that the change is reflected correctly without impacting other payment information."
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_28 Validate Customer Is Able To Close(X) The Delete Payment Method Confirmation Pop-Up Window,data-driven,TC_28 Validate Customer Is Able To Close(X) The Delete Payment Method Confirmation Pop-Up Window,"*** Settings ***
Documentation    Validate TC_28 Validate Customer Is Able To Close(X) The Delete Payment Method Confirmation Pop-Up Window
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_28 Validate Customer Is Able To Close(X) The Delete Payment Method Confirmation Pop-Up Window
    [Documentation]    Validate TC_28 Validate Customer Is Able To Close(X) The Delete Payment Method Confirmation Pop-Up Window using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Pay The Invoice Using Credit Card And Save The Payment Method    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}    
    Select Use Saved Payment Method    ${nan}    ${nan}    ${nan}    
    Select Any Saved Payment Method    ${41111}    ${nan}    ${nan}    
    Close Delete Payment Method Confirmation Dialog Box    ${41111}    ${nan}    ${nan}    
    Validate Delete Payment Method Confirmation Dialog Box Is Closed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using Credit Card And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}

Select Use Saved Payment Method
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Any Saved Payment Method
    [Arguments]    ${41111}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${41111}    ${nan}    ${nan}

Close Delete Payment Method Confirmation Dialog Box
    [Arguments]    ${41111}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${41111}    ${nan}    ${nan}

Validate Delete Payment Method Confirmation Dialog Box Is Closed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_28 Validate Customer Is Able To Close(X) The Delete Payment Method Confirmation Pop-Up Window' is designed to ensure that users can close the confirmation pop-up window that appears when they attempt to delete a saved payment method. This functionality is critical, as it allows users to easily dismiss the pop-up without making any changes if they choose not to proceed with the deletion. The purpose of this test case is to verify the presence and functionality of the close (X) button in the confirmation dialog and to confirm that clicking this button properly cancels the deletion action and closes the pop-up without affecting the user's payment methods. This helps enhance user experience by giving them an intuitive and easy way to back out of a potentially irreversible action."
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_29 Validate Customer Is Able To Delete Saved Payment Method,data-driven,TC_29 Validate Customer Is Able To Delete Saved Payment Method,"*** Settings ***
Documentation    Validate TC_29 Validate Customer Is Able To Delete Saved Payment Method
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_29 Validate Customer Is Able To Delete Saved Payment Method
    [Documentation]    Validate TC_29 Validate Customer Is Able To Delete Saved Payment Method using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Pay The Invoice Using Credit Card And Save The Payment Method    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}    
    Select Use Saved Payment Method    ${nan}    ${nan}    ${nan}    
    Select Any Saved Payment Method    ${41111}    ${nan}    ${nan}    
    Delete Saved Payment Method    ${41111}    ${nan}    ${nan}    
    Validate Saved Payment Method Is Deleted    ${41111}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using Credit Card And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${CREDIT_CARD_DETAILS}    ${Visa card}

Select Use Saved Payment Method
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Any Saved Payment Method
    [Arguments]    ${41111}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${41111}    ${nan}    ${nan}

Delete Saved Payment Method
    [Arguments]    ${41111}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${41111}    ${nan}    ${nan}

Validate Saved Payment Method Is Deleted
    [Arguments]    ${41111}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${41111}    ${nan}    ${nan}

","The test case 'TC_29 Validate Customer Is Able To Delete Saved Payment Method' is designed to ensure that a customer can successfully remove a saved payment method from their account within an application. 

### Purpose:
This test aims to:
1. Verify the functionality that allows users to manage their payment methods, specifically focusing on the deletion process.
2. Ensure that when a user chooses to delete a saved payment method, it is properly removed from the system and is no longer available for future transactions.
3. Confirm that the user receives appropriate feedback (such as a confirmation message) indicating that the payment method was successfully deleted.
4. Check for any errors or issues that might arise during the deletion process which could affect user experience or data integrity.

Successful validation"
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_30 Validate Customer Is Able To Process Payment By Using Saved ACHorECheck Payment Method,data-driven,TC_30 Validate Customer Is Able To Process Payment By Using Saved ACHorECheck Payment Method,"*** Settings ***
Documentation    Validate TC_30 Validate Customer Is Able To Process Payment By Using Saved ACHorECheck Payment Method
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_30 Validate Customer Is Able To Process Payment By Using Saved ACHorECheck Payment Method
    [Documentation]    Validate TC_30 Validate Customer Is Able To Process Payment By Using Saved ACHorECheck Payment Method using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Pay The Invoice Using ACH/Echeck And Save The Payment Method    ${integrated_merchant}    ${Business Checking}    ${ACH_ECHECK_DETAILS}    
    Select Use Saved Payment Method    ${nan}    ${nan}    ${nan}    
    Select Any Saved Payment Method    ${11*}    ${nan}    ${nan}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${nan}    
    Enter Lumpsum Amount    ${10}    ${nan}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using ACH/Echeck And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${Business Checking}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${Business Checking}    ${ACH_ECHECK_DETAILS}

Select Use Saved Payment Method
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Any Saved Payment Method
    [Arguments]    ${11*}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${11*}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${nan}

Enter Lumpsum Amount
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","### Summary of Test Case TC_30: Validate Customer Is Able To Process Payment By Using Saved ACH or E-Check Payment Method

**Purpose:**

The main objective of Test Case TC_30 is to ensure that customers can successfully process payments using previously saved Automated Clearing House (ACH) or Electronic Check (E-Check) payment methods. This test case aims to validate the effectiveness, reliability, and security of the payment system when customers opt to use saved payment details for transactions.

**Key Points:**

1. **User Experience:** Verify that the user interface (UI) allows customers to select a saved ACH or E-Check payment method during the checkout or payment process.
2. **Payment Processing:** Ensure that the backend system can accurately retrieve"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_31 Validate Customer Is Able To Select One Of The Saved Payment Method,data-driven,TC_31 Validate Customer Is Able To Select One Of The Saved Payment Method,"*** Settings ***
Documentation    Validate TC_31 Validate Customer Is Able To Select One Of The Saved Payment Method
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_31 Validate Customer Is Able To Select One Of The Saved Payment Method
    [Documentation]    Validate TC_31 Validate Customer Is Able To Select One Of The Saved Payment Method using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Pay The Invoice Using ACH/Echeck And Save The Payment Method    ${integrated_merchant}    ${Business Checking}    ${ACH_ECHECK_DETAILS}    
    Pay The Invoice Using Credit Card And Save The Payment Method    ${integrated_merchant}    ${4217651111111119}    ${12/26}    
    Select Use Saved Payment Method    ${nan}    ${nan}    ${nan}    
    Select Any Saved Payment Method    ${421765}    ${nan}    ${nan}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${nan}    
    Enter Lumpsum Amount    ${10}    ${nan}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using ACH/Echeck And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${Business Checking}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${Business Checking}    ${ACH_ECHECK_DETAILS}

Pay The Invoice Using Credit Card And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${4217651111111119}    ${12/26}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${4217651111111119}    ${12/26}

Select Use Saved Payment Method
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Any Saved Payment Method
    [Arguments]    ${421765}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${421765}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${nan}

Enter Lumpsum Amount
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The purpose of the test case 'TC_31 Validate Customer Is Able To Select One Of The Saved Payment Methods' is to ensure that customers can easily access and choose from previously saved payment methods during the checkout process. This test case verifies that the system correctly retrieves and displays saved payment options to the customer and allows them to select one for completing their transaction. It aims to streamline the payment process, enhance user experience by saving them time, and reduce the chances of input errors by leveraging previously stored payment data."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_32 Validate Customer Is Able To View Last 30 Days Payment History,data-driven,TC_32 Validate Customer Is Able To View Last 30 Days Payment History,"*** Settings ***
Documentation    Validate TC_32 Validate Customer Is Able To View Last 30 Days Payment History
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_32 Validate Customer Is Able To View Last 30 Days Payment History
    [Documentation]    Validate TC_32 Validate Customer Is Able To View Last 30 Days Payment History using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Navigate To Menu Tab    ${Payment History}    ${nan}    ${}    
    Select Date Range    ${Last 30 Days}    ${nan}    ${}    
    Validate Selected Date Is Displayed In Date Range    ${29}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Navigate To Menu Tab
    [Arguments]    ${Payment History}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment History}    ${nan}    ${}

Select Date Range
    [Arguments]    ${Last 30 Days}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Last 30 Days}    ${nan}    ${}

Validate Selected Date Is Displayed In Date Range
    [Arguments]    ${29}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${29}    ${nan}    ${}

","**Test Case 'TC_32 Validate Customer Is Able To View Last 30 Days Payment History':**

**Purpose:**
The primary objective of this test case is to ensure that customers can successfully access and view their payment history for the past 30 days within the application. This is a crucial functionality for users to track their transactions, confirm payments, and manage their financial records.

**Details:**
1. **Scope:** This test case covers the functionality provided in the user interface and backend systems to display the payment history for the last 30 days.
2. **Preconditions:** The customer must have an active account and at least one payment transaction within the last 30 days.
3. **Steps:**
   - Log in to the customer's"
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_33 Validate Customer Is Able To View This Month Payment History,data-driven,TC_33 Validate Customer Is Able To View This Month Payment History,"*** Settings ***
Documentation    Validate TC_33 Validate Customer Is Able To View This Month Payment History
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_33 Validate Customer Is Able To View This Month Payment History
    [Documentation]    Validate TC_33 Validate Customer Is Able To View This Month Payment History using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Navigate To Menu Tab    ${Payment History}    ${nan}    ${}    
    Select Date Range    ${This Month}    ${nan}    ${}    
    Validate This Month Is Displayed In Date Range    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Navigate To Menu Tab
    [Arguments]    ${Payment History}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment History}    ${nan}    ${}

Select Date Range
    [Arguments]    ${This Month}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${This Month}    ${nan}    ${}

Validate This Month Is Displayed In Date Range
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The test case TC_33, titled ""Validate Customer Is Able To View This Month Payment History,"" primarily aims to ensure that a customer using a given application or platform can access and review their payment history for the current month. 

### Purpose:
1. **Functionality Verification**: To confirm that the system correctly displays payment details for the ongoing month to the customer.
2. **User Experience**: To ensure that the interface is user-friendly and that customers can easily navigate to and comprehend the payment history section.
3. **Data Accuracy**: To verify that the payment information displayed is accurate, complete, and reflects all transactions made by the customer during the current month.
4. **Accessibility**: To check that the payment history feature is accessible"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_34 Validate Customer Is Able To View Last Month Payment History,data-driven,TC_34 Validate Customer Is Able To View Last Month Payment History,"*** Settings ***
Documentation    Validate TC_34 Validate Customer Is Able To View Last Month Payment History
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_34 Validate Customer Is Able To View Last Month Payment History
    [Documentation]    Validate TC_34 Validate Customer Is Able To View Last Month Payment History using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Navigate To Menu Tab    ${Payment History}    ${nan}    ${}    
    Select Date Range    ${Last Month}    ${nan}    ${}    
    Validate Last Month Is Displayed In Date Range    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Navigate To Menu Tab
    [Arguments]    ${Payment History}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment History}    ${nan}    ${}

Select Date Range
    [Arguments]    ${Last Month}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Last Month}    ${nan}    ${}

Validate Last Month Is Displayed In Date Range
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The test case ""TC_34 Validate Customer Is Able To View Last Month Payment History"" aims to verify that customers can successfully access and review their payment history for the last month through the application or website. The purpose of this test case is to ensure that the functionality for viewing the last month's payment history is working correctly, providing customers with accurate and timely information about their previous transactions.

Specific objectives of this test case include:

1. **User Authentication:** Confirming that the user can log into their account successfully.
2. **Navigation:** Ensuring that the user can navigate to the payment history section without any issues.
3. **Data Accuracy:** Verifying that the displayed payment history is complete, accurate, and corresponds to transactions made in the last month"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_35 Validate Integrated Customer Is Able To Process Payment For Multiple invoices,data-driven,TC_35 Validate Integrated Customer Is Able To Process Payment For Multiple invoices,"*** Settings ***
Documentation    Validate TC_35 Validate Integrated Customer Is Able To Process Payment For Multiple invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_35 Validate Integrated Customer Is Able To Process Payment For Multiple invoices
    [Documentation]    Validate TC_35 Validate Integrated Customer Is Able To Process Payment For Multiple invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Create Multiple Invoices Through API    ${account_number}    ${integrated_merchant}    ${today-15}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice.0}    ${nan}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Unselect Invoice Checkboxes    ${nan}    ${nan}    ${nan}    
    Select Specific Invoices    ${invoice}    ${nan}    ${nan}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}    
    Enter ACH/ECheck Details    ${111111111}    ${111111111}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${account_number}    ${integrated_merchant}    ${today-15}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${account_number}    ${integrated_merchant}    ${today-15}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice.0}    ${nan}
    [Return]    ${float}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice.0}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Unselect Invoice Checkboxes
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Specific Invoices
    [Arguments]    ${invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter ACH/ECheck Details
    [Arguments]    ${111111111}    ${111111111}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${111111111}    ${111111111}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_35 Validate Integrated Customer Is Able To Process Payment For Multiple Invoices' is designed to ensure that a customer, who has been integrated into a system, can successfully process payments for multiple outstanding invoices in a single transaction or payment session. 

**Purpose:**
1. **Verify Functionality:** Ensure the system supports the capability for integrated customers to select and process multiple invoices simultaneously.
2. **User Experience:** Confirm that the process is seamless and user-friendly, minimizing steps and potential errors.
3. **Accuracy:** Validate that the correct amounts are being processed against the appropriate invoices, ensuring accurate accounting and reconciliation.
4. **Integration:** Test the interaction between various system components involved in invoicing and payment processing to ensure they work"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_36 Validate Checkbox For An Invoice Gets Unchecked When Zero Amount To Pay Is Entered For That Invoice,data-driven,TC_36 Validate Checkbox For An Invoice Gets Unchecked When Zero Amount To Pay Is Entered For That Invoice,"*** Settings ***
Documentation    Validate TC_36 Validate Checkbox For An Invoice Gets Unchecked When Zero Amount To Pay Is Entered For That Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_36 Validate Checkbox For An Invoice Gets Unchecked When Zero Amount To Pay Is Entered For That Invoice
    [Documentation]    Validate TC_36 Validate Checkbox For An Invoice Gets Unchecked When Zero Amount To Pay Is Entered For That Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${}    
    Select Specific Invoice And Enter Amount    ${invoice_number}    ${0}    ${}    
    Validate Invoice Checkbox Should Be Unselected    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${}

Select Specific Invoice And Enter Amount
    [Arguments]    ${invoice_number}    ${0}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${0}    ${}

Validate Invoice Checkbox Should Be Unselected
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The purpose of the test case 'TC_36 Validate Checkbox For An Invoice Gets Unchecked When Zero Amount To Pay Is Entered For That Invoice' is to ensure the accurate functionality of the invoicing system by verifying that the system automatically unchecks the selection checkbox for an invoice when a user inputs a zero amount to pay. This test case checks the logical consistency and user interface behavior of the system to ensure that invoices with no payment amount do not remain marked as selected for actions like processing or payment, thereby preventing potential errors in billing or record-keeping. This test case is essential for maintaining the integrity and usability of the invoice management feature within an application."
Build data-driven paynow test cases for Sterlingcooper Testcases TC_37 Validate Checkbox For An Invoice Gets Checkedorticked When A Non-zero Amount Is Entered In 'Amount To Pay' For That Invoice,data-driven,TC_37 Validate Checkbox For An Invoice Gets Checkedorticked When A Non-zero Amount Is Entered In 'Amount To Pay' For That Invoice,"*** Settings ***
Documentation    Validate TC_37 Validate Checkbox For An Invoice Gets Checkedorticked When A Non-zero Amount Is Entered In 'Amount To Pay' For That Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_37 Validate Checkbox For An Invoice Gets Checkedorticked When A Non-zero Amount Is Entered In 'Amount To Pay' For That Invoice
    [Documentation]    Validate TC_37 Validate Checkbox For An Invoice Gets Checkedorticked When A Non-zero Amount Is Entered In 'Amount To Pay' For That Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${}    
    Unselect Invoice Checkboxes    ${nan}    ${nan}    ${}    
    Select Specific Invoice And Enter Amount    ${invoice_number}    ${20}    ${}    
    Validate Invoice Checkbox Should Be Selected    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${}

Unselect Invoice Checkboxes
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Select Specific Invoice And Enter Amount
    [Arguments]    ${invoice_number}    ${20}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${20}    ${}

Validate Invoice Checkbox Should Be Selected
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The test case 'TC_37 Validate Checkbox For An Invoice Gets Checked or Ticked When a Non-Zero Amount Is Entered In ""Amount To Pay"" For That Invoice' is designed to verify the functionality and user interaction of an invoicing or payment system. The purpose of this test case is to ensure that when a user inputs a non-zero amount in the ""Amount to Pay"" field for a specific invoice, the corresponding checkbox for that invoice gets automatically checked or ticked.

In more detail:
- **Intent**: To confirm that the system correctly identifies when a user is making a payment towards an invoice by entering a non-zero amount, and that it visually indicates through a checkbox that this invoice is selected for payment.
- **Functionality"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_38 Validate Integrated Customer Is Able To Select All Invoices,data-driven,TC_38 Validate Integrated Customer Is Able To Select All Invoices,"*** Settings ***
Documentation    Validate TC_38 Validate Integrated Customer Is Able To Select All Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_38 Validate Integrated Customer Is Able To Select All Invoices
    [Documentation]    Validate TC_38 Validate Integrated Customer Is Able To Select All Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Create Multiple Invoices Through API    ${account_number}    ${integrated_merchant}    ${}    
    Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice.0}    ${}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${}    
    Unselect Invoice Checkboxes    ${nan}    ${nan}    ${}    
    Select All Invoices    ${nan}    ${nan}    ${}    
    Validate Checkboxes Are Selected By Default    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Create Multiple Invoices Through API
    [Arguments]    ${account_number}    ${integrated_merchant}    ${}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${account_number}    ${integrated_merchant}    ${}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice.0}    ${}
    [Return]    ${float}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice.0}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${}

Unselect Invoice Checkboxes
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Select All Invoices
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Checkboxes Are Selected By Default
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The test case 'TC_38 Validate Integrated Customer Is Able To Select All Invoices' is designed to verify that an integrated customer within a software application has the capability to select multiple or all invoices at once. The purpose of this test is to ensure that the feature allowing customers to select all invoices for viewing, processing, or any other relevant action is functioning correctly.

This involves checking that the integrated customer's interface has an option to 'select all' invoices and confirming that this selection is accurately reflected – meaning all invoices are highlighted or marked as selected. The test validates the usability and functionality of the feature to improve customer efficiency and satisfaction by reducing the time and effort needed to handle invoice-related tasks. It is crucial for ensuring that the customer experience is seamless and"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_39 Validate Integrated Customer Is Able To Select All Due Invoices,data-driven,TC_39 Validate Integrated Customer Is Able To Select All Due Invoices,"*** Settings ***
Documentation    Validate TC_39 Validate Integrated Customer Is Able To Select All Due Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_39 Validate Integrated Customer Is Able To Select All Due Invoices
    [Documentation]    Validate TC_39 Validate Integrated Customer Is Able To Select All Due Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Create Multiple Invoices Through API    ${account_number}    ${integrated_merchant}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice.0}    ${}    
    Select All Due Invoices    ${nan}    ${nan}    ${}    
    Validate Due Invoices Are Selected    ${invoice.0}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Create Multiple Invoices Through API
    [Arguments]    ${account_number}    ${integrated_merchant}    ${}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${account_number}    ${integrated_merchant}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice.0}    ${}
    [Return]    ${float}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice.0}    ${}

Select All Due Invoices
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Due Invoices Are Selected
    [Arguments]    ${invoice.0}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice.0}    ${nan}    ${}

","The purpose of the test case 'TC_39 Validate Integrated Customer Is Able To Select All Due Invoices' is to ensure that a customer, whose information and activities are integrated within the system, can effectively view and select all invoices that are due for payment. This test case verifies that the functionality allowing customers to access, review, and choose multiple pending invoices from their account dashboard or designated platform works as intended. It ensures that the integrated system accurately displays all due invoices and allows for their selection, which is crucial for maintaining efficient billing and payment processes. The successful execution of this test case confirms that customers can manage their due payments seamlessly within the system."
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_40 Validate Integrated Customer Is Able To Select All Invoice On Page,data-driven,TC_40 Validate Integrated Customer Is Able To Select All Invoice On Page,"*** Settings ***
Documentation    Validate TC_40 Validate Integrated Customer Is Able To Select All Invoice On Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_40 Validate Integrated Customer Is Able To Select All Invoice On Page
    [Documentation]    Validate TC_40 Validate Integrated Customer Is Able To Select All Invoice On Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Select All Invoices On Page    ${nan}    ${nan}    ${}    
    Validate Checkboxes Are Selected By Default    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Select All Invoices On Page
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Checkboxes Are Selected By Default
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","Test Case TC_40: ""Validate Integrated Customer Is Able To Select All Invoice On Page"" aims to ensure that a customer using an integrated billing or finance application can successfully select all the invoices displayed on a particular page. 

**Purpose:**

1. **Verification of UI Functionality**: Confirm that the ""Select All"" checkbox or button correctly selects all invoices listed on the current page.
   
2. **Accuracy of Selection**: Ensure that when the ""Select All"" option is used, each individual invoice checkbox is appropriately marked as selected.

3. **User Experience**: Validate that the feature is intuitive and works seamlessly, providing an efficient workflow for customers managing multiple invoices.

4. **System Integrity**: Test to check that the selection"
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_41 Validate Integrated Customer Is Able To Unselect All Invoices On Page,data-driven,TC_41 Validate Integrated Customer Is Able To Unselect All Invoices On Page,"*** Settings ***
Documentation    Validate TC_41 Validate Integrated Customer Is Able To Unselect All Invoices On Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_41 Validate Integrated Customer Is Able To Unselect All Invoices On Page
    [Documentation]    Validate TC_41 Validate Integrated Customer Is Able To Unselect All Invoices On Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Unselect All Invoices On Page    ${nan}    ${nan}    ${}    
    Validate Invoice Checkbox Should Be Unselected    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Unselect All Invoices On Page
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Invoice Checkbox Should Be Unselected
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The test case 'TC_41 Validate Integrated Customer Is Able To Unselect All Invoices On Page' aims to ensure that an integrated customer using the system has the functionality to deselect all the invoices that are currently selected on a given page. The purpose of this test case is to verify that the feature to unselect all invoices works correctly, allowing users to easily manage their selections without manually unselecting each invoice one by one. This helps in improving the overall user experience by providing a convenient method for deselecting multiple selected invoices efficiently."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_42 Validate Specific Invoice Details In The Open Invoices Table,data-driven,TC_42 Validate Specific Invoice Details In The Open Invoices Table,"*** Settings ***
Documentation    Validate TC_42 Validate Specific Invoice Details In The Open Invoices Table
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_42 Validate Specific Invoice Details In The Open Invoices Table
    [Documentation]    Validate TC_42 Validate Specific Invoice Details In The Open Invoices Table using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${}    
    Validate Invoice Date From The Specific Invoice Grid    ${invoice_number}    ${nan}    ${}    
    Validate Invoice Due Date From The Specific Invoice Grid    ${invoice_number}    ${nan}    ${}    
    Validate Customer PO Number From The Specific Invoice Grid    ${invoice_number}    ${nan}    ${}    
    Validate Original Amount From The Specific Invoice Grid    ${invoice_number}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${}

Validate Invoice Date From The Specific Invoice Grid
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

Validate Invoice Due Date From The Specific Invoice Grid
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

Validate Customer PO Number From The Specific Invoice Grid
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

Validate Original Amount From The Specific Invoice Grid
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

","The test case ""TC_42 Validate Specific Invoice Details In The Open Invoices Table"" is designed to ensure the accuracy and integrity of invoice information displayed in the Open Invoices Table of a financial or billing system. The primary purpose of this test case is to verify that specific details of an invoice—such as invoice number, date, customer name, amount, status, and due date—are correctly listed and match the expected values.

Key objectives of the test case include:

1. **Data Integrity Verification**: Confirm that the invoice data presented in the table reflects what is stored in the backend database.
2. **UI Consistency**: Ensure the format and presentation of invoice details are consistent and user-friendly.
3. **Field Validation**:"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_43 Validate Customers Is Able To View All Invoices Associated With The Account Number In Open Invoices,data-driven,TC_43 Validate Customers Is Able To View All Invoices Associated With The Account Number In Open Invoices,"*** Settings ***
Documentation    Validate TC_43 Validate Customers Is Able To View All Invoices Associated With The Account Number In Open Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_43 Validate Customers Is Able To View All Invoices Associated With The Account Number In Open Invoices
    [Documentation]    Validate TC_43 Validate Customers Is Able To View All Invoices Associated With The Account Number In Open Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Create Multiple Invoices Through API    ${account_number}    ${integrated_merchant}    ${}    
    Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice.0}    ${}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${}    
    Validate All Invoices Associated With Account Number Are Displayed    ${invoice}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Create Multiple Invoices Through API
    [Arguments]    ${account_number}    ${integrated_merchant}    ${}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${account_number}    ${integrated_merchant}    ${}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice.0}    ${}
    [Return]    ${float}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice.0}    ${}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${}

Validate All Invoices Associated With Account Number Are Displayed
    [Arguments]    ${invoice}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice}    ${nan}    ${}

","**Summary for Test Case 'TC_43: Validate Customers Are Able To View All Invoices Associated With the Account Number in Open Invoices'**

**Purpose:**
The primary objective of this test case is to ensure that customers have the capability to view all invoices linked to their account number within the 'Open Invoices' section of the application. This feature is critical for enabling customers to effectively manage and track their financial obligations by providing comprehensive visibility of all pending invoices.

**Goals:**
1. **Verification of Invoice Display:** Confirm that the system correctly displays a list of all open invoices associated with the customer's account number.
2. **Accuracy of Data:** Ensure that the details of each invoice, including the invoice number, date, amount, and"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_44 Validate Customer Is Able To Navigate To Payment History Tab,data-driven,TC_44 Validate Customer Is Able To Navigate To Payment History Tab,"*** Settings ***
Documentation    Validate TC_44 Validate Customer Is Able To Navigate To Payment History Tab
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_44 Validate Customer Is Able To Navigate To Payment History Tab
    [Documentation]    Validate TC_44 Validate Customer Is Able To Navigate To Payment History Tab using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Navigate To Menu Tab    ${Payment History}    ${nan}    ${}    
    Validate Date Range Is Displayed In Payment History Tab    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Navigate To Menu Tab
    [Arguments]    ${Payment History}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment History}    ${nan}    ${}

Validate Date Range Is Displayed In Payment History Tab
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","### Test Case: TC_44 Validate Customer Is Able To Navigate To Payment History Tab

**Purpose:**
The objective of this test case is to ensure that a customer can successfully access the Payment History tab within an application or website. This functionality is critical for users who want to review their past transactions, verify payments, or manage their financial history. 

**Key Actions:**
1. **Login Verification**: Confirm that the customer can log in using valid credentials.
2. **Navigation to Account Section**: Ensure the customer can navigate to the account or profile section where the Payment History tab is located.
3. **Access Payment History Tab**: Verify that the Payment History tab is visible and clickable.
4. **Data Validation**: Check"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_45 Validate Customer Is Able To Select Today Date From Date Range,data-driven,TC_45 Validate Customer Is Able To Select Today Date From Date Range,"*** Settings ***
Documentation    Validate TC_45 Validate Customer Is Able To Select Today Date From Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Customer Is Able To Select Today Date From Date Range
    [Documentation]    Validate TC_45 Validate Customer Is Able To Select Today Date From Date Range using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Navigate To Menu Tab    ${Payment History}    ${nan}    ${}    
    Select Date Range    ${Today}    ${nan}    ${}    
    Validate Today's Date Is Displayed In Date Range    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Navigate To Menu Tab
    [Arguments]    ${Payment History}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment History}    ${nan}    ${}

Select Date Range
    [Arguments]    ${Today}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Today}    ${nan}    ${}

Validate Today's Date Is Displayed In Date Range
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The purpose of the test case 'TC_45 Validate Customer Is Able To Select Today Date From Date Range' is to ensure that a customer can successfully select the current date when interacting with a date picker or date range selection feature within an application or website. This test assesses the functionality and user-friendliness of the date selection component by verifying that the current date (today's date) is selectable and appropriately highlighted or made accessible to the user. This is critical for applications where date selection is a key feature, such as booking systems, scheduling tools, or any interface requiring accurate date inputs. By validating this functionality, the test confirms that users can quickly and correctly choose the most relevant date, contributing to a seamless and intuitive user experience."
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_46 Validate Customer Is Able To Select Yesterday's Date From Date Range,data-driven,TC_46 Validate Customer Is Able To Select Yesterday's Date From Date Range,"*** Settings ***
Documentation    Validate TC_46 Validate Customer Is Able To Select Yesterday's Date From Date Range
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_46 Validate Customer Is Able To Select Yesterday's Date From Date Range
    [Documentation]    Validate TC_46 Validate Customer Is Able To Select Yesterday's Date From Date Range using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Navigate To Menu Tab    ${Payment History}    ${nan}    ${}    
    Select Date Range    ${Yesterday}    ${nan}    ${}    
    Validate Yesterday Date Is Displayed In Date Range    ${-1}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Navigate To Menu Tab
    [Arguments]    ${Payment History}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment History}    ${nan}    ${}

Select Date Range
    [Arguments]    ${Yesterday}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Yesterday}    ${nan}    ${}

Validate Yesterday Date Is Displayed In Date Range
    [Arguments]    ${-1}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${-1}    ${nan}    ${}

","The test case 'TC_46 Validate Customer Is Able To Select Yesterday's Date From Date Range' is designed to ensure that a customer can select the immediate past date, specifically ""yesterday's date,"" from a provided date range in the application's date selection interface. The purpose of this test is to verify the functionality and user experience of the date selection feature, ensuring that it handles edge cases involving relative dates correctly. This is critical for scenarios where users may need to input past dates for transactions, reports, or other time-sensitive entries. By validating this functionality, the test case helps to ensure that the application is both user-friendly and capable of accurately processing dates within a short-term historical context."
Build data-driven paynow test cases for Sterlingcooper Testcases TC_47 Validate Customer Is Able To See Selected Invoices Count,data-driven,TC_47 Validate Customer Is Able To See Selected Invoices Count,"*** Settings ***
Documentation    Validate TC_47 Validate Customer Is Able To See Selected Invoices Count
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_47 Validate Customer Is Able To See Selected Invoices Count
    [Documentation]    Validate TC_47 Validate Customer Is Able To See Selected Invoices Count using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Create Multiple Invoices Through API    ${account_number}    ${integrated_merchant}    ${}    
    Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice.0}    ${}    
    Validate Selected Invoices Count    ${invoice}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Create Multiple Invoices Through API
    [Arguments]    ${account_number}    ${integrated_merchant}    ${}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${account_number}    ${integrated_merchant}    ${}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice.0}    ${}
    [Return]    ${float}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice.0}    ${}

Validate Selected Invoices Count
    [Arguments]    ${invoice}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice}    ${nan}    ${}

","The purpose of the test case 'TC_47 Validate Customer Is Able To See Selected Invoices Count' is to ensure that the application's functionality for displaying the count of selected invoices to the customer is working correctly. This involves verifying that when a customer selects one or multiple invoices from a list, the application accurately updates and displays the count of these selected invoices in a designated area on the user interface. This test case aims to confirm that the count is precise and reflects any changes immediately, thereby enhancing the user experience and ensuring data accuracy."
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_48 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable To Login With invoice Without Entering Valid Invoice Number,data-driven,TC_48 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable To Login With invoice Without Entering Valid Invoice Number,"*** Settings ***
Documentation    Validate TC_48 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable To Login With invoice Without Entering Valid Invoice Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_48 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable To Login With invoice Without Entering Valid Invoice Number
    [Documentation]    Validate TC_48 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable To Login With invoice Without Entering Valid Invoice Number using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${}    ${}    
    Select Payment Type    ${Specific Invoice}    ${}    ${}    
    Load Invoices Without Entering Invoice Number    ${nan}    ${}    ${}    
    Validate Error Message Is Displayed    ${Customer Number and Invoice Number or Invoice Token or Email Token are required}    ${}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${}    ${}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${}    ${}

Load Invoices Without Entering Invoice Number
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Validate Error Message Is Displayed
    [Arguments]    ${Customer Number and Invoice Number or Invoice Token or Email Token are required}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Customer Number and Invoice Number or Invoice Token or Email Token are required}    ${}    ${}

","**Test Case Summary: TC_48 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable To Login With Invalid Invoice Number**

**Purpose:**

The primary objective of this test case is to ensure the following functionalities for the PayNOW system concerning invoice handling:

1. **Accessibility to PayNOW Without Invoice Number:**
   - Verify that users have the ability to access the PayNOW system even if they do not provide an invoice number. This portion of the test ensures inclusivity and flexibility in the system, accommodating users who might not have their invoice details at hand but still wish to perform or view certain actions within the PayNOW interface.

2. **Restriction of Login With Invalid Invoice Number:**
   - Confirm that the system correctly restrict"
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_49 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable To Process Payment For Invalid Invoices,data-driven,TC_49 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable To Process Payment For Invalid Invoices,"*** Settings ***
Documentation    Validate TC_49 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable To Process Payment For Invalid Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_49 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable To Process Payment For Invalid Invoices
    [Documentation]    Validate TC_49 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable To Process Payment For Invalid Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${}    ${}    
    Select Payment Type    ${Specific Invoice}    ${}    ${}    
    Load Invoices With Invalid Invoice Number    ${SDT@123}    ${}    ${}    
    Validate PayNOW Login Page Is Displayed    ${nan}    ${}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${}    ${}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${}    ${}

Load Invoices With Invalid Invoice Number
    [Arguments]    ${SDT@123}    ${}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${SDT@123}    ${}    ${}

Validate PayNOW Login Page Is Displayed
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

","**Test Case TC_49: Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable To Process Payment For Invalid Invoices**

**Purpose:**
The primary objective of this test case is to ensure that the PayNOW system behaves correctly when users attempt to initiate a payment without an invoice number and when they try to process payments using invalid invoice numbers. The test verifies two key aspects:

1. **Entering PayNOW Without an Invoice Number:**
   - To verify that the system allows users to access the PayNOW payment interface without requiring an invoice number upfront. This step checks whether the PayNOW entry point is flexible and user-friendly, not mandating an invoice number before proceeding to the payment area.

2. **Preventing Payment for Invalid"
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_51 Validate That Invoice Number Gets Checked After Clicking Pay Invoice Button On Invoice Page,data-driven,TC_51 Validate That Invoice Number Gets Checked After Clicking Pay Invoice Button On Invoice Page,"*** Settings ***
Documentation    Validate TC_51 Validate That Invoice Number Gets Checked After Clicking Pay Invoice Button On Invoice Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_51 Validate That Invoice Number Gets Checked After Clicking Pay Invoice Button On Invoice Page
    [Documentation]    Validate TC_51 Validate That Invoice Number Gets Checked After Clicking Pay Invoice Button On Invoice Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Pay Invoice From Invoice Screen    ${invoice_number}    ${nan}    ${}    
    Validate Invoice Checkbox Is Checked    ${invoice_number}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Pay Invoice From Invoice Screen
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

Validate Invoice Checkbox Is Checked
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

",The test case 'TC_51 Validate That Invoice Number Gets Checked After Clicking Pay Invoice Button On Invoice Page' aims to verify that the system properly validates the presence of an invoice number when a user attempts to initiate the payment process on the invoice page. The purpose of this test case is to ensure that the application enforces necessary data integrity and user input validation by checking that an invoice number exists and is correctly entered before proceeding with the payment. This helps in preventing errors or incomplete transactions that may result from missing or incorrect invoice details.
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_52 Validate Integrated Customer Is Able To Process Payment Through Credit Card,data-driven,TC_52 Validate Integrated Customer Is Able To Process Payment Through Credit Card,"*** Settings ***
Documentation    Validate TC_52 Validate Integrated Customer Is Able To Process Payment Through Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_52 Validate Integrated Customer Is Able To Process Payment Through Credit Card
    [Documentation]    Validate TC_52 Validate Integrated Customer Is Able To Process Payment Through Credit Card using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Select Specific Invoice And Enter Amount    ${invoice_number}    ${1}    ${nan}    
    Add Reason For Less Than Due Amount    ${invoice_number}    ${Testing}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Validate Total Charges Under Summary Of Payment    ${$1.03}    ${nan}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Details In Generated Payment Receipt    ${Specific Invoice}    ${411111******1111}    ${Card}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}

Select Specific Invoice And Enter Amount
    [Arguments]    ${invoice_number}    ${1}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${1}    ${nan}

Add Reason For Less Than Due Amount
    [Arguments]    ${invoice_number}    ${Testing}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${Testing}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Validate Total Charges Under Summary Of Payment
    [Arguments]    ${$1.03}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${$1.03}    ${nan}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Details In Generated Payment Receipt
    [Arguments]    ${Specific Invoice}    ${411111******1111}    ${Card}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${411111******1111}    ${Card}

","The purpose of the test case 'TC_52 Validate Integrated Customer Is Able To Process Payment Through Credit Card' is to ensure that the payment processing system of an application is functioning correctly when an integrated customer attempts to make a payment using a credit card. This involves verifying that the customer can enter their credit card details, that these details are properly validated, and that the payment is processed successfully without any errors. Additionally, the test case aims to confirm that the system provides appropriate feedback to the customer throughout the payment process, such as confirmation of payment or error messages if necessary. Overall, this test ensures a seamless and secure payment experience for customers using credit cards."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_53 Validate Integrated Customer Is Able To Process Payment Through ACHoreCheck,data-driven,TC_53 Validate Integrated Customer Is Able To Process Payment Through ACHoreCheck,"*** Settings ***
Documentation    Validate TC_53 Validate Integrated Customer Is Able To Process Payment Through ACHoreCheck
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_53 Validate Integrated Customer Is Able To Process Payment Through ACHoreCheck
    [Documentation]    Validate TC_53 Validate Integrated Customer Is Able To Process Payment Through ACHoreCheck using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Select Specific Invoice And Enter Amount    ${invoice_number}    ${1}    ${nan}    
    Add Reason For Less Than Due Amount    ${invoice_number}    ${Testing}    ${nan}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}    
    Enter ACH/ECheck Details    ${ACH_ECHECK_DETAILS}    ${nan}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Details In Generated Payment Receipt    ${Specific Invoice}    ${11*****11}    ${ACH}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Select Specific Invoice And Enter Amount
    [Arguments]    ${invoice_number}    ${1}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${1}    ${nan}

Add Reason For Less Than Due Amount
    [Arguments]    ${invoice_number}    ${Testing}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${Testing}    ${nan}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter ACH/ECheck Details
    [Arguments]    ${ACH_ECHECK_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH_ECHECK_DETAILS}    ${nan}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Details In Generated Payment Receipt
    [Arguments]    ${Specific Invoice}    ${11*****11}    ${ACH}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${11*****11}    ${ACH}

","The purpose of the test case 'TC_53 Validate Integrated Customer Is Able To Process Payment Through ACHoreCheck' is to ensure that an integrated customer can successfully process a payment using the ACH (Automated Clearing House) or eCheck method. This test case evaluates the end-to-end functionality of the payment processing system to confirm that payments initiated through ACH or eCheck are correctly handled and processed without any errors.

Key objectives of the test case include:

1. Verifying that the user interface correctly prompts the customer for necessary information such as bank account details, routing number, and any other required payment information.
2. Checking that the system correctly validates the input data to prevent errors or fraudulent transactions.
3. Ensuring that the payment process completes without any"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_54 Validate Integrated Customer Is Able To Process The Lump Sum Payment,data-driven,TC_54 Validate Integrated Customer Is Able To Process The Lump Sum Payment,"*** Settings ***
Documentation    Validate TC_54 Validate Integrated Customer Is Able To Process The Lump Sum Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_54 Validate Integrated Customer Is Able To Process The Lump Sum Payment
    [Documentation]    Validate TC_54 Validate Integrated Customer Is Able To Process The Lump Sum Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${nan}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Validate Total Charges Under Summary Of Payment    ${$1.03}    ${nan}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Details In Generated Payment Receipt    ${Lump Sum (Apply to Oldest)}    ${411111******1111}    ${Card}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${nan}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Validate Total Charges Under Summary Of Payment
    [Arguments]    ${$1.03}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${$1.03}    ${nan}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Details In Generated Payment Receipt
    [Arguments]    ${Lump Sum (Apply to Oldest)}    ${411111******1111}    ${Card}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Lump Sum (Apply to Oldest)}    ${411111******1111}    ${Card}

","The test case 'TC_54 Validate Integrated Customer Is Able To Process The Lump Sum Payment' aims to confirm that a customer who is integrated into the system can successfully execute a lump sum payment transaction. The purpose of this test case is to ensure that the end-to-end process for making a lump sum payment is functioning correctly for integrated customers, without any errors or issues. This includes verifying that the payment is processed accurately, the customer's account is updated appropriately, and any related notifications or records are generated as expected."
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_55 Validate Integrated Customer Unable To Process Payment More Than Due Amount,data-driven,TC_55 Validate Integrated Customer Unable To Process Payment More Than Due Amount,"*** Settings ***
Documentation    Validate TC_55 Validate Integrated Customer Unable To Process Payment More Than Due Amount
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_55 Validate Integrated Customer Unable To Process Payment More Than Due Amount
    [Documentation]    Validate TC_55 Validate Integrated Customer Unable To Process Payment More Than Due Amount using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}    
    Select Specific Invoice And Enter Amount    ${invoice_number}    ${500000}    ${}    
    Validate Errors After Clicking On Process Invoice    ${You cannot pay more than is due on an invoice}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}

Select Specific Invoice And Enter Amount
    [Arguments]    ${invoice_number}    ${500000}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${500000}    ${}

Validate Errors After Clicking On Process Invoice
    [Arguments]    ${You cannot pay more than is due on an invoice}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${You cannot pay more than is due on an invoice}    ${nan}    ${}

","Sure! The test case 'TC_55 Validate Integrated Customer Unable To Process Payment More Than Due Amount' aims to ensure that the customer payment system operates correctly by preventing customers from paying an amount that exceeds their outstanding balance or due amount. 

**Purpose:**
1. **Prevent Overpayments:** To ensure customers cannot process payments that are greater than their due amount, thereby avoiding financial discrepancies and ensuring the integrity of the payment processing system.
2. **Customer Experience:** To enhance the customer experience by providing error messages or indicators that prevent overpayment and guiding customers to enter the correct payment amount.
3. **System Validation:** To verify that the integrated payment system correctly identifies and handles scenarios where a payment attempt exceeds the due amount, reflecting real-world payment constraints"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_56 Validate Integrated Customer Is Able To Process The Lump Sum Payment Less Than Due Amount,data-driven,TC_56 Validate Integrated Customer Is Able To Process The Lump Sum Payment Less Than Due Amount,"*** Settings ***
Documentation    Validate TC_56 Validate Integrated Customer Is Able To Process The Lump Sum Payment Less Than Due Amount
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_56 Validate Integrated Customer Is Able To Process The Lump Sum Payment Less Than Due Amount
    [Documentation]    Validate TC_56 Validate Integrated Customer Is Able To Process The Lump Sum Payment Less Than Due Amount using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${nan}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Details In Generated Payment Receipt    ${Lump Sum (Apply to Oldest)}    ${411111******1111}    ${Card}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${nan}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Details In Generated Payment Receipt
    [Arguments]    ${Lump Sum (Apply to Oldest)}    ${411111******1111}    ${Card}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Lump Sum (Apply to Oldest)}    ${411111******1111}    ${Card}

","The test case ""TC_56: Validate Integrated Customer Is Able To Process The Lump Sum Payment Less Than Due Amount"" aims to ensure that integrated customers can make partial payments that are less than their total due amount. The purpose of this test case is to verify the following:

1. **Functionality**: Confirm that the system permits customers to proceed with a lump sum payment even if the amount paid is less than the total outstanding balance.

2. **User Experience**: Ensure that the customer receives appropriate feedback or notifications indicating that the payment was successfully processed, along with any residual balance details.

3. **Accounting**: Validate that the system correctly updates the customer's account balance to reflect the partial payment and accurately calculates any remaining due amount.

4."
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_57 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable to Process Payment By Loading Invalid Account Number,data-driven,TC_57 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable to Process Payment By Loading Invalid Account Number,"*** Settings ***
Documentation    Validate TC_57 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable to Process Payment By Loading Invalid Account Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_57 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable to Process Payment By Loading Invalid Account Number
    [Documentation]    Validate TC_57 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable to Process Payment By Loading Invalid Account Number using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${nan}    ${}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${}    
    Load Invoice With Account Number And Invoice Number    ${Sdt}    ${invoice_number}    ${}    
    Validate PayNOW Login Page Is Displayed    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${}

Load Invoice With Account Number And Invoice Number
    [Arguments]    ${Sdt}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${Sdt}    ${invoice_number}    ${}

Validate PayNOW Login Page Is Displayed
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The test case 'TC_57 Validate Customer Is Able To Enter PayNOW Without Invoice Number And Unable to Process Payment By Loading Invalid Account Number' aims to verify two main functionalities within a payment system:

1. **Entering PayNOW Without Invoice Number**:
   - Ensure that the customer can access the PayNOW feature or interface even if they do not have an invoice number. This test checks the system's flexibility in allowing users to reach the payment platform without the prerequisite of entering an invoice number.
  
2. **Payment Processing with Invalid Account Number**:
   - Confirm that the system correctly handles attempts to process a payment using an invalid account number. Specifically, it tests the system's ability to validate account numbers and reject invalid ones to prevent erroneous transactions"
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_58 Validate Customer Is Able To Load Unpaid Invoice When Entered Into Paynow Without Invoice Number,data-driven,TC_58 Validate Customer Is Able To Load Unpaid Invoice When Entered Into Paynow Without Invoice Number,"*** Settings ***
Documentation    Validate TC_58 Validate Customer Is Able To Load Unpaid Invoice When Entered Into Paynow Without Invoice Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_58 Validate Customer Is Able To Load Unpaid Invoice When Entered Into Paynow Without Invoice Number
    [Documentation]    Validate TC_58 Validate Customer Is Able To Load Unpaid Invoice When Entered Into Paynow Without Invoice Number using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${nan}    ${}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${}    
    Load Invoice With Account Number And Invoice Number    ${account_number}    ${invoice_number}    ${}    
    Validate Unpaid Invoices Are Displayed    ${invoice_number}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${}

Load Invoice With Account Number And Invoice Number
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Validate Unpaid Invoices Are Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

","The test case 'TC_58 Validate Customer Is Able To Load Unpaid Invoice When Entered Into Paynow Without Invoice Number' is designed to ensure that the Paynow system is capable of locating and loading unpaid invoices for a customer even when the specific invoice number is not provided. 

**Purpose:**

1. **Usability Verification:**
   - To confirm that the system is user-friendly and can handle scenarios where the customer does not have the invoice number readily available.

2. **System Flexibility:**
   - To check the flexibility and robustness of the system in retrieving customer invoices based on alternative identifiers or customer details.

3. **Customer Experience:**
   - To ensure a smooth and hassle-free experience for customers when attempting to pay outstanding"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_59 Validate Customer Is Able To Enter Into Paynow With Valid Credentials After Three Previous Failed Login Attempts,data-driven,TC_59 Validate Customer Is Able To Enter Into Paynow With Valid Credentials After Three Previous Failed Login Attempts,"*** Settings ***
Documentation    Validate TC_59 Validate Customer Is Able To Enter Into Paynow With Valid Credentials After Three Previous Failed Login Attempts
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_59 Validate Customer Is Able To Enter Into Paynow With Valid Credentials After Three Previous Failed Login Attempts
    [Documentation]    Validate TC_59 Validate Customer Is Able To Enter Into Paynow With Valid Credentials After Three Previous Failed Login Attempts using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Re-enter Login Credentials If Failed    ${account_number}    ${invoice_number}    ${}    
    Validate Account Number Is Displayed    ${account_number}    ${SDTaccount_number}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Re-enter Login Credentials If Failed
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Validate Account Number Is Displayed
    [Arguments]    ${account_number}    ${SDTaccount_number}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${SDTaccount_number}    ${}

","The test case 'TC_59 Validate Customer Is Able To Enter Into Paynow With Valid Credentials After Three Previous Failed Login Attempts' is designed to verify that a customer can successfully log into the Paynow system using valid credentials even after failing to log in three times previously. The key purposes of this test case include:

1. **Security Check**: Ensuring that the system properly tracks and records failed login attempts, which is vital for security monitoring.
2. **Functionality Verification**: Confirming that after a set number of failed login attempts (in this case, three), the user can still log in successfully with the correct credentials. This makes sure that the system does not lock the user out permanently or for too long.
3. **User"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_60 Validate Amount Due Is Appropriately Updated In Current Days Past Due,data-driven,TC_60 Validate Amount Due Is Appropriately Updated In Current Days Past Due,"*** Settings ***
Documentation    Validate TC_60 Validate Amount Due Is Appropriately Updated In Current Days Past Due
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_60 Validate Amount Due Is Appropriately Updated In Current Days Past Due
    [Documentation]    Validate TC_60 Validate Amount Due Is Appropriately Updated In Current Days Past Due using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Validate Amount Due Is Displayed In Days Past Due    ${Current Day}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Amount Due Is Displayed In Days Past Due
    [Arguments]    ${Current Day}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Current Day}    ${nan}    ${nan}

","The test case 'TC_60 Validate Amount Due Is Appropriately Updated In Current Days Past Due' is designed to verify whether the system correctly updates the amount due for accounts based on the current number of days past due. The primary purpose of this test case is to ensure the following:

1. **Calculation Accuracy**: The system accurately calculates and updates the amount due as the number of days past due increases.
2. **Consistency**: The amount due and the days past due should remain consistent with predefined business rules or formulae used for calculating past due amounts.
3. **Timeliness**: The updates to the amount due are performed in a timely manner, reflecting real-time changes as the customer's account status progresses.
4. **Notifications and"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_61 Validate Amount Due Is Appropriately Updated In 1-31 Days Past Due,data-driven,TC_61 Validate Amount Due Is Appropriately Updated In 1-31 Days Past Due,"*** Settings ***
Documentation    Validate TC_61 Validate Amount Due Is Appropriately Updated In 1-31 Days Past Due
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_61 Validate Amount Due Is Appropriately Updated In 1-31 Days Past Due
    [Documentation]    Validate TC_61 Validate Amount Due Is Appropriately Updated In 1-31 Days Past Due using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Validate Amount Due Is Displayed In Days Past Due    ${1-30 Days}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Amount Due Is Displayed In Days Past Due
    [Arguments]    ${1-30 Days}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${1-30 Days}    ${nan}    ${nan}

","Test Case 'TC_61 Validate Amount Due Is Appropriately Updated In 1-31 Days Past Due' is designed to ensure that the system properly calculates and updates the amount due for accounts that have payments overdue between 1 and 31 days. The primary purpose is to validate the accuracy and reliability of the system’s ability to handle overdue payments within this specific timeframe, ensuring that any necessary adjustments, such as late fees or interest, are correctly applied to the account balance. By doing so, the test case aims to maintain the integrity of the billing and collections processes, uphold financial accuracy, and ensure compliance with relevant policies or regulations regarding overdue payments."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_62 Validate Amount Due Is Appropriately Updated In 31-60 Days Past Due,data-driven,TC_62 Validate Amount Due Is Appropriately Updated In 31-60 Days Past Due,"*** Settings ***
Documentation    Validate TC_62 Validate Amount Due Is Appropriately Updated In 31-60 Days Past Due
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_62 Validate Amount Due Is Appropriately Updated In 31-60 Days Past Due
    [Documentation]    Validate TC_62 Validate Amount Due Is Appropriately Updated In 31-60 Days Past Due using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Validate Amount Due Is Displayed In Days Past Due    ${31-60 Days}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Amount Due Is Displayed In Days Past Due
    [Arguments]    ${31-60 Days}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${31-60 Days}    ${nan}    ${nan}

","**Test Case: TC_62 Validate Amount Due Is Appropriately Updated In 31-60 Days Past Due**

**Purpose:**

The objective of this test case is to ensure that the system correctly updates the ""amount due"" for customer accounts that fall into the 31-60 days past due category. This is critical for maintaining accurate financial records and ensuring proper collection practices.

**Scope:**

1. **Verification of Correct Calculation:** Assess if the system accurately computes the total amount due for accounts that have not been paid within 31 to 60 days after the due date. This includes adding any applicable late fees or interest charges.
  
2. **System Updates and Notifications:** Ensure that the system updates the account status and that any notifications"
Build data-driven paynow test cases for Sterlingcooper Testcases TC_63 Validate Amount Due Is Appropriately Updated In 61-90 Days Past Due,data-driven,TC_63 Validate Amount Due Is Appropriately Updated In 61-90 Days Past Due,"*** Settings ***
Documentation    Validate TC_63 Validate Amount Due Is Appropriately Updated In 61-90 Days Past Due
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_63 Validate Amount Due Is Appropriately Updated In 61-90 Days Past Due
    [Documentation]    Validate TC_63 Validate Amount Due Is Appropriately Updated In 61-90 Days Past Due using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Validate Amount Due Is Displayed In Days Past Due    ${61-90 Days}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Amount Due Is Displayed In Days Past Due
    [Arguments]    ${61-90 Days}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${61-90 Days}    ${nan}    ${nan}

","The test case 'TC_63 Validate Amount Due Is Appropriately Updated In 61-90 Days Past Due' is designed to ensure that the system accurately updates the amount a customer owes when their account falls within the 61 to 90 days past due window. 

**Purpose:**

1. **Validation of Correct Amount Calculation**: Verify that the system correctly calculates and displays the outstanding balance for accounts that are between 61 and 90 days overdue. 

2. **Interest and Fees Inclusion**: Ensure that any applicable interest charges, late fees, or penalties are correctly applied and reflected in the amount due.

3. **Consistency in Past Due Classification**: Confirm that the overdue status is correctly classified within the 61-90 days"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_64 Validate Amount Due Is Appropriately Updated In Over 90 Days Past Due,data-driven,TC_64 Validate Amount Due Is Appropriately Updated In Over 90 Days Past Due,"*** Settings ***
Documentation    Validate TC_64 Validate Amount Due Is Appropriately Updated In Over 90 Days Past Due
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_64 Validate Amount Due Is Appropriately Updated In Over 90 Days Past Due
    [Documentation]    Validate TC_64 Validate Amount Due Is Appropriately Updated In Over 90 Days Past Due using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Validate Amount Due Is Displayed In Days Past Due    ${Over 90 Days}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Amount Due Is Displayed In Days Past Due
    [Arguments]    ${Over 90 Days}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Over 90 Days}    ${nan}    ${nan}

","The test case 'TC_64 Validate Amount Due Is Appropriately Updated In Over 90 Days Past Due' is designed to ensure that the system correctly updates the amount due for accounts that are overdue by more than 90 days. The primary purpose of this test case is to verify that any penalties, interest, and additional charges are properly calculated and reflected in the total amount due for accounts that have not made a payment within the stipulated 90-day period. This is crucial for maintaining the financial accuracy of the system and ensuring that overdue accounts are managed in compliance with the relevant financial policies and regulations."
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_65 Validate Total Amount Is Updated As Per The Changes In Invoices Due Amount,data-driven,TC_65 Validate Total Amount Is Updated As Per The Changes In Invoices Due Amount,"*** Settings ***
Documentation    Validate TC_65 Validate Total Amount Is Updated As Per The Changes In Invoices Due Amount
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_65 Validate Total Amount Is Updated As Per The Changes In Invoices Due Amount
    [Documentation]    Validate TC_65 Validate Total Amount Is Updated As Per The Changes In Invoices Due Amount using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Pay The Invoice Using ACH/Echeck And Save The Payment Method    ${integrated_merchant}    ${Business Checking}    ${ACH_ECHECK_DETAILS}    
    Validate Total Amount In Summary Of Outstanding Invoice    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using ACH/Echeck And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${Business Checking}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${Business Checking}    ${ACH_ECHECK_DETAILS}

Validate Total Amount In Summary Of Outstanding Invoice
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","### Summary for Test Case 'TC_65 Validate Total Amount Is Updated As Per The Changes In Invoices Due Amount'

**Purpose:**
The primary objective of the test case ""TC_65 Validate Total Amount Is Updated As Per The Changes In Invoices Due Amount"" is to ensure that the total amount displayed in the financial system or application is accurately updated whenever there are changes in the due amounts of individual invoices. This validation is crucial for maintaining financial accuracy and ensuring that users have reliable information for decision-making.

**Key Actions:**
1. **Modify Invoice Amounts:** Adjust the due amounts on selected invoices to different values.
2. **Verify Initial Total:** Confirm the initial total amount before any changes are made to the invoices.
3. **"
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_66 Validate Customer Is Unable To Process Fully Paid Invoices,data-driven,TC_66 Validate Customer Is Unable To Process Fully Paid Invoices,"*** Settings ***
Documentation    Validate TC_66 Validate Customer Is Unable To Process Fully Paid Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_66 Validate Customer Is Unable To Process Fully Paid Invoices
    [Documentation]    Validate TC_66 Validate Customer Is Unable To Process Fully Paid Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Use Valid Check And Pay The Amount    ${97.99}    ${Business Checking}    ${ACH_ECHECK_DETAILS}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${nan}    
    Return To Open Invoices Page    ${nan}    ${nan}    ${nan}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${nan}    
    Enter Lumpsum Amount    ${50}    ${nan}    ${nan}    
    Validate Error Message Is Displayed    ${higher than the balance due}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}

Use Valid Check And Pay The Amount
    [Arguments]    ${97.99}    ${Business Checking}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${97.99}    ${Business Checking}    ${ACH_ECHECK_DETAILS}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Return To Open Invoices Page
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${nan}

Enter Lumpsum Amount
    [Arguments]    ${50}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${50}    ${nan}    ${nan}

Validate Error Message Is Displayed
    [Arguments]    ${higher than the balance due}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${higher than the balance due}    ${nan}    ${nan}

","The test case 'TC_66 Validate Customer Is Unable To Process Fully Paid Invoices' aims to ensure that the system prevents users from processing invoices that have already been fully paid. The purpose of this test case is to verify that the proper checks and balances are in place within the invoicing or billing system to avoid redundancy, duplicate entries, or potential mistakes by disallowing any further actions on invoices that have been settled completely. This helps maintain the integrity of financial records and ensures that customers and the system only engage with active and outstanding financial obligations."
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_67 Validate Surcharge Cache Is Cleared When Customer Switches Payment Methods From Saved Credit Card To ACHorECheck,data-driven,TC_67 Validate Surcharge Cache Is Cleared When Customer Switches Payment Methods From Saved Credit Card To ACHorECheck,"*** Settings ***
Documentation    Validate TC_67 Validate Surcharge Cache Is Cleared When Customer Switches Payment Methods From Saved Credit Card To ACHorECheck
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_67 Validate Surcharge Cache Is Cleared When Customer Switches Payment Methods From Saved Credit Card To ACHorECheck
    [Documentation]    Validate TC_67 Validate Surcharge Cache Is Cleared When Customer Switches Payment Methods From Saved Credit Card To ACHorECheck using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Pay The Invoice Using Credit Card And Save The Payment Method    ${integrated_merchant}    ${4111111111111111}    ${09/26}    
    Pay The Invoice Using ACH/Echeck And Save The Payment Method    ${integrated_merchant}    ${Business Checking}    ${12345}    
    Select Use Saved Payment Method    ${nan}    ${nan}    ${nan}    
    Select Any Saved Payment Method    ${41111}    ${nan}    ${nan}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${nan}    
    Enter Lumpsum Amount    ${10}    ${nan}    ${nan}    
    Validate Surcharge Amount Is Displayed    ${nan}    ${nan}    ${nan}    
    Select Any Saved Payment Method    ${TEST ACCEPT BANK - checking}    ${nan}    ${nan}    
    Validate Surcharge Percentage Should Be Equal    ${Surcharge (0.00%)}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Pay The Invoice Using Credit Card And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${4111111111111111}    ${09/26}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${4111111111111111}    ${09/26}

Pay The Invoice Using ACH/Echeck And Save The Payment Method
    [Arguments]    ${integrated_merchant}    ${Business Checking}    ${12345}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${Business Checking}    ${12345}

Select Use Saved Payment Method
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Any Saved Payment Method
    [Arguments]    ${41111}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${41111}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${nan}

Enter Lumpsum Amount
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

Validate Surcharge Amount Is Displayed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Any Saved Payment Method
    [Arguments]    ${TEST ACCEPT BANK - checking}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${TEST ACCEPT BANK - checking}    ${nan}    ${nan}

Validate Surcharge Percentage Should Be Equal
    [Arguments]    ${Surcharge (0.00%)}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Surcharge (0.00%)}    ${nan}    ${nan}

","The purpose of the test case ""TC_67 Validate Surcharge Cache Is Cleared When Customer Switches Payment Methods From Saved Credit Card To ACHorECheck"" is to ensure that the system correctly manages surcharges associated with different payment methods during the checkout process. Specifically, this test case focuses on verifying that any surcharge data cached from a previously selected saved credit card payment method is properly cleared when a customer switches their payment method to ACH (Automated Clearing House) or ECheck.

Key points of validation include:
1. Confirming that no credit card surcharges are applied after switching to ACH or ECheck.
2. Ensuring that the checkout process reflects the correct surcharge (or lack thereof) associated with the newly selected payment method.
3."
Build data-driven paynow test cases for Sterlingcooper Testcases TC_68 Validate Customer Discount Amount Is Applied On Total Due Amount If Payment Is Made Before The Terms Discount Date,data-driven,TC_68 Validate Customer Discount Amount Is Applied On Total Due Amount If Payment Is Made Before The Terms Discount Date,"*** Settings ***
Documentation    Validate TC_68 Validate Customer Discount Amount Is Applied On Total Due Amount If Payment Is Made Before The Terms Discount Date
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_68 Validate Customer Discount Amount Is Applied On Total Due Amount If Payment Is Made Before The Terms Discount Date
    [Documentation]    Validate TC_68 Validate Customer Discount Amount Is Applied On Total Due Amount If Payment Is Made Before The Terms Discount Date using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Validate Discount Applied For Early Payment Before Due Date    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Discount Applied For Early Payment Before Due Date
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","### Summary of Test Case: TC_68 - Validate Customer Discount Amount Is Applied On Total Due Amount If Payment Is Made Before The Terms Discount Date

**Purpose:**

The main objective of Test Case TC_68 is to ensure that the system accurately applies a customer discount on the total due amount when the payment is made before the specified discount date, known as the ""Terms Discount Date."" This test is crucial for verifying that the business logic related to early payment discounts is functioning correctly.

**Key Points:**
1. **Discount Eligibility:** The test assesses whether the payment qualifies for the discount based on the payment being made before the Terms Discount Date.
2. **Calculation Accuracy:** It checks that the discount amount is correctly calculated and applied to the total"
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_69 Validate Surcharge Is Applied As Per The State And This Is Added With Payment Amount To Get The Total Amount,data-driven,TC_69 Validate Surcharge Is Applied As Per The State And This Is Added With Payment Amount To Get The Total Amount,"*** Settings ***
Documentation    Validate TC_69 Validate Surcharge Is Applied As Per The State And This Is Added With Payment Amount To Get The Total Amount
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_69 Validate Surcharge Is Applied As Per The State And This Is Added With Payment Amount To Get The Total Amount
    [Documentation]    Validate TC_69 Validate Surcharge Is Applied As Per The State And This Is Added With Payment Amount To Get The Total Amount using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Validate Total Amount After Selecting State    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Total Amount After Selecting State
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The purpose of the test case 'TC_69 Validate Surcharge Is Applied As Per The State And This Is Added With Payment Amount To Get The Total Amount' is to ensure that the application correctly calculates the total payment amount when a state-specific surcharge is applied. The test involves verifying that:

1. The correct surcharge rate, which varies depending on the state, is applied to the base payment amount.
2. The surcharge is correctly added to the base payment to arrive at the total amount due.
3. The total amount reflects both the base payment and the added surcharge accurately.

This validation ensures compliance with state regulations and guarantees that users are charged the correct total amount inclusive of any applicable surcharges."
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_70 Validate All Current Due Amount Invoice Are Selected When Customer Click On Current Due Amount Link In Outstanding Invoice,data-driven,TC_70 Validate All Current Due Amount Invoice Are Selected When Customer Click On Current Due Amount Link In Outstanding Invoice,"*** Settings ***
Documentation    Validate TC_70 Validate All Current Due Amount Invoice Are Selected When Customer Click On Current Due Amount Link In Outstanding Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_70 Validate All Current Due Amount Invoice Are Selected When Customer Click On Current Due Amount Link In Outstanding Invoice
    [Documentation]    Validate TC_70 Validate All Current Due Amount Invoice Are Selected When Customer Click On Current Due Amount Link In Outstanding Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Create List    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number1}    ${nan}    
    Click On Days Past Due Amount Link    ${Current Day}    ${nan}    ${nan}    
    Validate Specific Invoice Checkbox    ${invoices_list}    ${0}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Create List
    [Arguments]    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number1}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number1}    ${nan}

Click On Days Past Due Amount Link
    [Arguments]    ${Current Day}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Current Day}    ${nan}    ${nan}

Validate Specific Invoice Checkbox
    [Arguments]    ${invoices_list}    ${0}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoices_list}    ${0}    ${nan}

","The test case 'TC_70 Validate All Current Due Amount Invoice Are Selected When Customer Click On Current Due Amount Link In Outstanding Invoice' is designed to ensure that the system correctly selects all outstanding invoices for a customer when they click on the ""Current Due Amount"" link within the Outstanding Invoice section. 

### Purpose:
The primary objective of this test case is to confirm that the functionality of the ""Current Due Amount"" link accurately reflects the selection of all invoices that are due for a particular customer. This ensures that users can efficiently manage their outstanding payments without having to select each invoice individually, thereby improving the user experience and operational efficiency.

### Expected Outcomes:
1. When a customer navigates to the Outstanding Invoice section, the current due amount is clearly displayed"
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_71 Validate All Invoices Due for 1-30 Days Are Selected When Customer Clicks On 1-30 Amount link In Summary Of Outstanding Invoices,data-driven,TC_71 Validate All Invoices Due for 1-30 Days Are Selected When Customer Clicks On 1-30 Amount link In Summary Of Outstanding Invoices,"*** Settings ***
Documentation    Validate TC_71 Validate All Invoices Due for 1-30 Days Are Selected When Customer Clicks On 1-30 Amount link In Summary Of Outstanding Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_71 Validate All Invoices Due for 1-30 Days Are Selected When Customer Clicks On 1-30 Amount link In Summary Of Outstanding Invoices
    [Documentation]    Validate TC_71 Validate All Invoices Due for 1-30 Days Are Selected When Customer Clicks On 1-30 Amount link In Summary Of Outstanding Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Create List    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number1}    ${nan}    
    Click On Days Past Due Amount Link    ${1-30 Days}    ${nan}    ${nan}    
    Validate Specific Invoice Checkbox    ${invoices_list}    ${30}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Create List
    [Arguments]    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number1}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number1}    ${nan}

Click On Days Past Due Amount Link
    [Arguments]    ${1-30 Days}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${1-30 Days}    ${nan}    ${nan}

Validate Specific Invoice Checkbox
    [Arguments]    ${invoices_list}    ${30}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoices_list}    ${30}    ${nan}

","The test case ""TC_71 Validate All Invoices Due for 1-30 Days Are Selected When Customer Clicks On 1-30 Amount Link In Summary Of Outstanding Invoices"" aims to verify the functionality of the ""1-30 Amount"" link in the customer portal's summary of outstanding invoices. Specifically, when a customer clicks on this link, the test case ensures that all invoices due within the 1-30 day period are correctly filtered and displayed.

### Purpose:

1. **Functionality Check**: To confirm that the feature works as intended by correctly filtering and displaying invoices due within 1-30 days.
2. **User Experience**: To ensure customers can easily view and manage their invoices due in the near term ("
Build data-driven paynow test cases for Sterlingcooper Testcases TC_72 Validate All Invoices Due For 31-60 Days Are Selected When Customer Clicks On 31-60 Amount link In Summary Of Outstanding Invoices,data-driven,TC_72 Validate All Invoices Due For 31-60 Days Are Selected When Customer Clicks On 31-60 Amount link In Summary Of Outstanding Invoices,"*** Settings ***
Documentation    Validate TC_72 Validate All Invoices Due For 31-60 Days Are Selected When Customer Clicks On 31-60 Amount link In Summary Of Outstanding Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_72 Validate All Invoices Due For 31-60 Days Are Selected When Customer Clicks On 31-60 Amount link In Summary Of Outstanding Invoices
    [Documentation]    Validate TC_72 Validate All Invoices Due For 31-60 Days Are Selected When Customer Clicks On 31-60 Amount link In Summary Of Outstanding Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Create List    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number1}    ${nan}    
    Click On Days Past Due Amount Link    ${31-60 Days}    ${nan}    ${nan}    
    Validate Specific Invoice Checkbox    ${invoices_list}    ${60}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Create List
    [Arguments]    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number1}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number1}    ${nan}

Click On Days Past Due Amount Link
    [Arguments]    ${31-60 Days}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${31-60 Days}    ${nan}    ${nan}

Validate Specific Invoice Checkbox
    [Arguments]    ${invoices_list}    ${60}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoices_list}    ${60}    ${nan}

","The purpose of the test case 'TC_72 Validate All Invoices Due For 31-60 Days Are Selected When Customer Clicks On 31-60 Amount link In Summary Of Outstanding Invoices' is to verify the functionality of the outstanding invoices summary feature within a customer billing or accounting system. Specifically, this test case aims to confirm that when a customer clicks on the ""31-60 Amount"" link in the summary of their outstanding invoices, the system accurately filters and displays only those invoices that have been due for 31 to 60 days.

The main objectives of this test case include:

1. Ensuring that the link labeled ""31-60 Amount"" is correctly implemented and functional.
2. Verifying that clicking this link triggers the"
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_73 Validate All Invoices Due For 61-90 Days Are Selected When Customer Clicks On 61-90 Amount link In Summary Of Outstanding Invoices,data-driven,TC_73 Validate All Invoices Due For 61-90 Days Are Selected When Customer Clicks On 61-90 Amount link In Summary Of Outstanding Invoices,"*** Settings ***
Documentation    Validate TC_73 Validate All Invoices Due For 61-90 Days Are Selected When Customer Clicks On 61-90 Amount link In Summary Of Outstanding Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_73 Validate All Invoices Due For 61-90 Days Are Selected When Customer Clicks On 61-90 Amount link In Summary Of Outstanding Invoices
    [Documentation]    Validate TC_73 Validate All Invoices Due For 61-90 Days Are Selected When Customer Clicks On 61-90 Amount link In Summary Of Outstanding Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Create List    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number1}    ${nan}    
    Click On Days Past Due Amount Link    ${61-90 Days}    ${nan}    ${nan}    
    Validate Specific Invoice Checkbox    ${invoices_list}    ${80}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Create List
    [Arguments]    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number1}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number1}    ${nan}

Click On Days Past Due Amount Link
    [Arguments]    ${61-90 Days}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${61-90 Days}    ${nan}    ${nan}

Validate Specific Invoice Checkbox
    [Arguments]    ${invoices_list}    ${80}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoices_list}    ${80}    ${nan}

","The test case 'TC_73 Validate All Invoices Due For 61-90 Days Are Selected When Customer Clicks On 61-90 Amount link In Summary Of Outstanding Invoices' aims to verify the functionality and accuracy of the filter and selection process on an invoicing or accounts receivable platform. The main purpose of this test is to ensure that when a customer clicks on the '61-90 Amount' link within the summary section of outstanding invoices:

1. **Correct Filtering**: Only the invoices that are due for a period ranging from 61 to 90 days are displayed.
2. **Accuracy of Information**: The filtered list accurately reflects all the invoices that belong in the 61-90 days overdue category.
3. **"
Generate data-driven paynow test cases for Sterlingcooper Testcases TC_74 Validate All Invoices Due For Over 90 Days Are Selected When Customer Clicks On Over 90 Amount Link In Summary Of Outstanding Invoices,data-driven,TC_74 Validate All Invoices Due For Over 90 Days Are Selected When Customer Clicks On Over 90 Amount Link In Summary Of Outstanding Invoices,"*** Settings ***
Documentation    Validate TC_74 Validate All Invoices Due For Over 90 Days Are Selected When Customer Clicks On Over 90 Amount Link In Summary Of Outstanding Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_74 Validate All Invoices Due For Over 90 Days Are Selected When Customer Clicks On Over 90 Amount Link In Summary Of Outstanding Invoices
    [Documentation]    Validate TC_74 Validate All Invoices Due For Over 90 Days Are Selected When Customer Clicks On Over 90 Amount Link In Summary Of Outstanding Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Create List    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number1}    ${nan}    
    Click On Days Past Due Amount Link    ${Over 90 Days}    ${nan}    ${nan}    
    Validate Specific Invoice Checkbox    ${invoices_list}    ${200}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Create List
    [Arguments]    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number1}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number1}    ${nan}

Click On Days Past Due Amount Link
    [Arguments]    ${Over 90 Days}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Over 90 Days}    ${nan}    ${nan}

Validate Specific Invoice Checkbox
    [Arguments]    ${invoices_list}    ${200}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoices_list}    ${200}    ${nan}

","**Test Case Summary: TC_74 - Validate All Invoices Due For Over 90 Days Are Selected When Customer Clicks On Over 90 Amount Link In Summary Of Outstanding Invoices**

**Purpose:**
The primary goal of this test case is to ensure the accuracy and functionality of the feature that allows customers to view and select all their outstanding invoices that are overdue by more than 90 days. Specifically, this test case validates that when a customer clicks on the ""Over 90 Amount"" link located in the summary section of outstanding invoices, the system properly filters and displays only those invoices which are overdue for more than 90 days.

**Key Objectives:**
1. **User Interaction:** Confirm that clicking the ""Over 90 Amount"" link"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_75 Validate Only Filtered Invoices Are Displayed As Per The Filter Conditions,data-driven,TC_75 Validate Only Filtered Invoices Are Displayed As Per The Filter Conditions,"*** Settings ***
Documentation    Validate TC_75 Validate Only Filtered Invoices Are Displayed As Per The Filter Conditions
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_75 Validate Only Filtered Invoices Are Displayed As Per The Filter Conditions
    [Documentation]    Validate TC_75 Validate Only Filtered Invoices Are Displayed As Per The Filter Conditions using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Create Multiple Invoices With Multiple Due Dates    ${account_number}    ${integrated_merchant}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice.1}    ${nan}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Sort Invoices Grid With Date    ${nan}    ${nan}    ${nan}    
    Validate Invoices Are Sorted In Grid    ${nan}    ${nan}    ${nan}    
    Choose Filter Type    ${Inv #}    ${nan}    ${nan}    
    Choose Filter Option And Enter Value    ${Contains}    ${INV}    ${nan}    
    Filter Invoice By Using Logical Operator    ${And}    ${Contains}    ${invoice.1}    
    Validate Filtered Invoices Are Displayed    ${invoice.1}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Create Multiple Invoices With Multiple Due Dates
    [Arguments]    ${account_number}    ${integrated_merchant}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${account_number}    ${integrated_merchant}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice.1}    ${nan}
    [Return]    ${float}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice.1}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Sort Invoices Grid With Date
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Invoices Are Sorted In Grid
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Choose Filter Type
    [Arguments]    ${Inv #}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Inv #}    ${nan}    ${nan}

Choose Filter Option And Enter Value
    [Arguments]    ${Contains}    ${INV}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Contains}    ${INV}    ${nan}

Filter Invoice By Using Logical Operator
    [Arguments]    ${And}    ${Contains}    ${invoice.1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${And}    ${Contains}    ${invoice.1}

Validate Filtered Invoices Are Displayed
    [Arguments]    ${invoice.1}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice.1}    ${nan}    ${nan}

","The purpose of the test case 'TC_75 Validate Only Filtered Invoices Are Displayed As Per The Filter Conditions' is to ensure that the application's invoice filtering functionality works correctly. This test case aims to verify that when a user applies specific filter criteria to the list of invoices, the system accurately displays only those invoices that meet the specified conditions. It ensures that irrelevant invoices that do not match the filter criteria are excluded from the displayed results, thereby confirming the reliability and accuracy of the filtering feature within the application. This functionality is crucial for enabling users to quickly and effectively locate and manage invoices based on their particular requirements."
Build data-driven paynow test cases for Sterlingcooper Testcases TC_76 Validate Customer Is Able To Select Pages From Dropdown In Specific Invoices,data-driven,TC_76 Validate Customer Is Able To Select Pages From Dropdown In Specific Invoices,"*** Settings ***
Documentation    Validate TC_76 Validate Customer Is Able To Select Pages From Dropdown In Specific Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_76 Validate Customer Is Able To Select Pages From Dropdown In Specific Invoices
    [Documentation]    Validate TC_76 Validate Customer Is Able To Select Pages From Dropdown In Specific Invoices using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${SDT_1}    ${INV-1}    ${}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${}    
    Validate Invoices Count In Selected Page    ${nan}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${SDT_1}    ${INV-1}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${SDT_1}    ${INV-1}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${}

Validate Invoices Count In Selected Page
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The purpose of the test case 'TC_76 Validate Customer Is Able To Select Pages From Dropdown In Specific Invoices' is to ensure that customers can easily navigate through multiple pages of information within the 'Invoices' section of a particular application or platform. This test case focuses on verifying the functionality and usability of a dropdown menu that allows users to select and view different pages of invoices.

Key aspects of this test case include:

1. **User Interface and Usability**: Assessing whether the dropdown menu is easily accessible and user-friendly.
2. **Functionality**: Confirming that selecting a different page from the dropdown accurately displays the corresponding invoice content.
3. **Consistency**: Ensuring the dropdown menu consistently works across different browsers and devices."
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_77 Validate Invoice Check Box Should Be Checked By Default When It Passed Due Date,data-driven,TC_77 Validate Invoice Check Box Should Be Checked By Default When It Passed Due Date,"*** Settings ***
Documentation    Validate TC_77 Validate Invoice Check Box Should Be Checked By Default When It Passed Due Date
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_77 Validate Invoice Check Box Should Be Checked By Default When It Passed Due Date
    [Documentation]    Validate TC_77 Validate Invoice Check Box Should Be Checked By Default When It Passed Due Date using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Create Multiple Invoices Through API    ${account_number}    ${integrated_merchant}    ${today-3}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice.0}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Validate Multiple Invoices Check Box Should Be Checked By Default    ${invoice}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${account_number}    ${integrated_merchant}    ${today-3}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${account_number}    ${integrated_merchant}    ${today-3}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice.0}    ${nan}
    [Return]    ${float}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice.0}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Validate Multiple Invoices Check Box Should Be Checked By Default
    [Arguments]    ${invoice}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice}    ${nan}    ${nan}

","**Test Case: TC_77 - Validate Invoice Check Box Should Be Checked By Default When It Passed Due Date**

**Purpose:**

The primary objective of this test case (TC_77) is to verify the behavior of the invoice management system, specifically focusing on the user interface component related to overdue invoices. The test case ensures that when an invoice surpasses its due date, the designated check box next to it is automatically marked as checked by default. This functionality is essential for several reasons:

1. **User Experience:** Automatically marking overdue invoices improve user efficiency and ensure they can easily identify and manage overdue payments without additional steps.
2. **Functional Accuracy:** It is important that the system adheres to business rules that stipulate how overdue invoices should"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_78 Validate Customer Is Able To View Last 7 Days Payment History,data-driven,TC_78 Validate Customer Is Able To View Last 7 Days Payment History,"*** Settings ***
Documentation    Validate TC_78 Validate Customer Is Able To View Last 7 Days Payment History
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_78 Validate Customer Is Able To View Last 7 Days Payment History
    [Documentation]    Validate TC_78 Validate Customer Is Able To View Last 7 Days Payment History using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Navigate To Menu Tab    ${Payment History}    ${nan}    ${}    
    Select Date Range    ${Last 7 Days}    ${nan}    ${}    
    Validate Selected Date Is Displayed In Date Range    ${6}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Navigate To Menu Tab
    [Arguments]    ${Payment History}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment History}    ${nan}    ${}

Select Date Range
    [Arguments]    ${Last 7 Days}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Last 7 Days}    ${nan}    ${}

Validate Selected Date Is Displayed In Date Range
    [Arguments]    ${6}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${6}    ${nan}    ${}

","The test case 'TC_78 Validate Customer Is Able To View Last 7 Days Payment History' aims to verify the functionality and accuracy of a system feature that allows customers to review their payment transactions from the past week. 

### Purpose:
1. **Access Verification**: Ensure that all customers have appropriate and easy access to view their payment history for the last 7 days. This includes validating the navigation flow and any required authentication steps.
   
2. **Data Accuracy**: Confirm that the displayed payment entries are accurate and correspond exactly to the transactions made by the customer within the specified period.

3. **User Interface (UI) and User Experience (UX)**: Check that the interface is intuitive, the payment history is easy to read, and"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_79 Validate Customer Is Able To Navigate To Next Page,data-driven,TC_79 Validate Customer Is Able To Navigate To Next Page,"*** Settings ***
Documentation    Validate TC_79 Validate Customer Is Able To Navigate To Next Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_79 Validate Customer Is Able To Navigate To Next Page
    [Documentation]    Validate TC_79 Validate Customer Is Able To Navigate To Next Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Navigate To Menu Tab    ${Payment History}    ${nan}    ${}    
    Validate Next Button Is Dispayed    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Navigate To Menu Tab
    [Arguments]    ${Payment History}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment History}    ${nan}    ${}

Validate Next Button Is Dispayed
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","**Test Case Summary: TC_79 Validate Customer Is Able To Navigate To Next Page**

**Purpose**:
The objective of this test case is to ensure that a customer can seamlessly navigate to the next page of a paginated list on the application or website. Pagination is commonly used in scenarios where data is extensive, such as product listings, search results, or user comments. This test case specifically checks the functionality and user experience related to moving from one page to the next.

**Key Goals**:
1. Verify the presence of pagination controls on the current page.
2. Ensure that the 'Next' button or equivalent control is clickable and performs the expected action.
3. Confirm the page number or indicators reflect the transition to the next page.
4"
Create data-driven paynow test cases for Sterlingcooper Testcases TC_80 Validate Customer Is Unable To Process Payment With Decline Check,data-driven,TC_80 Validate Customer Is Unable To Process Payment With Decline Check,"*** Settings ***
Documentation    Validate TC_80 Validate Customer Is Unable To Process Payment With Decline Check
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_80 Validate Customer Is Unable To Process Payment With Decline Check
    [Documentation]    Validate TC_80 Validate Customer Is Unable To Process Payment With Decline Check using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Enter Customer Details    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${}    
    Enter ACH/ECheck Details    ${111111111}    ${000000000}    ${}    
    Validate Errors After Clicking On Process Invoice    ${Message: DECLINE CHECK}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${STERLING_COOPER_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${}

Enter ACH/ECheck Details
    [Arguments]    ${111111111}    ${000000000}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${111111111}    ${000000000}    ${}

Validate Errors After Clicking On Process Invoice
    [Arguments]    ${Message: DECLINE CHECK}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Message: DECLINE CHECK}    ${nan}    ${}

","The purpose of the test case 'TC_80 Validate Customer Is Unable To Process Payment With Decline Check' is to ensure that the payment processing system correctly handles situations where a customer's payment method, specifically a check, is declined. This test verifies that the system properly identifies and rejects the declined check, and provides appropriate feedback or error messages to the customer. Additionally, it ensures that no transaction is completed or recorded in the system when a check payment is declined. This helps in maintaining the integrity of the payment process and ensuring accurate transaction records."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_81 Validate All Invoice Are Selected When Customer Clicks On Total Amount Link In Summary of Outstanding Invoices,data-driven,TC_81 Validate All Invoice Are Selected When Customer Clicks On Total Amount Link In Summary of Outstanding Invoices,"*** Settings ***
Documentation    Validate TC_81 Validate All Invoice Are Selected When Customer Clicks On Total Amount Link In Summary of Outstanding Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_81 Validate All Invoice Are Selected When Customer Clicks On Total Amount Link In Summary of Outstanding Invoices
    [Documentation]    Validate TC_81 Validate All Invoice Are Selected When Customer Clicks On Total Amount Link In Summary of Outstanding Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Create List    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number1}    ${nan}    
    Click On Total Amount Link    ${nan}    ${nan}    ${nan}    
    Validate All Invoices Are Checked    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Create List
    [Arguments]    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${invoice_number1}    ${invoice_number2}    ${invoice_number3}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number1}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number1}    ${nan}

Click On Total Amount Link
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate All Invoices Are Checked
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case ""TC_81 Validate All Invoice Are Selected When Customer Clicks On Total Amount Link In Summary of Outstanding Invoices"" aims to verify the functionality of the user interface element associated with viewing and managing outstanding invoices for a customer. Specifically, the purpose of this test case is to ensure that when a customer clicks on the ""Total Amount"" link within the summary section of their outstanding invoices, all individual invoices listed are automatically selected. This functionality is likely intended to facilitate bulk actions, such as payment or exporting of a comprehensive list of invoices, thereby enhancing the user experience by reducing the need for manual selection of each invoice. The test ensures that the link behaves as expected and improves operational efficiency for the customer."
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_82 Validate Customer Is Able To View Payment History Depending On Selected Start Date And End Date,data-driven,TC_82 Validate Customer Is Able To View Payment History Depending On Selected Start Date And End Date,"*** Settings ***
Documentation    Validate TC_82 Validate Customer Is Able To View Payment History Depending On Selected Start Date And End Date
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_82 Validate Customer Is Able To View Payment History Depending On Selected Start Date And End Date
    [Documentation]    Validate TC_82 Validate Customer Is Able To View Payment History Depending On Selected Start Date And End Date using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${integrated_merchant}    ${account_number}    ${invoice_number}    
    Navigate To Menu Tab    ${Payment History}    ${nan}    ${nan}    
    Select Date Range From Calendar    ${15}    ${18}    ${nan}    
    Validate Invoice Number Is Displayed    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${integrated_merchant}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${account_number}    ${invoice_number}

Navigate To Menu Tab
    [Arguments]    ${Payment History}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment History}    ${nan}    ${nan}

Select Date Range From Calendar
    [Arguments]    ${15}    ${18}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${15}    ${18}    ${nan}

Validate Invoice Number Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","Certainly! The test case 'TC_82 Validate Customer Is Able To View Payment History Depending On Selected Start Date And End Date' aims to confirm that the system allows customers to accurately view their payment history within a specified date range. The purpose is to ensure that when a customer sets a start date and an end date, the system correctly filters and displays the payment transactions that occurred within the provided timeframe. This verification helps maintain transparency and accessibility for customers to review their payment records, ensuring the reliability and usability of the date filtering feature in the payment history functionality."
Create data-driven paynow test cases for Sterlingcooper Testcases TC_83 Validate Payment History Is Updated As Soon As Payment Receipt Generated,data-driven,TC_83 Validate Payment History Is Updated As Soon As Payment Receipt Generated,"*** Settings ***
Documentation    Validate TC_83 Validate Payment History Is Updated As Soon As Payment Receipt Generated
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_83 Validate Payment History Is Updated As Soon As Payment Receipt Generated
    [Documentation]    Validate TC_83 Validate Payment History Is Updated As Soon As Payment Receipt Generated using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${integrated_merchant}    ${account_number}    ${invoice_number}    
    Navigate To Menu Tab    ${Payment History}    ${nan}    ${nan}    
    Validate Invoice Number Is Displayed    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${integrated_merchant}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${integrated_merchant}    ${account_number}    ${invoice_number}

Navigate To Menu Tab
    [Arguments]    ${Payment History}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment History}    ${nan}    ${nan}

Validate Invoice Number Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","The purpose of the test case 'TC_83 Validate Payment History Is Updated As Soon As Payment Receipt Generated' is to ensure that the payment history section of a user account is updated immediately after a payment is successfully processed and a receipt is generated. This test case aims to verify the real-time updating mechanism for payment records, ensuring accuracy and timeliness of financial data presented to the user. It aims to boost user confidence in the payment system by confirming that their transactions are documented without delay. This includes checking both the appearance of a new entry in the payment history and the correctness of the details recorded, such as the date, amount, and transaction ID."
Validate data-driven paynow test cases for Sterlingcooper Testcases TC_84 Validate Customer Is Able To Download PDF From Invoice Page And Verify The Data,data-driven,TC_84 Validate Customer Is Able To Download PDF From Invoice Page And Verify The Data,"*** Settings ***
Documentation    Validate TC_84 Validate Customer Is Able To Download PDF From Invoice Page And Verify The Data
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_84 Validate Customer Is Able To Download PDF From Invoice Page And Verify The Data
    [Documentation]    Validate TC_84 Validate Customer Is Able To Download PDF From Invoice Page And Verify The Data using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Navigate To Invoice Page    ${invoice_number}    ${nan}    ${}    
    Navigate To Invoice PDF Page    ${nan}    ${nan}    ${}    
    Get PDF Content From Browser    ${invoice_number}    ${nan}    ${}    
    Validate PDF Content    ${invoice_content}    ${invoice_number}    ${}    
    Open PayNOW From PDF    ${invoice_content}    ${nan}    ${}    
    Validate PayNOW Page Is Displayed    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Navigate To Invoice Page
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

Navigate To Invoice PDF Page
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Get PDF Content From Browser
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

Validate PDF Content
    [Arguments]    ${invoice_content}    ${invoice_number}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_content}    ${invoice_number}    ${}

Open PayNOW From PDF
    [Arguments]    ${invoice_content}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_content}    ${nan}    ${}

Validate PayNOW Page Is Displayed
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","Certainly! The test case ""TC_84 Validate Customer Is Able To Download PDF From Invoice Page And Verify The Data"" is designed to ensure that a customer can successfully download a PDF version of an invoice from the invoice page and that the downloaded PDF contains accurate and complete data. Here’s a summary of its purpose:

1. **PDF Download Functionality**: Verify that the feature allowing customers to download their invoice as a PDF is operational and accessible from the invoice page.

2. **Data Integrity**: Check that the information in the downloaded PDF matches the data displayed on the invoice page. This includes verifying specific details such as the invoice number, date, billing and shipping addresses, itemized list of products or services, quantities, prices, taxes,"
Generate data-driven paynow test cases for non integrated Testcases TC_01 Validate Non Integrated Customer Is Able To Process The Lump Sum Payment,data-driven,TC_01 Validate Non Integrated Customer Is Able To Process The Lump Sum Payment,"*** Settings ***
Documentation    Validate TC_01 Validate Non Integrated Customer Is Able To Process The Lump Sum Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Non Integrated Customer Is Able To Process The Lump Sum Payment
    [Documentation]    Validate TC_01 Validate Non Integrated Customer Is Able To Process The Lump Sum Payment using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${nan}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Validate Total Charges Under Summary Of Payment    ${$1.03}    ${nan}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Details In Generated Payment Receipt    ${Lump Sum (Apply to Oldest)}    ${411111******1111}    ${Card}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${nan}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Validate Total Charges Under Summary Of Payment
    [Arguments]    ${$1.03}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${$1.03}    ${nan}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Details In Generated Payment Receipt
    [Arguments]    ${Lump Sum (Apply to Oldest)}    ${411111******1111}    ${Card}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Lump Sum (Apply to Oldest)}    ${411111******1111}    ${Card}

","**Test Case: TC_01 Validate Non Integrated Customer Is Able To Process The Lump Sum Payment**

**Purpose:**

The objective of this test case is to verify that a non-integrated customer (a customer who is not linked through a system integration) can successfully execute a lump sum payment transaction. Specifically, the test aims to ensure that such a customer can:

1. Access the payment system.
2. Enter the required payment details.
3. Process a one-time, full payment towards a specified account or service.
4. Receive appropriate confirmation or acknowledgment of the payment.

**Key Considerations:**

- **User Validation**: Confirming that the customer meets the non-integrated criteria.
- **Data Entry**: Ensuring the customer can"
Build data-driven paynow test cases for non integrated Testcases TC_02 Validate Non Integrated Customer Is Able To Process The Payment Only Against The Selected Invoice,data-driven,TC_02 Validate Non Integrated Customer Is Able To Process The Payment Only Against The Selected Invoice,"*** Settings ***
Documentation    Validate TC_02 Validate Non Integrated Customer Is Able To Process The Payment Only Against The Selected Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Non Integrated Customer Is Able To Process The Payment Only Against The Selected Invoice
    [Documentation]    Validate TC_02 Validate Non Integrated Customer Is Able To Process The Payment Only Against The Selected Invoice using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Click On Add Invoice    ${nan}    ${nan}    ${nan}    
    Add Invoice Details    ${23456}    ${500}    ${1}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}    
    Enter ACH/ECheck Details    ${ACH_ECHECK_DETAILS}    ${nan}    ${nan}    
    Validate Total Charges Under Summary Of Payment    ${$1.00}    ${nan}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Details In Generated Payment Receipt    ${Specific Invoice}    ${11*****11}    ${ACH}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Click On Add Invoice
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Add Invoice Details
    [Arguments]    ${23456}    ${500}    ${1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${23456}    ${500}    ${1}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter ACH/ECheck Details
    [Arguments]    ${ACH_ECHECK_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH_ECHECK_DETAILS}    ${nan}    ${nan}

Validate Total Charges Under Summary Of Payment
    [Arguments]    ${$1.00}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${$1.00}    ${nan}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Details In Generated Payment Receipt
    [Arguments]    ${Specific Invoice}    ${11*****11}    ${ACH}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${11*****11}    ${ACH}

","Test Case 'TC_02 Validate Non Integrated Customer Is Able To Process The Payment Only Against The Selected Invoice' aims to ensure that non-integrated customers—those who do not have their systems directly linked to the service provider’s system—are capable of making payments specifically tied to individual invoices. 

The primary purpose of this test case is to verify that the payment processing system accurately allows these customers to select an invoice and proceed with the payment for that particular invoice only, without inadvertently allocating funds to other invoices or general accounts.

This test is critical to ensure financial transactions are precise, thereby preventing potential billing errors, enhancing user satisfaction, and maintaining accurate financial records for both the customer and the provider. The scenario checks the robustness of the payment selection mechanism and ensures"
Create data-driven paynow test cases for non integrated Testcases TC_03 Validate Non Integrated Customer Is Unable To Process The Payment Without Entering Routing Number,data-driven,TC_03 Validate Non Integrated Customer Is Unable To Process The Payment Without Entering Routing Number,"*** Settings ***
Documentation    Validate TC_03 Validate Non Integrated Customer Is Unable To Process The Payment Without Entering Routing Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate Non Integrated Customer Is Unable To Process The Payment Without Entering Routing Number
    [Documentation]    Validate TC_03 Validate Non Integrated Customer Is Unable To Process The Payment Without Entering Routing Number using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${}    
    Enter ACH/ECheck Details    ${111111111}    ${nan}    ${}    
    Validate Errors After Clicking On Process Invoice    ${Invalid Routing Number}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${}

Enter ACH/ECheck Details
    [Arguments]    ${111111111}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${111111111}    ${nan}    ${}

Validate Errors After Clicking On Process Invoice
    [Arguments]    ${Invalid Routing Number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Invalid Routing Number}    ${nan}    ${}

","**Test Case: TC_03 Validate Non-Integrated Customer Is Unable To Process The Payment Without Entering Routing Number**

**Purpose:**
The primary objective of this test case is to ensure that a customer who is not integrated with the payment system (referred to as a non-integrated customer) cannot successfully process a payment transaction if they fail to provide a valid routing number. The routing number is a critical piece of information required for validating bank account details and completing electronic payments. This test verifies whether the system enforces this validation rule, thereby preventing non-integrated customers from proceeding with incomplete or incorrect payment information.

**Key Points:**
1. **User Role**: Non-integrated customer.
2. **Action**: Attempting to process"
Build data-driven paynow test cases for non integrated Testcases TC_04 Validate Non Integrated Customer Is Able To Remove Selected Invoice,data-driven,TC_04 Validate Non Integrated Customer Is Able To Remove Selected Invoice,"*** Settings ***
Documentation    Validate TC_04 Validate Non Integrated Customer Is Able To Remove Selected Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate Non Integrated Customer Is Able To Remove Selected Invoice
    [Documentation]    Validate TC_04 Validate Non Integrated Customer Is Able To Remove Selected Invoice using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Click On Add Invoice    ${nan}    ${nan}    ${nan}    
    Add Invoice Details    ${23456}    ${500}    ${1.0}    
    Validate Selected Invoice Should Be Removed    ${23456}    ${nan}    ${nan}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Click On Add Invoice
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Add Invoice Details
    [Arguments]    ${23456}    ${500}    ${1.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${23456}    ${500}    ${1.0}

Validate Selected Invoice Should Be Removed
    [Arguments]    ${23456}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${23456}    ${nan}    ${nan}

","The test case ""TC_04 Validate Non Integrated Customer Is Able To Remove Selected Invoice"" is designed to verify that a customer who is not integrated within a specific system or platform can successfully remove a selected invoice. The primary objective is to ensure that the user interface and backend processes work correctly to allow such a customer to delete individual invoices from their account or record.

### Purpose:

1. **User Verification**: To confirm that non-integrated customers have the necessary permissions and functionality to manage their invoices, specifically to remove an existing invoice.
2. **System Integrity**: To check that the invoice removal process is functioning correctly without causing errors or inconsistencies within the system.
3. **Usability**: To ensure that the process for removing invoices is"
Generate data-driven paynow test cases for non integrated Testcases TC_05 Validate Default Checkbox States For Payment Authorization And Send-Email Receipt,data-driven,TC_05 Validate Default Checkbox States For Payment Authorization And Send-Email Receipt,"*** Settings ***
Documentation    Validate TC_05 Validate Default Checkbox States For Payment Authorization And Send-Email Receipt
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Default Checkbox States For Payment Authorization And Send-Email Receipt
    [Documentation]    Validate TC_05 Validate Default Checkbox States For Payment Authorization And Send-Email Receipt using the following steps
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${}    ${}    
    Validate Payment Authorization Is Unchecked By Default    ${nan}    ${}    ${}    
    Validate Send EMail Receipt Is Checked By Default    ${nan}    ${}    ${}

*** Keywords ***
Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${}    ${}

Validate Payment Authorization Is Unchecked By Default
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Validate Send EMail Receipt Is Checked By Default
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

",Test Case 'TC_05 Validate Default Checkbox States For Payment Authorization And Send-Email Receipt' aims to verify the initial state of checkboxes related to payment authorization and the option to receive an email receipt during the checkout process. The purpose of this test case is to ensure that these checkboxes are set to their correct default states (either checked or unchecked) when a user reaches the payment step. Ensuring the default states are correct is crucial as it affects user experience and compliance with business requirements or regulations relating to consent and communication preferences. The test ensures that users see the expected options without needing to manually adjust them if the defaults align with typical user preferences or legal stipulations.
Generate data-driven paynow test cases for non integrated Testcases TC_06 Validate Customer Is Unable To Process Payment Without Selecting Payment Authorization,data-driven,TC_06 Validate Customer Is Unable To Process Payment Without Selecting Payment Authorization,"*** Settings ***
Documentation    Validate TC_06 Validate Customer Is Unable To Process Payment Without Selecting Payment Authorization
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_06 Validate Customer Is Unable To Process Payment Without Selecting Payment Authorization
    [Documentation]    Validate TC_06 Validate Customer Is Unable To Process Payment Without Selecting Payment Authorization using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${Credit Card}    ${nan}    ${}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${}    
    Process Payment Without Payment Authorization    ${nan}    ${nan}    ${}    
    Validate Error Message Is Displayed    ${To proceed you must agree to: ""Payment Authorization""}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${}

Process Payment Without Payment Authorization
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Error Message Is Displayed
    [Arguments]    ${To proceed you must agree to: ""Payment Authorization""}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${To proceed you must agree to: ""Payment Authorization""}    ${nan}    ${}

","**Test Case Summary: TC_06 Validate Customer Is Unable To Process Payment Without Selecting Payment Authorization**

**Purpose**:
The purpose of this test case, TC_06, is to confirm that the payment processing system does not allow a customer to complete a payment transaction if they have not selected the necessary payment authorization option. This validation is crucial for ensuring compliance with legal, financial, and procedural requirements that mandate explicit customer consent for payment transactions.

By testing this scenario, the aim is to ensure the system properly enforces authorization protocols, thereby preventing unauthorized or unintentional payments. This helps in protecting both the customer's financial interests and the company from potential disputes and fraud."
Build data-driven paynow test cases for non integrated Testcases TC_07 Validate Customer Is Able To Navigate To Payment Authorization Screen After Clicking On Payment Authorization Link,data-driven,TC_07 Validate Customer Is Able To Navigate To Payment Authorization Screen After Clicking On Payment Authorization Link,"*** Settings ***
Documentation    Validate TC_07 Validate Customer Is Able To Navigate To Payment Authorization Screen After Clicking On Payment Authorization Link
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Customer Is Able To Navigate To Payment Authorization Screen After Clicking On Payment Authorization Link
    [Documentation]    Validate TC_07 Validate Customer Is Able To Navigate To Payment Authorization Screen After Clicking On Payment Authorization Link using the following steps
Generate Random Customer Details    ${nan}    ${}    ${}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${}    ${}    
    Navigate To Payment Authorization And Validate Title    ${nan}    ${}    ${}    
    Click On Close Button    ${nan}    ${}    ${}    
    Validate Payment Authorization Screen Is Closed    ${nan}    ${}    ${}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${}    ${}

Navigate To Payment Authorization And Validate Title
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Click On Close Button
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Validate Payment Authorization Screen Is Closed
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

","**Test Case TC_07: Validate Customer Is Able To Navigate To Payment Authorization Screen After Clicking On Payment Authorization Link**

**Purpose:**

The objective of this test case is to ensure that customers can successfully navigate to the Payment Authorization Screen upon selecting the Payment Authorization link. This is a critical function, as it forms part of the payment workflow where customers grant permission for transactions, ensuring secure and authorized payments.

**Key Objectives:**
1. **Verify Link Functionality:** Confirm that the Payment Authorization link is correctly configured and directs the user to the appropriate screen.
2. **User Interface Check:** Ensure that the Payment Authorization screen loads correctly and is fully functional, with all necessary elements (such as input fields, buttons, and information) visible and accessible"
Validate data-driven paynow test cases for non integrated Testcases TC_08 Validate Non Integrated Customer Is Able To Process The Payment Only Against The Selected Invoice Using ACHoreCheck,data-driven,TC_08 Validate Non Integrated Customer Is Able To Process The Payment Only Against The Selected Invoice Using ACHoreCheck,"*** Settings ***
Documentation    Validate TC_08 Validate Non Integrated Customer Is Able To Process The Payment Only Against The Selected Invoice Using ACHoreCheck
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_08 Validate Non Integrated Customer Is Able To Process The Payment Only Against The Selected Invoice Using ACHoreCheck
    [Documentation]    Validate TC_08 Validate Non Integrated Customer Is Able To Process The Payment Only Against The Selected Invoice Using ACHoreCheck using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch Paynow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Click On Add Invoice    ${nan}    ${nan}    ${nan}    
    Add Invoice Details    ${12345}    ${500}    ${1}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}    
    Enter ACH/ECheck Details    ${ACH_ECHECK_DETAILS}    ${nan}    ${nan}    
    Validate Total Charges Under Summary Of Payment    ${$1.00}    ${nan}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Details In Generated Payment Receipt    ${Specific Invoice}    ${11*****11}    ${ACH}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch Paynow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Click On Add Invoice
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Add Invoice Details
    [Arguments]    ${12345}    ${500}    ${1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${12345}    ${500}    ${1}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter ACH/ECheck Details
    [Arguments]    ${ACH_ECHECK_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH_ECHECK_DETAILS}    ${nan}    ${nan}

Validate Total Charges Under Summary Of Payment
    [Arguments]    ${$1.00}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${$1.00}    ${nan}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Details In Generated Payment Receipt
    [Arguments]    ${Specific Invoice}    ${11*****11}    ${ACH}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${11*****11}    ${ACH}

","Test Case 'TC_08 Validate Non Integrated Customer Is Able To Process The Payment Only Against The Selected Invoice Using ACHoreCheck' aims to ensure that a non-integrated customer (a customer whose systems are not directly linked with the payment processing system) can successfully complete a payment specifically against an invoice they choose using ACH (Automated Clearing House) or eCheck methods.

**Purpose**:
1. **Non-Integrated Customers**: Verify that customers who do not have direct system integration can still perform financial transactions.
2. **Invoice-Specific Payment**: Ensure that the payment can be directed only towards the selected invoice, preventing errors where payments could be mistakenly applied to incorrect invoices.
3. **Payment Method Validation**: Confirm the functioning of ACH"
Create data-driven paynow test cases for non integrated Testcases TC_09 Validate Non Integrated Customer Is Able To Add Multiple Invoices,data-driven,TC_09 Validate Non Integrated Customer Is Able To Add Multiple Invoices,"*** Settings ***
Documentation    Validate TC_09 Validate Non Integrated Customer Is Able To Add Multiple Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_09 Validate Non Integrated Customer Is Able To Add Multiple Invoices
    [Documentation]    Validate TC_09 Validate Non Integrated Customer Is Able To Add Multiple Invoices using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Click On Add Invoice    ${nan}    ${nan}    ${nan}    
    Add Invoice Details    ${12345}    ${500}    ${1}    
    Click On Add Invoice    ${nan}    ${nan}    ${nan}    
    Add Invoice Details    ${13425}    ${600}    ${3}    
    Click On Add Invoice    ${nan}    ${nan}    ${nan}    
    Add Invoice Details    ${78645}    ${1000}    ${5}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Validate Total Charges Under Summary Of Payment    ${$9.27}    ${nan}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Details In Generated Payment Receipt    ${Specific Invoice}    ${411111******1111}    ${Card}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Click On Add Invoice
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Add Invoice Details
    [Arguments]    ${12345}    ${500}    ${1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${12345}    ${500}    ${1}

Click On Add Invoice
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Add Invoice Details
    [Arguments]    ${13425}    ${600}    ${3}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${13425}    ${600}    ${3}

Click On Add Invoice
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Add Invoice Details
    [Arguments]    ${78645}    ${1000}    ${5}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${78645}    ${1000}    ${5}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Validate Total Charges Under Summary Of Payment
    [Arguments]    ${$9.27}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${$9.27}    ${nan}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Details In Generated Payment Receipt
    [Arguments]    ${Specific Invoice}    ${411111******1111}    ${Card}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${411111******1111}    ${Card}

","**Test Case: TC_09 Validate Non-Integrated Customer Is Able To Add Multiple Invoices**

**Purpose:**

This test case aims to verify that a customer who is not integrated into a comprehensive financial or accounting system (non-integrated customer) can successfully add multiple invoices within the application or system. The objective is to ensure that despite the lack of integration, the customer can efficiently perform the task of invoicing without any hindrances. This involves checking the following aspects:

1. The customer can access the invoicing functionalities without requiring system integration.
2. The invoicing interface and process work as intended, allowing for the creation and management of multiple invoices.
3. The system can handle multiple entries and manage them appropriately without errors or performance degradation"
Validate data-driven paynow test cases for non integrated Testcases TC_10 Validate Differential Surcharge Amount Applied When Colorado State Is Selected,data-driven,TC_10 Validate Differential Surcharge Amount Applied When Colorado State Is Selected,"*** Settings ***
Documentation    Validate TC_10 Validate Differential Surcharge Amount Applied When Colorado State Is Selected
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Differential Surcharge Amount Applied When Colorado State Is Selected
    [Documentation]    Validate TC_10 Validate Differential Surcharge Amount Applied When Colorado State Is Selected using the following steps
Generate Random Customer Details    ${nan}    ${}    ${}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${}    ${}    
    Select State    ${CO (COLORADO)}    ${}    ${}    
    Select Payment Type    ${Lump Sum}    ${}    ${}    
    Enter Lumpsum Amount    ${10}    ${}    ${}    
    Select Payment Method    ${Credit Card}    ${}    ${}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${}    ${}    
    Validate Surcharge Amount Is Displayed    ${nan}    ${}    ${}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${}    ${}

Select State
    [Arguments]    ${CO (COLORADO)}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CO (COLORADO)}    ${}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${}    ${}

Enter Lumpsum Amount
    [Arguments]    ${10}    ${}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${10}    ${}    ${}

Select Payment Method
    [Arguments]    ${Credit Card}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${}    ${}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${}    ${}

Validate Surcharge Amount Is Displayed
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

","The test case 'TC_10 Validate Differential Surcharge Amount Applied When Colorado State Is Selected' serves the purpose of ensuring that a specific surcharge amount is correctly applied to transactions in which the state of Colorado is selected. This is important for regulatory compliance and accurate financial calculations.

In this test case, the system is expected to identify transactions involving Colorado and apply a predefined surcharge amount or percentage. The test case verifies that the system behavior aligns with business rules and legal requirements concerning differential surcharges for Colorado.

The steps typically include:
1. Selecting Colorado as the state in the relevant transaction form or process.
2. Finalizing the transaction to trigger surcharge computation.
3. Verifying that the surcharge amount applied is correct and reflects the predefined condition for Colorado.
4"
"Validate data-driven paynow test cases for non integrated Testcases TC_11 Validate For The Invoices Which Are NOT Selected For Removing, The Invoice Details Are NOT Changed",data-driven,"TC_11 Validate For The Invoices Which Are NOT Selected For Removing, The Invoice Details Are NOT Changed","*** Settings ***
Documentation    Validate TC_11 Validate For The Invoices Which Are NOT Selected For Removing, The Invoice Details Are NOT Changed
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_11 Validate For The Invoices Which Are NOT Selected For Removing, The Invoice Details Are NOT Changed
    [Documentation]    Validate TC_11 Validate For The Invoices Which Are NOT Selected For Removing, The Invoice Details Are NOT Changed using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Click On Add Invoice    ${nan}    ${nan}    ${nan}    
    Add Invoice Details    ${12345}    ${500}    ${1.0}    
    Click On Add Invoice    ${nan}    ${nan}    ${nan}    
    Add Invoice Details    ${13425}    ${600}    ${3.0}    
    Click On Add Invoice    ${nan}    ${nan}    ${nan}    
    Add Invoice Details    ${78645}    ${1000}    ${5.0}    
    Validate Filled-In Specific Invoice Data After Removing Other Invoice    ${12345}    ${12345}    ${500.0}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Click On Add Invoice
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Add Invoice Details
    [Arguments]    ${12345}    ${500}    ${1.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${12345}    ${500}    ${1.0}

Click On Add Invoice
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Add Invoice Details
    [Arguments]    ${13425}    ${600}    ${3.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${13425}    ${600}    ${3.0}

Click On Add Invoice
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Add Invoice Details
    [Arguments]    ${78645}    ${1000}    ${5.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${78645}    ${1000}    ${5.0}

Validate Filled-In Specific Invoice Data After Removing Other Invoice
    [Arguments]    ${12345}    ${12345}    ${500.0}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${12345}    ${12345}    ${500.0}

","The purpose of the test case 'TC_11 Validate For The Invoices Which Are NOT Selected For Removing, The Invoice Details Are NOT Changed' is to ensure the integrity and stability of invoice data within the system when performing batch removal operations. Specifically, this test case is designed to confirm that any alterations or deletions conducted on selected invoices do not inadvertently affect the details of those invoices that were not chosen for removal.

Key objectives include:
1. Identify a group of invoices within the system.
2. Select specific invoices intended for removal or modification.
3. Execute the removal or modification process.
4. Verify that the details (such as invoice number, date, amount, and customer information) of the invoices not selected remain unchanged and intact.
5."
Create data-driven paynow test cases for non integrated Testcases TC_12 Validate Non Integrated Customer Gets A Message That Surcharge Can Be Avoided By Paying With ACH Or Debit card,data-driven,TC_12 Validate Non Integrated Customer Gets A Message That Surcharge Can Be Avoided By Paying With ACH Or Debit card,"*** Settings ***
Documentation    Validate TC_12 Validate Non Integrated Customer Gets A Message That Surcharge Can Be Avoided By Paying With ACH Or Debit card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Non Integrated Customer Gets A Message That Surcharge Can Be Avoided By Paying With ACH Or Debit card
    [Documentation]    Validate TC_12 Validate Non Integrated Customer Gets A Message That Surcharge Can Be Avoided By Paying With ACH Or Debit card using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Click On Add Invoice    ${nan}    ${nan}    ${nan}    
    Add Invoice Details    ${12345}    ${500}    ${1.0}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Validate Error Message Is Displayed    ${You can avoid the surcharge}    ${nan}    ${nan}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Click On Add Invoice
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Add Invoice Details
    [Arguments]    ${12345}    ${500}    ${1.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${12345}    ${500}    ${1.0}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Validate Error Message Is Displayed
    [Arguments]    ${You can avoid the surcharge}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${You can avoid the surcharge}    ${nan}    ${nan}

","**Test Case: TC_12 - Validate Non-Integrated Customer Gets A Message That Surcharge Can Be Avoided By Paying With ACH Or Debit Card**

**Purpose:**
The primary objective of this test case is to ensure that non-integrated customers (customers whose payment methods are not directly linked or embedded within the system) are properly informed about potential surcharges when selecting certain payment methods. Specifically, it aims to verify that these customers receive a clear and accurate message informing them that they can avoid surcharges by using Automated Clearing House (ACH) transfers or debit cards for their payments.

**Context:**
In many payment systems, users might face additional fees or surcharges when opting to pay with credit cards or other expensive transaction methods. To provide customers"
Generate data-driven paynow test cases for non integrated Testcases TC_13 Validate Non Integrated Customer Is Able To Select Account Type For ACHoreCheck,data-driven,TC_13 Validate Non Integrated Customer Is Able To Select Account Type For ACHoreCheck,"*** Settings ***
Documentation    Validate TC_13 Validate Non Integrated Customer Is Able To Select Account Type For ACHoreCheck
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_13 Validate Non Integrated Customer Is Able To Select Account Type For ACHoreCheck
    [Documentation]    Validate TC_13 Validate Non Integrated Customer Is Able To Select Account Type For ACHoreCheck using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Click On Add Invoice    ${nan}    ${nan}    ${nan}    
    Add Invoice Details    ${12345}    ${500}    ${1}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}    
    Enter ACH/ECheck Details    ${ACH_ECHECK_DETAILS}    ${nan}    ${nan}    
    Select Account Type In ACH/ECheck    ${Personal Checking}    ${nan}    ${nan}    
    Process Invoice Payment    ${nan}    ${nan}    ${nan}    
    Validate Details In Generated Payment Receipt    ${Specific Invoice}    ${11*****11}    ${ACH}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Click On Add Invoice
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Add Invoice Details
    [Arguments]    ${12345}    ${500}    ${1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${12345}    ${500}    ${1}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter ACH/ECheck Details
    [Arguments]    ${ACH_ECHECK_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH_ECHECK_DETAILS}    ${nan}    ${nan}

Select Account Type In ACH/ECheck
    [Arguments]    ${Personal Checking}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${Personal Checking}    ${nan}    ${nan}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Details In Generated Payment Receipt
    [Arguments]    ${Specific Invoice}    ${11*****11}    ${ACH}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${11*****11}    ${ACH}

","The test case ""TC_13 Validate Non Integrated Customer Is Able To Select Account Type For ACHoreCheck"" is designed to ensure that a non-integrated customer can successfully select an account type when setting up a payment method, specifically ACH (Automated Clearing House) or eCheck. The purpose of this test is to verify the following:

1. **Accessibility**: Confirm that the account type selection feature is accessible to non-integrated customers.
2. **Functionality**: Ensure that the selection process operates smoothly and correctly, allowing the user to choose between available account types like checking or savings.
3. **User Interface**: Check that the user interface presents the account type options clearly and allows for easy selection.
4. **Validation**:"
Validate data-driven paynow test cases for non integrated Testcases TC_14 Validate Non Integrated Customer Is Able To Navigate Back From ACHoreCheck,data-driven,TC_14 Validate Non Integrated Customer Is Able To Navigate Back From ACHoreCheck,"*** Settings ***
Documentation    Validate TC_14 Validate Non Integrated Customer Is Able To Navigate Back From ACHoreCheck
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_14 Validate Non Integrated Customer Is Able To Navigate Back From ACHoreCheck
    [Documentation]    Validate TC_14 Validate Non Integrated Customer Is Able To Navigate Back From ACHoreCheck using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${}    
    Validate Customer Can Navigate Back From Payment Methods    ${ACH/eCheck}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${}

Validate Customer Can Navigate Back From Payment Methods
    [Arguments]    ${ACH/eCheck}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${ACH/eCheck}    ${nan}    ${}

","The test case 'TC_14 Validate Non Integrated Customer Is Able To Navigate Back From ACHoreCheck' is designed to verify that a non-integrated customer can successfully navigate back from a specific page or feature called 'ACHoreCheck.' The purpose of this test case is to ensure that the user interface allows for intuitive and functional navigation, enabling users who are not integrated (i.e., not linked or synchronized with external systems or services) to return to a previous page or main menu without encountering issues. This involves testing the back navigation functionality to confirm it works as intended, ensuring a smooth and user-friendly experience for non-integrated customers."
Validate data-driven paynow test cases for non integrated Testcases TC_15 Validate Non Integrated Customer Is Able To Navigate Back From Credit Card,data-driven,TC_15 Validate Non Integrated Customer Is Able To Navigate Back From Credit Card,"*** Settings ***
Documentation    Validate TC_15 Validate Non Integrated Customer Is Able To Navigate Back From Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Non Integrated Customer Is Able To Navigate Back From Credit Card
    [Documentation]    Validate TC_15 Validate Non Integrated Customer Is Able To Navigate Back From Credit Card using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${Credit Card}    ${nan}    ${}    
    Validate Customer Can Navigate Back From Payment Methods    ${Credit Card}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${}

Validate Customer Can Navigate Back From Payment Methods
    [Arguments]    ${Credit Card}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${}

","The test case 'TC_15 Validate Non Integrated Customer Is Able To Navigate Back From Credit Card' is designed to ensure that a non-integrated customer can successfully navigate back to a previous page or section within an application after accessing the credit card page. 

Purpose:
1. **Usability Check**: To confirm that navigation links or buttons function correctly, allowing the user to return to a prior page without any issues.
2. **User Experience**: To ensure a smooth user experience by verifying that the customer is not stuck on the credit card page and can move back effortlessly.
3. **Error Prevention**: To identify any potential bugs or errors in the navigation flow that could hinder the user's ability to return to a previous step.
4. **"
Create data-driven paynow test cases for non integrated Testcases TC_16 Validate That Surcharge Amount Is Re-Calculated When Customer Changes The State,data-driven,TC_16 Validate That Surcharge Amount Is Re-Calculated When Customer Changes The State,"*** Settings ***
Documentation    Validate TC_16 Validate That Surcharge Amount Is Re-Calculated When Customer Changes The State
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_16 Validate That Surcharge Amount Is Re-Calculated When Customer Changes The State
    [Documentation]    Validate TC_16 Validate That Surcharge Amount Is Re-Calculated When Customer Changes The State using the following steps
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${}    ${}    
    Select State    ${WASHINGTON}    ${}    ${}    
    Select Payment Type    ${Lump Sum}    ${}    ${}    
    Enter Lumpsum Amount    ${5}    ${}    ${}    
    Select Payment Method    ${Credit Card}    ${}    ${}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${}    ${}    
    Validate Surcharge Amount Is Displayed    ${nan}    ${}    ${}    
    Select State    ${FLORIDA}    ${}    ${}    
    Validate Surcharge Amount Is Displayed    ${nan}    ${}    ${}

*** Keywords ***
Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${}    ${}

Select State
    [Arguments]    ${WASHINGTON}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${WASHINGTON}    ${}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${}    ${}

Enter Lumpsum Amount
    [Arguments]    ${5}    ${}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${5}    ${}    ${}

Select Payment Method
    [Arguments]    ${Credit Card}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${}    ${}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${}    ${}

Validate Surcharge Amount Is Displayed
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Select State
    [Arguments]    ${FLORIDA}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${FLORIDA}    ${}    ${}

Validate Surcharge Amount Is Displayed
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

","**Test Case: TC_16 Validate That Surcharge Amount Is Re-Calculated When Customer Changes The State**

**Purpose:**
The purpose of this test case is to ensure that the surcharge amount is accurately re-calculated whenever a customer changes their state during a transaction process. This scenario commonly arises in e-commerce and other service-based platforms where the final price, including taxes and surcharges, can vary based on the customer's location.

**Description:**
1. **Setup and Initial State:**
   - Customer starts a transaction and reaches the checkout stage where the surcharge amount is initially calculated based on the current state information.

2. **Action:**
   - The customer decides to change their state information, which could affect the applicable surcharge due to different"
Create data-driven paynow test cases for non integrated Testcases TC_17 Validate Non Integrated Customer Is Able Create Multiple Invoices And Clear All Invoices,data-driven,TC_17 Validate Non Integrated Customer Is Able Create Multiple Invoices And Clear All Invoices,"*** Settings ***
Documentation    Validate TC_17 Validate Non Integrated Customer Is Able Create Multiple Invoices And Clear All Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_17 Validate Non Integrated Customer Is Able Create Multiple Invoices And Clear All Invoices
    [Documentation]    Validate TC_17 Validate Non Integrated Customer Is Able Create Multiple Invoices And Clear All Invoices using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${}    
    Create Multiple Invoices    ${nan}    ${nan}    ${}    
    Validate Checkboxes Are Selected By Default    ${nan}    ${nan}    ${}    
    Click On Clear All Button    ${nan}    ${nan}    ${}    
    Validate All Invoices Should Be Removed    ${nan}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${}

Create Multiple Invoices
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Checkboxes Are Selected By Default
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Click On Clear All Button
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate All Invoices Should Be Removed
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","**Test Case Summary: TC_17 Validate Non-Integrated Customer Is Able to Create Multiple Invoices and Clear All Invoices**

**Purpose:**
The primary objective of this test case is to ensure that a non-integrated customer—one which does not have automated integration with external systems for order processing and billing—has the capability to manually create multiple invoices within the system. Additionally, it seeks to verify that this customer can effectively clear (mark as paid or reconcile) all these invoices.

**Key Points:**

1. **Non-Integrated Customer:** This test targets customers who manage their invoicing manually without third-party system integration.
   
2. **Creating Multiple Invoices:** The test will involve generating several invoices to check if the system handles multiple"
Generate data-driven paynow test cases for non integrated Testcases TC_18 Validate Customer Is Able Send Invoice Receipt To The Given Email Address,data-driven,TC_18 Validate Customer Is Able Send Invoice Receipt To The Given Email Address,"*** Settings ***
Documentation    Validate TC_18 Validate Customer Is Able Send Invoice Receipt To The Given Email Address
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_18 Validate Customer Is Able Send Invoice Receipt To The Given Email Address
    [Documentation]    Validate TC_18 Validate Customer Is Able Send Invoice Receipt To The Given Email Address using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${}    
    Enter ACH/ECheck Details    ${ACH_ECHECK_DETAILS}    ${nan}    ${}    
    Process Invoice Payment    ${nan}    ${nan}    ${}    
    Get Transaction ID    ${nan}    ${nan}    ${}    
    Validate Invoice Receipt Is Received In Email    ${transaction_id}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${}

Enter ACH/ECheck Details
    [Arguments]    ${ACH_ECHECK_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH_ECHECK_DETAILS}    ${nan}    ${}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Get Transaction ID
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Invoice Receipt Is Received In Email
    [Arguments]    ${transaction_id}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${transaction_id}    ${nan}    ${}

","The test case 'TC_18 Validate Customer Is Able Send Invoice Receipt To The Given Email Address' aims to ensure that the invoicing feature of the application functions correctly by allowing a customer to send an invoice receipt to a provided email address. The primary objectives of this test case are to:

1. Verify that the customer is presented with an option to send an invoice receipt upon completing a transaction or when accessing their purchase history.
2. Ensure that the customer can input a valid email address in the designated field.
3. Validate that the system sends the invoice receipt to the specified email address electronically.
4. Confirm the proper format and content of the invoice receipt, including essential transaction details (e.g., items purchased, total amount, transaction date).
5"
Validate data-driven paynow test cases for non integrated Testcases TC_19 Validate Customer Is Able To See Terms Conditions And Privacy Policy Screen,data-driven,TC_19 Validate Customer Is Able To See Terms Conditions And Privacy Policy Screen,"*** Settings ***
Documentation    Validate TC_19 Validate Customer Is Able To See Terms Conditions And Privacy Policy Screen
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_19 Validate Customer Is Able To See Terms Conditions And Privacy Policy Screen
    [Documentation]    Validate TC_19 Validate Customer Is Able To See Terms Conditions And Privacy Policy Screen using the following steps
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${}    ${}    
    Navigate To Terms Conditions And Privacy Policy Page    ${nan}    ${}    ${}    
    Validate Terms Conditions And Privacy Policy Page Is Displayed    ${nan}    ${}    ${}    
    Click On Close Button    ${nan}    ${}    ${}    
    Validate Terms Conditions And Privacy Policy Page Is Closed    ${nan}    ${}    ${}

*** Keywords ***
Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${}    ${}

Navigate To Terms Conditions And Privacy Policy Page
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Validate Terms Conditions And Privacy Policy Page Is Displayed
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Click On Close Button
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Validate Terms Conditions And Privacy Policy Page Is Closed
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

","The purpose of the test case 'TC_19 Validate Customer Is Able To See Terms Conditions And Privacy Policy Screen' is to ensure that users of an application or website can access and view the 'Terms and Conditions' and 'Privacy Policy' screens. This test is crucial for verifying compliance with legal and regulatory requirements, as these screens inform users about the rules governing their use of the service as well as how their personal data will be collected, stored, and handled.

The key objectives of this test case include:

1. **Verification of Accessibility**: Ensure the links or buttons leading to the 'Terms and Conditions' and 'Privacy Policy' screens are present and functional on appropriate pages, such as during account creation, login, or within the application's main"
Build data-driven paynow test cases for non integrated Testcases TC_20 Validate Customer Is Able To Signout From The Payment Receipt,data-driven,TC_20 Validate Customer Is Able To Signout From The Payment Receipt,"*** Settings ***
Documentation    Validate TC_20 Validate Customer Is Able To Signout From The Payment Receipt
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_20 Validate Customer Is Able To Signout From The Payment Receipt
    [Documentation]    Validate TC_20 Validate Customer Is Able To Signout From The Payment Receipt using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${}    
    Enter ACH/ECheck Details    ${ACH_ECHECK_DETAILS}    ${nan}    ${}    
    Process Invoice Payment    ${nan}    ${nan}    ${}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${}    
    Signout From Payment Receipt Page    ${nan}    ${nan}    ${}    
    Validate Dundermifflin Wikipedia Screen Is Visible    ${nan}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${}

Enter ACH/ECheck Details
    [Arguments]    ${ACH_ECHECK_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH_ECHECK_DETAILS}    ${nan}    ${}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Signout From Payment Receipt Page
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Dundermifflin Wikipedia Screen Is Visible
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","**Test Case Summary for TC_20: Validate Customer Is Able To Sign Out from the Payment Receipt**

**Purpose:**

The purpose of TC_20 is to verify that a customer can successfully sign out from the application or website's payment receipt page. This ensures that once the customer has completed their payment process and views their payment receipt, they can securely log out from their account. This functionality is crucial for maintaining user account security, as it prevents unauthorized access following the completion of a financial transaction.

**Key Steps:**
1. **Navigate to the Payment Receipt**: Verify the receipt screen is displayed after completing a payment.
2. **Locate Sign Out Option**: Ensure the sign out option (button/link) is clearly visible on the payment"
Create data-driven paynow test cases for non integrated Testcases TC_21 Validate Customer Is Able To Navigate To The Customer Invoice Referral Page,data-driven,TC_21 Validate Customer Is Able To Navigate To The Customer Invoice Referral Page,"*** Settings ***
Documentation    Validate TC_21 Validate Customer Is Able To Navigate To The Customer Invoice Referral Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_21 Validate Customer Is Able To Navigate To The Customer Invoice Referral Page
    [Documentation]    Validate TC_21 Validate Customer Is Able To Navigate To The Customer Invoice Referral Page using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${}    
    Enter ACH/ECheck Details    ${ACH_ECHECK_DETAILS}    ${nan}    ${}    
    Process Invoice Payment    ${nan}    ${nan}    ${}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${}    
    Navigate To Contact Unified Payments Group For More Information    ${nan}    ${nan}    ${}    
    Validate Customer Invoice Referral Page Is Visible    ${nan}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${}

Enter ACH/ECheck Details
    [Arguments]    ${ACH_ECHECK_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH_ECHECK_DETAILS}    ${nan}    ${}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Navigate To Contact Unified Payments Group For More Information
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Customer Invoice Referral Page Is Visible
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The purpose of the test case 'TC_21 Validate Customer Is Able To Navigate To The Customer Invoice Referral Page' is to ensure that customers can successfully navigate to the Customer Invoice Referral Page within the application or website. This involves verifying that the link or button directing users to this page is functioning correctly, and that upon clicking or selecting this link or button, the customer is taken to the intended page without issues. This test case aims to confirm the accessibility and usability of the navigation feature related to the Customer Invoice Referral section, ensuring that the user's journey through the application is seamless and efficient."
Validate data-driven paynow test cases for non integrated Testcases TC_22 Validate Customer Is Unable To Process Transaction With Negative Amount,data-driven,TC_22 Validate Customer Is Unable To Process Transaction With Negative Amount,"*** Settings ***
Documentation    Validate TC_22 Validate Customer Is Unable To Process Transaction With Negative Amount
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Customer Is Unable To Process Transaction With Negative Amount
    [Documentation]    Validate TC_22 Validate Customer Is Unable To Process Transaction With Negative Amount using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${-10}    ${nan}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${}    
    Enter ACH/ECheck Details    ${ACH_ECHECK_DETAILS}    ${nan}    ${}    
    Validate Errors After Clicking On Process Invoice    ${Negative payment amounts are not allowed}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${-10}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${-10}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${}

Enter ACH/ECheck Details
    [Arguments]    ${ACH_ECHECK_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH_ECHECK_DETAILS}    ${nan}    ${}

Validate Errors After Clicking On Process Invoice
    [Arguments]    ${Negative payment amounts are not allowed}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Negative payment amounts are not allowed}    ${nan}    ${}

","The test case 'TC_22 Validate Customer Is Unable To Process Transaction With Negative Amount' is designed to ensure the integrity and security of a financial system by preventing improper transactions. The main purpose of this test case is to verify that the system correctly identifies and rejects any attempts by a customer to process a transaction involving a negative amount.

Key objectives:

1. **Validation Mechanism**: Confirm that the system has proper validation mechanisms in place to detect negative transaction amounts.
2. **Error Handling**: Ensure that appropriate error messages are displayed to the user when a negative amount is entered.
3. **Data Integrity**: Protect the integrity of financial and transactional data within the system by disallowing invalid transaction amounts.
4. **User Experience**:"
Build data-driven paynow test cases for non integrated Testcases TC_23 Validate That Application Sends Message If The State Field Is NOT Selected,data-driven,TC_23 Validate That Application Sends Message If The State Field Is NOT Selected,"*** Settings ***
Documentation    Validate TC_23 Validate That Application Sends Message If The State Field Is NOT Selected
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_23 Validate That Application Sends Message If The State Field Is NOT Selected
    [Documentation]    Validate TC_23 Validate That Application Sends Message If The State Field Is NOT Selected using the following steps
Enter Customer Details Without State    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${}    
    Enter ACH/ECheck Details    ${ACH_ECHECK_DETAILS}    ${nan}    ${}    
    Validate Errors After Clicking On Process Invoice    ${Please select a state (or region)}    ${nan}    ${}

*** Keywords ***
Enter Customer Details Without State
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${}

Enter ACH/ECheck Details
    [Arguments]    ${ACH_ECHECK_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH_ECHECK_DETAILS}    ${nan}    ${}

Validate Errors After Clicking On Process Invoice
    [Arguments]    ${Please select a state (or region)}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Please select a state (or region)}    ${nan}    ${}

","**Test Case Summary: TC_23 - Validate That Application Sends Message If The State Field Is NOT Selected**

**Purpose:**
The primary objective of this test case is to ensure that the application behaves correctly when a user does not select an option from the 'State' field in a given form. Specifically, the test case aims to verify that the application identifies the missing selection and sends an appropriate message or notification to the user. This check is important for maintaining data integrity and preventing submission of incomplete forms, which could lead to errors or issues in data processing.

**Key Points:**
1. **Trigger Condition:** The test is triggered when the user attempts to submit a form with the 'State' field left unselected.
2. **Expected Outcome"
Generate data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker FTC_01 Validate Account Number,data-driven,FTC_01 Validate Account Number,"*** Settings ***
Documentation    Validate FTC_01 Validate Account Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
FTC_01 Validate Account Number
    [Documentation]    Validate FTC_01 Validate Account Number using the following steps
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${}    
    Enter ACH/ECheck Details    ${ACH_ECHECK_DETAILS}    ${nan}    ${}    
    Validate Errors After Clicking On Process Invoice    ${customer_details.Error_Message}    ${nan}    ${}    
    Process Invoice Payment    ${nan}    ${nan}    ${}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${}

*** Keywords ***
Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${}

Enter ACH/ECheck Details
    [Arguments]    ${ACH_ECHECK_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH_ECHECK_DETAILS}    ${nan}    ${}

Validate Errors After Clicking On Process Invoice
    [Arguments]    ${customer_details.Error_Message}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${customer_details.Error_Message}    ${nan}    ${}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The test case 'FTC_01 Validate Account Number' is designed to verify the correctness and functionality of the account number validation process in a financial system. Its primary purpose is to ensure that the system accurately identifies and processes valid account numbers, adhering to predefined rules and criteria, such as format, length, and character composition.

Key objectives might include:
1. Ensuring the account number meets the required length specified by the system standards.
2. Validating that the account number consists of permissible characters (e.g., numeric only).
3. Checking that the account number format conforms to the organizational or industry-specific guidelines (e.g., no special characters, appropriate use of prefixes or check digits).
4. Confirming that the system provides appropriate feedback or error messages"
Generate data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker FTC_117 Validate Process Payment With Visa Debit Card,data-driven,FTC_117 Validate Process Payment With Visa Debit Card,"*** Settings ***
Documentation    Validate FTC_117 Validate Process Payment With Visa Debit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
FTC_117 Validate Process Payment With Visa Debit Card
    [Documentation]    Validate FTC_117 Validate Process Payment With Visa Debit Card using the following steps
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${Credit Card}    ${nan}    ${}    
    Enter Credit Card Values    ${creditcard_details}    ${nan}    ${}    
    Validate Errors After Clicking On Process Invoice    ${creditcard_details.Error_Message}    ${nan}    ${}    
    Process Invoice Payment    ${nan}    ${nan}    ${}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${}

*** Keywords ***
Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${}

Enter Credit Card Values
    [Arguments]    ${creditcard_details}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${creditcard_details}    ${nan}    ${}

Validate Errors After Clicking On Process Invoice
    [Arguments]    ${creditcard_details.Error_Message}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${creditcard_details.Error_Message}    ${nan}    ${}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The test case 'FTC_117 Validate Process Payment With Visa Debit Card' is aimed at ensuring that the payment processing system accurately handles payments made using a Visa debit card. The primary purpose of this test case is to verify that a transaction can be successfully completed when a customer chooses to pay with a Visa debit card. This involves checking various aspects such as:

1. **Card Information Entry:** Ensuring the system correctly captures and validates the necessary card information including the card number, expiration date, CVV, and cardholder's name.
2. **Authorization and Verification:** Making sure that the payment gateway properly authorizes and verifies the transaction with the bank that issued the Visa debit card.
3. **Transaction Success/Failure Handling:** Confirming that the"
Create data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker FTC_54 Validate Payment Amount,data-driven,FTC_54 Validate Payment Amount,"*** Settings ***
Documentation    Validate FTC_54 Validate Payment Amount
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
FTC_54 Validate Payment Amount
    [Documentation]    Validate FTC_54 Validate Payment Amount using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${}    
    Enter ACH/ECheck Details    ${ACH_ECHECK_DETAILS}    ${nan}    ${}    
    Validate Errors After Clicking On Process Invoice    ${customer_details.Error_Message}    ${nan}    ${}    
    Process Invoice Payment    ${nan}    ${nan}    ${}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${}

Enter ACH/ECheck Details
    [Arguments]    ${ACH_ECHECK_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH_ECHECK_DETAILS}    ${nan}    ${}

Validate Errors After Clicking On Process Invoice
    [Arguments]    ${customer_details.Error_Message}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${customer_details.Error_Message}    ${nan}    ${}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","Certainly! The test case 'FTC_54 Validate Payment Amount' is designed to ensure the correct handling and validation of payment amounts in a financial transaction or payment processing system. Its purpose can be summarized as follows:

### Purpose:
1. **Accuracy Verification:** To ensure that the system accurately verifies payment amounts entered by the user, preventing any discrepancies.
2. **Validation Logic:** To check the integrity of the validation logic, ensuring that invalid amounts (e.g., negative amounts, excessively high amounts, or non-numeric inputs) are appropriately handled and rejected.
3. **User Notifications:** To confirm that users are notified correctly and promptly when they enter an invalid payment amount, providing clear guidance on how to correct the input.
4. **Compliance and Security"
Build data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker FTC_58 Validate Invoice Number,data-driven,FTC_58 Validate Invoice Number,"*** Settings ***
Documentation    Validate FTC_58 Validate Invoice Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
FTC_58 Validate Invoice Number
    [Documentation]    Validate FTC_58 Validate Invoice Number using the following steps
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Click On Add Invoice    ${1}    ${nan}    ${}    
    Validate Invoice Details With Invalid Data    ${test_case_validation}    ${specific_invoice}    ${}    
    Select Payment Method    ${ACH_ECHECK_DETAILS}    ${nan}    ${}    
    Validate Errors After Clicking On Process Invoice    ${specific invoice.Error_Message}    ${nan}    ${}    
    Process Invoice Payment    ${nan}    ${nan}    ${}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${}

*** Keywords ***
Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Click On Add Invoice
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Validate Invoice Details With Invalid Data
    [Arguments]    ${test_case_validation}    ${specific_invoice}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${test_case_validation}    ${specific_invoice}    ${}

Select Payment Method
    [Arguments]    ${ACH_ECHECK_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH_ECHECK_DETAILS}    ${nan}    ${}

Validate Errors After Clicking On Process Invoice
    [Arguments]    ${specific invoice.Error_Message}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${specific invoice.Error_Message}    ${nan}    ${}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The purpose of the test case 'FTC_58 Validate Invoice Number' is to ensure that the invoice number associated with a transaction meets predefined criteria for validity. This test case is designed to verify that the invoice number:

1. Follows the correct format and structure, which might include specific patterns, lengths, or character types (e.g., alphanumeric, specific prefixes/suffixes).
2. Is unique within the system, meaning no duplicate invoice numbers exist.
3. Matches the corresponding records and data in the system, ensuring data integrity and accuracy within the transaction and invoicing processes.
4. Is correctly updated, retrieved, and displayed in all relevant interfaces and reports, ensuring consistency across the system.

By validating the invoice number, the test case aims"
Generate data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker FTC_88 Validate Credit Card Number,data-driven,FTC_88 Validate Credit Card Number,"*** Settings ***
Documentation    Validate FTC_88 Validate Credit Card Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
FTC_88 Validate Credit Card Number
    [Documentation]    Validate FTC_88 Validate Credit Card Number using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${Credit Card}    ${nan}    ${}    
    Enter Credit Card Values    ${creditcard_details}    ${nan}    ${}    
    Validate Errors After Clicking On Process Invoice    ${creditcard_details.Error_Message}    ${nan}    ${}    
    Process Invoice Payment    ${nan}    ${nan}    ${}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${}

Enter Credit Card Values
    [Arguments]    ${creditcard_details}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${creditcard_details}    ${nan}    ${}

Validate Errors After Clicking On Process Invoice
    [Arguments]    ${creditcard_details.Error_Message}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${creditcard_details.Error_Message}    ${nan}    ${}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","Sure! The test case 'FTC_88 Validate Credit Card Number' is designed to ensure that the application correctly verifies the validity of credit card numbers entered by users. 

**Purpose:**
- To validate whether the credit card number adheres to accepted formats and standards, ensuring it is potentially a legitimate card.
- To check that the number passes the Luhn algorithm, which is a widely used formula for card number validation.
- To ensure that the validation process flags any invalid numbers, thus preventing fraudulent or erroneous card entries.
- To confirm that edge cases, such as excessively long or short credit card numbers, or those containing invalid characters, are properly handled and rejected by the system.

**Objectives:**
- Improve the accuracy and reliability of transactions involving"
Validate data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker FTC_96 Validate Routing Number,data-driven,FTC_96 Validate Routing Number,"*** Settings ***
Documentation    Validate FTC_96 Validate Routing Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
FTC_96 Validate Routing Number
    [Documentation]    Validate FTC_96 Validate Routing Number using the following steps
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${}    
    Enter ACH/ECheck Values    ${echeck_details}    ${nan}    ${}    
    Validate Errors After Clicking On Process Invoice    ${Ach.Error_Message}    ${nan}    ${}

*** Keywords ***
Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${}

Enter ACH/ECheck Values
    [Arguments]    ${echeck_details}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${echeck_details}    ${nan}    ${}

Validate Errors After Clicking On Process Invoice
    [Arguments]    ${Ach.Error_Message}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Ach.Error_Message}    ${nan}    ${}

","The test case 'FTC_96 Validate Routing Number' is designed to ensure that the system correctly verifies the validity of a bank routing number provided by a user. 

**Purpose:**
The primary aim of this test case is to confirm that the system can accurately identify and validate a routing number, which is a critical component in processing financial transactions. This involves checking the structure and format of the routing number as per the regulatory standards (such as the American Bankers Association (ABA) requirements in the U.S.) and ensuring that invalid or incorrect entries are flagged and rejected by the system.

By validating the routing number, the system reduces the risk of processing errors in financial transactions, enhances security, and ensures compliance with banking regulations. This test case is crucial"
Validate data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker TC_01 Validate Customer Is Unable To Login Into Paynow With Invalid Account Number and Valid or Invalid Invoice Number,data-driven,TC_01 Validate Customer Is Unable To Login Into Paynow With Invalid Account Number and Valid or Invalid Invoice Number,"*** Settings ***
Documentation    Validate TC_01 Validate Customer Is Unable To Login Into Paynow With Invalid Account Number and Valid or Invalid Invoice Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Customer Is Unable To Login Into Paynow With Invalid Account Number and Valid or Invalid Invoice Number
    [Documentation]    Validate TC_01 Validate Customer Is Unable To Login Into Paynow With Invalid Account Number and Valid or Invalid Invoice Number using the following steps
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${login_details.Account_Number}    ${login_details.Invoice_Number}    ${}    
    Validate Error Message Is Displayed    ${login_details.Error_Message}    ${nan}    ${}    
    Validate Account Number Is Displayed    ${login_details.Account_No}    ${login_details.Customer_Name}    ${}

*** Keywords ***
Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${login_details.Account_Number}    ${login_details.Invoice_Number}    ${}
    [Return]    ${float}
    [Documentation]    Keyword description
    Log    ${login_details.Account_Number}    ${login_details.Invoice_Number}    ${}

Validate Error Message Is Displayed
    [Arguments]    ${login_details.Error_Message}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${login_details.Error_Message}    ${nan}    ${}

Validate Account Number Is Displayed
    [Arguments]    ${login_details.Account_No}    ${login_details.Customer_Name}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${login_details.Account_No}    ${login_details.Customer_Name}    ${}

","**Test Case: TC_01 Validate Customer Is Unable To Login Into PayNow With Invalid Account Number and Valid or Invalid Invoice Number**

**Purpose:**

The primary objective of this test case is to verify that the PayNow system correctly prevents access when a customer attempts to log in using an invalid account number, irrespective of the validity of the provided invoice number. This test ensures that the system's authentication mechanism is robust and secure, thereby preventing unauthorized access. 

### Key Goals:

1. **Security Verification:**
   Ensure that the PayNow system is secure by validating that it does not allow a user to log in using an invalid account number. This helps in protecting customer data and preventing unauthorized access.

2. **Error Handling Check:**"
Build data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker TC_01 Validate Customer Is Unable To Login Without Invoice Number,data-driven,TC_01 Validate Customer Is Unable To Login Without Invoice Number,"*** Settings ***
Documentation    Validate TC_01 Validate Customer Is Unable To Login Without Invoice Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Customer Is Unable To Login Without Invoice Number
    [Documentation]    Validate TC_01 Validate Customer Is Unable To Login Without Invoice Number using the following steps
Launch PayNow Application    ${OMNICORP_MERCHANT}    ${}    ${}    
    Enter Account Number And Invoice Number    ${login_details}    ${}    ${}    
    Validate Error Message For Empty Details    ${login_details.id}    ${}    ${}    
    Validate Error Message Is Displayed    ${login_details.Error_Message1}    ${}    ${}

*** Keywords ***
Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${}    ${}

Enter Account Number And Invoice Number
    [Arguments]    ${login_details}    ${}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${login_details}    ${}    ${}

Validate Error Message For Empty Details
    [Arguments]    ${login_details.id}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${login_details.id}    ${}    ${}

Validate Error Message Is Displayed
    [Arguments]    ${login_details.Error_Message1}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${login_details.Error_Message1}    ${}    ${}

","The test case 'TC_01 Validate Customer Is Unable To Login Without Invoice Number' is designed to ensure that the login functionality of a system strictly enforces the requirement of an invoice number for user authentication. The primary purpose of this test case is to verify that customers who attempt to log in without entering an invoice number are not granted access to the system. 

This test case helps maintain the integrity and security of the login process by confirming that the system correctly identifies and blocks login attempts that do not include the necessary invoice number. It is typically executed to check the robustness of the input validation for the login process, ensuring that only authorized users with valid invoice numbers can access the system. The outcome of the test should be that the system displays an appropriate error"
Generate data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker TC_05 Validate Merchant Is Able To Schedule Payment With Master Credit Card,data-driven,TC_05 Validate Merchant Is Able To Schedule Payment With Master Credit Card,"*** Settings ***
Documentation    Validate TC_05 Validate Merchant Is Able To Schedule Payment With Master Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Merchant Is Able To Schedule Payment With Master Credit Card
    [Documentation]    Validate TC_05 Validate Merchant Is Able To Schedule Payment With Master Credit Card using the following steps
Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Enter Customer Details    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}    
    Select Payment Method 
    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${Scheduled_Payments.Creditcard_Number}    ${Scheduled_Payments.Expiry_Date}    ${Scheduled_Payments.CVV}    
    Select Payment Date    ${today+1}    ${nan}    ${nan}    
    Create Schedule Payment    ${nan}    ${nan}    ${nan}    
    Send Event To Process Schedule Payment    ${account_number}    ${invoice_number}    ${nan}    
    Validate Scheduled Payment Status    ${account_number}    ${invoice_number}    ${Scheduled_Payments.Status}

*** Keywords ***
Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Enter Customer Details
    [Arguments]    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${OMNICORP_MERCHANT}    ${nan}

Select Payment Method 

    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${Scheduled_Payments.Creditcard_Number}    ${Scheduled_Payments.Expiry_Date}    ${Scheduled_Payments.CVV}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Scheduled_Payments.Creditcard_Number}    ${Scheduled_Payments.Expiry_Date}    ${Scheduled_Payments.CVV}

Select Payment Date
    [Arguments]    ${today+1}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${today+1}    ${nan}    ${nan}

Create Schedule Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Event To Process Schedule Payment
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Scheduled Payment Status
    [Arguments]    ${account_number}    ${invoice_number}    ${Scheduled_Payments.Status}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${Scheduled_Payments.Status}

","The test case 'TC_05 Validate Merchant Is Able To Schedule Payment With Master Credit Card' is designed to ensure that merchants have the capability to schedule payments using a MasterCard credit card within the specified payment scheduling framework. The test aims to verify that the system accurately accepts and processes scheduling requests, validates the MasterCard credit card details, and confirms the scheduled payment is successfully created. The purpose is to guarantee a seamless and reliable scheduling feature for merchants utilizing MasterCard credit cards, thereby supporting smooth business operations and customer satisfaction."
Build data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker TC_07 Validate Customer Is Able To Process Payment For CONNETICUT State (CT) With Credit Card,data-driven,TC_07 Validate Customer Is Able To Process Payment For CONNETICUT State (CT) With Credit Card,"*** Settings ***
Documentation    Validate TC_07 Validate Customer Is Able To Process Payment For CONNETICUT State (CT) With Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Customer Is Able To Process Payment For CONNETICUT State (CT) With Credit Card
    [Documentation]    Validate TC_07 Validate Customer Is Able To Process Payment For CONNETICUT State (CT) With Credit Card using the following steps
Send Request To Create Customer    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}    
    Launch PayNow Application    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Enter Customer Details    ${states}    ${STERLING_COOPER_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${Credit Card}    ${nan}    ${}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${}    
    Validate Surcharge Percentage Should Be Equal    ${states.Surcharge_Percentage}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${STERLING_COOPER_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Enter Customer Details
    [Arguments]    ${states}    ${STERLING_COOPER_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${states}    ${STERLING_COOPER_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${}

Validate Surcharge Percentage Should Be Equal
    [Arguments]    ${states.Surcharge_Percentage}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${states.Surcharge_Percentage}    ${nan}    ${}

","The purpose of the test case ""TC_07 Validate Customer Is Able To Process Payment For CONNECTICUT State (CT) With Credit Card"" is to ensure that customers residing in Connecticut can successfully complete a transaction using a credit card as their payment method. This involves verifying that the payment system correctly handles the customer's credit card information, processes the transaction, and confirms that the order is completed without any errors specific to Connecticut's regional settings or regulations. The test aims to validate the end-to-end process from the initiation of payment to the order confirmation, ensuring a smooth and reliable user experience for customers in Connecticut."
Build data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker TC_08 Validate Customer Is Able To Process Payment For MAINE State (ME) With Credit Card,data-driven,TC_08 Validate Customer Is Able To Process Payment For MAINE State (ME) With Credit Card,"*** Settings ***
Documentation    Validate TC_08 Validate Customer Is Able To Process Payment For MAINE State (ME) With Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_08 Validate Customer Is Able To Process Payment For MAINE State (ME) With Credit Card
    [Documentation]    Validate TC_08 Validate Customer Is Able To Process Payment For MAINE State (ME) With Credit Card using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${}    
    Launch PayNow Application    ${OMNICORP_MERCHANT}    ${nan}    ${}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${}    
    Enter Customer Details    ${states}    ${OMNICORP_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${97.99}    ${nan}    ${}    
    Select Payment Method    ${Credit Card}    ${nan}    ${}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${}    
    Validate Surcharge Percentage Should Be Equal    ${states.Surcharge_Percentage}    ${nan}    ${}    
    Process Invoice Payment    ${nan}    ${nan}    ${}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${}

Launch PayNow Application
    [Arguments]    ${OMNICORP_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${nan}    ${}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Enter Customer Details
    [Arguments]    ${states}    ${OMNICORP_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${states}    ${OMNICORP_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${97.99}    ${nan}    ${}
    [Return]    ${float}
    [Documentation]    Keyword description
    Log    ${97.99}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${}

Validate Surcharge Percentage Should Be Equal
    [Arguments]    ${states.Surcharge_Percentage}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${states.Surcharge_Percentage}    ${nan}    ${}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The purpose of the test case 'TC_08 Validate Customer Is Able To Process Payment For MAINE State (ME) With Credit Card' is to ensure that customers who are residents of the state of Maine can successfully complete a transaction using a credit card as their payment method. This involves verifying various aspects such as:

1. **Payment Gateway Interaction**: Ensuring that the payment gateway correctly processes credit card transactions from customers in Maine.
2. **Data Validation**: Checking that the customer's billing information, specifically the state address, is accurately captured and validated.
3. **Credit Card Authentication**: Confirming that the system properly handles authorization and authentication processes for the credit card.
4. **User Experience**: Ensuring a smooth and seamless payment"
Build data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker TC_08 Validate Customer Is Able To Schedule AutoPay Payments On A Sunday Of The Week,data-driven,TC_08 Validate Customer Is Able To Schedule AutoPay Payments On A Sunday Of The Week,"*** Settings ***
Documentation    Validate TC_08 Validate Customer Is Able To Schedule AutoPay Payments On A Sunday Of The Week
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_08 Validate Customer Is Able To Schedule AutoPay Payments On A Sunday Of The Week
    [Documentation]    Validate TC_08 Validate Customer Is Able To Schedule AutoPay Payments On A Sunday Of The Week using the following steps
Send Request To Create Customer    ${OMNICORP_MERCHANT}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${account_number}    ${OMNICORP_MERCHANT}    ${nan}    
    Login To PayNOW And Navigate To Autopay    ${account_number}    ${invoice_number}    ${nan}    
    Select Specific Day Of The Week    ${Payment_details.Day}    ${nan}    ${nan}    
    Select Invoices Due For The Payment    ${nan}    ${nan}    ${nan}    
    Enter Customer And Credit Card Details For AutoPay    ${4111111111111111'}    ${nan}    ${nan}    
    Validate Created AutoPay Details For Specific Day Of Week    ${Days of Week}    ${All Invoices Due}    ${Payment_details.Day}    
    Send Request To Create AutoPay For Specific Day Of The Week    ${account_number}    ${4111111111111111'}    ${Payment_details.Day}    
    Validate Created AutoPay Details For Specific Day Of Week    ${Days of Week}    ${All Invoices Due}    ${Payment_details.Day}    
    Validate AutoPay Origin In Scheduled Payments    ${account_number}    ${invoice_number}    ${AutoPay}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${OMNICORP_MERCHANT}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OMNICORP_MERCHANT}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${account_number}    ${OMNICORP_MERCHANT}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${OMNICORP_MERCHANT}    ${nan}

Login To PayNOW And Navigate To Autopay
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Select Specific Day Of The Week
    [Arguments]    ${Payment_details.Day}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment_details.Day}    ${nan}    ${nan}

Select Invoices Due For The Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Enter Customer And Credit Card Details For AutoPay
    [Arguments]    ${4111111111111111'}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${4111111111111111'}    ${nan}    ${nan}

Validate Created AutoPay Details For Specific Day Of Week
    [Arguments]    ${Days of Week}    ${All Invoices Due}    ${Payment_details.Day}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Days of Week}    ${All Invoices Due}    ${Payment_details.Day}

Send Request To Create AutoPay For Specific Day Of The Week
    [Arguments]    ${account_number}    ${4111111111111111'}    ${Payment_details.Day}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${4111111111111111'}    ${Payment_details.Day}

Validate Created AutoPay Details For Specific Day Of Week
    [Arguments]    ${Days of Week}    ${All Invoices Due}    ${Payment_details.Day}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Days of Week}    ${All Invoices Due}    ${Payment_details.Day}

Validate AutoPay Origin In Scheduled Payments
    [Arguments]    ${account_number}    ${invoice_number}    ${AutoPay}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${AutoPay}

","The test case 'TC_08 Validate Customer Is Able To Schedule AutoPay Payments On A Sunday Of The Week' is centered on verifying that the system allows customers to schedule automatic payments (AutoPay) specifically to occur on a Sunday. The purpose of this test case is to ensure that the AutoPay feature is flexible and user-friendly by accommodating all days of the week, including weekends.

This validation is important for several reasons:

1. **Customer Convenience**: Customers should be able to select any day that suits their financial planning and preferences.
2. **System Flexibility**: Ensuring the system can handle payments scheduled for any day, including non-business days like Sundays.
3. **Error Prevention**: Identifying and rectifying potential issues where"
Build data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker TC_11 Validate Customer Is Unable To Process Payment By A Declined Card,data-driven,TC_11 Validate Customer Is Unable To Process Payment By A Declined Card,"*** Settings ***
Documentation    Validate TC_11 Validate Customer Is Unable To Process Payment By A Declined Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_11 Validate Customer Is Unable To Process Payment By A Declined Card
    [Documentation]    Validate TC_11 Validate Customer Is Unable To Process Payment By A Declined Card using the following steps
Launch PayNow Application    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Lump Sum}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${Credit Card}    ${nan}    ${}    
    Enter Credit Card Values    ${card_details}    ${nan}    ${}    
    Validate Errors After Clicking On Process Invoice    ${card_details.Error_Message}    ${nan}    ${}

*** Keywords ***
Launch PayNow Application
    [Arguments]    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${NON_INTEGRATED_MERCHANT}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Lump Sum}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Lump Sum}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${}

Enter Credit Card Values
    [Arguments]    ${card_details}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${card_details}    ${nan}    ${}

Validate Errors After Clicking On Process Invoice
    [Arguments]    ${card_details.Error_Message}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${card_details.Error_Message}    ${nan}    ${}

","The test case ""TC_11 Validate Customer Is Unable To Process Payment By A Declined Card"" is designed to ensure that the payment processing system correctly rejects transactions made using a declined card. The primary purpose of this test case is to verify that the system is capable of identifying and handling declined card transactions according to the expected behavior.

Key objectives include:
1. Ensuring that the system recognizes when a payment card is declined by the issuing bank or payment gateway.
2. Verifying that an appropriate error message is displayed to the customer, informing them of the declined transaction.
3. Confirming that no funds are transferred or debited from the customer's account when using a declined card.
4. Checking that the customer can attempt to use a different payment method"
Validate data-driven sdt uar test cases for PayNOW Datadriver Testcases Ramashanker TC_114 Validate Non Integrated Customer Is Able To Process The Last Statement Payment Using Credit Card,data-driven,TC_114 Validate Non Integrated Customer Is Able To Process The Last Statement Payment Using Credit Card,"*** Settings ***
Documentation    Validate TC_114 Validate Non Integrated Customer Is Able To Process The Last Statement Payment Using Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_114 Validate Non Integrated Customer Is Able To Process The Last Statement Payment Using Credit Card
    [Documentation]    Validate TC_114 Validate Non Integrated Customer Is Able To Process The Last Statement Payment Using Credit Card using the following steps
Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Enter Customer Details    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}    
    Select Payment Type    ${Type.Payment_Type}    ${nan}    ${}    
    Enter Lumpsum Amount    ${1}    ${nan}    ${}    
    Select Payment Method    ${Credit Card}    ${nan}    ${}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${}    
    Validate Total Charges Under Summary Of Payment    ${$1.03}    ${nan}    ${}    
    Process Invoice Payment    ${nan}    ${nan}    ${}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${}    
    Enter ACH/ECheck Details    ${ACH_ECHECK_DETAILS}    ${nan}    ${}    
    Process Invoice Payment    ${nan}    ${nan}    ${}    
    Validate Payment Receipt Is Generated    ${nan}    ${nan}    ${}

*** Keywords ***
Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Enter Customer Details
    [Arguments]    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${NON_INTEGRATED_MERCHANT}    ${}

Select Payment Type
    [Arguments]    ${Type.Payment_Type}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Type.Payment_Type}    ${nan}    ${}

Enter Lumpsum Amount
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${}

Validate Total Charges Under Summary Of Payment
    [Arguments]    ${$1.03}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${$1.03}    ${nan}    ${}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${}

Enter ACH/ECheck Details
    [Arguments]    ${ACH_ECHECK_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH_ECHECK_DETAILS}    ${nan}    ${}

Process Invoice Payment
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Payment Receipt Is Generated
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The test case 'TC_114 Validate Non Integrated Customer Is Able To Process The Last Statement Payment Using Credit Card' aims to ensure that a customer who is not integrated within a specific system or service network can successfully make a payment for their latest statement using a credit card. The primary objectives of this test case are:

1. Verification: Confirm that the system allows non-integrated customers to access their latest statement details.
2. Functionality: Ensure that the payment process is functional and proceeds smoothly without any glitches.
3. Payment Processing: Validate that the credit card payment gateway accurately processes the customer's payment.
4. User Experience: Check that the user receives appropriate confirmation and notifications regarding their payment.
5. Security: Ensure that the payment information is handled securely"
Generate data-driven clientcentral_testcases for all transactions Testcases TC_01 Validate Merchant Is Able To View Number(#) And Amount($) Of Invoices Credit Cards And ACH Transactions In Transaction Summary,data-driven,TC_01 Validate Merchant Is Able To View Number(#) And Amount($) Of Invoices Credit Cards And ACH Transactions In Transaction Summary,"*** Settings ***
Documentation    Validate TC_01 Validate Merchant Is Able To View Number(#) And Amount($) Of Invoices Credit Cards And ACH Transactions In Transaction Summary
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Merchant Is Able To View Number(#) And Amount($) Of Invoices Credit Cards And ACH Transactions In Transaction Summary
    [Documentation]    Validate TC_01 Validate Merchant Is Able To View Number(#) And Amount($) Of Invoices Credit Cards And ACH Transactions In Transaction Summary using the following steps
Select Module    ${All Transactions}    ${}    ${}    
    Validate Count And Amount Of The Transactions    ${nan}    ${}    ${}    
    Validate Count And Amount Of Paid Invoices    ${nan}    ${}    ${}    
    Validate Count And Amount Of Paid ACH    ${nan}    ${}    ${}    
    Validate Count And Amount Of Paid Credit Cards    ${nan}    ${}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${All Transactions}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${}    ${}

Validate Count And Amount Of The Transactions
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Validate Count And Amount Of Paid Invoices
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Validate Count And Amount Of Paid ACH
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Validate Count And Amount Of Paid Credit Cards
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

","The test case 'TC_01 Validate Merchant Is Able To View Number(#) And Amount($) Of Invoices Credit Cards And ACH Transactions In Transaction Summary' aims to ensure that merchants can accurately view transaction details in a summary format. Specifically, this involves verifying that the transaction summary page accurately displays the following:

1. The total number (#) of invoices.
2. The total monetary amount ($) associated with these invoices.
3. The total number of credit card transactions.
4. The total monetary amount ($) associated with credit card transactions.
5. The total number of ACH (Automated Clearing House) transactions.
6. The total monetary amount ($) associated with ACH transactions. 

The purpose of this test case is to confirm that all relevant"
Generate data-driven clientcentral_testcases for all transactions Testcases TC_02 Validate Merchant Is Able To Navigate To Customer Details Page By ClickIng On Customer Number,data-driven,TC_02 Validate Merchant Is Able To Navigate To Customer Details Page By ClickIng On Customer Number,"*** Settings ***
Documentation    Validate TC_02 Validate Merchant Is Able To Navigate To Customer Details Page By ClickIng On Customer Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Merchant Is Able To Navigate To Customer Details Page By ClickIng On Customer Number
    [Documentation]    Validate TC_02 Validate Merchant Is Able To Navigate To Customer Details Page By ClickIng On Customer Number using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Validate Customer Details Page Is Displayed    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Validate Customer Details Page Is Displayed
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","**Test Case: TC_02 – Validate Merchant's Navigation to Customer Details Page via Customer Number**

**Purpose:**
The purpose of this test case is to ensure that a merchant is able to successfully navigate to a customer's details page by clicking on the customer's number within the application. This functionality is crucial for verifying that merchants can easily access detailed information about their customers, which is essential for managing customer relationships, addressing inquiries, processing orders, and performing other customer-related tasks effectively.

**Key Objectives:**
1. **Verify Clickability of Customer Number:** Ensure that the customer number displayed in a list or dashboard is designed to be an interactive element.
2. **Navigation Validation:** Confirm that clicking on the customer number takes the merchant to the correct customer's details"
Generate data-driven clientcentral_testcases for all transactions Testcases TC_03 Validate Merchant Is Able To View The Total Number(#) And Amount($) Of Transactions In The Transaction Summary,data-driven,TC_03 Validate Merchant Is Able To View The Total Number(#) And Amount($) Of Transactions In The Transaction Summary,"*** Settings ***
Documentation    Validate TC_03 Validate Merchant Is Able To View The Total Number(#) And Amount($) Of Transactions In The Transaction Summary
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate Merchant Is Able To View The Total Number(#) And Amount($) Of Transactions In The Transaction Summary
    [Documentation]    Validate TC_03 Validate Merchant Is Able To View The Total Number(#) And Amount($) Of Transactions In The Transaction Summary using the following steps
Select Module    ${All Transactions}    ${}    ${}    
    Validate Total Number Of Transactions    ${nan}    ${}    ${}    
    Validate Total Amount Of Transactions    ${nan}    ${}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${All Transactions}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${}    ${}

Validate Total Number Of Transactions
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Validate Total Amount Of Transactions
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

","The purpose of the test case 'TC_03 Validate Merchant Is Able To View The Total Number(#) And Amount($) Of Transactions In The Transaction Summary' is to ensure that the merchant dashboard or portal accurately displays comprehensive details regarding transactions. Specifically, this test case aims to validate two key aspects:

1. **Total Number of Transactions**: The test case checks that the merchant can correctly view the cumulative count of transactions over a specific period or within a certain report.
  
2. **Total Amount of Transactions**: It also verifies that the merchant can see the total monetary value of these transactions.

By validating these elements, the test case ensures that merchants have access to reliable and precise financial data, enabling them to effectively manage their business operations and make"
Create data-driven clientcentral_testcases for all transactions Testcases TC_04 Validate Merchant Is Able To View The Change In Transaction Amount($) And Count(#) After One Process Transaction,data-driven,TC_04 Validate Merchant Is Able To View The Change In Transaction Amount($) And Count(#) After One Process Transaction,"*** Settings ***
Documentation    Validate TC_04 Validate Merchant Is Able To View The Change In Transaction Amount($) And Count(#) After One Process Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate Merchant Is Able To View The Change In Transaction Amount($) And Count(#) After One Process Transaction
    [Documentation]    Validate TC_04 Validate Merchant Is Able To View The Change In Transaction Amount($) And Count(#) After One Process Transaction using the following steps
Select Module    ${All Transactions}    ${nan}    ${nan}    
    Validate Count And Amount Of The Transactions    ${nan}    ${nan}    ${nan}    
    Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Validate Total Number And Amount Of Transactions After Processing Payment    ${count}    ${amount}    ${nan}

*** Keywords ***
Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${nan}

Validate Count And Amount Of The Transactions
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Validate Total Number And Amount Of Transactions After Processing Payment
    [Arguments]    ${count}    ${amount}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${count}    ${amount}    ${nan}

","The test case 'TC_04 Validate Merchant Is Able To View The Change In Transaction Amount($) And Count(#) After One Process Transaction' aims to confirm that a merchant is correctly updated about the transaction details after processing a single transaction. Specifically, its purpose is to ensure that the system accurately reflects the new total transaction amount in dollars and updates the count of transactions immediately after one transaction is processed. 

The primary goals of this test case are:
1. To validate that the total transaction amount displayed to the merchant increases appropriately by the amount of the new transaction.
2. To verify that the transaction count incrementally increases by one, reflecting the addition of the new processed transaction.

In essence, this test case ensures the integrity and real-time accuracy of"
Generate data-driven clientcentral_testcases for all transactions Testcases TC_05 Validate The Matrix Count(#) With The Transactions list Count,data-driven,TC_05 Validate The Matrix Count(#) With The Transactions list Count,"*** Settings ***
Documentation    Validate TC_05 Validate The Matrix Count(#) With The Transactions list Count
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate The Matrix Count(#) With The Transactions list Count
    [Documentation]    Validate TC_05 Validate The Matrix Count(#) With The Transactions list Count using the following steps
Select Module    ${All Transactions}    ${}    ${}    
    Select Transaction Type    ${All}    ${}    ${}    
    Get Total Number Of Transactions    ${nan}    ${}    ${}    
    Validate Transactions Count In Transaction Grid    ${count}    ${}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${All Transactions}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${}    ${}

Select Transaction Type
    [Arguments]    ${All}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All}    ${}    ${}

Get Total Number Of Transactions
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Validate Transactions Count In Transaction Grid
    [Arguments]    ${count}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${count}    ${}    ${}

","The test case 'TC_05 Validate The Matrix Count(#) With The Transactions List Count' is designed to ensure data consistency between two different data representations in a system: the ""Matrix"" and the ""Transactions list"". 

**Purpose:**

The primary objective of this test case is to verify that the number of transactions displayed or recorded in the Matrix view matches the number of transactions listed in the Transactions list. This is crucial for maintaining the integrity of financial or transactional data, ensuring no discrepancies exist which could lead to potential errors in reporting, user trust issues, or operational inefficiencies.

**Context:**

1. **Matrix View:** This is likely a summarized or differently formatted representation of transactions, potentially displayed in a grid or pivoted form. It"
Build data-driven clientcentral_testcases for all transactions Testcases TC_06 Validate Merchant Is Able To View Auto Applied Checkbox Checked For Apply To Oldest Transaction,data-driven,TC_06 Validate Merchant Is Able To View Auto Applied Checkbox Checked For Apply To Oldest Transaction,"*** Settings ***
Documentation    Validate TC_06 Validate Merchant Is Able To View Auto Applied Checkbox Checked For Apply To Oldest Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_06 Validate Merchant Is Able To View Auto Applied Checkbox Checked For Apply To Oldest Transaction
    [Documentation]    Validate TC_06 Validate Merchant Is Able To View Auto Applied Checkbox Checked For Apply To Oldest Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${All Transactions}    ${nan}    ${nan}    
    Validate Auto Applied Checkbox Is Checked    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${nan}

Validate Auto Applied Checkbox Is Checked
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","The test case 'TC_06 Validate Merchant Is Able To View Auto Applied Checkbox Checked For Apply To Oldest Transaction' is designed to verify that a merchant can see the 'Auto Applied' checkbox checked by default for the option 'Apply to Oldest Transaction.' 

### Purpose:
1. **Usability Verification**: Ensure that the system correctly displays the 'Auto Applied' checkbox as checked when applying payments or actions to the oldest unpaid transaction automatically.
   
2. **User Interface Accuracy**: Confirm that this checkbox is visible and correctly marked at the appropriate interface point, providing visual confirmation and ease of use for merchants during their transactions handling process.

3. **Functional Consistency**: Ensure the 'Auto Applied' feature for the 'Apply to Old"
Generate data-driven clientcentral_testcases for all transactions Testcases TC_07 Validate Merchant Is Able To View Auto Applied Checkbox Checked For Specific Invoice Transaction,data-driven,TC_07 Validate Merchant Is Able To View Auto Applied Checkbox Checked For Specific Invoice Transaction,"*** Settings ***
Documentation    Validate TC_07 Validate Merchant Is Able To View Auto Applied Checkbox Checked For Specific Invoice Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Merchant Is Able To View Auto Applied Checkbox Checked For Specific Invoice Transaction
    [Documentation]    Validate TC_07 Validate Merchant Is Able To View Auto Applied Checkbox Checked For Specific Invoice Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${All Transactions}    ${nan}    ${nan}    
    Validate Auto Applied Checkbox Is Unchecked    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${nan}

Validate Auto Applied Checkbox Is Unchecked
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","## Test Case: TC_07 - Validate Merchant Is Able To View Auto Applied Checkbox Checked For Specific Invoice Transaction

### Purpose:
The purpose of this test case is to ensure that merchants can see whether the ""Auto Applied"" checkbox is checked for specific invoice transactions within their system. This feature is often used to automate the application of credits, discounts, or other adjustments to invoices. 

### Summary:
1. **Setup:**
   - Ensure the merchant is logged into the system.
   - Navigate to the section where invoice transactions are displayed.
   
2. **Execution Steps:**
   - Locate the specific invoice transaction intended for review.
   - Identify if the ""Auto Applied"" checkbox is present.
   - Check whether the ""Auto Applied"""
Validate data-driven clientcentral_testcases for all transactions Testcases TC_08 Validate Merchant Is Able To View ACHorcheck Transaction,data-driven,TC_08 Validate Merchant Is Able To View ACHorcheck Transaction,"*** Settings ***
Documentation    Validate TC_08 Validate Merchant Is Able To View ACHorcheck Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_08 Validate Merchant Is Able To View ACHorcheck Transaction
    [Documentation]    Validate TC_08 Validate Merchant Is Able To View ACHorcheck Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${All Transactions}    ${nan}    ${nan}    
    Validate Payment Type In Transaction Grid    ${account_number}    ${ACH}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${nan}

Validate Payment Type In Transaction Grid
    [Arguments]    ${account_number}    ${ACH}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${ACH}    ${nan}

","The test case 'TC_08 Validate Merchant Is Able To View ACHorcheck Transaction' aims to verify that a merchant has the capability to view transactions processed through Automated Clearing House (ACH) or check payments within the system. The primary purpose of this test case is to ensure that the merchant's interface correctly displays relevant details of these transactions, which might include the transaction amount, transaction date, payer information, and any reference or confirmation numbers associated with the transaction.

By executing this test case, the objective is to confirm the following:

1. **Accessibility**: The feature allowing the merchant to view ACH or check transactions is accessible and functioning as intended within the merchant's platform.
2. **Data Accuracy**: The information displayed for each transaction accurately reflects"
Generate data-driven clientcentral_testcases for all transactions Testcases TC_09 Validate Merchant Is Able To View Credit Card Transaction,data-driven,TC_09 Validate Merchant Is Able To View Credit Card Transaction,"*** Settings ***
Documentation    Validate TC_09 Validate Merchant Is Able To View Credit Card Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_09 Validate Merchant Is Able To View Credit Card Transaction
    [Documentation]    Validate TC_09 Validate Merchant Is Able To View Credit Card Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${All Transactions}    ${nan}    ${nan}    
    Validate Payment Type In Transaction Grid    ${account_number}    ${Card}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${nan}

Validate Payment Type In Transaction Grid
    [Arguments]    ${account_number}    ${Card}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${Card}    ${nan}

","The purpose of the test case 'TC_09 Validate Merchant Is Able To View Credit Card Transaction' is to ensure that merchants have the ability to access, review, and confirm credit card transactions through their system or platform. The test aims to verify that once a credit card transaction has been processed, the transaction details are accurately recorded and readily accessible for the merchant to view. This involves checking the user interface for the correct display of transaction data, such as transaction amount, date, card details, and status, as well as verifying that the access permissions for viewing these details are appropriately set for merchant accounts. Overall, this test case is designed to confirm that the system provides a transparent and functional way for merchants to manage their financial transactions, ensuring business operations run"
Build data-driven clientcentral_testcases for all transactions Testcases TC_10 Validate Merchant Is Able To View Transactions After Navigating To Next Page And Previous Page In Grid,data-driven,TC_10 Validate Merchant Is Able To View Transactions After Navigating To Next Page And Previous Page In Grid,"*** Settings ***
Documentation    Validate TC_10 Validate Merchant Is Able To View Transactions After Navigating To Next Page And Previous Page In Grid
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Merchant Is Able To View Transactions After Navigating To Next Page And Previous Page In Grid
    [Documentation]    Validate TC_10 Validate Merchant Is Able To View Transactions After Navigating To Next Page And Previous Page In Grid using the following steps
Select Module    ${All Transactions}    ${}    ${}    
    Validate Transaction Count In Next Page    ${nan}    ${}    ${}    
    Validate Transactions Count In Previous Page    ${nan}    ${}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${All Transactions}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${}    ${}

Validate Transaction Count In Next Page
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Validate Transactions Count In Previous Page
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

","The test case ""TC_10 Validate Merchant Is Able To View Transactions After Navigating To Next Page And Previous Page In Grid"" aims to verify the functionality of the pagination feature within the transaction viewing section of a merchant platform. The primary purpose of this test case is to ensure that a merchant can seamlessly navigate between different pages of transaction records in a grid layout without losing data or encountering errors. Specifically, it checks that after switching to the next page and then returning to the previous page, all transaction details are accurately displayed and the user experience remains consistent and reliable. This validation is critical for confirming the usability and robustness of the transaction management system for merchants who need to review multiple pages of transaction data."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_11 Validate Merchant Is Able To View The Change In Paid ACH Count(#) And Amount($) After One Process Transaction,data-driven,TC_11 Validate Merchant Is Able To View The Change In Paid ACH Count(#) And Amount($) After One Process Transaction,"*** Settings ***
Documentation    Validate TC_11 Validate Merchant Is Able To View The Change In Paid ACH Count(#) And Amount($) After One Process Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_11 Validate Merchant Is Able To View The Change In Paid ACH Count(#) And Amount($) After One Process Transaction
    [Documentation]    Validate TC_11 Validate Merchant Is Able To View The Change In Paid ACH Count(#) And Amount($) After One Process Transaction using the following steps
Select Module    ${All Transactions}    ${nan}    ${}    
    Get Transaction Count And Amount    ${ACH}    ${nan}    ${}    
    Process ACH Payment Through API    ${nan}    ${nan}    ${}    
    Validate Total Count And Amount Of ACH Transactions After Processing Payment    ${initial_count}    ${initial_amount}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${}

Get Transaction Count And Amount
    [Arguments]    ${ACH}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${ACH}    ${nan}    ${}

Process ACH Payment Through API
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Total Count And Amount Of ACH Transactions After Processing Payment
    [Arguments]    ${initial_count}    ${initial_amount}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${initial_count}    ${initial_amount}    ${}

","The test case 'TC_11 Validate Merchant Is Able To View The Change In Paid ACH Count(#) And Amount($) After One Process Transaction' aims to verify that a merchant can accurately see updates in the Paid ACH (Automated Clearing House) count and the corresponding amount after processing a single ACH transaction.

**Purpose:**
- Ensure that once an ACH transaction is successfully processed, the system updates the Paid ACH count and total amount correctly.
- Validate that the user interface reflects the changes in real-time to keep the merchant informed about their financial transactions.
- Confirm that the transactional data is accurate and consistent within the system, which is crucial for maintaining merchant trust and system integrity.

This helps in ensuring that the merchant's dashboard or reporting tools provide reliable"
Validate data-driven clientcentral_testcases for all transactions Testcases TC_12 Validate Merchant Is Able To View The Change In Paid Invoices Count(#) And Amount($) After One Transaction,data-driven,TC_12 Validate Merchant Is Able To View The Change In Paid Invoices Count(#) And Amount($) After One Transaction,"*** Settings ***
Documentation    Validate TC_12 Validate Merchant Is Able To View The Change In Paid Invoices Count(#) And Amount($) After One Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Merchant Is Able To View The Change In Paid Invoices Count(#) And Amount($) After One Transaction
    [Documentation]    Validate TC_12 Validate Merchant Is Able To View The Change In Paid Invoices Count(#) And Amount($) After One Transaction using the following steps
Select Module    ${All Transactions}    ${nan}    ${}    
    Get Transaction Count And Amount    ${Invoices Paid}    ${nan}    ${}    
    Process ACH Payment Through API    ${nan}    ${nan}    ${}    
    Validate Total Count And Amount Of Invoice Transactions After Processing Payment    ${initial_count}    ${initial_amount}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${}

Get Transaction Count And Amount
    [Arguments]    ${Invoices Paid}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${Invoices Paid}    ${nan}    ${}

Process ACH Payment Through API
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate Total Count And Amount Of Invoice Transactions After Processing Payment
    [Arguments]    ${initial_count}    ${initial_amount}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${initial_count}    ${initial_amount}    ${}

","The purpose of the test case 'TC_12 Validate Merchant Is Able To View The Change In Paid Invoices Count(#) And Amount($) After One Transaction' is to ensure that the system accurately updates and reflects changes in two key metrics after a transaction has been completed. The test focuses on validating the following:

1. **Invoice Count Update:** Confirm that the count of paid invoices increments correctly by one after a new transaction is successfully processed and marked as paid.

2. **Invoice Amount Update:** Verify that the total amount of paid invoices increases appropriately, reflecting the value of the newly completed transaction.

Essentially, this test case aims to validate the reliability of the merchant's transaction tracking system, ensuring that it maintains accurate and real-time financial records in"
Validate data-driven clientcentral_testcases for all transactions Testcases TC_13 Validate Merchant Is Able To Custom Date Range And View Transactions Summary And Payment Date In Grid,data-driven,TC_13 Validate Merchant Is Able To Custom Date Range And View Transactions Summary And Payment Date In Grid,"*** Settings ***
Documentation    Validate TC_13 Validate Merchant Is Able To Custom Date Range And View Transactions Summary And Payment Date In Grid
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_13 Validate Merchant Is Able To Custom Date Range And View Transactions Summary And Payment Date In Grid
    [Documentation]    Validate TC_13 Validate Merchant Is Able To Custom Date Range And View Transactions Summary And Payment Date In Grid using the following steps
Select Module    ${All Transactions}    ${nan}    ${}    
    Select Transaction Type    ${All}    ${nan}    ${}    
    Select Custom Date Range From Calendar    ${today-3}    ${today}    ${}    
    Validate Selected Date Is Displayed In Date Range    ${today-3}    ${today}    ${}    
    Validate Transaction Payment Date    ${today-3}    ${today}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${}

Select Transaction Type
    [Arguments]    ${All}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All}    ${nan}    ${}

Select Custom Date Range From Calendar
    [Arguments]    ${today-3}    ${today}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${today-3}    ${today}    ${}

Validate Selected Date Is Displayed In Date Range
    [Arguments]    ${today-3}    ${today}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${today-3}    ${today}    ${}

Validate Transaction Payment Date
    [Arguments]    ${today-3}    ${today}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${today-3}    ${today}    ${}

","The test case 'TC_13 Validate Merchant Is Able To Custom Date Range And View Transactions Summary And Payment Date In Grid' is designed to ensure that merchants using a transaction management or sales tracking system can effectively filter and view transaction data based on custom date ranges. 

**Purpose:**

1. **Custom Date Range Filtering:** Verify that the system allows merchants to select a specific custom date range to filter transactions. This functionality is crucial for merchants who need to analyze transactions over non-standard periods (e.g., special promotions, fiscal periods, etc.).

2. **Transactions Summary Display:** Ensure the system accurately displays a summary of transactions within the selected custom date range. This summary typically includes total sales, number of transactions, and any other pertinent financial or analytical"
Validate data-driven clientcentral_testcases for all transactions Testcases TC_14 Validate Merchant Is Able To View Transaction Payment Date,data-driven,TC_14 Validate Merchant Is Able To View Transaction Payment Date,"*** Settings ***
Documentation    Validate TC_14 Validate Merchant Is Able To View Transaction Payment Date
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_14 Validate Merchant Is Able To View Transaction Payment Date
    [Documentation]    Validate TC_14 Validate Merchant Is Able To View Transaction Payment Date using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${All Transactions}    ${nan}    ${nan}    
    Validate Merchant Is Able To View Transaction Payment Date    ${today}    ${account_number}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${nan}

Validate Merchant Is Able To View Transaction Payment Date
    [Arguments]    ${today}    ${account_number}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${today}    ${account_number}    ${nan}

","The test case ""TC_14 Validate Merchant Is Able To View Transaction Payment Date"" is designed to ensure that merchants using a payment processing system can successfully access and view the payment date for transactions. This functionality is critical as it allows merchants to confirm when payments were received, facilitating accurate financial tracking and reconciliation. 

The purpose of this test case is to verify that the payment date is correctly displayed within the merchant's dashboard or transaction details page once a transaction has been completed. This ensures transparency and helps merchants manage their cash flow and record-keeping more effectively. 

Key aspects to validate include:
1. Availability of the payment date field on the transaction records.
2. Correct formatting and accuracy of the displayed date.
3. Date updates correctly after a transaction"
Validate data-driven clientcentral_testcases for all transactions Testcases TC_15 Validate Merchant Is Able To View Invoice Count For Successfull Transaction,data-driven,TC_15 Validate Merchant Is Able To View Invoice Count For Successfull Transaction,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Is Able To View Invoice Count For Successfull Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Is Able To View Invoice Count For Successfull Transaction
    [Documentation]    Validate TC_15 Validate Merchant Is Able To View Invoice Count For Successfull Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${All Transactions}    ${nan}    ${nan}    
    Validate Invoice Count In Transaction Grid    ${account_number}    ${pending_settlement}    ${1}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${nan}

Validate Invoice Count In Transaction Grid
    [Arguments]    ${account_number}    ${pending_settlement}    ${1}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${pending_settlement}    ${1}

","Certainly! 

**Test Case TC_15: Validate Merchant Is Able To View Invoice Count For Successful Transaction**

**Purpose:**
The purpose of this test case is to verify that a merchant within an e-commerce or financial platform is able to accurately view and access the count of invoices associated with successful transactions. This functionality is crucial for merchants to effectively manage their financial records, track sales performance, and ensure accurate reconciliation of transaction data.

**Objectives:**
1. Ensure that the system accurately tracks and displays the count of successful invoices.
2. Verify that the merchant dashboard or reporting tool clearly shows this information.
3. Ensure that the displayed invoice count matches the number of completed and successful transactions within a given time frame.

**Steps to Execute:**
1"
Validate data-driven clientcentral_testcases for all transactions Testcases TC_16 Validate Merchant Is Able To View Invoice Count For A Declined Transaction,data-driven,TC_16 Validate Merchant Is Able To View Invoice Count For A Declined Transaction,"*** Settings ***
Documentation    Validate TC_16 Validate Merchant Is Able To View Invoice Count For A Declined Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_16 Validate Merchant Is Able To View Invoice Count For A Declined Transaction
    [Documentation]    Validate TC_16 Validate Merchant Is Able To View Invoice Count For A Declined Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${All Transactions}    ${nan}    ${nan}    
    Validate Invoice Count In Transaction Grid    ${account_number}    ${declined}    ${0}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${nan}

Validate Invoice Count In Transaction Grid
    [Arguments]    ${account_number}    ${declined}    ${0}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${declined}    ${0}

","The test case 'TC_16 Validate Merchant Is Able To View Invoice Count For A Declined Transaction' serves the purpose of confirming that a merchant can successfully access and view the count of invoices associated with transactions that have been declined. This validation ensures that even when a transaction isn't completed due to being declined, the system correctly logs and displays the corresponding invoice count. This feature is crucial as it allows merchants to maintain accurate records and reconcile their transaction history, facilitating better financial management and customer service by providing visibility into all types of transactions, including unsuccessful ones."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_17 Validate Merchant Is Able To View Invoices Count For Multiple Transactions,data-driven,TC_17 Validate Merchant Is Able To View Invoices Count For Multiple Transactions,"*** Settings ***
Documentation    Validate TC_17 Validate Merchant Is Able To View Invoices Count For Multiple Transactions
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_17 Validate Merchant Is Able To View Invoices Count For Multiple Transactions
    [Documentation]    Validate TC_17 Validate Merchant Is Able To View Invoices Count For Multiple Transactions using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Create Multiple Invoices Through API    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Transaction For Multiple Invoices    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}    
    Select Module    ${All Transactions}    ${nan}    ${nan}    
    Validate Invoice Count In Transaction Grid    ${account_number}    ${pending_settlement}    ${3}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Transaction For Multiple Invoices
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}

Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${nan}

Validate Invoice Count In Transaction Grid
    [Arguments]    ${account_number}    ${pending_settlement}    ${3}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${pending_settlement}    ${3}

","**Test Case Summary: TC_17 Validate Merchant Is Able To View Invoices Count For Multiple Transactions**

**Purpose:**
The primary objective of this test case is to ensure that the merchant's user interface or dashboard accurately displays the total count of invoices related to multiple transactions. This includes verifying that the system correctly tallies and presents the number of invoices generated when multiple transactions are processed. The test aims to confirm the system’s reliability and accuracy in reflecting the correct data, which is crucial for financial record-keeping, auditing, and overall business management.

**Key Test Steps:**
1. **Login as Merchant**: Authenticate into the system using valid merchant credentials.
2. **Navigate to Transaction History/Invoices Section**: Access the part of the"
Create data-driven clientcentral_testcases for all transactions Testcases TC_18 Validate Merchant Is Able To View Partial Transactions Processed With ACHorEcheck,data-driven,TC_18 Validate Merchant Is Able To View Partial Transactions Processed With ACHorEcheck,"*** Settings ***
Documentation    Validate TC_18 Validate Merchant Is Able To View Partial Transactions Processed With ACHorEcheck
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_18 Validate Merchant Is Able To View Partial Transactions Processed With ACHorEcheck
    [Documentation]    Validate TC_18 Validate Merchant Is Able To View Partial Transactions Processed With ACHorEcheck using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Validate Amount In Transaction Grid    ${account_number}    ${$1.00}    ${$1.00}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Validate Amount In Transaction Grid
    [Arguments]    ${account_number}    ${$1.00}    ${$1.00}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${$1.00}    ${$1.00}

","The test case 'TC_18 Validate Merchant Is Able To View Partial Transactions Processed With ACH or Echeck' aims to ensure that a merchant can successfully access and review transaction details for payments that were partially processed using Automated Clearing House (ACH) or electronic check (eCheck) methods. The purpose of this test case is to verify the following:

1. **Functionality Verification**: Confirm the system's capability to display partial transactions accurately.
2. **User Interface Check**: Ensure that the merchant interface correctly shows partial transaction details, including amounts and statuses.
3. **Data Integrity**: Validate that the recorded data for these transactions is precise and corresponds to the actual transaction events.
4. **User Experience**: Assess whether the information is"
Validate data-driven clientcentral_testcases for all transactions Testcases TC_19 Validate Merchant Is Able To View Partial Transactions Processed With Credit Card,data-driven,TC_19 Validate Merchant Is Able To View Partial Transactions Processed With Credit Card,"*** Settings ***
Documentation    Validate TC_19 Validate Merchant Is Able To View Partial Transactions Processed With Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_19 Validate Merchant Is Able To View Partial Transactions Processed With Credit Card
    [Documentation]    Validate TC_19 Validate Merchant Is Able To View Partial Transactions Processed With Credit Card using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Validate Amount In Transaction Grid    ${account_number}    ${$1.00}    ${$1.03}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Validate Amount In Transaction Grid
    [Arguments]    ${account_number}    ${$1.00}    ${$1.03}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${$1.00}    ${$1.03}

","**Test Case Summary: TC_19 - Validate Merchant Is Able To View Partial Transactions Processed With Credit Card**

**Purpose**: The primary objective of this test case is to ensure that merchants can view transactions that have been partially processed using a credit card. This includes transactions that are incomplete or only partly successful due to various reasons like temporary holds, authorization issues, or partial payments.

**Key Validation Points:**

1. **Transaction Visibility**: Confirm that all partial transactions, regardless of their current status, are listed and accessible in the merchant's transaction management system.
  
2. **Transaction Details**: Ensure that relevant details of the partial transactions, such as transaction ID, amount, date, and status, are displayed accurately to provide clarity on"
Create data-driven clientcentral_testcases for all transactions Testcases TC_20 Validate Merchant Is Able To View Payment Status In Grid,data-driven,TC_20 Validate Merchant Is Able To View Payment Status In Grid,"*** Settings ***
Documentation    Validate TC_20 Validate Merchant Is Able To View Payment Status In Grid
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_20 Validate Merchant Is Able To View Payment Status In Grid
    [Documentation]    Validate TC_20 Validate Merchant Is Able To View Payment Status In Grid using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${All Transactions}    ${nan}    ${nan}    
    Validate Merchant Is Able To View Payment Status In Grid    ${account_number}    ${pending_settlement}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${nan}

Validate Merchant Is Able To View Payment Status In Grid
    [Arguments]    ${account_number}    ${pending_settlement}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${pending_settlement}    ${nan}

","The test case 'TC_20 Validate Merchant Is Able To View Payment Status In Grid' is designed to ensure that a merchant can effectively view the payment status of transactions within a specific user interface element, typically a grid or table format. The primary purpose of this test is to verify the following:

1. **UI Accessibility**: Ensure that the grid or table displaying the payment statuses is accessible and loads correctly within the merchant's portal.
2. **Data Accuracy**: Verify that the payment statuses displayed are accurate and reflect the current state of various transactions.
3. **Filtering and Sorting**: Confirm that the merchant can filter and sort the payment data efficiently if such functionalities are available.
4. **Usability**: Assess the ease with which a"
Create data-driven clientcentral_testcases for all transactions Testcases TC_21 Validate Merchant Is Able To Send Receipt With Valid Email id,data-driven,TC_21 Validate Merchant Is Able To Send Receipt With Valid Email id,"*** Settings ***
Documentation    Validate TC_21 Validate Merchant Is Able To Send Receipt With Valid Email id
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_21 Validate Merchant Is Able To Send Receipt With Valid Email id
    [Documentation]    Validate TC_21 Validate Merchant Is Able To Send Receipt With Valid Email id using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Navigate To Send Receipt Page    ${nan}    ${nan}    ${nan}    
    Enter Email Address In Send Receipt Page    ${EMAIL}    ${nan}    ${nan}    
    Click On Send Email    ${nan}    ${nan}    ${nan}    
    Get Transaction ID    ${nan}    ${nan}    ${nan}    
    Validate Transaction Receipt Is Received In Email    ${transaction_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Navigate To Send Receipt Page
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Enter Email Address In Send Receipt Page
    [Arguments]    ${EMAIL}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${nan}    ${nan}

Click On Send Email
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Get Transaction ID
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Transaction Receipt Is Received In Email
    [Arguments]    ${transaction_id}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${transaction_id}    ${nan}    ${nan}

","The test case 'TC_21 Validate Merchant Is Able To Send Receipt With Valid Email id' aims to verify that a merchant is able to successfully send a digital receipt to a customer's valid email address. The primary purpose of this test case is to ensure the functionality and reliability of the email receipt feature within the merchant's system. 

Key objectives include:

1. Confirming that the merchant interface correctly accepts and processes a valid email address.
2. Validating that upon completion of a transaction, the system generates the receipt accurately.
3. Ensuring that the email containing the receipt is sent to the provided valid email address.
4. Verifying that the email receipt is received by the customer within a reasonable timeframe and contains all the necessary and accurate transaction details"
Create data-driven clientcentral_testcases for all transactions Testcases TC_22 Validate Merchant Is Able To Navigate To Transaction Details,data-driven,TC_22 Validate Merchant Is Able To Navigate To Transaction Details,"*** Settings ***
Documentation    Validate TC_22 Validate Merchant Is Able To Navigate To Transaction Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Merchant Is Able To Navigate To Transaction Details
    [Documentation]    Validate TC_22 Validate Merchant Is Able To Navigate To Transaction Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Transaction Details Page Is Displayed    ${gateway_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Transaction Details Page Is Displayed
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

","**Summary of Test Case TC_22:** 

The test case titled ""TC_22 Validate Merchant Is Able To Navigate To Transaction Details"" aims to verify that a merchant user can successfully access and view the transaction details page within a merchant portal or transactional system. This functionality is crucial for merchants to review individual transactions, confirm details, and manage their financial records accurately.

### Purpose:
1. **Ensure Proper Navigation:**
   - To check that the navigation links or buttons leading to the transaction details page function correctly and take the user to the intended page without errors.

2. **Verify Access Permissions:**
   - To validate that the merchant has the necessary permissions to view detailed transaction information and that unauthorized users are restricted.

3. **Confirm Page Accuracy"
Validate data-driven clientcentral_testcases for all transactions Testcases TC_23 Validate Merchant Is Able To View Payment Type Details In Transaction Summary For ACH Payment,data-driven,TC_23 Validate Merchant Is Able To View Payment Type Details In Transaction Summary For ACH Payment,"*** Settings ***
Documentation    Validate TC_23 Validate Merchant Is Able To View Payment Type Details In Transaction Summary For ACH Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_23 Validate Merchant Is Able To View Payment Type Details In Transaction Summary For ACH Payment
    [Documentation]    Validate TC_23 Validate Merchant Is Able To View Payment Type Details In Transaction Summary For ACH Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Payment Type In Transaction Summary    ${ACH}    ${11}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Payment Type In Transaction Summary
    [Arguments]    ${ACH}    ${11}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${ACH}    ${11}    ${nan}

","### Summary of Test Case 'TC_23: Validate Merchant Is Able To View Payment Type Details In Transaction Summary For ACH Payment':

**Purpose:**
The primary objective of this test case is to ensure that a merchant can successfully view detailed payment type information within the transaction summary when an Automated Clearing House (ACH) payment is processed. This involves verifying that the transaction summary accurately reflects the necessary details associated with ACH payments.

**Key Aspects to Validate:**

1. **Navigation:** Confirm that the merchant can navigate to the transaction summary page without issues.
2. **Payment Type Identification:** Ensure that the payment type is correctly identified as ACH in the transaction summary.
3. **Detailed Information Display:** Verify that all relevant details related to the ACH payment ("
Generate data-driven clientcentral_testcases for all transactions Testcases TC_24 Validate Merchant Is Able To View Payment Type Details In Transaction Summary For Credit Card Payment,data-driven,TC_24 Validate Merchant Is Able To View Payment Type Details In Transaction Summary For Credit Card Payment,"*** Settings ***
Documentation    Validate TC_24 Validate Merchant Is Able To View Payment Type Details In Transaction Summary For Credit Card Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_24 Validate Merchant Is Able To View Payment Type Details In Transaction Summary For Credit Card Payment
    [Documentation]    Validate TC_24 Validate Merchant Is Able To View Payment Type Details In Transaction Summary For Credit Card Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Payment Type In Transaction Summary    ${Card}    ${411111}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Payment Type In Transaction Summary
    [Arguments]    ${Card}    ${411111}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Card}    ${411111}    ${nan}

","The test case 'TC_24 Validate Merchant Is Able To View Payment Type Details In Transaction Summary For Credit Card Payment' aims to ensure that merchants can accurately view and review details related to credit card payments in their transaction summaries. This is crucial for merchants to verify payment information, manage transactions effectively, and perform necessary reconciliations. The test checks whether the transaction summary displays comprehensive and accurate data, including the type of payment (credit card), transaction amounts, dates, and any other relevant details that enable the merchant to understand and process the payment correctly. The successful validation of this test case ensures transparency, accountability, and efficiency in the merchant's transaction handling system for credit card payments."
Build data-driven clientcentral_testcases for all transactions Testcases TC_25 Validate Merchant Is Able To View Custom Fields And Billing Info In Transaction Summary,data-driven,TC_25 Validate Merchant Is Able To View Custom Fields And Billing Info In Transaction Summary,"*** Settings ***
Documentation    Validate TC_25 Validate Merchant Is Able To View Custom Fields And Billing Info In Transaction Summary
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_25 Validate Merchant Is Able To View Custom Fields And Billing Info In Transaction Summary
    [Documentation]    Validate TC_25 Validate Merchant Is Able To View Custom Fields And Billing Info In Transaction Summary using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Get Billing Information    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Custom Fields    ${Account Number}    ${account_number}    ${nan}    
    Validate Billing Info In Transaction Summary    ${billing_address}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Get Billing Information
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Custom Fields
    [Arguments]    ${Account Number}    ${account_number}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Account Number}    ${account_number}    ${nan}

Validate Billing Info In Transaction Summary
    [Arguments]    ${billing_address}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${billing_address}    ${nan}    ${nan}

","Certainly! The test case 'TC_25 Validate Merchant Is Able To View Custom Fields And Billing Info In Transaction Summary' aims to verify that a merchant can successfully access and view additional details associated with a transaction. This includes both custom fields and billing information.

**Purpose:** 
- **Custom Fields:** These are user-defined fields that allow the merchant to capture specific data about the transaction, which may not be part of the standard fields. Ensuring these fields are visible allows the merchant to see tailored information that could be critical for their unique business needs.
- **Billing Info:** This includes essential billing details such as the customer's name, address, payment method, and any other billing-related information. Verifying the visibility of this info ensures that the merchant has"
Generate data-driven clientcentral_testcases for all transactions Testcases TC_26 Validate Merchant Is Able To View Transaction Summary For Approved Transaction,data-driven,TC_26 Validate Merchant Is Able To View Transaction Summary For Approved Transaction,"*** Settings ***
Documentation    Validate TC_26 Validate Merchant Is Able To View Transaction Summary For Approved Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_26 Validate Merchant Is Able To View Transaction Summary For Approved Transaction
    [Documentation]    Validate TC_26 Validate Merchant Is Able To View Transaction Summary For Approved Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Transaction Response Details In Summary    ${Invoices Paid: 1}    ${account_number}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Transaction Response Details In Summary
    [Arguments]    ${Invoices Paid: 1}    ${account_number}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Invoices Paid: 1}    ${account_number}    ${nan}

","The test case 'TC_26 Validate Merchant Is Able To View Transaction Summary For Approved Transaction' is designed to ensure that merchants can successfully access and view the details of transactions that have been approved. The primary purpose of this test case is to verify that once a transaction has been authorized, merchants can navigate to the appropriate interface or section within the system and see a comprehensive summary of the transaction. This summary typically includes critical information such as transaction amount, date and time, approval status, customer details, and any other relevant data. Successfully passing this test case confirms that the transaction summary feature is functioning correctly, enabling merchants to review and manage their approved transactions efficiently."
Validate data-driven clientcentral_testcases for all transactions Testcases TC_27 Validate Merchant Is Able To View Transaction Summary For Declined Transaction,data-driven,TC_27 Validate Merchant Is Able To View Transaction Summary For Declined Transaction,"*** Settings ***
Documentation    Validate TC_27 Validate Merchant Is Able To View Transaction Summary For Declined Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_27 Validate Merchant Is Able To View Transaction Summary For Declined Transaction
    [Documentation]    Validate TC_27 Validate Merchant Is Able To View Transaction Summary For Declined Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Transaction Response Details In Summary    ${Invoices Paid: 0}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Transaction Response Details In Summary
    [Arguments]    ${Invoices Paid: 0}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Invoices Paid: 0}    ${nan}    ${nan}

","The test case 'TC_27 Validate Merchant Is Able To View Transaction Summary For Declined Transaction' aims to ensure that a merchant has the ability to view the complete summary of transactions that have been declined. The purpose is to verify that the merchant can access and review details such as the transaction amount, date, declined reason, and any other pertinent information associated with declined transactions. This enables the merchant to understand why certain transactions were not processed successfully and to take appropriate actions if necessary. The validation helps maintain accurate transaction records and supports the merchant in effective financial management and customer service."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_28 Validate Merchant Is Able To View Filtered Transaction,data-driven,TC_28 Validate Merchant Is Able To View Filtered Transaction,"*** Settings ***
Documentation    Validate TC_28 Validate Merchant Is Able To View Filtered Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_28 Validate Merchant Is Able To View Filtered Transaction
    [Documentation]    Validate TC_28 Validate Merchant Is Able To View Filtered Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${All Transactions}    ${nan}    ${nan}    
    Validate Filtered Transaction Is Displayed    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${nan}

Validate Filtered Transaction Is Displayed
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","The purpose of the test case 'TC_28 Validate Merchant Is Able To View Filtered Transaction' is to verify that a merchant can successfully filter transaction records within a specified transaction management system or portal. The test ensures that the filtering functionality operates as expected, allowing the merchant to refine transaction data based on various criteria such as date range, transaction type, status, amount, customer information, and other relevant fields. The test aims to confirm that the system accurately displays the results that match the given filters, contributing to a more efficient and user-friendly transaction management experience for the merchant."
Build data-driven clientcentral_testcases for all transactions Testcases TC_29 Validate Merchant Is Able To Sort Transactions By Type,data-driven,TC_29 Validate Merchant Is Able To Sort Transactions By Type,"*** Settings ***
Documentation    Validate TC_29 Validate Merchant Is Able To Sort Transactions By Type
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_29 Validate Merchant Is Able To Sort Transactions By Type
    [Documentation]    Validate TC_29 Validate Merchant Is Able To Sort Transactions By Type using the following steps
Select Module    ${All Transactions}    ${}    ${}    
    Validate Sorted Transactions    ${nan}    ${}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${All Transactions}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${}    ${}

Validate Sorted Transactions
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

","The purpose of the test case 'TC_29 Validate Merchant Is Able To Sort Transactions By Type' is to ensure that the merchant's transaction management system correctly supports the functionality of sorting transactions based on their type. The primary objectives include verifying that the sorting feature is available, functions accurately, and allows merchants to organize their transaction records efficiently. This test case is critical to confirm that various transaction types (e.g., sales, refunds, chargebacks) can be filtered and viewed in an orderly manner, thereby enhancing the merchant's ability to track and manage their financial activities."
Create data-driven clientcentral_testcases for all transactions Testcases TC_30 Validate Merchant Is Able To View The Surcharge Amount Is Not Applied For ACH Transaction,data-driven,TC_30 Validate Merchant Is Able To View The Surcharge Amount Is Not Applied For ACH Transaction,"*** Settings ***
Documentation    Validate TC_30 Validate Merchant Is Able To View The Surcharge Amount Is Not Applied For ACH Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_30 Validate Merchant Is Able To View The Surcharge Amount Is Not Applied For ACH Transaction
    [Documentation]    Validate TC_30 Validate Merchant Is Able To View The Surcharge Amount Is Not Applied For ACH Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${All Transactions}    ${nan}    ${nan}    
    Validate Surcharge For Card/ACH Transactions    ${account_number}    ${ACH}    ${$0.00}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${nan}

Validate Surcharge For Card/ACH Transactions
    [Arguments]    ${account_number}    ${ACH}    ${$0.00}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${ACH}    ${$0.00}

","The test case 'TC_30 Validate Merchant Is Able To View The Surcharge Amount Is Not Applied For ACH Transaction' is designed to ensure that merchants can confirm that no additional surcharge fees are applied when they process ACH (Automated Clearing House) transactions.

### Purpose:
- **Verification of No Surcharge for ACH**: The primary goal is to validate that the system does not wrongly apply a surcharge amount when an ACH transaction is performed. ACH transactions typically involve direct bank-to-bank transfers and should not incur extra surcharge fees that might be applicable to credit card transactions.
- **Merchant Transparency**: The test ensures that merchants can clearly see that the surcharge amount is zero or not applied for ACH transactions. This is crucial for maintaining transparency and trust with merchants"
Generate data-driven clientcentral_testcases for all transactions Testcases TC_31 Validate Merchant Is Able To View The Surcharge Amount Applied For Credit Card Transaction,data-driven,TC_31 Validate Merchant Is Able To View The Surcharge Amount Applied For Credit Card Transaction,"*** Settings ***
Documentation    Validate TC_31 Validate Merchant Is Able To View The Surcharge Amount Applied For Credit Card Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_31 Validate Merchant Is Able To View The Surcharge Amount Applied For Credit Card Transaction
    [Documentation]    Validate TC_31 Validate Merchant Is Able To View The Surcharge Amount Applied For Credit Card Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${All Transactions}    ${nan}    ${nan}    
    Validate Surcharge For Card/ACH Transactions    ${account_number}    ${Card}    ${$0.03}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${nan}

Validate Surcharge For Card/ACH Transactions
    [Arguments]    ${account_number}    ${Card}    ${$0.03}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${Card}    ${$0.03}

","**Test Case TC_31: Validate Merchant Is Able To View The Surcharge Amount Applied For Credit Card Transaction**

**Purpose:**
The purpose of this test case is to ensure that the merchant can correctly view the surcharge amount that has been applied to a credit card transaction. This verification is essential for transparency and accuracy in transaction processing, allowing the merchant to see the exact details of any additional charges incurred due to credit card usage. By validating this functionality, we ensure that the system correctly calculates and displays surcharge amounts, which is crucial for both merchant record-keeping and customer transparency.

**Key Objectives:**
1. Verify that the surcharge amount is correctly calculated based on the predefined rules or percentages set by the system for credit card transactions.
2. Ensure"
Validate data-driven clientcentral_testcases for all transactions Testcases TC_32 Validate Merchant Is Able To View Items Per Page,data-driven,TC_32 Validate Merchant Is Able To View Items Per Page,"*** Settings ***
Documentation    Validate TC_32 Validate Merchant Is Able To View Items Per Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_32 Validate Merchant Is Able To View Items Per Page
    [Documentation]    Validate TC_32 Validate Merchant Is Able To View Items Per Page using the following steps
Select Module    ${All Transactions}    ${}    ${}    
    Select Items Per Page    ${10}    ${}    ${}    
    Validate Merchant Is Able To View Items Per Page    ${10}    ${}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${All Transactions}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${}    ${}

Select Items Per Page
    [Arguments]    ${10}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${10}    ${}    ${}

Validate Merchant Is Able To View Items Per Page
    [Arguments]    ${10}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${10}    ${}    ${}

","The test case 'TC_32 Validate Merchant Is Able To View Items Per Page' aims to ensure that the functionality allowing merchants to view different quantities of items per page within a specific section (such as inventory, order history, or product catalog) in an application is working correctly. The primary objectives of this test case are:

1. **Verification of Default Setting**: Confirm that, upon accessing the page, a default number of items is displayed to the merchant.
2. **Change Items Per Page**: Allow the merchant to select different options for the number of items displayed per page (e.g., 10, 20, 50, 100).
3. **Pagination Functionality**: Ensure that when the number of items per page"
Build data-driven clientcentral_testcases for all transactions Testcases TC_33 Validate Merchant Is Able To View Invoice Details In All Transaction,data-driven,TC_33 Validate Merchant Is Able To View Invoice Details In All Transaction,"*** Settings ***
Documentation    Validate TC_33 Validate Merchant Is Able To View Invoice Details In All Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_33 Validate Merchant Is Able To View Invoice Details In All Transaction
    [Documentation]    Validate TC_33 Validate Merchant Is Able To View Invoice Details In All Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Validate Invoice In All Transaction    ${account_number}    ${invoice_number}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Validate Invoice In All Transaction
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

","The test case 'TC_33 Validate Merchant Is Able To View Invoice Details In All Transactions' is designed to ensure that merchants using the platform can access and view detailed information about invoices related to all transactions they have conducted. The purpose of this test case is to verify that the system accurately retrieves and displays the necessary invoice details for each transaction in a clear and accessible manner. This process typically involves logging into the merchant account, navigating to the transactions section, selecting specific transactions, and checking that the invoice details (such as date, amount, items, and any other pertinent information) are correctly displayed and matched against the transaction records. Successful validation confirms that the invoicing feature is functioning correctly, enabling merchants to manage their financial records effectively."
Build data-driven clientcentral_testcases for all transactions Testcases TC_34 Validate Merchant Is Able To Collapse Invoice Details,data-driven,TC_34 Validate Merchant Is Able To Collapse Invoice Details,"*** Settings ***
Documentation    Validate TC_34 Validate Merchant Is Able To Collapse Invoice Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_34 Validate Merchant Is Able To Collapse Invoice Details
    [Documentation]    Validate TC_34 Validate Merchant Is Able To Collapse Invoice Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Validate Merchant Is Able To Collapse Invoice Details    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Validate Merchant Is Able To Collapse Invoice Details
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","The purpose of the test case 'TC_34 Validate Merchant Is Able To Collapse Invoice Details' is to verify that a merchant can successfully collapse or hide the detailed view of an invoice in the billing or invoice management system. This functionality helps merchants manage their interface effectively, allowing them to minimize the detailed information of invoices when not needed, thus maintaining a clutter-free and organized display.

Key objectives include:
1. Ensuring the collapse feature is available and visible to the merchant.
2. Confirming that when the collapse action is triggered, the detailed view of the invoice hides successfully.
3. Validating that the overall functionality works without any errors or impact on other system functionalities.

This test verifies the application's usability, ensuring it supports merchants in efficiently managing their workspace"
Create data-driven clientcentral_testcases for all transactions Testcases TC_35 Validate Merchant Is Able To Navigate To Invoice Details Page By Clicking On Invoice Number In All Transactions,data-driven,TC_35 Validate Merchant Is Able To Navigate To Invoice Details Page By Clicking On Invoice Number In All Transactions,"*** Settings ***
Documentation    Validate TC_35 Validate Merchant Is Able To Navigate To Invoice Details Page By Clicking On Invoice Number In All Transactions
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_35 Validate Merchant Is Able To Navigate To Invoice Details Page By Clicking On Invoice Number In All Transactions
    [Documentation]    Validate TC_35 Validate Merchant Is Able To Navigate To Invoice Details Page By Clicking On Invoice Number In All Transactions using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${All Transactions}    ${nan}    ${nan}    
    Navigate To Invoice Details Page    ${account_number}    ${invoice_number}    ${nan}    
    Validate Invoice Details Page Is Displayed    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${nan}

Navigate To Invoice Details Page
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Invoice Details Page Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","The test case 'TC_35 Validate Merchant Is Able To Navigate To Invoice Details Page By Clicking On Invoice Number In All Transactions' is designed to ensure that when a merchant navigates to the 'All Transactions' page, they can click on an invoice number to be directed to the specific 'Invoice Details' page corresponding to that invoice. The primary purpose of this test is to verify the seamless functionality of the navigation link from the transaction summary to the detailed invoice view. This ensures that merchants can easily access detailed information of a specific transaction by simply clicking on its invoice number, thereby improving the user experience and operational efficiency."
Create data-driven clientcentral_testcases for all transactions Testcases TC_36 Validate Merchant Is Able To Cancel Send Receipt Popup,data-driven,TC_36 Validate Merchant Is Able To Cancel Send Receipt Popup,"*** Settings ***
Documentation    Validate TC_36 Validate Merchant Is Able To Cancel Send Receipt Popup
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_36 Validate Merchant Is Able To Cancel Send Receipt Popup
    [Documentation]    Validate TC_36 Validate Merchant Is Able To Cancel Send Receipt Popup using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Send Receipt Popup Is Cancelled    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Send Receipt Popup Is Cancelled
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","**Test Case Summary: TC_36 Validate Merchant Is Able To Cancel Send Receipt Popup**

**Purpose:** 
The primary objective of this test case is to ensure that a merchant has the capability to cancel the ""Send Receipt"" popup within an application or system that facilitates transactions. This functionality is vital for providing flexibility and control to merchants during the transaction process. By validating this feature, we ensure that merchants can opt-out or cancel sending a receipt if there are changes, corrections, or simply if they decide not to proceed with issuing a receipt.

**Key Points:**
1. **Trigger Conditions:** 
   - The scenario generally involves initiating a transaction that leads to the option of sending a receipt to the customer.
   - The ""Send Receipt"" popup"
Generate data-driven clientcentral_testcases for all transactions Testcases TC_37 Validate Merchant Is Able To View Alert Popup To Void Transaction,data-driven,TC_37 Validate Merchant Is Able To View Alert Popup To Void Transaction,"*** Settings ***
Documentation    Validate TC_37 Validate Merchant Is Able To View Alert Popup To Void Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_37 Validate Merchant Is Able To View Alert Popup To Void Transaction
    [Documentation]    Validate TC_37 Validate Merchant Is Able To View Alert Popup To Void Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Alert Popup Is Displayed For Void Transaction    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Alert Popup Is Displayed For Void Transaction
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_37 Validate Merchant Is Able To View Alert Popup To Void Transaction' is designed to verify that a merchant receives an alert popup when attempting to void a transaction. The purpose of this test case is to ensure that the system effectively prompts the merchant with a confirmation or alert message before proceeding with voiding the transaction. This functionality is important because it provides an additional layer of verification, helping to prevent accidental voids and ensuring that the merchant is aware of the significant action being taken.

Here are the key aspects of this test case:
1. **Objective:** Confirm that an alert popup is displayed to the merchant before a transaction is voided.
2. **Precondition:** A transaction must be present that can be voided.
3"
Validate data-driven clientcentral_testcases for all transactions Testcases TC_38 Validate Merchant Is Able To View AVS And CVV Response Code For Card Payment,data-driven,TC_38 Validate Merchant Is Able To View AVS And CVV Response Code For Card Payment,"*** Settings ***
Documentation    Validate TC_38 Validate Merchant Is Able To View AVS And CVV Response Code For Card Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_38 Validate Merchant Is Able To View AVS And CVV Response Code For Card Payment
    [Documentation]    Validate TC_38 Validate Merchant Is Able To View AVS And CVV Response Code For Card Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Get Response Details    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Select Tab In Transaction Details Page    ${Response Detail}    ${nan}    ${nan}    
    Validate AVS And CVV Response    ${response_detailbody}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Get Response Details
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Select Tab In Transaction Details Page
    [Arguments]    ${Response Detail}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Response Detail}    ${nan}    ${nan}

Validate AVS And CVV Response
    [Arguments]    ${response_detailbody}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${response_detailbody}    ${nan}    ${nan}

","The test case 'TC_38 Validate Merchant Is Able To View AVS And CVV Response Code For Card Payment' is designed to ensure that merchants are provided with pertinent security-related information when processing card payments. Specifically, this test case verifies that upon completing a card transaction, the merchant can view the Address Verification System (AVS) and Card Verification Value (CVV) response codes.

**Purpose of the Test Case:**

1. **Security Verification:** Ensure that the AVS and CVV codes are correctly processed and that the responses are accessible to the merchant. The AVS code helps confirm that the billing address provided matches the address on file with the card issuer, while the CVV code helps validate that the cardholder has the physical card"
Build data-driven clientcentral_testcases for all transactions Testcases TC_39 Validate Merchant Is Able To View Transaction Summary For Master Credit Card,data-driven,TC_39 Validate Merchant Is Able To View Transaction Summary For Master Credit Card,"*** Settings ***
Documentation    Validate TC_39 Validate Merchant Is Able To View Transaction Summary For Master Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_39 Validate Merchant Is Able To View Transaction Summary For Master Credit Card
    [Documentation]    Validate TC_39 Validate Merchant Is Able To View Transaction Summary For Master Credit Card using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Payment Type In Transaction Summary    ${Card}    ${555555}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Payment Type In Transaction Summary
    [Arguments]    ${Card}    ${555555}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Card}    ${555555}    ${nan}

","The purpose of the test case 'TC_39 Validate Merchant Is Able To View Transaction Summary For Master Credit Card' is to ensure that merchants can successfully access and review the transaction summary specifically for Master Credit Card payments within the system. This involves verifying that the relevant transaction details are accurately displayed, including date, amount, cardholder information, and any other pertinent data specific to transactions made using a Master Credit Card. The test case aims to confirm that the functionality works as expected, providing merchants with a clear and comprehensive overview of their credit card transactions, thereby aiding in financial tracking and reconciliation."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_40 Validate Merchant Is Able To View Transaction Summary For Visa Debit Card,data-driven,TC_40 Validate Merchant Is Able To View Transaction Summary For Visa Debit Card,"*** Settings ***
Documentation    Validate TC_40 Validate Merchant Is Able To View Transaction Summary For Visa Debit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_40 Validate Merchant Is Able To View Transaction Summary For Visa Debit Card
    [Documentation]    Validate TC_40 Validate Merchant Is Able To View Transaction Summary For Visa Debit Card using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Payment Type In Transaction Summary    ${Card}    ${421765}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Payment Type In Transaction Summary
    [Arguments]    ${Card}    ${421765}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Card}    ${421765}    ${nan}

","The purpose of the test case 'TC_40 Validate Merchant Is Able To View Transaction Summary For Visa Debit Card' is to verify that the merchant has the capability to access and view a comprehensive summary of transactions made using Visa debit cards. This includes ensuring that the transaction details, such as amounts, dates, and transaction statuses, are accurately displayed and accessible within the merchant's system or portal. The objective is to confirm that the merchant can efficiently manage and review all relevant transaction information for auditing, reconciliation, and customer support purposes."
Build data-driven clientcentral_testcases for all transactions Testcases TC_41 Validate Merchant Is Able To View The Amount Split up In Transaction Summary,data-driven,TC_41 Validate Merchant Is Able To View The Amount Split up In Transaction Summary,"*** Settings ***
Documentation    Validate TC_41 Validate Merchant Is Able To View The Amount Split up In Transaction Summary
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_41 Validate Merchant Is Able To View The Amount Split up In Transaction Summary
    [Documentation]    Validate TC_41 Validate Merchant Is Able To View The Amount Split up In Transaction Summary using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Amount Split Up In Transaction Summary    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Amount Split Up In Transaction Summary
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","**Test Case: TC_41 Validate Merchant Is Able To View The Amount Split up In Transaction Summary**

**Purpose:**  
The primary objective of this test case is to ensure that a merchant has the capability to view a detailed breakdown of the transaction amount within the transaction summary. This feature is crucial for merchants to gain visibility into the various components that make up the total transaction amount, such as item costs, taxes, fees, and any discounts applied. Verifying this functionality helps in maintaining transparency and accuracy in financial reporting and facilitates better financial management for the merchant's business operations. Additionally, it ensures compliance with any regulatory requirements related to transaction disclosures.

**Summary:**  
1. **Prerequisites:**
   - Merchant login credentials.
   - Access to"
Validate data-driven clientcentral_testcases for all transactions Testcases TC_42 Validate Merchant Is Able To View Settled Amount For Successful Transaction,data-driven,TC_42 Validate Merchant Is Able To View Settled Amount For Successful Transaction,"*** Settings ***
Documentation    Validate TC_42 Validate Merchant Is Able To View Settled Amount For Successful Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_42 Validate Merchant Is Able To View Settled Amount For Successful Transaction
    [Documentation]    Validate TC_42 Validate Merchant Is Able To View Settled Amount For Successful Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${1}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Settled Amount In Transaction Summary    ${103.00}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${1}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Settled Amount In Transaction Summary
    [Arguments]    ${103.00}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${103.00}    ${nan}    ${nan}

","Test Case 'TC_42 Validate Merchant Is Able To View Settled Amount For Successful Transaction'

**Purpose**: The objective of this test case is to ensure that a merchant can successfully view the settled amount for a transaction that has been completed successfully. This involves verifying the accuracy and visibility of transaction settlement details within the merchant's interface or dashboard. Settled amounts are critical for businesses to track revenue and reconcile their accounts. Therefore, it's essential that this functionality is working correctly and merchants can rely on it for their financial records.

**Key Aspects**:
1. **Transaction Success**: Confirm that the transaction has been marked as successful within the system.
2. **Settlement Processing**: Verify that the transaction has gone through the settlement process.
3"
Validate data-driven clientcentral_testcases for all transactions Testcases TC_43 Validate Merchant Is Unable To View Settled Amount For Declined Transaction,data-driven,TC_43 Validate Merchant Is Unable To View Settled Amount For Declined Transaction,"*** Settings ***
Documentation    Validate TC_43 Validate Merchant Is Unable To View Settled Amount For Declined Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_43 Validate Merchant Is Unable To View Settled Amount For Declined Transaction
    [Documentation]    Validate TC_43 Validate Merchant Is Unable To View Settled Amount For Declined Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Settled Amount In Transaction Summary    ${0.00}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Settled Amount In Transaction Summary
    [Arguments]    ${0.00}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${0.00}    ${nan}    ${nan}

","**Test Case: TC_43 Validate Merchant Is Unable To View Settled Amount For Declined Transaction**

**Purpose:**
The purpose of this test case is to ensure that an online payment system behaves correctly when handling declined transactions from the perspective of the merchant. Specifically, it validates that a merchant is unable to view any settled amount for transactions that have been declined. This is critical to ensure accurate financial reporting and user interface behavior within the merchant's dashboard or transaction management system.

**Key Points:**
1. **Transaction Decline Verification:** The system must correctly register the declined status of a transaction, ensuring that it is not mistakenly marked as successful or pending.
2. **Visibility of Settled Amount:** The test ensures that no settled amount is displayed"
Create data-driven clientcentral_testcases for all transactions Testcases TC_44 Validate Merchant Is Unable To View Settled Amount For Partial Transaction,data-driven,TC_44 Validate Merchant Is Unable To View Settled Amount For Partial Transaction,"*** Settings ***
Documentation    Validate TC_44 Validate Merchant Is Unable To View Settled Amount For Partial Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_44 Validate Merchant Is Unable To View Settled Amount For Partial Transaction
    [Documentation]    Validate TC_44 Validate Merchant Is Unable To View Settled Amount For Partial Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Settled Amount In Transaction Summary    ${1.03}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Settled Amount In Transaction Summary
    [Arguments]    ${1.03}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${1.03}    ${nan}    ${nan}

","The test case 'TC_44 Validate Merchant Is Unable To View Settled Amount For Partial Transaction' aims to verify that the system correctly restricts a merchant from viewing the settled amount for transactions that have been processed partially. The purpose of this test is to ensure that the platform behaves as expected when dealing with partial transactions, maintaining the integrity and confidentiality of settlement information until the entire transaction is fully processed. This helps prevent any discrepancies or potential misuse of partially settled transaction data, ensuring a secure and accurate financial process for merchants."
Create data-driven clientcentral_testcases for all transactions Testcases TC_45 Validate Merchant Is Able To View The Surcharge Amount InFormation (i),data-driven,TC_45 Validate Merchant Is Able To View The Surcharge Amount InFormation (i),"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To View The Surcharge Amount InFormation (i)
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To View The Surcharge Amount InFormation (i)
    [Documentation]    Validate TC_45 Validate Merchant Is Able To View The Surcharge Amount InFormation (i) using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Select Tab In Transaction Details Page    ${Invoice (Payment) Detail}    ${nan}    ${nan}    
    Validate Surcharge Amount Information Popup    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Select Tab In Transaction Details Page
    [Arguments]    ${Invoice (Payment) Detail}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoice (Payment) Detail}    ${nan}    ${nan}

Validate Surcharge Amount Information Popup
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_45 Validate Merchant Is Able To View The Surcharge Amount Information (i)' is designed to ensure that merchants can correctly view the surcharge amount information within a specified interface or system. The purpose of this test case is to validate that the feature displaying surcharge information (often found as an 'i' icon which stands for 'information') is functioning as expected. Specifically, it checks if:

1. The surcharge amount is displayed accurately.
2. The information icon ('i') is accessible and user-friendly.
3. The details shown when interacting with the information icon are clear and informative.
4. There are no technical errors or discrepancies in the displayed surcharge data.

Overall, the test case aims to confirm that merchants have access to and"
Build data-driven clientcentral_testcases for all transactions Testcases TC_46 Validate Merchant Is Able To View The Change In Due Amount After ProcessIng Partial Payment Using ACH,data-driven,TC_46 Validate Merchant Is Able To View The Change In Due Amount After ProcessIng Partial Payment Using ACH,"*** Settings ***
Documentation    Validate TC_46 Validate Merchant Is Able To View The Change In Due Amount After ProcessIng Partial Payment Using ACH
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_46 Validate Merchant Is Able To View The Change In Due Amount After ProcessIng Partial Payment Using ACH
    [Documentation]    Validate TC_46 Validate Merchant Is Able To View The Change In Due Amount After ProcessIng Partial Payment Using ACH using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Select Tab In Transaction Details Page    ${Invoice (Payment) Detail}    ${nan}    ${nan}    
    Validate Current Amount Due In Invoice Details    ${invoice_number}    ${97.99}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Select Tab In Transaction Details Page
    [Arguments]    ${Invoice (Payment) Detail}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoice (Payment) Detail}    ${nan}    ${nan}

Validate Current Amount Due In Invoice Details
    [Arguments]    ${invoice_number}    ${97.99}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${97.99}    ${nan}

","Sure! The test case 'TC_46 Validate Merchant Is Able To View The Change In Due Amount After Processing Partial Payment Using ACH' is designed to ensure that a merchant's payment system accurately reflects changes in the total due amount after a customer makes a partial payment via Automated Clearing House (ACH). 

### Purpose:
The primary purpose of this test case is to validate the following:
1. **Partial Payment Handling**: Confirm that when a partial payment is made through ACH, the payment system processes it correctly.
2. **Due Amount Update**: Ensure that the system accurately updates the remaining due amount to reflect the partial payment.
3. **Merchant Visibility**: Verify that the merchant is able to view the updated due amount in the payment system interface"
Build data-driven clientcentral_testcases for all transactions Testcases TC_47 Validate Merchant Is Able To View The Change In Due Amount After Full Payment Using Credit Card,data-driven,TC_47 Validate Merchant Is Able To View The Change In Due Amount After Full Payment Using Credit Card,"*** Settings ***
Documentation    Validate TC_47 Validate Merchant Is Able To View The Change In Due Amount After Full Payment Using Credit Card
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_47 Validate Merchant Is Able To View The Change In Due Amount After Full Payment Using Credit Card
    [Documentation]    Validate TC_47 Validate Merchant Is Able To View The Change In Due Amount After Full Payment Using Credit Card using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${1}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Select Tab In Transaction Details Page    ${Invoice (Payment) Detail}    ${nan}    ${nan}    
    Validate Current Amount Due In Invoice Details    ${invoice_number}    ${0.00}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${1}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Select Tab In Transaction Details Page
    [Arguments]    ${Invoice (Payment) Detail}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoice (Payment) Detail}    ${nan}    ${nan}

Validate Current Amount Due In Invoice Details
    [Arguments]    ${invoice_number}    ${0.00}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${0.00}    ${nan}

","The purpose of the test case ""TC_47 Validate Merchant Is Able To View The Change In Due Amount After Full Payment Using Credit Card"" is to ensure that when a merchant makes a full payment of their due amount using a credit card, the system accurately reflects this payment and updates the due amount accordingly. The primary objectives include:

1. Verifying that the full payment is processed correctly without any errors.
2. Confirming that the due amount displayed to the merchant is updated to zero or the appropriate new balance post-payment.
3. Ensuring the transaction details are recorded and accessible for the merchant's records.

This test is crucial for validating the reliability and accuracy of the payment system, maintaining user trust, and ensuring financial transactions are handled correctly."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_48 Validate Merchant Is Able To View The Invoice Details After Processing Multiple Invoices,data-driven,TC_48 Validate Merchant Is Able To View The Invoice Details After Processing Multiple Invoices,"*** Settings ***
Documentation    Validate TC_48 Validate Merchant Is Able To View The Invoice Details After Processing Multiple Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_48 Validate Merchant Is Able To View The Invoice Details After Processing Multiple Invoices
    [Documentation]    Validate TC_48 Validate Merchant Is Able To View The Invoice Details After Processing Multiple Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Create Multiple Invoices Through API    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Transaction For Multiple Invoices    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Select Tab In Transaction Details Page    ${Invoice (Payment) Detail}    ${nan}    ${nan}    
    Validate Invoices Displayed On Invoice Detail Page    ${invoices_list}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Transaction For Multiple Invoices
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Select Tab In Transaction Details Page
    [Arguments]    ${Invoice (Payment) Detail}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoice (Payment) Detail}    ${nan}    ${nan}

Validate Invoices Displayed On Invoice Detail Page
    [Arguments]    ${invoices_list}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoices_list}    ${nan}    ${nan}

","**Summary for Test Case 'TC_48: Validate Merchant Is Able To View The Invoice Details After Processing Multiple Invoices'**

**Purpose:**
The primary objective of this test case is to ensure that a merchant can access and view the comprehensive details of invoices after processing multiple invoices within the system. This involves verifying that the system accurately maintains and retrieves the invoice data post-processing, enabling the merchant to review transaction information, payment status, and other critical details seamlessly. The successful completion of this test case will confirm the reliability and consistency of the invoice management component, which is crucial for financial tracking, customer communication, and overall merchant operations."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_49 Validate Merchant Is Able To View Payment Application Option When Processed Through Specific Invoice,data-driven,TC_49 Validate Merchant Is Able To View Payment Application Option When Processed Through Specific Invoice,"*** Settings ***
Documentation    Validate TC_49 Validate Merchant Is Able To View Payment Application Option When Processed Through Specific Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_49 Validate Merchant Is Able To View Payment Application Option When Processed Through Specific Invoice
    [Documentation]    Validate TC_49 Validate Merchant Is Able To View Payment Application Option When Processed Through Specific Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Payment Application Option    ${Specific Invoice}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Payment Application Option
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

","The test case 'TC_49 Validate Merchant Is Able To View Payment Application Option When Processed Through Specific Invoice' is designed to ensure that merchants can access and view the payment application option when completing a transaction using a specific invoice. The primary goal is to verify that the payment processing system correctly displays the option for applying payments, ensuring the correct workflow and user interface functionality for the merchant. This involves checking that:

1. The specific invoice is correctly recognized by the system.
2. The payment application option becomes visible to the merchant.
3. The option is functional and allows the merchant to proceed with the payment application.

By validating these points, the test case ensures a smooth and error-free user experience for merchants handling payments through invoices."
Generate data-driven clientcentral_testcases for all transactions Testcases TC_50 Validate Merchant Is Able To View Payment Application Option When Processed Through Lump Sum,data-driven,TC_50 Validate Merchant Is Able To View Payment Application Option When Processed Through Lump Sum,"*** Settings ***
Documentation    Validate TC_50 Validate Merchant Is Able To View Payment Application Option When Processed Through Lump Sum
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_50 Validate Merchant Is Able To View Payment Application Option When Processed Through Lump Sum
    [Documentation]    Validate TC_50 Validate Merchant Is Able To View Payment Application Option When Processed Through Lump Sum using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Payment Application Option    ${Apply To Oldest}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Payment Application Option
    [Arguments]    ${Apply To Oldest}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Apply To Oldest}    ${nan}    ${nan}

","Certainly! The test case ‘TC_50 Validate Merchant Is Able To View Payment Application Option When Processed Through Lump Sum’ is focused on ensuring the functionality of a specific feature within a merchant payment system.

**Purpose:**
The primary aim of this test case is to verify that merchants who process payments via a lump sum method can access the 'Payment Application' option within the user interface. This functionality is crucial as it allows merchants to apply payments to outstanding balances effectively and ensures that the system appropriately displays the necessary options when dealing with bulk payment processing.

The test checks for the following:
1. **Access Verification:** Ensures merchants can see and access the 'Payment Application' option after a lump sum payment is processed.
2. **User Interface Validation"
Build data-driven clientcentral_testcases for all transactions Testcases TC_51 Validate Merchant Is Able To View Invoice Payment Details Tab,data-driven,TC_51 Validate Merchant Is Able To View Invoice Payment Details Tab,"*** Settings ***
Documentation    Validate TC_51 Validate Merchant Is Able To View Invoice Payment Details Tab
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_51 Validate Merchant Is Able To View Invoice Payment Details Tab
    [Documentation]    Validate TC_51 Validate Merchant Is Able To View Invoice Payment Details Tab using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Select Tab In Transaction Details Page    ${Invoice (Payment) Detail}    ${nan}    ${nan}    
    Validate Invoice Payment Details Tab Is Displayed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Select Tab In Transaction Details Page
    [Arguments]    ${Invoice (Payment) Detail}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoice (Payment) Detail}    ${nan}    ${nan}

Validate Invoice Payment Details Tab Is Displayed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The purpose of the test case 'TC_51 Validate Merchant Is Able To View Invoice Payment Details Tab' is to ensure that merchants who are using the system can successfully access and view the 'Invoice Payment Details' tab within the application. This validation is critical because it confirms that merchants have the necessary access to important financial information related to the invoices they have issued or are processing.

Specifically, the test case aims to:
1. Verify that the 'Invoice Payment Details' tab is present and visible in the user interface.
2. Check that the tab contains accurate and relevant information pertaining to invoice payments.
3. Ensure that the user (merchant) can navigate to and interact with the tab without any technical issues or errors.
4. Confirm that all relevant"
Generate data-driven clientcentral_testcases for all transactions Testcases TC_52 Validate Merchant Is Able To Navigate To Invoice Details Page From Invoice Payment Details Tab,data-driven,TC_52 Validate Merchant Is Able To Navigate To Invoice Details Page From Invoice Payment Details Tab,"*** Settings ***
Documentation    Validate TC_52 Validate Merchant Is Able To Navigate To Invoice Details Page From Invoice Payment Details Tab
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_52 Validate Merchant Is Able To Navigate To Invoice Details Page From Invoice Payment Details Tab
    [Documentation]    Validate TC_52 Validate Merchant Is Able To Navigate To Invoice Details Page From Invoice Payment Details Tab using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Select Tab In Transaction Details Page    ${Invoice (Payment) Detail}    ${nan}    ${nan}    
    Navigate To Invoice Page    ${invoice_number}    ${nan}    ${nan}    
    Validate Invoice Details Page Is Displayed    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Select Tab In Transaction Details Page
    [Arguments]    ${Invoice (Payment) Detail}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoice (Payment) Detail}    ${nan}    ${nan}

Navigate To Invoice Page
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Validate Invoice Details Page Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","The test case 'TC_52 Validate Merchant Is Able To Navigate To Invoice Details Page From Invoice Payment Details Tab' aims to ensure that the navigation functionality within a merchant's invoicing system is functioning properly. Specifically, the test verifies that when a merchant is on the Invoice Payment Details tab, they can successfully navigate to the Invoice Details page.

### Purpose:
1. **Accessibility Check:** Ensure that merchants can access detailed invoice information easily from the payment details view.
2. **Seamless Navigation:** Validate that the transition between different sections (Invoice Payment Details to Invoice Details page) is smooth and intuitive.
3. **Consistency:** Confirm that the user interface behaves consistently in a way that meets user expectations and business requirements.
4. **Reliability:**"
Build data-driven clientcentral_testcases for all transactions Testcases TC_53 Validate Merchant Is Able To View Approved Transactions,data-driven,TC_53 Validate Merchant Is Able To View Approved Transactions,"*** Settings ***
Documentation    Validate TC_53 Validate Merchant Is Able To View Approved Transactions
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_53 Validate Merchant Is Able To View Approved Transactions
    [Documentation]    Validate TC_53 Validate Merchant Is Able To View Approved Transactions using the following steps
Select Module    ${All Transactions}    ${}    ${}    
    Select Date Range    ${Today}    ${}    ${}    
    Select Transaction Type    ${Approved}    ${}    ${}    
    Validate Approved Transactions    ${nan}    ${}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${All Transactions}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${}    ${}

Select Date Range
    [Arguments]    ${Today}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Today}    ${}    ${}

Select Transaction Type
    [Arguments]    ${Approved}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Approved}    ${}    ${}

Validate Approved Transactions
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

","**Test Case: TC_53 Validate Merchant Is Able To View Approved Transactions**

**Purpose:**
The primary objective of this test case is to ensure that a merchant, upon logging into their account on the associated platform (such as an e-commerce or payment processing system), can successfully view a list of transactions that have been approved. This function is critical for merchants as it allows them to track revenue, verify successful sales, and manage their financial records effectively.

**Key Steps:**
1. **Login:** The merchant logs into their account using valid credentials.
2. **Navigation:** The merchant navigates to the 'Transactions' or equivalent section within the platform's dashboard.
3. **View Transactions:** The merchant should be able to see a list of"
Create data-driven clientcentral_testcases for all transactions Testcases TC_54 Validate Merchant Is Able To View Not Approved Transactions,data-driven,TC_54 Validate Merchant Is Able To View Not Approved Transactions,"*** Settings ***
Documentation    Validate TC_54 Validate Merchant Is Able To View Not Approved Transactions
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_54 Validate Merchant Is Able To View Not Approved Transactions
    [Documentation]    Validate TC_54 Validate Merchant Is Able To View Not Approved Transactions using the following steps
Select Module    ${All Transactions}    ${}    ${}    
    Select Date Range    ${Today}    ${}    ${}    
    Select Transaction Type    ${Not Approved}    ${}    ${}    
    Validate Not Approved Transactions    ${nan}    ${}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${All Transactions}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${}    ${}

Select Date Range
    [Arguments]    ${Today}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Today}    ${}    ${}

Select Transaction Type
    [Arguments]    ${Not Approved}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Not Approved}    ${}    ${}

Validate Not Approved Transactions
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

","The test case 'TC_54 Validate Merchant Is Able To View Not Approved Transactions' is designed to ensure that a merchant can access and view transactions that have not been approved. The primary purpose of this test case is to verify that the system correctly displays all transactions in the merchant interface, specifically focusing on those that are pending or have been declined. 

This involves checking that the user interface (UI) has appropriate filters or sections where such transactions are listed and that the merchant can easily distinguish between approved and not approved transactions. Additionally, this test case might examine the accuracy of the displayed transaction details, including the reason for non-approval, the date, the customer's information, and any other relevant data.

Key objectives include:

1. **Accessibility:** Ens"
Create data-driven clientcentral_testcases for all transactions Testcases TC_55 Validate Merchant Is Able To View The Refunded Amount After Void Transaction,data-driven,TC_55 Validate Merchant Is Able To View The Refunded Amount After Void Transaction,"*** Settings ***
Documentation    Validate TC_55 Validate Merchant Is Able To View The Refunded Amount After Void Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_55 Validate Merchant Is Able To View The Refunded Amount After Void Transaction
    [Documentation]    Validate TC_55 Validate Merchant Is Able To View The Refunded Amount After Void Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Get Amount    ${response}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Validate Refunded Amount In Transaction Summery    ${amount}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Get Amount
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Refunded Amount In Transaction Summery
    [Arguments]    ${amount}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${amount}    ${nan}    ${nan}

","**Test Case Summary: TC_55 Validate Merchant Is Able To View The Refunded Amount After Void Transaction**

**Purpose:**
The primary aim of this test case is to ensure that the merchant's system accurately displays the refunded amount after a void transaction has been processed. This validation is crucial to confirm that the void action, which typically cancels a transaction before it has been fully processed or settled, results in the appropriate refund being visible to the merchant. In turn, it offers transparency and accuracy in transaction records, enabling merchants to maintain precise financial records and customer transaction histories.

**Steps involved:**
1. **Initiate Transaction:** The merchant initiates a standard transaction that will later be voided.
2. **Void Transaction:** The transaction is"
Generate data-driven clientcentral_testcases for all transactions Testcases TC_56 Validate Merchant Is Unable To Void Payment Second Time For The Same Transaction,data-driven,TC_56 Validate Merchant Is Unable To Void Payment Second Time For The Same Transaction,"*** Settings ***
Documentation    Validate TC_56 Validate Merchant Is Unable To Void Payment Second Time For The Same Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_56 Validate Merchant Is Unable To Void Payment Second Time For The Same Transaction
    [Documentation]    Validate TC_56 Validate Merchant Is Unable To Void Payment Second Time For The Same Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Get Amount    ${response}    ${nan}    ${nan}    
    Select Module    ${All Transactions}    ${nan}    ${nan}    
    Navigate To Transaction Details Page    ${gateway_id}    ${nan}    ${nan}    
    Select Void Payment    ${nan}    ${nan}    ${nan}    
    Select Confirm In Void Transaction Popup    ${nan}    ${nan}    ${nan}    
    Validate Success Message For Void Payment    ${Payment Voided Successfully}    ${nan}    ${nan}    
    Select Void Payment    ${nan}    ${nan}    ${nan}    
    Select Confirm In Void Transaction Popup    ${nan}    ${nan}    ${nan}    
    Validate Error Message Is Displayed    ${Error voiding payment}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Get Amount
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Select Module
    [Arguments]    ${All Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All Transactions}    ${nan}    ${nan}

Navigate To Transaction Details Page
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Select Void Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Confirm In Void Transaction Popup
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Success Message For Void Payment
    [Arguments]    ${Payment Voided Successfully}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Payment Voided Successfully}    ${nan}    ${nan}

Select Void Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Confirm In Void Transaction Popup
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Error Message Is Displayed
    [Arguments]    ${Error voiding payment}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Error voiding payment}    ${nan}    ${nan}

","The test case ""TC_56 Validate Merchant Is Unable To Void Payment Second Time For The Same Transaction"" is designed to ensure that a merchant cannot void a payment multiple times for the same transaction. 

### Purpose:
1. **Validation of Single Void Action**: It verifies that the system correctly allows a payment to be voided only once, maintaining the integrity of the transaction records.
2. **Prevention of Repeated Voids**: It aims to prevent any potential misuse or errors that could arise if a transaction could be voided multiple times.
3. **System Integrity**: Ensures that the internal mechanisms properly log and monitor void actions to protect against inconsistencies.
4. **User Experience**: Confirms that the merchant receives appropriate"
Validate data-driven clientcentral_testcases for autopay Testcases TC_01 Validate Merchant Is Able To View All Active AutoPay Details,data-driven,TC_01 Validate Merchant Is Able To View All Active AutoPay Details,"*** Settings ***
Documentation    Validate TC_01 Validate Merchant Is Able To View All Active AutoPay Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Merchant Is Able To View All Active AutoPay Details
    [Documentation]    Validate TC_01 Validate Merchant Is Able To View All Active AutoPay Details using the following steps
Select Merchant    ${Omnicorp}    ${nan}    ${}    
    Select Module    ${Customers}    ${nan}    ${}    
    Select Module    ${AutoPay}    ${nan}    ${}    
    Get Total Number Of Transactions In AutoPay    ${nan}    ${nan}    ${}    
    Select Status    ${Active}    ${nan}    ${}    
    Validate Active Payment Details After Displayed    ${number_of transactions}    ${Yes}    ${}

*** Keywords ***
Select Merchant
    [Arguments]    ${Omnicorp}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Omnicorp}    ${nan}    ${}

Select Module
    [Arguments]    ${Customers}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customers}    ${nan}    ${}

Select Module
    [Arguments]    ${AutoPay}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${AutoPay}    ${nan}    ${}

Get Total Number Of Transactions In AutoPay
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Select Status
    [Arguments]    ${Active}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Active}    ${nan}    ${}

Validate Active Payment Details After Displayed
    [Arguments]    ${number_of transactions}    ${Yes}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${number_of transactions}    ${Yes}    ${}

","The test case 'TC_01 Validate Merchant Is Able To View All Active AutoPay Details' is designed to ensure that merchants can successfully access and review details of all their currently active AutoPay arrangements. The purpose of this test case is to verify that the functionality for displaying active AutoPay details is working as intended. This includes checking that the system correctly retrieves and displays information such as payment schedules, amounts, and statuses, without any errors or missing data. By confirming this capability, the test case helps ensure merchants have the necessary visibility to manage their automated payment setups effectively, thereby aiding in better financial control and planning."
Generate data-driven clientcentral_testcases for autopay Testcases TC_02 Validate Merchant Is Able To View All Inactive AutoPay Details,data-driven,TC_02 Validate Merchant Is Able To View All Inactive AutoPay Details,"*** Settings ***
Documentation    Validate TC_02 Validate Merchant Is Able To View All Inactive AutoPay Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Merchant Is Able To View All Inactive AutoPay Details
    [Documentation]    Validate TC_02 Validate Merchant Is Able To View All Inactive AutoPay Details using the following steps
Select Merchant    ${Omnicorp}    ${nan}    ${}    
    Select Module    ${Customers}    ${nan}    ${}    
    Select Module    ${AutoPay}    ${nan}    ${}    
    Get Total Number Of Transactions In AutoPay    ${nan}    ${nan}    ${}    
    Select Status    ${Inactive}    ${nan}    ${}    
    Validate Inactive Payment Details Are Displayed    ${number_of transactions}    ${No}    ${}

*** Keywords ***
Select Merchant
    [Arguments]    ${Omnicorp}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Omnicorp}    ${nan}    ${}

Select Module
    [Arguments]    ${Customers}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customers}    ${nan}    ${}

Select Module
    [Arguments]    ${AutoPay}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${AutoPay}    ${nan}    ${}

Get Total Number Of Transactions In AutoPay
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Select Status
    [Arguments]    ${Inactive}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Inactive}    ${nan}    ${}

Validate Inactive Payment Details Are Displayed
    [Arguments]    ${number_of transactions}    ${No}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${number_of transactions}    ${No}    ${}

","The test case 'TC_02 Validate Merchant Is Able To View All Inactive AutoPay Details' aims to ensure that a merchant has the functionality to view all the details of customers or accounts that have their AutoPay status set to inactive. 

Purpose:
1. **Verification of Access:** Confirm that the merchant's user interface provides access to a dedicated section where inactive AutoPay details are stored and can be retrieved.

2. **Detail Accuracy:** Ensure that all the necessary details such as customer/account information, reasons for inactivity, date of deactivation, and previous payment histories are correctly displayed and accessible.

3. **User Experience:** Assess that the interface is intuitive and user-friendly, allowing the merchant to easily navigate and locate the inactive AutoPay details."
Generate data-driven clientcentral_testcases for autopay Testcases TC_03 Validate Merchant Is Able To Filter Auto Pay Details,data-driven,TC_03 Validate Merchant Is Able To Filter Auto Pay Details,"*** Settings ***
Documentation    Validate TC_03 Validate Merchant Is Able To Filter Auto Pay Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate Merchant Is Able To Filter Auto Pay Details
    [Documentation]    Validate TC_03 Validate Merchant Is Able To Filter Auto Pay Details using the following steps
Send Request To Create Customer    ${omnicorp}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${omnicorp}    ${account_number}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Select Merchant    ${Omnicorp}    ${nan}    ${nan}    
    Select Module    ${Customers}    ${nan}    ${nan}    
    Filter With Customer Number    ${account_number}    ${nan}    ${nan}    
    Navigate To Details Page From Invoices    ${account_number}    ${nan}    ${nan}    
    Save Credit Card Payment    ${4111111111111111}    ${Credit Card}    ${nan}    
    Create AutoPay    ${customer_details}    ${Credit Card}    ${nan}    
    Select Module    ${AutoPay}    ${nan}    ${nan}    
    Filter Customer In AutoPay    ${account_number}    ${nan}    ${nan}    
    Validate AutoPay Details Are Displayed    ${account_number}    ${All Invoices Due}    ${Each Day}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${omnicorp}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${omnicorp}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${omnicorp}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${omnicorp}    ${account_number}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Merchant
    [Arguments]    ${Omnicorp}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Omnicorp}    ${nan}    ${nan}

Select Module
    [Arguments]    ${Customers}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customers}    ${nan}    ${nan}

Filter With Customer Number
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Navigate To Details Page From Invoices
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Save Credit Card Payment
    [Arguments]    ${4111111111111111}    ${Credit Card}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${4111111111111111}    ${Credit Card}    ${nan}

Create AutoPay
    [Arguments]    ${customer_details}    ${Credit Card}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${Credit Card}    ${nan}

Select Module
    [Arguments]    ${AutoPay}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${AutoPay}    ${nan}    ${nan}

Filter Customer In AutoPay
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Validate AutoPay Details Are Displayed
    [Arguments]    ${account_number}    ${All Invoices Due}    ${Each Day}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${All Invoices Due}    ${Each Day}

","**Test Case Summary: TC_03 Validate Merchant Is Able To Filter Auto Pay Details**

**Purpose:**
The primary objective of this test case is to verify that merchants can effectively filter auto pay details within their system interface. The functionality ensures that merchants can sort or narrow down auto pay entries based on specific criteria or parameters. This might include filters such as transaction dates, payment amounts, customer identities, or payment statuses.

By validating this functionality, the test case aims to:
- Ensure that the filtering options provided are working correctly and yield accurate results.
- Confirm that the user interface is responsive and user-friendly when filtering auto pay details.
- Check that performance remains optimal and does not degrade with the use of various filter combinations.
- Validate that the filtered"
Build data-driven clientcentral_testcases for autopay Testcases TC_04 Validate Merchant Is Able To Cancel AutoPay,data-driven,TC_04 Validate Merchant Is Able To Cancel AutoPay,"*** Settings ***
Documentation    Validate TC_04 Validate Merchant Is Able To Cancel AutoPay
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate Merchant Is Able To Cancel AutoPay
    [Documentation]    Validate TC_04 Validate Merchant Is Able To Cancel AutoPay using the following steps
Send Request To Create Customer    ${omnicorp}    ${3}    ${}    
    Send Request To Create Invoice For Customer    ${omnicorp}    ${account_number}    ${}    
    Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Select Merchant    ${Omnicorp}    ${nan}    ${}    
    Select Module    ${Customers}    ${nan}    ${}    
    Filter With Customer Number    ${account_number}    ${nan}    ${}    
    Navigate To Details Page From Invoices    ${account_number}    ${nan}    ${}    
    Save Credit Card Payment    ${4217651111111119}    ${Debit Card}    ${}    
    Create AutoPay    ${customer_details}    ${Debit Card}    ${}    
    Select Module    ${AutoPay}    ${nan}    ${}    
    Filter Customer In AutoPay    ${account_number}    ${nan}    ${}    
    Cancel AutoPay    ${nan}    ${nan}    ${}    
    Validate AutoPay Is Cancelled    ${account_number}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${omnicorp}    ${3}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${omnicorp}    ${3}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${omnicorp}    ${account_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${omnicorp}    ${account_number}    ${}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Select Merchant
    [Arguments]    ${Omnicorp}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Omnicorp}    ${nan}    ${}

Select Module
    [Arguments]    ${Customers}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customers}    ${nan}    ${}

Filter With Customer Number
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Navigate To Details Page From Invoices
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Save Credit Card Payment
    [Arguments]    ${4217651111111119}    ${Debit Card}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${4217651111111119}    ${Debit Card}    ${}

Create AutoPay
    [Arguments]    ${customer_details}    ${Debit Card}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${Debit Card}    ${}

Select Module
    [Arguments]    ${AutoPay}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${AutoPay}    ${nan}    ${}

Filter Customer In AutoPay
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Cancel AutoPay
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate AutoPay Is Cancelled
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

","The test case 'TC_04 Validate Merchant Is Able To Cancel AutoPay' aims to verify that merchants have the capability to cancel an existing AutoPay arrangement within the system. The key objectives include ensuring that the cancellation process is straightforward, the system correctly processes the cancellation request, and appropriate confirmations or notifications are provided to the merchant. This test ensures the reliability and user-friendliness of the AutoPay management features, thereby maintaining trust and functionality for merchants who may need to cancel their automatic payment setups."
Build data-driven clientcentral_testcases for autopay Testcases TC_05 Validate Merchant Is Able To Navigate To Customer Details Page From AutoPay,data-driven,TC_05 Validate Merchant Is Able To Navigate To Customer Details Page From AutoPay,"*** Settings ***
Documentation    Validate TC_05 Validate Merchant Is Able To Navigate To Customer Details Page From AutoPay
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Merchant Is Able To Navigate To Customer Details Page From AutoPay
    [Documentation]    Validate TC_05 Validate Merchant Is Able To Navigate To Customer Details Page From AutoPay using the following steps
Send Request To Create Customer    ${omnicorp}    ${3}    ${}    
    Send Request To Create Invoice For Customer    ${omnicorp}    ${account_number}    ${}    
    Generate Random Customer Details    ${nan}    ${nan}    ${}    
    Select Merchant    ${Omnicorp}    ${nan}    ${}    
    Select Module    ${Customers}    ${nan}    ${}    
    Filter With Customer Number    ${account_number}    ${nan}    ${}    
    Navigate To Details Page From Invoices    ${account_number}    ${nan}    ${}    
    Save ACH Card Payment    ${ACH_ECHECK_DETAILS}    ${ACH / eCheck}    ${}    
    Create AutoPay    ${customer_details}    ${ACH / eCheck}    ${}    
    Select Module    ${AutoPay}    ${nan}    ${}    
    Filter Customer In AutoPay    ${account_number}    ${nan}    ${}    
    Navigate To Customer Details Page From AutoPay    ${account_number}    ${nan}    ${}    
    Validate Customer Details Page Is Displayed    ${account_number}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${omnicorp}    ${3}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${omnicorp}    ${3}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${omnicorp}    ${account_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${omnicorp}    ${account_number}    ${}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Select Merchant
    [Arguments]    ${Omnicorp}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Omnicorp}    ${nan}    ${}

Select Module
    [Arguments]    ${Customers}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customers}    ${nan}    ${}

Filter With Customer Number
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Navigate To Details Page From Invoices
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Save ACH Card Payment
    [Arguments]    ${ACH_ECHECK_DETAILS}    ${ACH / eCheck}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH_ECHECK_DETAILS}    ${ACH / eCheck}    ${}

Create AutoPay
    [Arguments]    ${customer_details}    ${ACH / eCheck}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${ACH / eCheck}    ${}

Select Module
    [Arguments]    ${AutoPay}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${AutoPay}    ${nan}    ${}

Filter Customer In AutoPay
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Navigate To Customer Details Page From AutoPay
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Validate Customer Details Page Is Displayed
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

","The test case 'TC_05 Validate Merchant Is Able To Navigate To Customer Details Page From AutoPay' aims to ensure that a merchant user can successfully access the Customer Details page from the AutoPay feature within the application. The primary purpose of this test is to verify the navigational workflow, confirming that links or buttons directing to the Customer Details page are functioning correctly. This includes checking whether the user interface elements guiding the user to the targeted page are present and operational, and that the transition between the AutoPay module and the Customer Details page is smooth and error-free. By validating this pathway, the test ensures that merchants can effectively manage customer information directly from the AutoPay context, which is crucial for streamlined operations and efficient customer management."
Generate data-driven clientcentral_testcases for customers Testcases TC_01 Validate Merchant Is Able To Filter With Customer Number,data-driven,TC_01 Validate Merchant Is Able To Filter With Customer Number,"*** Settings ***
Documentation    Validate TC_01 Validate Merchant Is Able To Filter With Customer Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Merchant Is Able To Filter With Customer Number
    [Documentation]    Validate TC_01 Validate Merchant Is Able To Filter With Customer Number using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${customer_number}    ${}    
    Select Module    ${Customers}    ${nan}    ${}    
    Filter With Customer Number    ${customer_number}    ${nan}    ${}    
    Validate Filtered Customer Number Is Displayed    ${customer_number}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${customer_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${customer_number}    ${}

Select Module
    [Arguments]    ${Customers}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customers}    ${nan}    ${}

Filter With Customer Number
    [Arguments]    ${customer_number}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${customer_number}    ${nan}    ${}

Validate Filtered Customer Number Is Displayed
    [Arguments]    ${customer_number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${customer_number}    ${nan}    ${}

","The test case 'TC_01 Validate Merchant Is Able To Filter With Customer Number' is designed to verify the functionality that allows a merchant to filter transaction records or other related data using a specific customer number. 

Purpose:
1. **Ensure Accessibility:** Validate that the filtering option is easily accessible to the merchant.
2. **Correct Functionality:** Confirm that upon entering a customer number, the system accurately filters and displays the corresponding records.
3. **Data Integrity:** Check that the filtered results align with the customer number provided, ensuring no discrepancies in the data.
4. **Performance:** Assess the filtering process for efficiency, ensuring it performs within an acceptable time frame.
5. **User Experience:** Ensure that the filtering process is intuitive and user-friendly for"
Create data-driven clientcentral_testcases for customers Testcases TC_02 Validate Merchant Is Able To View Customer Invoice Count And Amount,data-driven,TC_02 Validate Merchant Is Able To View Customer Invoice Count And Amount,"*** Settings ***
Documentation    Validate TC_02 Validate Merchant Is Able To View Customer Invoice Count And Amount
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Merchant Is Able To View Customer Invoice Count And Amount
    [Documentation]    Validate TC_02 Validate Merchant Is Able To View Customer Invoice Count And Amount using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${customer_number}    ${}    
    Select Module    ${Customers}    ${nan}    ${}    
    Filter With Customer Number    ${customer_number}    ${nan}    ${}    
    Validate Invoice Count Is Displayed In Customers Page    ${1}    ${nan}    ${}    
    Validate Invoice Amount Is Displayed In Customers Page    ${$100.00}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${customer_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${customer_number}    ${}

Select Module
    [Arguments]    ${Customers}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customers}    ${nan}    ${}

Filter With Customer Number
    [Arguments]    ${customer_number}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${customer_number}    ${nan}    ${}

Validate Invoice Count Is Displayed In Customers Page
    [Arguments]    ${1}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${1}    ${nan}    ${}

Validate Invoice Amount Is Displayed In Customers Page
    [Arguments]    ${$100.00}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${$100.00}    ${nan}    ${}

","The test case 'TC_02 Validate Merchant Is Able To View Customer Invoice Count And Amount' is designed to ensure that a merchant can access and review the details related to customer invoices within a given system. 

### Purpose:
1. **Verification of Access**: Confirm that the merchant can log into the system and navigate to the section where customer invoices are displayed.
2. **Invoice Count Visibility**: Check that the total number of customer invoices is correctly displayed to the merchant.
3. **Invoice Amount Accuracy**: Ensure that the aggregate amount of all customer invoices is accurately presented.
4. **UI/UX Validation**: Validate that the user interface presents this information in a clear and accessible manner, facilitating ease of use for the merchant.
5"
Build data-driven clientcentral_testcases for customers Testcases TC_03 Validate Merchant Is Able To View Filtered Invoice,data-driven,TC_03 Validate Merchant Is Able To View Filtered Invoice,"*** Settings ***
Documentation    Validate TC_03 Validate Merchant Is Able To View Filtered Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate Merchant Is Able To View Filtered Invoice
    [Documentation]    Validate TC_03 Validate Merchant Is Able To View Filtered Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Filter With Invoice Number    ${invoice_number}    ${nan}    ${nan}    
    Validate Filtered Invoice Is Displayed In Invoice Tab    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Filter With Invoice Number
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Validate Filtered Invoice Is Displayed In Invoice Tab
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","The test case 'TC_03 Validate Merchant Is Able To View Filtered Invoice' is designed to ensure that merchants using the invoicing system can successfully filter and view invoices based on specified criteria or filters. The purpose of this test is to verify that the filtering functionality works correctly and that the system displays the relevant invoices matching the applied filters. This could include parameters such as date range, invoice status, customer name, payment status, or other relevant criteria. Successful validation confirms that the invoicing system’s filtering feature is functioning as intended, enhancing the user experience by providing merchants with accurate and easily accessible information based on their filtering needs."
Generate data-driven clientcentral_testcases for customers Testcases TC_04 Validate Merchant Is Able To Navigate To PayNow By Clicking On View PayNow Button,data-driven,TC_04 Validate Merchant Is Able To Navigate To PayNow By Clicking On View PayNow Button,"*** Settings ***
Documentation    Validate TC_04 Validate Merchant Is Able To Navigate To PayNow By Clicking On View PayNow Button
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate Merchant Is Able To Navigate To PayNow By Clicking On View PayNow Button
    [Documentation]    Validate TC_04 Validate Merchant Is Able To Navigate To PayNow By Clicking On View PayNow Button using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select View PayNow    ${nan}    ${nan}    ${nan}    
    Validate PayNow Application Is Displayed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select View PayNow
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate PayNow Application Is Displayed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The purpose of the test case 'TC_04 Validate Merchant Is Able To Navigate To PayNow By Clicking On View PayNow Button' is to ensure that the navigation functionality from the merchant's interface to the PayNow payment interface works correctly. Specifically, this test case verifies that when a merchant clicks on the 'View PayNow' button, they are successfully directed to the PayNow page without errors or interruptions. It aims to confirm the usability and functional reliability of this navigation feature, which is critical for merchants needing to access payment options seamlessly."
Create data-driven clientcentral_testcases for customers Testcases TC_05 Validate Merchant Is Able To Disable Access To PayNow,data-driven,TC_05 Validate Merchant Is Able To Disable Access To PayNow,"*** Settings ***
Documentation    Validate TC_05 Validate Merchant Is Able To Disable Access To PayNow
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Merchant Is Able To Disable Access To PayNow
    [Documentation]    Validate TC_05 Validate Merchant Is Able To Disable Access To PayNow using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Disable Access To PayNow    ${nan}    ${nan}    ${nan}    
    Select View PayNow    ${nan}    ${nan}    ${nan}    
    Enter Account Number And Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Validate Error Message Is Displayed    ${The specified session cannot access the specified customer.}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Disable Access To PayNow
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select View PayNow
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Enter Account Number And Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Error Message Is Displayed
    [Arguments]    ${The specified session cannot access the specified customer.}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${The specified session cannot access the specified customer.}    ${nan}    ${nan}

","The test case 'TC_05 Validate Merchant Is Able To Disable Access To PayNow' aims to verify that a merchant has the capability to deactivate the PayNow feature in their system. The primary objectives of this test case include:

1. Confirming that the merchant can access the settings or control panel where PayNow functionality can be managed.
2. Ensuring that the merchant can successfully turn off or disable the PayNow option.
3. Verifying that, once disabled, the PayNow payment method is no longer available to customers during the checkout process.
4. Checking that any related notifications or user interface changes are correctly displayed to indicate that PayNow has been disabled.

The purpose is to ensure that merchants have control over the payment methods they offer and"
Create data-driven clientcentral_testcases for customers Testcases TC_06 Validate Merchant Is Able To View Invoice Count and Amount In Customer Dashboard,data-driven,TC_06 Validate Merchant Is Able To View Invoice Count and Amount In Customer Dashboard,"*** Settings ***
Documentation    Validate TC_06 Validate Merchant Is Able To View Invoice Count and Amount In Customer Dashboard
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_06 Validate Merchant Is Able To View Invoice Count and Amount In Customer Dashboard
    [Documentation]    Validate TC_06 Validate Merchant Is Able To View Invoice Count and Amount In Customer Dashboard using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Validate Invoice Count And Amount Due    ${1}    ${$100.00}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Validate Invoice Count And Amount Due
    [Arguments]    ${1}    ${$100.00}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${1}    ${$100.00}    ${nan}

","The test case 'TC_06 Validate Merchant Is Able To View Invoice Count and Amount In Customer Dashboard' is designed to ensure that a merchant can accurately view relevant invoice information in the Customer Dashboard. Its primary objective is to verify that when a merchant accesses the dashboard, they can see the total number of invoices and the corresponding amounts associated with their customers. This test case checks that the data displayed is correct and up to date, ensuring that the information regarding invoice count and monetary value is readily accessible and clear for the merchant to review. By validating this functionality, the test helps maintain the accuracy and reliability of the financial data presented in the customer interface, which is crucial for effective merchant operations and financial tracking."
Generate data-driven clientcentral_testcases for customers Testcases TC_07 Validate Merchant Is Able to Collapse And Expand Recent Invoice Payments,data-driven,TC_07 Validate Merchant Is Able to Collapse And Expand Recent Invoice Payments,"*** Settings ***
Documentation    Validate TC_07 Validate Merchant Is Able to Collapse And Expand Recent Invoice Payments
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Merchant Is Able to Collapse And Expand Recent Invoice Payments
    [Documentation]    Validate TC_07 Validate Merchant Is Able to Collapse And Expand Recent Invoice Payments using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Collapse Recent Invoice Payments    ${nan}    ${nan}    ${nan}    
    Validate Recent Invoice Payments Are Collapsed    ${nan}    ${nan}    ${nan}    
    Expand Recent Invoice Payments    ${nan}    ${nan}    ${nan}    
    Validate Recent Invoice Payments Are Expanded    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Collapse Recent Invoice Payments
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Recent Invoice Payments Are Collapsed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Expand Recent Invoice Payments
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Recent Invoice Payments Are Expanded
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_07 Validate Merchant Is Able to Collapse And Expand Recent Invoice Payments' aims to ensure that the functionality for collapsing and expanding the recent invoice payments section on a merchant's interface works as intended. The purpose is to verify that merchants can interact with this section efficiently, toggling between a collapsed view, which hides the detailed information, and an expanded view, which displays the details of recent invoice payments. This helps merchants manage their view and access invoice payment details as needed, thereby enhancing usability and improving the user interface experience. 

Specific objectives of this test case include:
1. Checking the default state (collapsed or expanded) when the page is loaded.
2. Verifying that the collapse function hides the relevant payment details.
3."
Validate data-driven clientcentral_testcases for customers Testcases TC_08 Valiidate Merchant Is Able To View Invoices Count And Status For Sucessful Transaction,data-driven,TC_08 Valiidate Merchant Is Able To View Invoices Count And Status For Sucessful Transaction,"*** Settings ***
Documentation    Validate TC_08 Valiidate Merchant Is Able To View Invoices Count And Status For Sucessful Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_08 Valiidate Merchant Is Able To View Invoices Count And Status For Sucessful Transaction
    [Documentation]    Validate TC_08 Valiidate Merchant Is Able To View Invoices Count And Status For Sucessful Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Transactions}    ${nan}    ${nan}    
    Validate Invoices Count And Status Of Transaction    ${1}    ${Success}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Transactions}    ${nan}    ${nan}

Validate Invoices Count And Status Of Transaction
    [Arguments]    ${1}    ${Success}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${1}    ${Success}    ${nan}

","The test case 'TC_08 Validate Merchant Is Able To View Invoices Count And Status For Successful Transaction' primarily aims to verify that a merchant can accurately see the details related to the invoices generated from successful transactions. The key objectives of this test case include:

1. **Invoice Count Verification**: Ensure that the merchant dashboard or relevant interface displays the correct number of invoices corresponding to successful transactions.

2. **Status Consistency**: Check that the status of these transactions is correctly marked as 'successful' and that there are no discrepancies in the recorded data.

3. **Data Accessibility**: Confirm that all relevant details such as transaction amounts, dates, and client information are accessible and accurately presented.

4. **User Interface Testing**: Validate that"
Build data-driven clientcentral_testcases for customers Testcases TC_09 Valiidate Merchant Is Able To View Invoices Count And Status For Declined Transaction,data-driven,TC_09 Valiidate Merchant Is Able To View Invoices Count And Status For Declined Transaction,"*** Settings ***
Documentation    Validate TC_09 Valiidate Merchant Is Able To View Invoices Count And Status For Declined Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_09 Valiidate Merchant Is Able To View Invoices Count And Status For Declined Transaction
    [Documentation]    Validate TC_09 Valiidate Merchant Is Able To View Invoices Count And Status For Declined Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Transactions}    ${nan}    ${nan}    
    Validate Invoices Count And Status Of Transaction    ${0}    ${Failure}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Transactions}    ${nan}    ${nan}

Validate Invoices Count And Status Of Transaction
    [Arguments]    ${0}    ${Failure}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${0}    ${Failure}    ${nan}

","### Test Case: TC_09 - Validate Merchant Is Able To View Invoices Count And Status For Declined Transaction

**Purpose:**
The purpose of this test case is to ensure that merchants using the platform can accurately view and analyze the invoices related to transactions that have been declined. This verification includes checking both the count and the status of these declined transactions. By confirming this functionality, the test validates that merchants have the necessary visibility into their transaction data, which is crucial for financial tracking, reconciliation, and auditing purposes.

**Key Aspects to Validate:**
1. **Invoice Count:** Verify that the number of invoices associated with declined transactions is accurately displayed.
2. **Status Display:** Confirm that the status of each declined transaction is correctly reflected on"
Generate data-driven clientcentral_testcases for customers Testcases TC_10 Validate Merchant Is Able To View Transaction Details after Processing Form PayNow,data-driven,TC_10 Validate Merchant Is Able To View Transaction Details after Processing Form PayNow,"*** Settings ***
Documentation    Validate TC_10 Validate Merchant Is Able To View Transaction Details after Processing Form PayNow
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Merchant Is Able To View Transaction Details after Processing Form PayNow
    [Documentation]    Validate TC_10 Validate Merchant Is Able To View Transaction Details after Processing Form PayNow using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Transactions}    ${nan}    ${nan}    
    Validate Transaction Source    ${card}    ${PayNOW}    ${nan}    
    Validate Method Of Transaction    ${card}    ${nan}    ${nan}    
    Validate Date Of Transaction    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Transactions}    ${nan}    ${nan}

Validate Transaction Source
    [Arguments]    ${card}    ${PayNOW}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${card}    ${PayNOW}    ${nan}

Validate Method Of Transaction
    [Arguments]    ${card}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${card}    ${nan}    ${nan}

Validate Date Of Transaction
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_10 Validate Merchant Is Able To View Transaction Details after Processing Form PayNow' seeks to ensure that the merchant, upon completing a transaction through the PayNow payment form, can successfully access and view the transaction details. The main purpose of this test case is to verify that the end-to-end transaction process via PayNow is functioning correctly and that the merchant is provided with all relevant transaction information for their records and further actions. This confirmation is crucial for operational transparency and financial reconciliation, thus enhancing the reliability and usability of the PayNow service for merchants."
Generate data-driven clientcentral_testcases for customers Testcases TC_11 Validate Merchant Is Able To View Method After ACH Transaction,data-driven,TC_11 Validate Merchant Is Able To View Method After ACH Transaction,"*** Settings ***
Documentation    Validate TC_11 Validate Merchant Is Able To View Method After ACH Transaction
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_11 Validate Merchant Is Able To View Method After ACH Transaction
    [Documentation]    Validate TC_11 Validate Merchant Is Able To View Method After ACH Transaction using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Transactions}    ${nan}    ${nan}    
    Validate Method Of Transaction    ${ach}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Transactions}    ${nan}    ${nan}

Validate Method Of Transaction
    [Arguments]    ${ach}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${ach}    ${nan}    ${nan}

","The test case 'TC_11 Validate Merchant Is Able To View Method After ACH Transaction' aims to ensure that a merchant using the system can successfully view the payment method information after completing an Automated Clearing House (ACH) transaction. The following key points summarize its purpose:

1. **Verification of Visibility**: It checks that the interface accurately reflects the transaction method (i.e., ACH) post-transaction.
2. **System Integrity**: Ensures that the system properly logs and displays detailed transaction data, maintaining accuracy and transparency.
3. **User Experience**: Confirms that merchants have easy access to crucial payment method information, which aids in transaction management and record-keeping.
4. **Operational Confidence**: Builds confidence among merchants that the payment"
Generate data-driven clientcentral_testcases for customers Testcases TC_12 Validate Merchant Is Able To View Total Invoices,data-driven,TC_12 Validate Merchant Is Able To View Total Invoices,"*** Settings ***
Documentation    Validate TC_12 Validate Merchant Is Able To View Total Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Merchant Is Able To View Total Invoices
    [Documentation]    Validate TC_12 Validate Merchant Is Able To View Total Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Validate Total Invoice Amount    ${nan}    ${nan}    ${nan}    
    Validate Total Invoice Count    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Validate Total Invoice Amount
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Total Invoice Count
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case ""TC_12 Validate Merchant Is Able To View Total Invoices"" aims to ensure that the merchant can successfully access and view a summary or a detailed list of all invoices generated within the system. 

### Purpose:
- **Validation of Functionality**: Confirm that the feature allowing merchants to view all their invoices is operational and behaves as expected.
- **User Interface Check**: Ensure that the invoices are displayed in a clear, organized, and user-friendly manner.
- **Data Accuracy**: Verify that the invoice details are accurate, including dates, amounts, customer details, and any other relevant information.
- **Usability Testing**: Assess the ease with which merchants can navigate to the invoice section and understand the information presented.
-"
Validate data-driven clientcentral_testcases for customers Testcases TC_13 Validate Merchant Is Able To Send Email For the Selected Invoice,data-driven,TC_13 Validate Merchant Is Able To Send Email For the Selected Invoice,"*** Settings ***
Documentation    Validate TC_13 Validate Merchant Is Able To Send Email For the Selected Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_13 Validate Merchant Is Able To Send Email For the Selected Invoice
    [Documentation]    Validate TC_13 Validate Merchant Is Able To Send Email For the Selected Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Select All Invoices    ${nan}    ${nan}    ${nan}    
    Send Mail For The Selected Invoice    ${EMAIL}    ${nan}    ${nan}    
    Validate Invoice Receipt Is Received In Email    ${TEST Invoice invoice_number from Sterling Cooper}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Select All Invoices
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Mail For The Selected Invoice
    [Arguments]    ${EMAIL}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${nan}    ${nan}

Validate Invoice Receipt Is Received In Email
    [Arguments]    ${TEST Invoice invoice_number from Sterling Cooper}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${TEST Invoice invoice_number from Sterling Cooper}    ${nan}    ${nan}

","The test case 'TC_13 Validate Merchant Is Able To Send Email For the Selected Invoice' aims to ensure that a merchant can successfully send an email containing a specific invoice to a designated recipient. This functionality is crucial for merchants who need to communicate billing information, payment notifications, or invoice copies to customers or internal stakeholders seamlessly.

**Purpose:**
- **Verification:** To confirm that the email sending feature for a selected invoice works as intended without errors.
- **Functionality:** To ensure the process of selecting an invoice, inputting recipient email details, and initiating the email dispatch correctly sends the invoice to the specified address.
- **User Experience:** To validate that the user interface is intuitive and provides necessary feedback through prompts, confirmations, or error messages related"
Generate data-driven clientcentral_testcases for customers Testcases TC_14 Validate Merchant Is Able Send Email for Multiple Invoices,data-driven,TC_14 Validate Merchant Is Able Send Email for Multiple Invoices,"*** Settings ***
Documentation    Validate TC_14 Validate Merchant Is Able Send Email for Multiple Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_14 Validate Merchant Is Able Send Email for Multiple Invoices
    [Documentation]    Validate TC_14 Validate Merchant Is Able Send Email for Multiple Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Create Multiple Invoices Through API    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Transaction For Multiple Invoices    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Select All Invoices    ${nan}    ${nan}    ${nan}    
    Send Mail For The Selected Invoice    ${EMAIL}    ${nan}    ${nan}    
    Validate Invoice Receipt Is Received In Email    ${TEST-QA Invoice Summary from Sterling Cooper}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Transaction For Multiple Invoices
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Select All Invoices
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Mail For The Selected Invoice
    [Arguments]    ${EMAIL}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${nan}    ${nan}

Validate Invoice Receipt Is Received In Email
    [Arguments]    ${TEST-QA Invoice Summary from Sterling Cooper}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${TEST-QA Invoice Summary from Sterling Cooper}    ${nan}    ${nan}

","The test case 'TC_14 Validate Merchant Is Able to Send Email for Multiple Invoices' primarily serves to verify that a merchant can successfully send emails containing multiple invoices to intended recipients. The main objectives of this test case are:

1. To ensure that the functionality for selecting multiple invoices is working as designed.
2. To confirm that the system properly compiles and prepares the selected invoices for email dispatch.
3. To validate that the email containing the multiple invoices is sent to the correct recipient(s) without errors.
4. To check that the recipient receives the email and that the attached invoices are accurate and correctly formatted.

The ultimate goal is to guarantee the system's reliability and efficiency in handling batch invoice emailing, which is a crucial feature for merchants to"
Create data-driven clientcentral_testcases for customers Testcases TC_15 Validate Merchant Is Able To Send A Copy Of Receipt,data-driven,TC_15 Validate Merchant Is Able To Send A Copy Of Receipt,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Is Able To Send A Copy Of Receipt
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Is Able To Send A Copy Of Receipt
    [Documentation]    Validate TC_15 Validate Merchant Is Able To Send A Copy Of Receipt using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Select All Invoices    ${nan}    ${nan}    ${nan}    
    Send A Copy Of Invoice Email    ${EMAIL}    ${sdtcorp@gmail.com}    ${nan}    
    Validate Invoice Receipt Is Received In Email    ${TEST Invoice invoice_number from Sterling Cooper}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Select All Invoices
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send A Copy Of Invoice Email
    [Arguments]    ${EMAIL}    ${sdtcorp@gmail.com}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${sdtcorp@gmail.com}    ${nan}

Validate Invoice Receipt Is Received In Email
    [Arguments]    ${TEST Invoice invoice_number from Sterling Cooper}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${TEST Invoice invoice_number from Sterling Cooper}    ${nan}    ${nan}

","The test case 'TC_15 Validate Merchant Is Able To Send A Copy Of Receipt' is designed to ensure that merchants using the system can successfully send a duplicate receipt to a customer via email or another specified medium. 

### Purpose:
- **Validation of Functionality:** The primary objective is to verify that the feature enabling merchants to send a copy of a receipt is functioning correctly.
- **Accuracy Check:** Ensures that the receipt copy sent contains accurate and complete details of the transaction, such as the date, time, items purchased, prices, total amount, and merchant details.
- **Usability Test:** Confirms that the process for sending a receipt copy is user-friendly and can be executed without any technical difficulties.
- **Error Handling:** Exam"
Create data-driven clientcentral_testcases for customers Testcases TC_16 Validate Merchant Is Able To Cancel Send Invoice Receipt,data-driven,TC_16 Validate Merchant Is Able To Cancel Send Invoice Receipt,"*** Settings ***
Documentation    Validate TC_16 Validate Merchant Is Able To Cancel Send Invoice Receipt
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_16 Validate Merchant Is Able To Cancel Send Invoice Receipt
    [Documentation]    Validate TC_16 Validate Merchant Is Able To Cancel Send Invoice Receipt using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Select All Invoices    ${nan}    ${nan}    ${nan}    
    Validate Send From My Email Address Information Is Displayed    ${nan}    ${nan}    ${nan}    
    Cancel Send Invoice Receipt    ${nan}    ${nan}    ${nan}    
    Validate Send Invoice Receipt Popup Is Closed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Select All Invoices
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Send From My Email Address Information Is Displayed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Cancel Send Invoice Receipt
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Send Invoice Receipt Popup Is Closed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","**Test Case TC_16: Validate Merchant Is Able To Cancel Send Invoice Receipt**

**Purpose:**
The objective of this test case is to verify that a merchant has the capability to cancel the action of sending an invoice receipt to a customer. This is an essential feature, ensuring that merchants have the flexibility to correct any mistakes or make adjustments before the invoice is finalized and sent. The validation involves ensuring that the user interface provides the option to cancel the send action, and that upon cancellation, no invoice receipt is dispatched to the customer. The system should behave consistently and return to the state prior to initiating the send invoice action.

**Key Steps:**
1. **Login as Merchant**: Authenticate into the merchant's account through the platform.
2."
Generate data-driven clientcentral_testcases for customers Testcases TC_17 Validate Merchant Is Able To Navigate To Transaction Details From Transaction Tab,data-driven,TC_17 Validate Merchant Is Able To Navigate To Transaction Details From Transaction Tab,"*** Settings ***
Documentation    Validate TC_17 Validate Merchant Is Able To Navigate To Transaction Details From Transaction Tab
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_17 Validate Merchant Is Able To Navigate To Transaction Details From Transaction Tab
    [Documentation]    Validate TC_17 Validate Merchant Is Able To Navigate To Transaction Details From Transaction Tab using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Get Id After Processing Transaction    ${response}    ${nan}    ${nan}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Transactions}    ${nan}    ${nan}    
    Navigate To Transation Details From Transaction Tab    ${transaction_id}    ${nan}    ${nan}    
    Validate Transaction Details Page Is Displayed    ${gateway_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Get Id After Processing Transaction
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Transactions}    ${nan}    ${nan}

Navigate To Transation Details From Transaction Tab
    [Arguments]    ${transaction_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${transaction_id}    ${nan}    ${nan}

Validate Transaction Details Page Is Displayed
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

","The test case ""TC_17 Validate Merchant Is Able To Navigate To Transaction Details From Transaction Tab"" aims to ensure that a merchant can successfully access detailed information about a specific transaction from the transaction tab within a merchant portal or dashboard. This test checks the usability and functionality of the navigation feature, verifying that upon selecting a transaction from the list, the user is correctly redirected to a more detailed view of that transaction. The purpose is to confirm that merchants can efficiently access and review transaction details, which is crucial for handling inquiries, resolving disputes, or managing their finances. The test ensures a seamless user experience by validating that all pathways to view detailed transaction information are working as expected."
Create data-driven clientcentral_testcases for customers Testcases TC_18 Validate Credit Card Surcharge After Enabling And Disabling Exempt Surcharge for A Customer,data-driven,TC_18 Validate Credit Card Surcharge After Enabling And Disabling Exempt Surcharge for A Customer,"*** Settings ***
Documentation    Validate TC_18 Validate Credit Card Surcharge After Enabling And Disabling Exempt Surcharge for A Customer
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_18 Validate Credit Card Surcharge After Enabling And Disabling Exempt Surcharge for A Customer
    [Documentation]    Validate TC_18 Validate Credit Card Surcharge After Enabling And Disabling Exempt Surcharge for A Customer using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Customer Settings}    ${nan}    ${nan}    
    Select Surcharge Exempt    ${True}    ${nan}    ${nan}    
    Validate Surcharge Exempt For Customer Is Enabled    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Customer Settings}    ${nan}    ${nan}    
    Select Surcharge Exempt    ${False}    ${nan}    ${nan}    
    Validate Surcharge Exempt For Customer Is Disabled    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Customer Settings}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customer Settings}    ${nan}    ${nan}

Select Surcharge Exempt
    [Arguments]    ${True}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${True}    ${nan}    ${nan}

Validate Surcharge Exempt For Customer Is Enabled
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Customer Settings}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customer Settings}    ${nan}    ${nan}

Select Surcharge Exempt
    [Arguments]    ${False}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${False}    ${nan}    ${nan}

Validate Surcharge Exempt For Customer Is Disabled
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","The test case 'TC_18 Validate Credit Card Surcharge After Enabling And Disabling Exempt Surcharge for A Customer' is designed to ensure that the functionality of applying and removing credit card surcharges for specific customers works correctly within a given system. 

**Purpose:**

- **Verification of Surcharge Exemption Enablement:**
  This part of the test involves enabling the 'exempt surcharge' feature for a customer and verifying that the system correctly exempts the customer from any additional credit card surcharge fees during transactions. The expected outcome is that transactions processed for this customer do not include the surcharge, reflecting the exemption status accurately.

- **Verification of Surcharge Exemption Disabling:**
  The second part of the test involves disabling the"
Create data-driven clientcentral_testcases for customers Testcases TC_19 Validate Invoice Email After Enabling And Disabling PDF Setting,data-driven,TC_19 Validate Invoice Email After Enabling And Disabling PDF Setting,"*** Settings ***
Documentation    Validate TC_19 Validate Invoice Email After Enabling And Disabling PDF Setting
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_19 Validate Invoice Email After Enabling And Disabling PDF Setting
    [Documentation]    Validate TC_19 Validate Invoice Email After Enabling And Disabling PDF Setting using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select PDF Setting In Cusomer Setting    ${True}    ${nan}    ${nan}    
    Validate PDF Attachment Status Is Enabled In Email Details    ${true}    ${nan}    ${nan}    
    Select PDF Setting In Cusomer Setting    ${False}    ${nan}    ${nan}    
    Validate PDF Attachment Status Is Disabled In Email Details    ${false}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select PDF Setting In Cusomer Setting
    [Arguments]    ${True}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${True}    ${nan}    ${nan}

Validate PDF Attachment Status Is Enabled In Email Details
    [Arguments]    ${true}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${true}    ${nan}    ${nan}

Select PDF Setting In Cusomer Setting
    [Arguments]    ${False}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${False}    ${nan}    ${nan}

Validate PDF Attachment Status Is Disabled In Email Details
    [Arguments]    ${false}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${false}    ${nan}    ${nan}

","The purpose of the test case 'TC_19 Validate Invoice Email After Enabling And Disabling PDF Setting' is to ensure that the system correctly handles the attachment of invoice PDFs in email communications based on the configuration settings. Specifically, the test case aims to:

1. Verify that when the PDF attachment setting is enabled, the system correctly includes a PDF version of the invoice in the email sent to the customer.
2. Confirm that when the PDF attachment setting is disabled, the system does not attach a PDF version of the invoice in the email sent to the customer.

This test case ensures the configurable behavior of the invoice emailing feature works as intended, thereby maintaining the accuracy of customer communications according to user preferences or business requirements."
Build data-driven clientcentral_testcases for customers Testcases TC_20 Validate Merchant Is Able To Enable And Disable Override Payment Method By Customer,data-driven,TC_20 Validate Merchant Is Able To Enable And Disable Override Payment Method By Customer,"*** Settings ***
Documentation    Validate TC_20 Validate Merchant Is Able To Enable And Disable Override Payment Method By Customer
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_20 Validate Merchant Is Able To Enable And Disable Override Payment Method By Customer
    [Documentation]    Validate TC_20 Validate Merchant Is Able To Enable And Disable Override Payment Method By Customer using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Customer Settings}    ${nan}    ${nan}    
    Navigate To Tab In Customer Settings    ${Payment Method Settings}    ${nan}    ${nan}    
    Select Override Payment By Customer    ${nan}    ${nan}    ${nan}    
    Validate Override Payment By Customer Is Enabled    ${nan}    ${nan}    ${nan}    
    Select Override Payment By Customer    ${nan}    ${nan}    ${nan}    
    Validate Override Payment By Customer Is Disabled    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Customer Settings}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customer Settings}    ${nan}    ${nan}

Navigate To Tab In Customer Settings
    [Arguments]    ${Payment Method Settings}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment Method Settings}    ${nan}    ${nan}

Select Override Payment By Customer
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Override Payment By Customer Is Enabled
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Override Payment By Customer
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Override Payment By Customer Is Disabled
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The purpose of the test case ""TC_20 Validate Merchant Is Able To Enable And Disable Override Payment Method By Customer"" is to verify that a merchant (or administrative user) has the ability to allow or restrict customers from overriding the default payment method during the checkout process. This functionality ensures that the merchant can control and enforce specific payment methods if required for operational or strategic reasons, while also providing the flexibility to let customers choose their preferred payment methods when permitted. The test case aims to ensure that this feature is functioning correctly, offering the ability to enable or disable the option and subsequently observing the correct behavior during a customer's purchasing experience."
Build data-driven clientcentral_testcases for customers Testcases TC_21 Validate Merchant Is Able To Enable And Disable Customize By Transaction Source,data-driven,TC_21 Validate Merchant Is Able To Enable And Disable Customize By Transaction Source,"*** Settings ***
Documentation    Validate TC_21 Validate Merchant Is Able To Enable And Disable Customize By Transaction Source
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_21 Validate Merchant Is Able To Enable And Disable Customize By Transaction Source
    [Documentation]    Validate TC_21 Validate Merchant Is Able To Enable And Disable Customize By Transaction Source using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Customer Settings}    ${nan}    ${nan}    
    Navigate To Tab In Customer Settings    ${Payment Method Settings}    ${nan}    ${nan}    
    Select Override Payment By Customer    ${nan}    ${nan}    ${nan}    
    Customize Transaction By Source    ${nan}    ${nan}    ${nan}    
    Validate Customize Transaction By Source Is Enabled    ${nan}    ${nan}    ${nan}    
    Customize Transaction By Source    ${nan}    ${nan}    ${nan}    
    Validate Customize Transaction By Source Is Disabled    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Customer Settings}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customer Settings}    ${nan}    ${nan}

Navigate To Tab In Customer Settings
    [Arguments]    ${Payment Method Settings}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment Method Settings}    ${nan}    ${nan}

Select Override Payment By Customer
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Customize Transaction By Source
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Customize Transaction By Source Is Enabled
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Customize Transaction By Source
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Customize Transaction By Source Is Disabled
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","Test Case 'TC_21 Validate Merchant Is Able To Enable And Disable Customize By Transaction Source' aims to verify that a merchant has the ability to modify the settings related to transaction sources through an enable or disable function. The purpose of this test is to ensure that merchants can effectively manage and configure their transaction sources to tailor them to their specific business needs. By testing this functionality, the goal is to confirm that the system correctly activates or deactivates the customization options as dictated by the merchant, without any errors or issues, thereby ensuring a smooth and adaptable transaction management process."
Validate data-driven clientcentral_testcases for customers Testcases TC_22 Validate Merchant Is Able To View Invoice Number And Email Format In Email Details,data-driven,TC_22 Validate Merchant Is Able To View Invoice Number And Email Format In Email Details,"*** Settings ***
Documentation    Validate TC_22 Validate Merchant Is Able To View Invoice Number And Email Format In Email Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Merchant Is Able To View Invoice Number And Email Format In Email Details
    [Documentation]    Validate TC_22 Validate Merchant Is Able To View Invoice Number And Email Format In Email Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Select All Invoices    ${nan}    ${nan}    ${nan}    
    Enter Email Address And Message In Send Invoice Email    ${EMAIL}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Email Details}    ${nan}    ${nan}    
    Validate Email Format    ${Single Invoice}    ${nan}    ${nan}    
    Validate Invoice Number And Sent To Email Details    ${invoice_number}    ${EMAIL}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Select All Invoices
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Enter Email Address And Message In Send Invoice Email
    [Arguments]    ${EMAIL}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Email Details}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Email Details}    ${nan}    ${nan}

Validate Email Format
    [Arguments]    ${Single Invoice}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Single Invoice}    ${nan}    ${nan}

Validate Invoice Number And Sent To Email Details
    [Arguments]    ${invoice_number}    ${EMAIL}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${EMAIL}    ${nan}

","### Test Case: TC_22 Validate Merchant Is Able To View Invoice Number And Email Format In Email Details

**Purpose:**

The objective of this test case is to ensure that a merchant can correctly view the invoice number and the email format within the email details section of a given system. This verification is critical to maintaining proper documentation and communication channels, as it impacts the merchant's ability to track transactions and correspond with customers effectively.

**Key Points:**

1. **Invoice Number Verification:** Ensure that the invoice number displayed in the email details is accurate and corresponds to the transaction record in the system. This helps in verifying that there are no discrepancies between the transaction records and the email notifications sent.

2. **Email Format Verification:** Check that the email"
Create data-driven clientcentral_testcases for customers Testcases TC_23 Validate Merchant Is Able To View Provider Response Message And Date Sent In Email Details,data-driven,TC_23 Validate Merchant Is Able To View Provider Response Message And Date Sent In Email Details,"*** Settings ***
Documentation    Validate TC_23 Validate Merchant Is Able To View Provider Response Message And Date Sent In Email Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_23 Validate Merchant Is Able To View Provider Response Message And Date Sent In Email Details
    [Documentation]    Validate TC_23 Validate Merchant Is Able To View Provider Response Message And Date Sent In Email Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Select All Invoices    ${nan}    ${nan}    ${nan}    
    Enter Email Address And Message In Send Invoice Email    ${EMAIL}    ${nan}    ${nan}    
    Validate Provider Response Message Is Displayed    ${OK}    ${nan}    ${nan}    
    Validate Sent Email Date    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Select All Invoices
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Enter Email Address And Message In Send Invoice Email
    [Arguments]    ${EMAIL}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${nan}    ${nan}

Validate Provider Response Message Is Displayed
    [Arguments]    ${OK}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${OK}    ${nan}    ${nan}

Validate Sent Email Date
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_23 Validate Merchant Is Able To View Provider Response Message And Date Sent In Email Details' aims to confirm that the system correctly displays specific details within the email communication interface available to merchants. Specifically, the purpose is to ensure that when a merchant accesses the email details section:

1. The response message from the provider is visible.
2. The exact date and time the response was sent are accurately shown.

Verifying these elements helps ensure that merchants have complete visibility into their communications with providers, facilitating better management of tasks and issues, and improving overall transparency and record-keeping within the email system. This test case contributes to validating the usability and functional integrity of the merchant's email interaction capabilities."
Validate data-driven clientcentral_testcases for customers Testcases TC_24 Validate Merchant Is Able To View Multiple Invoices Email Details,data-driven,TC_24 Validate Merchant Is Able To View Multiple Invoices Email Details,"*** Settings ***
Documentation    Validate TC_24 Validate Merchant Is Able To View Multiple Invoices Email Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_24 Validate Merchant Is Able To View Multiple Invoices Email Details
    [Documentation]    Validate TC_24 Validate Merchant Is Able To View Multiple Invoices Email Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Create Multiple Invoices Through API    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Transaction For Multiple Invoices    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Select All Invoices    ${nan}    ${nan}    ${nan}    
    Send Mail For The Selected Invoice    ${EMAIL}    ${nan}    ${nan}    
    Validate Email Format    ${Summary}    ${nan}    ${nan}    
    Validate Multiple Invoices Details In Email    ${invoices_list}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Transaction For Multiple Invoices
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Select All Invoices
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Mail For The Selected Invoice
    [Arguments]    ${EMAIL}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${nan}    ${nan}

Validate Email Format
    [Arguments]    ${Summary}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Summary}    ${nan}    ${nan}

Validate Multiple Invoices Details In Email
    [Arguments]    ${invoices_list}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoices_list}    ${nan}    ${nan}

","The test case ""TC_24 Validate Merchant Is Able To View Multiple Invoices Email Details"" is designed to verify that a merchant has the functionality to view detailed information related to multiple invoice emails within a system or application. The purpose of this test is to ensure that the merchant can access, review, and possibly manage the email details of different invoices they have sent or received. This functionality is crucial for maintaining transparency, tracking payment communications, and ensuring proper record-keeping.

Key aspects to validate might include:
1. Access Permission: Confirming that the merchant has the necessary permissions to view these details.
2. Usability: Ensuring the user interface allows easy navigation between multiple invoices and their corresponding email details.
3. Data Accuracy: Verifying that"
Generate data-driven clientcentral_testcases for customers Testcases TC_25 Validate Merchant Is Able To View Account Number In Custom Fields,data-driven,TC_25 Validate Merchant Is Able To View Account Number In Custom Fields,"*** Settings ***
Documentation    Validate TC_25 Validate Merchant Is Able To View Account Number In Custom Fields
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_25 Validate Merchant Is Able To View Account Number In Custom Fields
    [Documentation]    Validate TC_25 Validate Merchant Is Able To View Account Number In Custom Fields using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Validate Account Number Is Displayed    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Validate Account Number Is Displayed
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","The test case 'TC_25 Validate Merchant Is Able To View Account Number In Custom Fields' is designed to verify that merchants can successfully view account numbers within designated custom fields in a given system or application. The purpose of this test case is to ensure that the system correctly displays the account numbers in the specific custom fields as intended, thus confirming that the setup is functioning accurately and meets the required specifications. This validation is crucial for processes that involve account management or financial transactions, where merchants need access to specific account information for their operations. The successful execution of this test ensures reliability and ease of access to important account data for the merchants."
Build data-driven clientcentral_testcases for customers Testcases TC_26 Validate Merchant Is Able To Enter Amount To Pay And Notes In Specific Invoice,data-driven,TC_26 Validate Merchant Is Able To Enter Amount To Pay And Notes In Specific Invoice,"*** Settings ***
Documentation    Validate TC_26 Validate Merchant Is Able To Enter Amount To Pay And Notes In Specific Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_26 Validate Merchant Is Able To Enter Amount To Pay And Notes In Specific Invoice
    [Documentation]    Validate TC_26 Validate Merchant Is Able To Enter Amount To Pay And Notes In Specific Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Edit Amount To Pay    ${10}    ${nan}    ${nan}    
    Validate Amount To Pay Is Updated    ${10}    ${nan}    ${nan}    
    Enter Text In Notes    ${Testing}    ${nan}    ${nan}    
    Validate Notes Field Is Updated    ${Testing}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Edit Amount To Pay
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

Validate Amount To Pay Is Updated
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

Enter Text In Notes
    [Arguments]    ${Testing}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Testing}    ${nan}    ${nan}

Validate Notes Field Is Updated
    [Arguments]    ${Testing}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Testing}    ${nan}    ${nan}

","The test case 'TC_26 Validate Merchant Is Able To Enter Amount To Pay And Notes In Specific Invoice' is designed to verify the functionality that allows a merchant to input an amount to be paid and add notes to a specific invoice within a payment or invoice management system. 

### Purpose:

1. **Functionality Verification:**
   - Ensure that the merchant interface allows for the input of the payment amount and any additional notes on a selected invoice.
  
2. **User Experience:**
   - Confirm that the input fields for the amount and notes are user-friendly and operate without issues.

3. **Data Integrity:**
   - Check that the information entered into the amount and notes fields is correctly saved and displayed.

4. **Error Handling:"
Generate data-driven clientcentral_testcases for customers Testcases TC_27 Validate Total Amount Is Updated As Per The changes in Invoices Due Amount,data-driven,TC_27 Validate Total Amount Is Updated As Per The changes in Invoices Due Amount,"*** Settings ***
Documentation    Validate TC_27 Validate Total Amount Is Updated As Per The changes in Invoices Due Amount
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_27 Validate Total Amount Is Updated As Per The changes in Invoices Due Amount
    [Documentation]    Validate TC_27 Validate Total Amount Is Updated As Per The changes in Invoices Due Amount using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Edit Amount To Pay    ${10}    ${nan}    ${nan}    
    Validate Total Amount Is Updated    ${10}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Edit Amount To Pay
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

Validate Total Amount Is Updated
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

","The test case 'TC_27 Validate Total Amount Is Updated As Per The Changes in Invoices Due Amount' aims to ensure that any adjustments made to the due amounts in individual invoices are correctly reflected in the overall total amount displayed. Specifically, this test verifies that the system accurately recalculates and updates the total amount due when there are changes, such as payments, discounts, or additional charges, applied to the invoices. The purpose is to confirm the system's reliability and accuracy in maintaining financial data integrity by adjusting the total amount due in real-time or within an expected timeframe following any modifications to invoice due amounts. This ensures users have accurate and up-to-date financial information at all times."
Validate data-driven clientcentral_testcases for customers Testcases TC_28 Validate Merchant Is Able To View Invoice Count In Virtual Terminal,data-driven,TC_28 Validate Merchant Is Able To View Invoice Count In Virtual Terminal,"*** Settings ***
Documentation    Validate TC_28 Validate Merchant Is Able To View Invoice Count In Virtual Terminal
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_28 Validate Merchant Is Able To View Invoice Count In Virtual Terminal
    [Documentation]    Validate TC_28 Validate Merchant Is Able To View Invoice Count In Virtual Terminal using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Create Multiple Invoices Through API    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Validate Invoice Count    ${3}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Validate Invoice Count
    [Arguments]    ${3}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${3}    ${nan}    ${nan}

","The test case 'TC_28 Validate Merchant Is Able To View Invoice Count In Virtual Terminal' aims to verify that merchants can access and accurately view the total number of invoices in the virtual terminal of their payment processing system. The purpose is to ensure that the virtual terminal interface is functioning correctly by displaying the correct invoice count, which is crucial for merchants to manage their transactions effectively. This test case assesses the accuracy and reliability of the invoicing feature, helping to maintain proper accounting and financial tracking within the merchant's virtual terminal environment."
Build data-driven clientcentral_testcases for customers Testcases TC_29 Validate Merchant Is Able To Process Payment By Selecting Apply To Oldest,data-driven,TC_29 Validate Merchant Is Able To Process Payment By Selecting Apply To Oldest,"*** Settings ***
Documentation    Validate TC_29 Validate Merchant Is Able To Process Payment By Selecting Apply To Oldest
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_29 Validate Merchant Is Able To Process Payment By Selecting Apply To Oldest
    [Documentation]    Validate TC_29 Validate Merchant Is Able To Process Payment By Selecting Apply To Oldest using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Select Country In Virtual Terminal    ${United States}    ${nan}    ${nan}    
    Select Payment Type    ${Apply To Oldest}    ${nan}    ${nan}    
    Enter Amount For Lumpusm    ${Sale}    ${10.00}    ${nan}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}    
    Enter ACH/Echeck Details    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}    
    Process Payment    ${nan}    ${nan}    ${nan}    
    Validate Transaction Confirmation Page Is Displayed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Select Country In Virtual Terminal
    [Arguments]    ${United States}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${United States}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Apply To Oldest}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Apply To Oldest}    ${nan}    ${nan}

Enter Amount For Lumpusm
    [Arguments]    ${Sale}    ${10.00}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Sale}    ${10.00}    ${nan}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter ACH/Echeck Details
    [Arguments]    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}

Process Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Transaction Confirmation Page Is Displayed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","**Test Case: TC_29 Validate Merchant Is Able To Process Payment By Selecting Apply To Oldest**

**Purpose:**

The objective of Test Case TC_29 is to ensure that a merchant can successfully process a payment by choosing the option ""Apply To Oldest."" This functionality is critical for merchants who manage multiple invoices from the same customer and prefer to apply incoming payments to the oldest outstanding invoice first. This helps in managing their accounts receivable efficiently and ensures that the customer's oldest dues are cleared before any new or recent invoices are addressed.

**Summary:**

- **Setup:** The merchant must have multiple outstanding invoices for a single customer.
- **Action:** The merchant processes a payment and selects the option ""Apply To Oldest"" during the payment"
Generate data-driven clientcentral_testcases for customers Testcases TC_30 Validate Merchant Is Able To Process Payment By Selecting Non-Applied Payment,data-driven,TC_30 Validate Merchant Is Able To Process Payment By Selecting Non-Applied Payment,"*** Settings ***
Documentation    Validate TC_30 Validate Merchant Is Able To Process Payment By Selecting Non-Applied Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_30 Validate Merchant Is Able To Process Payment By Selecting Non-Applied Payment
    [Documentation]    Validate TC_30 Validate Merchant Is Able To Process Payment By Selecting Non-Applied Payment using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Select Country In Virtual Terminal    ${United States}    ${nan}    ${nan}    
    Select Payment Type    ${Non-Applied Payment}    ${nan}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Memo And Origin State For Non-Applied Payment    ${Testing}    ${ALASKA}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Process Payment    ${nan}    ${nan}    ${nan}    
    Validate Transaction Confirmation Page Is Displayed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Select Country In Virtual Terminal
    [Arguments]    ${United States}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${United States}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Non-Applied Payment}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Non-Applied Payment}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Memo And Origin State For Non-Applied Payment
    [Arguments]    ${Testing}    ${ALASKA}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Testing}    ${ALASKA}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Process Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Transaction Confirmation Page Is Displayed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_30 Validate Merchant Is Able To Process Payment By Selecting Non-Applied Payment' is designed to ensure that a merchant can successfully process a payment when explicitly selecting a payment method or option that has not yet been applied or used. The purpose of this test case is to verify the functionality and robustness of the payment processing system, ensuring that it correctly handles and recognizes non-applied payment methods.

Key aspects of the test include:
1. **Verification of the Payment Options Interface**: Ensure that the interface displays available payment options to the merchant.
2. **Selection Process**: Validate that the merchant can navigate through the payment options and select one that has not been previously applied.
3. **Processing Capability**: Confirm that the"
Validate data-driven clientcentral_testcases for customers Testcases TC_31 Validate Merchant Is Able To Process Payment By Selecting Specific Invoice,data-driven,TC_31 Validate Merchant Is Able To Process Payment By Selecting Specific Invoice,"*** Settings ***
Documentation    Validate TC_31 Validate Merchant Is Able To Process Payment By Selecting Specific Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_31 Validate Merchant Is Able To Process Payment By Selecting Specific Invoice
    [Documentation]    Validate TC_31 Validate Merchant Is Able To Process Payment By Selecting Specific Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Select Country In Virtual Terminal    ${United States}    ${nan}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Select Specific Invoice Checkbox    ${nan}    ${nan}    ${nan}    
    Edit Amount To Pay    ${10}    ${nan}    ${nan}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}    
    Enter ACH/Echeck Details    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}    
    Process Payment    ${nan}    ${nan}    ${nan}    
    Validate Transaction Confirmation Page Is Displayed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Select Country In Virtual Terminal
    [Arguments]    ${United States}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${United States}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Select Specific Invoice Checkbox
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Edit Amount To Pay
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter ACH/Echeck Details
    [Arguments]    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}

Process Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Transaction Confirmation Page Is Displayed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_31 Validate Merchant Is Able To Process Payment By Selecting Specific Invoice' aims to ensure that a merchant can successfully process a payment by selecting a specific invoice from a list of outstanding invoices. The primary objective of this test is to confirm the functionality and reliability of the system's payment processing feature, ensuring that merchants can seamlessly identify and pay for individual invoices without issues. This involves verifying that the user interface correctly displays available invoices, allows the merchant to choose a designated invoice, and completes the transaction accurately, updating the system to reflect the new payment status. Successful completion of this test case would validate that the payment processing system is robust, user-friendly, and effectively supports the financial operations of the merchant."
Validate data-driven clientcentral_testcases for customers Testcases TC_32 Validate Merchant Is Able To View Transaction Details after Processing Form Virtual Terminal,data-driven,TC_32 Validate Merchant Is Able To View Transaction Details after Processing Form Virtual Terminal,"*** Settings ***
Documentation    Validate TC_32 Validate Merchant Is Able To View Transaction Details after Processing Form Virtual Terminal
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_32 Validate Merchant Is Able To View Transaction Details after Processing Form Virtual Terminal
    [Documentation]    Validate TC_32 Validate Merchant Is Able To View Transaction Details after Processing Form Virtual Terminal using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Process Payment Transaction From Virtual Terminal    ${nan}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Transactions}    ${nan}    ${nan}    
    Validate Transaction Source    ${ach}    ${Unified Virtual Terminal}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Process Payment Transaction From Virtual Terminal
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Transactions}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Transactions}    ${nan}    ${nan}

Validate Transaction Source
    [Arguments]    ${ach}    ${Unified Virtual Terminal}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${ach}    ${Unified Virtual Terminal}    ${nan}

","**Test Case Summary: TC_32 Validate Merchant Is Able To View Transaction Details after Processing Form Virtual Terminal**

**Purpose**:
The goal of this test case is to ensure that after a merchant processes a transaction using the virtual terminal, they can subsequently view the details of that transaction effectively. Here’s a breakdown of the primary objectives:

1. **Transaction Processing Validation**: Confirm that transactions initiated through the virtual terminal are correctly processed and recorded in the system.
   
2. **Transaction Detail Accessibility**: Verify that once a transaction is completed, the merchant has the ability to access and review the comprehensive details of the transaction, including vital information such as transaction ID, date, amount, customer details, and transaction status.

3. **User Experience**"
Build data-driven clientcentral_testcases for customers Testcases TC_33 Validate Merchant Is Able To View Saved Credit Card Details,data-driven,TC_33 Validate Merchant Is Able To View Saved Credit Card Details,"*** Settings ***
Documentation    Validate TC_33 Validate Merchant Is Able To View Saved Credit Card Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_33 Validate Merchant Is Able To View Saved Credit Card Details
    [Documentation]    Validate TC_33 Validate Merchant Is Able To View Saved Credit Card Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Process Payment To Save Payment Method    ${Credit Card}    ${CREDIT_CARD_DETAILS}    ${nan}    
    Navigate To Saved Payments Tab    ${nan}    ${nan}    ${nan}    
    Validate Saved Payment Details Is Displayed    ${Credit Card}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Process Payment To Save Payment Method
    [Arguments]    ${Credit Card}    ${CREDIT_CARD_DETAILS}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${CREDIT_CARD_DETAILS}    ${nan}

Navigate To Saved Payments Tab
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Saved Payment Details Is Displayed
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

","**Summary of Test Case 'TC_33 Validate Merchant Is Able To View Saved Credit Card Details':**

**Purpose:**
The primary objective of this test case is to verify that a merchant has the ability to view the details of saved credit card information within their account or platform. This functionality is essential for merchants to manage transactions, ensure the accuracy of stored payment data, and provide a seamless checkout experience for their customers.

**Key Points:**
1. **Authentication:** Ensure that the merchant is properly authenticated before they can access saved credit card details, maintaining the security and privacy of sensitive payment information.
   
2. **Access Verification:** Validate that the merchant can navigate to the appropriate section (e.g., Payment Methods, Billing Information) where saved credit"
Create data-driven clientcentral_testcases for customers Testcases TC_34 Validate Merchant Is Able To View Saved ACH Details,data-driven,TC_34 Validate Merchant Is Able To View Saved ACH Details,"*** Settings ***
Documentation    Validate TC_34 Validate Merchant Is Able To View Saved ACH Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_34 Validate Merchant Is Able To View Saved ACH Details
    [Documentation]    Validate TC_34 Validate Merchant Is Able To View Saved ACH Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Process Payment To Save Payment Method    ${ACH / eCheck}    ${ACH_ECHECK_DETAILS}    ${nan}    
    Navigate To Saved Payments Tab    ${nan}    ${nan}    ${nan}    
    Validate Saved Payment Details Is Displayed    ${ACH / eCheck}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Process Payment To Save Payment Method
    [Arguments]    ${ACH / eCheck}    ${ACH_ECHECK_DETAILS}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${ACH_ECHECK_DETAILS}    ${nan}

Navigate To Saved Payments Tab
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Saved Payment Details Is Displayed
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

","The test case 'TC_34 Validate Merchant Is Able To View Saved ACH Details' is designed to verify that a merchant can successfully view saved Automated Clearing House (ACH) details within the payment processing or account management system. The purpose of this test case is to ensure that the system accurately retrieves and displays all previously saved ACH information, such as bank account numbers, routing numbers, and account holder names, in a secure and user-friendly manner.

By validating this functionality, the test case ensures that merchants can easily access their ACH details for transaction purposes without encountering issues, and that the information displayed is both complete and accurate. This contributes to the overall user experience and functionality of the system, reinforcing reliability and convenience for the merchant. Moreover, it helps confirm that"
Generate data-driven clientcentral_testcases for customers Testcases TC_35 Validate Merchant Is Able To Process Payment Through Saved Payment Method,data-driven,TC_35 Validate Merchant Is Able To Process Payment Through Saved Payment Method,"*** Settings ***
Documentation    Validate TC_35 Validate Merchant Is Able To Process Payment Through Saved Payment Method
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_35 Validate Merchant Is Able To Process Payment Through Saved Payment Method
    [Documentation]    Validate TC_35 Validate Merchant Is Able To Process Payment Through Saved Payment Method using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Process Payment To Save Payment Method    ${ACH / eCheck}    ${ACH_ECHECK_DETAILS}    ${nan}    
    Select Country In Virtual Terminal    ${United States}    ${nan}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Select Specific Invoice Checkbox    ${nan}    ${nan}    ${nan}    
    Edit Amount To Pay    ${10}    ${nan}    ${nan}    
    Select Payment Method    ${Saved Payments}    ${nan}    ${nan}    
    Select Saved Payment Details    ${ACH / eCheck}    ${nan}    ${nan}    
    Process Payment    ${nan}    ${nan}    ${nan}    
    Validate Transaction Confirmation Page Is Displayed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Process Payment To Save Payment Method
    [Arguments]    ${ACH / eCheck}    ${ACH_ECHECK_DETAILS}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${ACH_ECHECK_DETAILS}    ${nan}

Select Country In Virtual Terminal
    [Arguments]    ${United States}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${United States}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Select Specific Invoice Checkbox
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Edit Amount To Pay
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${Saved Payments}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Saved Payments}    ${nan}    ${nan}

Select Saved Payment Details
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Process Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Transaction Confirmation Page Is Displayed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_35 Validate Merchant Is Able To Process Payment Through Saved Payment Method' is designed to ensure that a merchant can successfully handle transactions by utilizing a customer's previously saved payment information. 

### Purpose:
1. **Verification of Functionality**: Confirm that the system allows merchants to process payments seamlessly using the saved payment methods of their customers, contributing to a smoother and faster checkout experience.
   
2. **Customer Experience**: Ensure that customers are able to make payments using their saved details without encountering errors, thus enhancing user satisfaction and convenience.

3. **Security Validation**: Check that the process of using saved payment methods adheres to security protocols, ensuring sensitive information is handled and stored securely.

4. **System Reliability**: Validate"
Generate data-driven clientcentral_testcases for customers Testcases TC_36 Validate Merchant Is Able To Delete Saved Payment Details,data-driven,TC_36 Validate Merchant Is Able To Delete Saved Payment Details,"*** Settings ***
Documentation    Validate TC_36 Validate Merchant Is Able To Delete Saved Payment Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_36 Validate Merchant Is Able To Delete Saved Payment Details
    [Documentation]    Validate TC_36 Validate Merchant Is Able To Delete Saved Payment Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Process Payment To Save Payment Method    ${ACH / eCheck}    ${ACH_ECHECK_DETAILS}    ${nan}    
    Navigate To Saved Payments Tab    ${nan}    ${nan}    ${nan}    
    Delete Saved Payment Details    ${nan}    ${nan}    ${nan}    
    Validate Saved Payment Details Is Deleted    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Process Payment To Save Payment Method
    [Arguments]    ${ACH / eCheck}    ${ACH_ECHECK_DETAILS}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${ACH_ECHECK_DETAILS}    ${nan}

Navigate To Saved Payments Tab
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Delete Saved Payment Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Saved Payment Details Is Deleted
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","Test Case ""TC_36 Validate Merchant Is Able To Delete Saved Payment Details"" aims to verify that a merchant can successfully remove previously saved payment information from their account. The purpose of this test is to ensure that the functionality for deleting saved payment methods works as expected and adheres to any relevant security and user experience guidelines.

Key objectives include:

1. Confirming the presence of an option or feature to delete saved payment details within the merchant's account settings or payment methods management section.
2. Ensuring the deletion process is straightforward and intuitive, providing clear instructions or prompts.
3. Verifying that the system correctly updates the merchant's account after deletion, reflecting that the payment details have been removed.
4. Making sure that any confirmation messages or notifications are"
Create data-driven clientcentral_testcases for customers Testcases TC_37 Validate Merchant Is Able To Navigate To Invoices Tab And View Open Invoices,data-driven,TC_37 Validate Merchant Is Able To Navigate To Invoices Tab And View Open Invoices,"*** Settings ***
Documentation    Validate TC_37 Validate Merchant Is Able To Navigate To Invoices Tab And View Open Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_37 Validate Merchant Is Able To Navigate To Invoices Tab And View Open Invoices
    [Documentation]    Validate TC_37 Validate Merchant Is Able To Navigate To Invoices Tab And View Open Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Validate Invoices Tab    ${Invoice Number}    ${nan}    ${nan}    
    Select Invoices Option    ${Only Open}    ${nan}    ${nan}    
    Validate Open Invoice Is Displayed    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Validate Invoices Tab
    [Arguments]    ${Invoice Number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Invoice Number}    ${nan}    ${nan}

Select Invoices Option
    [Arguments]    ${Only Open}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Only Open}    ${nan}    ${nan}

Validate Open Invoice Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","**Test Case Summary for 'TC_37 Validate Merchant Is Able To Navigate To Invoices Tab And View Open Invoices'**

**Purpose:**

The primary objective of test case TC_37 is to verify that a merchant can effectively access the 'Invoices' tab within the provided system (likely a web application or software) and view any open invoices listed under this section. This test case falls under functional testing and is crucial for ensuring the correct operation of the invoicing features, which are central to merchant account management and financial tracking.

**Key Goals:**

1. **Navigation Verification**: To ensure that merchants can successfully navigate from the main interface or dashboard of the application to the 'Invoices' tab without encountering any issues such as missing links/buttons"
Generate data-driven clientcentral_testcases for customers Testcases TC_38 Validate Merchant Is Able To View Only Past Due Invoices,data-driven,TC_38 Validate Merchant Is Able To View Only Past Due Invoices,"*** Settings ***
Documentation    Validate TC_38 Validate Merchant Is Able To View Only Past Due Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_38 Validate Merchant Is Able To View Only Past Due Invoices
    [Documentation]    Validate TC_38 Validate Merchant Is Able To View Only Past Due Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${1}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Select Invoices Option    ${Only Past Due}    ${nan}    ${nan}    
    Validate The Only Past Due Date Invoices    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${1}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Select Invoices Option
    [Arguments]    ${Only Past Due}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Only Past Due}    ${nan}    ${nan}

Validate The Only Past Due Date Invoices
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","Test Case 'TC_38 Validate Merchant Is Able To View Only Past Due Invoices'

**Purpose:**

The primary objective of this test case is to ensure that the system correctly restricts a merchant's view to include only those invoices that are past due. This involves confirming that:

1. The system correctly identifies which invoices are past due based on their due dates.
2. The interface displays only these past due invoices to the merchant, and no other invoices.
3. The filtering mechanism works as intended, providing a clear and accurate representation of outstanding debts for the merchant to address.

By validating this functionality, the test ensures that merchants are better informed of their overdue payments, enabling them to take timely action to settle their accounts, thus improving financial management"
Create data-driven clientcentral_testcases for customers Testcases TC_39 Validate Merchant Is Able To Navigate To Invoice Page From Invoice Tab,data-driven,TC_39 Validate Merchant Is Able To Navigate To Invoice Page From Invoice Tab,"*** Settings ***
Documentation    Validate TC_39 Validate Merchant Is Able To Navigate To Invoice Page From Invoice Tab
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_39 Validate Merchant Is Able To Navigate To Invoice Page From Invoice Tab
    [Documentation]    Validate TC_39 Validate Merchant Is Able To Navigate To Invoice Page From Invoice Tab using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Navigate To Invoice Details Page From Invoices Tab    ${invoice_number}    ${nan}    ${nan}    
    Validate Invoice Details Page Is Displayed    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Navigate To Invoice Details Page From Invoices Tab
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Validate Invoice Details Page Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","Test Case 'TC_39: Validate Merchant Is Able To Navigate To Invoice Page From Invoice Tab' aims to verify that a merchant (user with appropriate permissions) can successfully navigate to the 'Invoice Page' using the 'Invoice Tab' in the application's user interface. The purpose of this test is to ensure that the navigation functionality works as expected and that the merchant can access the invoice-related features and information without encountering any errors or issues. This is critical for the seamless operation of the billing and invoicing processes in the application's workflow. The test case assesses the accessibility and usability of the 'Invoice Page' link or button within the 'Invoice Tab,' helping to confirm that the user interface is intuitive and functional for end users such as merchants."
Create data-driven clientcentral_testcases for customers Testcases TC_40 Validate Merchant Is Able To Navigate To Invoice Delivery Tab,data-driven,TC_40 Validate Merchant Is Able To Navigate To Invoice Delivery Tab,"*** Settings ***
Documentation    Validate TC_40 Validate Merchant Is Able To Navigate To Invoice Delivery Tab
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_40 Validate Merchant Is Able To Navigate To Invoice Delivery Tab
    [Documentation]    Validate TC_40 Validate Merchant Is Able To Navigate To Invoice Delivery Tab using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoice Delivery}    ${nan}    ${nan}    
    Validate The Invoice Delivery Tab Is Displayed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoice Delivery}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoice Delivery}    ${nan}    ${nan}

Validate The Invoice Delivery Tab Is Displayed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_40 Validate Merchant Is Able To Navigate To Invoice Delivery Tab' aims to verify that a merchant can successfully access the Invoice Delivery tab within the application or software platform being tested. The primary purpose of this test is to ensure that the navigation functionality to the Invoice Delivery section is working as intended. This involves confirming:

1. The presence of an accessible and clickable link or button that leads to the Invoice Delivery tab.
2. Proper loading and display of the Invoice Delivery tab content upon navigation.
3. Verification of any UI elements, labels, and functional components present in the Invoice Delivery tab to confirm they are rendered correctly.

The successful execution of this test case ensures that merchants can reach the specific section where they manage or view invoice delivery"
Build data-driven clientcentral_testcases for customers Testcases TC_41 Validate Merchant Is Able To Change Data Range After Selecting All For Time Peroid Select Invoices,data-driven,TC_41 Validate Merchant Is Able To Change Data Range After Selecting All For Time Peroid Select Invoices,"*** Settings ***
Documentation    Validate TC_41 Validate Merchant Is Able To Change Data Range After Selecting All For Time Peroid Select Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_41 Validate Merchant Is Able To Change Data Range After Selecting All For Time Peroid Select Invoices
    [Documentation]    Validate TC_41 Validate Merchant Is Able To Change Data Range After Selecting All For Time Peroid Select Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${1}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Select Invoices Option    ${All For Time Period Selected}    ${nan}    ${nan}    
    Validate The All For Time Period Selected    ${invoice_number}    ${nan}    ${nan}    
    Select Custom Date Range From Calendar    ${today-3}    ${today}    ${nan}    
    Validate Selected Date Is Displayed In Date Range    ${today-3}    ${today}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${1}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Select Invoices Option
    [Arguments]    ${All For Time Period Selected}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${All For Time Period Selected}    ${nan}    ${nan}

Validate The All For Time Period Selected
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Select Custom Date Range From Calendar
    [Arguments]    ${today-3}    ${today}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${today-3}    ${today}    ${nan}

Validate Selected Date Is Displayed In Date Range
    [Arguments]    ${today-3}    ${today}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${today-3}    ${today}    ${nan}

","The test case ""TC_41 Validate Merchant Is Able To Change Data Range After Selecting All For Time Period Select Invoices"" is designed to verify that the merchant can successfully modify the date range for viewing invoices even after choosing the ""All"" option under the time period selection. 

**Purpose:**
To ensure the system's flexibility and functionality by allowing users to refine their view of invoices by specific dates even after initially opting to see all invoices. This test case assesses whether the UI and backend support this change seamlessly without errors, thereby enhancing user experience by providing them the freedom to filter data as per their needs dynamically. 

**Key Steps:**
1. Navigate to the invoice section where the merchant can view invoices.
2. Select the ""All"""
Create data-driven clientcentral_testcases for customers Testcases TC_42 Validate Merchant Is Able To Disable Send Email Receipt,data-driven,TC_42 Validate Merchant Is Able To Disable Send Email Receipt,"*** Settings ***
Documentation    Validate TC_42 Validate Merchant Is Able To Disable Send Email Receipt
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_42 Validate Merchant Is Able To Disable Send Email Receipt
    [Documentation]    Validate TC_42 Validate Merchant Is Able To Disable Send Email Receipt using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Select Country In Virtual Terminal    ${United States}    ${nan}    ${nan}    
    Disable Send Email Receipt    ${nan}    ${nan}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Select Specific Invoice Checkbox    ${nan}    ${nan}    ${nan}    
    Edit Amount To Pay    ${10}    ${nan}    ${nan}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}    
    Enter ACH/Echeck Details    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}    
    Process Payment    ${nan}    ${nan}    ${nan}    
    Validate Send Email Receipt Is Disabled    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Select Country In Virtual Terminal
    [Arguments]    ${United States}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${United States}    ${nan}    ${nan}

Disable Send Email Receipt
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Select Specific Invoice Checkbox
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Edit Amount To Pay
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter ACH/Echeck Details
    [Arguments]    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}

Process Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Send Email Receipt Is Disabled
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case ""TC_42 Validate Merchant Is Able To Disable Send Email Receipt"" aims to verify that a merchant using a specific system or application can successfully disable the option to send email receipts to customers. The purpose of this test case is to ensure that merchants have control over the email receipt functionality and can opt to turn off this feature as needed. This could be important for merchants looking to streamline their customer communication processes, adhere to privacy policies, or for any other business-specific reasons. The test will confirm that when the merchant disables this setting, no email receipts are sent to customers for their transactions, thereby validating that the feature works as intended."
Validate data-driven clientcentral_testcases for customers Testcases TC_43 Validate Merchant Is Able To Send Email Receipt In Virtual Terminal,data-driven,TC_43 Validate Merchant Is Able To Send Email Receipt In Virtual Terminal,"*** Settings ***
Documentation    Validate TC_43 Validate Merchant Is Able To Send Email Receipt In Virtual Terminal
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_43 Validate Merchant Is Able To Send Email Receipt In Virtual Terminal
    [Documentation]    Validate TC_43 Validate Merchant Is Able To Send Email Receipt In Virtual Terminal using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Select Country In Virtual Terminal    ${United States}    ${nan}    ${nan}    
    Edit Email In Virtual Terminal    ${corpsdt@gmail.com}    ${nan}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Select Specific Invoice Checkbox    ${nan}    ${nan}    ${nan}    
    Edit Amount To Pay    ${10}    ${nan}    ${nan}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}    
    Enter ACH/Echeck Details    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}    
    Process Payment    ${nan}    ${nan}    ${nan}    
    Get Transaction ID In Virtual Terminal    ${nan}    ${nan}    ${nan}    
    Validate Transaction Receipt Is Received In Email    ${transaction_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Select Country In Virtual Terminal
    [Arguments]    ${United States}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${United States}    ${nan}    ${nan}

Edit Email In Virtual Terminal
    [Arguments]    ${corpsdt@gmail.com}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${corpsdt@gmail.com}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Select Specific Invoice Checkbox
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Edit Amount To Pay
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter ACH/Echeck Details
    [Arguments]    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}

Process Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Get Transaction ID In Virtual Terminal
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Transaction Receipt Is Received In Email
    [Arguments]    ${transaction_id}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${transaction_id}    ${nan}    ${nan}

","The test case ""TC_43 Validate Merchant Is Able To Send Email Receipt In Virtual Terminal"" aims to ensure that merchants using a virtual terminal can successfully send email receipts to customers after a transaction. The purpose of this test is to verify the functionality and reliability of the email receipt feature within the virtual terminal system. This involves checking that the email receipt is generated accurately, contains all necessary transaction details, and is delivered promptly to the customer's provided email address. The successful validation of this test case confirms that merchants have the capability to provide digital transaction records to their customers, enhancing operational efficiency and customer satisfaction."
Validate data-driven clientcentral_testcases for customers Testcases TC_44 Validate Merchant Is Able To get Error Message When Process Payment Without Selecting Country,data-driven,TC_44 Validate Merchant Is Able To get Error Message When Process Payment Without Selecting Country,"*** Settings ***
Documentation    Validate TC_44 Validate Merchant Is Able To get Error Message When Process Payment Without Selecting Country
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_44 Validate Merchant Is Able To get Error Message When Process Payment Without Selecting Country
    [Documentation]    Validate TC_44 Validate Merchant Is Able To get Error Message When Process Payment Without Selecting Country using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Select Specific Invoice Checkbox    ${nan}    ${nan}    ${nan}    
    Edit Amount To Pay    ${10}    ${nan}    ${nan}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}    
    Enter ACH/Echeck Details    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}    
    Process Payment For Error Message    ${nan}    ${nan}    ${nan}    
    Validate Error Message In Virtual Terminal    ${The billing state specified (OH) is not valid for the country United States}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Select Specific Invoice Checkbox
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Edit Amount To Pay
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter ACH/Echeck Details
    [Arguments]    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}

Process Payment For Error Message
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Error Message In Virtual Terminal
    [Arguments]    ${The billing state specified (OH) is not valid for the country United States}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${The billing state specified (OH) is not valid for the country United States}    ${nan}    ${nan}

",The test case 'TC_44 Validate Merchant Is Able To Get Error Message When Process Payment Without Selecting Country' is designed to ensure that the payment processing system correctly handles scenarios where a merchant tries to initiate a payment transaction without specifying the country. The primary purpose of this test case is to verify that the system enforces the requirement of selecting a country and provides an appropriate error message when this mandatory input is missing. This helps in maintaining data integrity and ensuring proper localization and compliance with regulatory standards. The end goal is to confirm that the user experience is intuitive and that error handling mechanisms are effectively guiding merchants to provide all necessary information before processing payments.
Validate data-driven clientcentral_testcases for customers Testcases TC_45 Validate Merchant Is Able To View Error Message When Process Payment Without Entering Amount,data-driven,TC_45 Validate Merchant Is Able To View Error Message When Process Payment Without Entering Amount,"*** Settings ***
Documentation    Validate TC_45 Validate Merchant Is Able To View Error Message When Process Payment Without Entering Amount
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_45 Validate Merchant Is Able To View Error Message When Process Payment Without Entering Amount
    [Documentation]    Validate TC_45 Validate Merchant Is Able To View Error Message When Process Payment Without Entering Amount using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Select Country In Virtual Terminal    ${United States}    ${nan}    ${nan}    
    Select Payment Type    ${Apply To Oldest}    ${nan}    ${nan}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}    
    Enter ACH/Echeck Details    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}    
    Process Payment For Error Message    ${nan}    ${nan}    ${nan}    
    Validate Error Message In Virtual Terminal    ${Amount field should not be empty}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Select Country In Virtual Terminal
    [Arguments]    ${United States}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${United States}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Apply To Oldest}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Apply To Oldest}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter ACH/Echeck Details
    [Arguments]    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}

Process Payment For Error Message
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Error Message In Virtual Terminal
    [Arguments]    ${Amount field should not be empty}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Amount field should not be empty}    ${nan}    ${nan}

","The test case 'TC_45 Validate Merchant Is Able To View Error Message When Process Payment Without Entering Amount' is designed to verify that the payment processing system for a merchant displays an appropriate error message when an attempt is made to process a payment without specifying an amount. The primary purpose of this test is to ensure that the system correctly handles user input validation by preventing transactions without a specified amount, which could lead to errors in the payment flow or financial discrepancies. This validation helps maintain the integrity and reliability of the payment processing system, ensuring that merchants are always required to enter a valid amount to proceed with transactions."
Build data-driven clientcentral_testcases for customers Testcases TC_46 Validate Merchant Is Able To Resend Receipt With Valid Email id In virtual Terminal,data-driven,TC_46 Validate Merchant Is Able To Resend Receipt With Valid Email id In virtual Terminal,"*** Settings ***
Documentation    Validate TC_46 Validate Merchant Is Able To Resend Receipt With Valid Email id In virtual Terminal
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_46 Validate Merchant Is Able To Resend Receipt With Valid Email id In virtual Terminal
    [Documentation]    Validate TC_46 Validate Merchant Is Able To Resend Receipt With Valid Email id In virtual Terminal using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Select Country In Virtual Terminal    ${United States}    ${nan}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Select Specific Invoice Checkbox    ${nan}    ${nan}    ${nan}    
    Edit Amount To Pay    ${10}    ${nan}    ${nan}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}    
    Enter ACH/Echeck Details    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}    
    Process Payment    ${nan}    ${nan}    ${nan}    
    Navigate To Resend Receipt Page    ${nan}    ${nan}    ${nan}    
    Enter Email Address In Resend Receipt Page    ${EMAIL}    ${nan}    ${nan}    
    Get Transaction ID In Virtual Terminal    ${nan}    ${nan}    ${nan}    
    Validate Transaction Receipt Is Received In Email    ${transaction_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Select Country In Virtual Terminal
    [Arguments]    ${United States}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${United States}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Select Specific Invoice Checkbox
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Edit Amount To Pay
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter ACH/Echeck Details
    [Arguments]    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}

Process Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Navigate To Resend Receipt Page
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Enter Email Address In Resend Receipt Page
    [Arguments]    ${EMAIL}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${nan}    ${nan}

Get Transaction ID In Virtual Terminal
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Transaction Receipt Is Received In Email
    [Arguments]    ${transaction_id}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${transaction_id}    ${nan}    ${nan}

","Test Case 'TC_46 Validate Merchant Is Able To Resend Receipt With Valid Email ID in Virtual Terminal' is designed to ensure that the merchant has the capability to resend a transaction receipt via email to a customer using the virtual terminal. 

### Purpose:
1. **Functionality Verification**: To confirm that the system allows merchants to send a receipt to the customer's email when a valid email address is provided.
   
2. **Operational Validation**: To ensure the electronic receipt resend feature works as expected under normal operational conditions in the virtual terminal.

### Steps Involved:
1. **Pre-requisite**: Ensure that a transaction has already been processed through the virtual terminal and an initial receipt has been sent.
2. **Action**: Merchant accesses"
Validate data-driven clientcentral_testcases for customers Testcases TC_47 Validate Merchant Is Able To Cancel Resend Receipt,data-driven,TC_47 Validate Merchant Is Able To Cancel Resend Receipt,"*** Settings ***
Documentation    Validate TC_47 Validate Merchant Is Able To Cancel Resend Receipt
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_47 Validate Merchant Is Able To Cancel Resend Receipt
    [Documentation]    Validate TC_47 Validate Merchant Is Able To Cancel Resend Receipt using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Select Country In Virtual Terminal    ${United States}    ${nan}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Select Specific Invoice Checkbox    ${nan}    ${nan}    ${nan}    
    Edit Amount To Pay    ${10}    ${nan}    ${nan}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}    
    Enter ACH/Echeck Details    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}    
    Process Payment    ${nan}    ${nan}    ${nan}    
    Navigate To Resend Receipt Page    ${nan}    ${nan}    ${nan}    
    Cancel Resend Receipt    ${nan}    ${nan}    ${nan}    
    Validate Resend Receipt Is Cancelled    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Select Country In Virtual Terminal
    [Arguments]    ${United States}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${United States}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Select Specific Invoice Checkbox
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Edit Amount To Pay
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter ACH/Echeck Details
    [Arguments]    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}

Process Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Navigate To Resend Receipt Page
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Cancel Resend Receipt
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Resend Receipt Is Cancelled
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case titled 'TC_47 Validate Merchant Is Able To Cancel Resend Receipt' aims to verify that a merchant using a payment processing system can successfully cancel the action of resending a receipt to a customer. The primary purpose of this test is to ensure that merchants have the flexibility to halt the process of resending a receipt, which could be necessary in situations such as accidental initiation of a resend request, updates to the receipt information, or any other reason where resending the receipt is no longer desired. Successfully passing this test case confirms that the system is built with user control in mind and helps prevent unnecessary or erroneous communications with customers."
Create data-driven clientcentral_testcases for customers Testcases TC_48 Validate Merchant Is Able To Send A Copy Email Receipt In virtual Terminal,data-driven,TC_48 Validate Merchant Is Able To Send A Copy Email Receipt In virtual Terminal,"*** Settings ***
Documentation    Validate TC_48 Validate Merchant Is Able To Send A Copy Email Receipt In virtual Terminal
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_48 Validate Merchant Is Able To Send A Copy Email Receipt In virtual Terminal
    [Documentation]    Validate TC_48 Validate Merchant Is Able To Send A Copy Email Receipt In virtual Terminal using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Select Country In Virtual Terminal    ${United States}    ${nan}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Select Specific Invoice Checkbox    ${nan}    ${nan}    ${nan}    
    Edit Amount To Pay    ${10}    ${nan}    ${nan}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}    
    Enter ACH/Echeck Details    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}    
    Process Payment    ${nan}    ${nan}    ${nan}    
    Navigate To Resend Receipt Page    ${nan}    ${nan}    ${nan}    
    Send Copy Of Receipt    ${EMAIL}    ${sdtcorp@gmail.com}    ${nan}    
    Get Transaction ID In Virtual Terminal    ${nan}    ${nan}    ${nan}    
    Validate Transaction Receipt Is Received In Email    ${transaction_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Select Country In Virtual Terminal
    [Arguments]    ${United States}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${United States}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Select Specific Invoice Checkbox
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Edit Amount To Pay
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter ACH/Echeck Details
    [Arguments]    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}

Process Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Navigate To Resend Receipt Page
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Copy Of Receipt
    [Arguments]    ${EMAIL}    ${sdtcorp@gmail.com}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${sdtcorp@gmail.com}    ${nan}

Get Transaction ID In Virtual Terminal
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Transaction Receipt Is Received In Email
    [Arguments]    ${transaction_id}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${transaction_id}    ${nan}    ${nan}

","### Test Case Summary: TC_48 - Validate Merchant Is Able To Send A Copy Email Receipt in Virtual Terminal

**Purpose:**

This test case is designed to verify that a merchant using the virtual terminal functionality of a payment processing system can successfully send a copy of an email receipt to a customer after completing a transaction. This feature is critical for merchants who need to provide immediate proof of purchase to customers electronically.

**Objectives:**

1. **Ensure Seamless Transaction Completion:** Confirm that the transaction process via the virtual terminal completes without errors.
2. **Verify Email Functionality:** Validate that the system correctly sends an email receipt to the customer's provided email address.
3. **Check Email Accuracy:** Ensure that the email receipt contains accurate and complete details of"
Validate data-driven clientcentral_testcases for customers Testcases TC_49 Validate Merchant Is Able Close Transaction Confirmation Page,data-driven,TC_49 Validate Merchant Is Able Close Transaction Confirmation Page,"*** Settings ***
Documentation    Validate TC_49 Validate Merchant Is Able Close Transaction Confirmation Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_49 Validate Merchant Is Able Close Transaction Confirmation Page
    [Documentation]    Validate TC_49 Validate Merchant Is Able Close Transaction Confirmation Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Select Country In Virtual Terminal    ${United States}    ${nan}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Select Specific Invoice Checkbox    ${nan}    ${nan}    ${nan}    
    Edit Amount To Pay    ${10}    ${nan}    ${nan}    
    Select Payment Method    ${ACH / eCheck}    ${nan}    ${nan}    
    Enter ACH/Echeck Details    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}    
    Process Payment    ${nan}    ${nan}    ${nan}    
    Close Transaction Confirmation Page    ${nan}    ${nan}    ${nan}    
    Validate Transaction Confirmation Page Is Closed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Select Country In Virtual Terminal
    [Arguments]    ${United States}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${United States}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Select Specific Invoice Checkbox
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Edit Amount To Pay
    [Arguments]    ${10}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${10}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${ACH / eCheck}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${ACH / eCheck}    ${nan}    ${nan}

Enter ACH/Echeck Details
    [Arguments]    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Business Checking}    ${111111111}    ${ACH_ECHECK_DETAILS}

Process Payment
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Close Transaction Confirmation Page
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Transaction Confirmation Page Is Closed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","### Summary: TC_49 Validate Merchant Is Able to Close Transaction Confirmation Page

**Purpose:**

The purpose of test case TC_49 is to ensure that merchants have the ability to close the transaction confirmation page effectively after a transaction has been completed. This functionality is crucial for user experience and workflow efficiency, allowing the merchant to seamlessly continue their operations without unnecessary delays or steps. 

**Objective:**

1. **Verify the Availability of the Close Button:** The test aims to check if a clearly visible and accessible close button or similar feature is present on the transaction confirmation page.

2. **Functionality Testing:** Ensure that clicking the close button successfully exits the transaction confirmation page and takes the merchant back to the previous interface or dashboard as expected.

3."
Generate data-driven clientcentral_testcases for customers Testcases TC_50 Validate Merchant Is Able To Navigate To Resent Invoice Tab,data-driven,TC_50 Validate Merchant Is Able To Navigate To Resent Invoice Tab,"*** Settings ***
Documentation    Validate TC_50 Validate Merchant Is Able To Navigate To Resent Invoice Tab
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_50 Validate Merchant Is Able To Navigate To Resent Invoice Tab
    [Documentation]    Validate TC_50 Validate Merchant Is Able To Navigate To Resent Invoice Tab using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${1}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Resent Invoices}    ${nan}    ${nan}    
    Validate The Resent Invoices Tab Is Displayed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${1}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Resent Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Resent Invoices}    ${nan}    ${nan}

Validate The Resent Invoices Tab Is Displayed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The purpose of the test case 'TC_50 Validate Merchant Is Able To Navigate To Recent Invoice Tab' is to ensure that a merchant within an application can successfully access the 'Recent Invoice' tab from the main interface. This test case aims to verify that the navigation feature works as intended, allowing merchants to view their recent invoices without encountering any errors or issues. By validating this functionality, the test case helps to confirm that the user interface and navigational controls are properly implemented and user-friendly, contributing to a seamless user experience for merchants managing their invoices."
Generate data-driven clientcentral_testcases for customers Testcases TC_51 Validate Merchant Is Able To Add Record,data-driven,TC_51 Validate Merchant Is Able To Add Record,"*** Settings ***
Documentation    Validate TC_51 Validate Merchant Is Able To Add Record
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_51 Validate Merchant Is Able To Add Record
    [Documentation]    Validate TC_51 Validate Merchant Is Able To Add Record using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Customer Settings}    ${nan}    ${nan}    
    Navigate To Tab In Customer Settings    ${Email Settings}    ${nan}    ${nan}    
    Select Document Type    ${Invoice}    ${nan}    ${nan}    
    Enter Email And Select Email Type From CC List    ${EMAIL}    ${<contact_id>}    ${nan}    
    Enter Email And Select Email Type From BCC List    ${abc@gmail.com}    ${<customer_user>}    ${nan}    
    Save Record    ${nan}    ${nan}    ${nan}    
    Validate Saved Record Is Displayed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Customer Settings}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customer Settings}    ${nan}    ${nan}

Navigate To Tab In Customer Settings
    [Arguments]    ${Email Settings}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Email Settings}    ${nan}    ${nan}

Select Document Type
    [Arguments]    ${Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoice}    ${nan}    ${nan}

Enter Email And Select Email Type From CC List
    [Arguments]    ${EMAIL}    ${<contact_id>}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${<contact_id>}    ${nan}

Enter Email And Select Email Type From BCC List
    [Arguments]    ${abc@gmail.com}    ${<customer_user>}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${abc@gmail.com}    ${<customer_user>}    ${nan}

Save Record
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Saved Record Is Displayed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_51 Validate Merchant Is Able To Add Record' is designed to verify the functionality that allows a merchant to add a new record within a system or application. The purpose of this test case is to ensure that the merchant has the appropriate permissions and that the process for adding a record works correctly, without errors. This includes verifying inputs such as mandatory fields, data formats, and any backend processes like database updates. Successful execution demonstrates that the system facilitates record additions as expected and maintains data integrity, which is crucial for the merchant's operational requirements."
Build data-driven clientcentral_testcases for customers Testcases TC_52 Validate Merchant Is Able To Prevent Override,data-driven,TC_52 Validate Merchant Is Able To Prevent Override,"*** Settings ***
Documentation    Validate TC_52 Validate Merchant Is Able To Prevent Override
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_52 Validate Merchant Is Able To Prevent Override
    [Documentation]    Validate TC_52 Validate Merchant Is Able To Prevent Override using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Customer Settings}    ${nan}    ${nan}    
    Navigate To Tab In Customer Settings    ${Email Settings}    ${nan}    ${nan}    
    Select Document Type    ${Invoice}    ${nan}    ${nan}    
    Enter Email And Select Email Type From CC List    ${EMAIL}    ${contact_id}    ${nan}    
    Enter Email And Select Email Type From BCC List    ${EMAIL}    ${customer_user}    ${nan}    
    Enable Prevent Override    ${nan}    ${nan}    ${nan}    
    Save Record    ${nan}    ${nan}    ${nan}    
    Validate Prevent Override Is Displayed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Customer Settings}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customer Settings}    ${nan}    ${nan}

Navigate To Tab In Customer Settings
    [Arguments]    ${Email Settings}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Email Settings}    ${nan}    ${nan}

Select Document Type
    [Arguments]    ${Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoice}    ${nan}    ${nan}

Enter Email And Select Email Type From CC List
    [Arguments]    ${EMAIL}    ${contact_id}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${contact_id}    ${nan}

Enter Email And Select Email Type From BCC List
    [Arguments]    ${EMAIL}    ${customer_user}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${customer_user}    ${nan}

Enable Prevent Override
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Save Record
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Prevent Override Is Displayed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_52 Validate Merchant Is Able To Prevent Override' aims to verify that a merchant has the capability to block or override certain unauthorized actions or transactions within their system. The main purpose of this test case is to ensure that the security and control mechanisms in place for the merchant's platform effectively prevent any attempts to compromise, bypass, or override predefined rules and restrictions. 

Key aspects include the validation of:

1. **Security Controls**: Ensuring that the system's security measures are robust and can prevent unauthorized overrides.
2. **Authorization Mechanisms**: Verifying that only authorized personnel or roles have the ability to make changes to system configurations or settings that could affect transaction processing.
3. **System Integrity**: Checking that the"
Create data-driven clientcentral_testcases for customers Testcases TC_53 Validate Merchant Is Able To Edit Record,data-driven,TC_53 Validate Merchant Is Able To Edit Record,"*** Settings ***
Documentation    Validate TC_53 Validate Merchant Is Able To Edit Record
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_53 Validate Merchant Is Able To Edit Record
    [Documentation]    Validate TC_53 Validate Merchant Is Able To Edit Record using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Customer Settings}    ${nan}    ${nan}    
    Navigate To Tab In Customer Settings    ${Email Settings}    ${nan}    ${nan}    
    Add New Record    ${abddt@gmail.com}    ${abc@gmail.com}    ${contact_id}    
    Edit Record    ${EMAIL}    ${nan}    ${nan}    
    Validate Updated Record Is Displayed    ${EMAIL}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Customer Settings}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customer Settings}    ${nan}    ${nan}

Navigate To Tab In Customer Settings
    [Arguments]    ${Email Settings}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Email Settings}    ${nan}    ${nan}

Add New Record
    [Arguments]    ${abddt@gmail.com}    ${abc@gmail.com}    ${contact_id}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${abddt@gmail.com}    ${abc@gmail.com}    ${contact_id}

Edit Record
    [Arguments]    ${EMAIL}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${nan}    ${nan}

Validate Updated Record Is Displayed
    [Arguments]    ${EMAIL}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${nan}    ${nan}

","The purpose of the test case 'TC_53 Validate Merchant Is Able To Edit Record' is to ensure that a merchant user has the ability to successfully edit an existing record within a system. This test case aims to verify several key aspects of the record-editing functionality:

1. **Access and Navigation**: Confirm that the merchant can access the record that requires editing, which involves navigating through the appropriate menus or modules in the system.

2. **Edit Capabilities**: Validate that all editable fields within the record can be modified and that the merchant can input valid data into these fields.

3. **Form Submission**: Ensure that after making the necessary changes, the merchant is able to successfully submit the form to save the edited record.

4."
Generate data-driven clientcentral_testcases for customers Testcases TC_54 Validate Merchant Is Able To View Invoice Data With Date Filter In Virtual Terminal,data-driven,TC_54 Validate Merchant Is Able To View Invoice Data With Date Filter In Virtual Terminal,"*** Settings ***
Documentation    Validate TC_54 Validate Merchant Is Able To View Invoice Data With Date Filter In Virtual Terminal
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_54 Validate Merchant Is Able To View Invoice Data With Date Filter In Virtual Terminal
    [Documentation]    Validate TC_54 Validate Merchant Is Able To View Invoice Data With Date Filter In Virtual Terminal using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${1}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Filter With Invoice Due Date    ${today-2}    ${nan}    ${nan}    
    Validate Due Date Invoice Is Displayed    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${1}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Filter With Invoice Due Date
    [Arguments]    ${today-2}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${today-2}    ${nan}    ${nan}

Validate Due Date Invoice Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","The test case 'TC_54 Validate Merchant Is Able To View Invoice Data With Date Filter In Virtual Terminal' is designed to verify that as a merchant, the functionality within their Virtual Terminal allows for the filtering and viewing of invoice data based on specific date ranges. The purpose of this test case is to ensure that the date filter feature operates correctly, enabling merchants to efficiently sort and access invoice records within the selected time frame. This functionality is critical for financial tracking, reporting, and reconciliation purposes, ensuring that merchants have precise control over the visibility of their transactional data based on date-based criteria."
Build data-driven clientcentral_testcases for customers Testcases TC_55 Validate Merchant Is Able To Select All Invoices In Virtual Terminal Tab,data-driven,TC_55 Validate Merchant Is Able To Select All Invoices In Virtual Terminal Tab,"*** Settings ***
Documentation    Validate TC_55 Validate Merchant Is Able To Select All Invoices In Virtual Terminal Tab
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_55 Validate Merchant Is Able To Select All Invoices In Virtual Terminal Tab
    [Documentation]    Validate TC_55 Validate Merchant Is Able To Select All Invoices In Virtual Terminal Tab using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${1}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Virtual Terminal}    ${nan}    ${nan}    
    Select All Invoices Button    ${invoice_number}    ${nan}    ${nan}    
    Validate All Invoices Are Selected    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${1}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Select All Invoices Button
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Validate All Invoices Are Selected
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_55 Validate Merchant Is Able To Select All Invoices In Virtual Terminal Tab' aims to verify that a merchant has the capability to select multiple or all invoices within the Virtual Terminal interface of the payment processing system. This functionality is critical for enhancing the efficiency and convenience for merchants as it allows for bulk actions, such as processing payments or batch updates, to be performed on multiple invoices simultaneously rather than handling each invoice individually. Ensuring this feature works as expected enhances the user experience by saving time and reducing the potential for manual errors. The test case would typically involve steps to navigate to the Virtual Terminal tab, select all available invoices, and confirm that all intended actions are applied correctly to the selected invoices."
Generate data-driven clientcentral_testcases for customers Testcases TC_56 Validate Merchant Is Able To View Customer Information,data-driven,TC_56 Validate Merchant Is Able To View Customer Information,"*** Settings ***
Documentation    Validate TC_56 Validate Merchant Is Able To View Customer Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_56 Validate Merchant Is Able To View Customer Information
    [Documentation]    Validate TC_56 Validate Merchant Is Able To View Customer Information using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Customer Information}    ${nan}    ${nan}    
    Validate Billing Address And Contact Information    ${nan}    ${nan}    ${nan}    
    Validate Email Details    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Customer Information}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customer Information}    ${nan}    ${nan}

Validate Billing Address And Contact Information
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Email Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","**Test Case Title:** TC_56 Validate Merchant Is Able To View Customer Information

**Purpose:**
The primary purpose of this test case is to verify that merchants using the platform have the necessary permissions and access to view customer information successfully. This ensures that merchants can effectively manage their customer relationships, handle inquiries, and perform tasks such as order management, issue resolution, and personalized service. Confirming this capability is essential for maintaining a seamless user experience and operational efficiency within the merchant interface.

The specific objectives include:

1. **Access Validation:** Ensuring that merchants can navigate to the customer information section without encountering permission issues or access errors.
2. **Information Completeness:** Verifying that the customer data displayed is complete, accurate, and includes necessary details"
Build data-driven clientcentral_testcases for customers Testcases TC_57 Validate Merchant Is Able To View Surcharge Exempt In Customer Information,data-driven,TC_57 Validate Merchant Is Able To View Surcharge Exempt In Customer Information,"*** Settings ***
Documentation    Validate TC_57 Validate Merchant Is Able To View Surcharge Exempt In Customer Information
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_57 Validate Merchant Is Able To View Surcharge Exempt In Customer Information
    [Documentation]    Validate TC_57 Validate Merchant Is Able To View Surcharge Exempt In Customer Information using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Customer Settings}    ${nan}    ${nan}    
    Select Surcharge Exempt    ${True}    ${nan}    ${nan}    
    Validate Surcharge Exempt In Customer Information    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Customer Settings}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customer Settings}    ${nan}    ${nan}

Select Surcharge Exempt
    [Arguments]    ${True}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${True}    ${nan}    ${nan}

Validate Surcharge Exempt In Customer Information
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_57 Validate Merchant Is Able To View Surcharge Exempt In Customer Information' aims to verify that a merchant has the capability to view whether a customer is exempt from surcharges within the customer's information section of the merchant's system. The primary objectives of this test case include:

1. **Access Verification**: Ensure that the merchant can access customer information without any issues.
2. **Surcharge Exempt Field Visibility**: Confirm that there is a clear and visible indicator or field within the customer information that denotes whether the customer is exempt from surcharges.
3. **Accuracy of Information**: Validate that the information regarding surcharge exemption reflects the correct status for each customer.
4. **Security and Privacy**: Ensure that any"
Build data-driven clientcentral_testcases for customers Testcases TC_58 Validate Merchant Is Able To View On Credit Hold Customers,data-driven,TC_58 Validate Merchant Is Able To View On Credit Hold Customers,"*** Settings ***
Documentation    Validate TC_58 Validate Merchant Is Able To View On Credit Hold Customers
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_58 Validate Merchant Is Able To View On Credit Hold Customers
    [Documentation]    Validate TC_58 Validate Merchant Is Able To View On Credit Hold Customers using the following steps
Send Request To Create On Credit Hold Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Validate Credit Hold Message Is Displayed    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create On Credit Hold Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Validate Credit Hold Message Is Displayed
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","The test case 'TC_58 Validate Merchant Is Able To View On Credit Hold Customers' aims to verify that a merchant, using the system's interface, can successfully view a list or designation of customers who are currently on credit hold. 

Purpose:
1. **Access Verification**: Ensure that the merchant has the necessary permissions to access and view the 'on credit hold' customer data.
2. **User Interface Check**: Validate that the user interface presents the information in a clear, understandable manner, showing which customers are on credit hold.
3. **Data Accuracy**: Confirm that the displayed list accurately reflects the customers who have been flagged for credit hold status in the database.
4. **Navigation Efficiency**: Assure that the merchant can"
Build data-driven clientcentral_testcases for customers Testcases TC_59 Validate Merchant Is Unable To View Invoices In PayNOW When Disputed Is Enabled,data-driven,TC_59 Validate Merchant Is Unable To View Invoices In PayNOW When Disputed Is Enabled,"*** Settings ***
Documentation    Validate TC_59 Validate Merchant Is Unable To View Invoices In PayNOW When Disputed Is Enabled
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_59 Validate Merchant Is Unable To View Invoices In PayNOW When Disputed Is Enabled
    [Documentation]    Validate TC_59 Validate Merchant Is Unable To View Invoices In PayNOW When Disputed Is Enabled using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Disputed Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Validate Disputed Option Is Enabled    ${invoice_number}    ${Yes}    ${nan}    
    Validate Disputed Invoices Are Not Displayed In PayNOW    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Disputed Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Validate Disputed Option Is Enabled
    [Arguments]    ${invoice_number}    ${Yes}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${Yes}    ${nan}

Validate Disputed Invoices Are Not Displayed In PayNOW
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","### Summary of Test Case: TC_59 Validate Merchant Is Unable To View Invoices In PayNOW When Disputed Is Enabled

**Purpose:**
The primary goal of test case TC_59 is to verify that a merchant using the PayNOW system is restricted from viewing invoices once a dispute has been enabled on their account. This test ensures that the system correctly enforces view restrictions to prevent merchants from accessing disputed invoices, thereby maintaining the integrity and security of the dispute resolution process.

**Key Objectives:**
1. To confirm that disputed invoices are inaccessible to merchants.
2. To ensure that system behavior aligns with business rules regarding disputed transactions.
3. To validate the proper implementation of user access controls and permission settings in PayNOW.

**Testing Steps Overview"
Generate data-driven clientcentral_testcases for customers Testcases TC_60 Validate Merchant Is Able To View Invoices In PayNOW When Disputed Is Disabled,data-driven,TC_60 Validate Merchant Is Able To View Invoices In PayNOW When Disputed Is Disabled,"*** Settings ***
Documentation    Validate TC_60 Validate Merchant Is Able To View Invoices In PayNOW When Disputed Is Disabled
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_60 Validate Merchant Is Able To View Invoices In PayNOW When Disputed Is Disabled
    [Documentation]    Validate TC_60 Validate Merchant Is Able To View Invoices In PayNOW When Disputed Is Disabled using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Validate Disputed Option Is Enabled    ${invoice_number}    ${No}    ${nan}    
    Validate Disputed Invoices Are Displayed In PayNOW    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Validate Disputed Option Is Enabled
    [Arguments]    ${invoice_number}    ${No}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${No}    ${nan}

Validate Disputed Invoices Are Displayed In PayNOW
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","The test case 'TC_60 Validate Merchant Is Able To View Invoices In PayNOW When Disputed Is Disabled' sets out to verify that merchants can still access and view their invoices in the PayNOW system even when the dispute functionality is disabled. The primary objective of this test is to ensure that the visibility and accessibility of invoices are unaffected by the status of the dispute feature, thereby allowing merchants to manage their billing and payment information without impediment. This is crucial for maintaining operational continuity and ensuring that merchants always have access to their financial records."
Validate data-driven clientcentral_testcases for customers Testcases TC_61 Validate Merchant Is Able To View Average Invoice Age And Credit Limit In Customer Dashboard,data-driven,TC_61 Validate Merchant Is Able To View Average Invoice Age And Credit Limit In Customer Dashboard,"*** Settings ***
Documentation    Validate TC_61 Validate Merchant Is Able To View Average Invoice Age And Credit Limit In Customer Dashboard
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_61 Validate Merchant Is Able To View Average Invoice Age And Credit Limit In Customer Dashboard
    [Documentation]    Validate TC_61 Validate Merchant Is Able To View Average Invoice Age And Credit Limit In Customer Dashboard using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${1}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Validate Invoice Age Is Displayed    ${5}    ${nan}    ${nan}    
    Validate Credit Limit Is Displayed    ${$5,000.00}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${1}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Validate Invoice Age Is Displayed
    [Arguments]    ${5}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${5}    ${nan}    ${nan}

Validate Credit Limit Is Displayed
    [Arguments]    ${$5,000.00}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${$5,000.00}    ${nan}    ${nan}

","**Test Case: TC_61 - Validate Merchant Is Able To View Average Invoice Age And Credit Limit In Customer Dashboard**

**Purpose:**
The objective of this test case is to ensure that merchants can effectively view specific financial metrics, namely the average invoice age and the credit limit, within the customer dashboard of their system interface. 

**Context:**
Merchants need accessible and clear information regarding customer financials to make informed decisions about credit management and cash flow. The average invoice age helps in understanding payment patterns and potential delays, while the credit limit assists in determining how much credit can be extended to a customer.

**Key Points:**
1. **Accessibility**: The financial metrics should be easily accessible within the customer dashboard without any navigation complexities.
2"
Create data-driven clientcentral_testcases for customers Testcases TC_62 Validate Merchant Is Able To View Invoice Date And Due Date In Invoice Details Page,data-driven,TC_62 Validate Merchant Is Able To View Invoice Date And Due Date In Invoice Details Page,"*** Settings ***
Documentation    Validate TC_62 Validate Merchant Is Able To View Invoice Date And Due Date In Invoice Details Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_62 Validate Merchant Is Able To View Invoice Date And Due Date In Invoice Details Page
    [Documentation]    Validate TC_62 Validate Merchant Is Able To View Invoice Date And Due Date In Invoice Details Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${1}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Validate Invoice Date And Due Date Are Displayed    ${today-5}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${1}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Validate Invoice Date And Due Date Are Displayed
    [Arguments]    ${today-5}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${today-5}    ${nan}    ${nan}

","Test Case 'TC_62 Validate Merchant Is Able To View Invoice Date And Due Date In Invoice Details Page'

**Purpose:**

The primary objective of this test case is to ensure that a merchant can view both the Invoice Date and the Due Date on the Invoice Details Page. This is critical for merchants to track their billing cycles, financial record-keeping, and managing their accounts receivable. Proper display of these dates helps prevent misunderstandings or errors in financial transactions and enhances the overall user experience by providing clear and accurate information regarding invoice timelines. 

By validating this functionality, we aim to verify that:
1. The Invoice Date is accurately displayed on the Invoice Details Page.
2. The Due Date is accurately displayed and reflects the correct payment deadline.

This"
Generate data-driven clientcentral_testcases for customers Testcases TC_63 Validate Merchant Is Able To View Days Overdue And Due Amount In Invoice Details Page,data-driven,TC_63 Validate Merchant Is Able To View Days Overdue And Due Amount In Invoice Details Page,"*** Settings ***
Documentation    Validate TC_63 Validate Merchant Is Able To View Days Overdue And Due Amount In Invoice Details Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_63 Validate Merchant Is Able To View Days Overdue And Due Amount In Invoice Details Page
    [Documentation]    Validate TC_63 Validate Merchant Is Able To View Days Overdue And Due Amount In Invoice Details Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${1}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Validate Invoice Days Overdue And Due Amount    ${5}    ${$10.00}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${1}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Validate Invoice Days Overdue And Due Amount
    [Arguments]    ${5}    ${$10.00}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${5}    ${$10.00}    ${nan}

","The purpose of test case 'TC_63 Validate Merchant Is Able To View Days Overdue And Due Amount In Invoice Details Page' is to ensure that merchants using the system can clearly see important financial information pertaining to their invoices. This test specifically checks that the 'Days Overdue' and 'Due Amount' fields are accurately displayed and accessible on the Invoice Details Page.

By validating this functionality, the test case aims to confirm that:

1. The system correctly calculates and shows the number of days an invoice is overdue.
2. The correct amount due is visibly presented to the merchant.
3. This information is easily accessible and displayed in a user-friendly manner, helping merchants to manage their finances effectively and stay informed about their outstanding payments.

Overall, the test"
Build data-driven clientcentral_testcases for customers Testcases TC_64 Validate Merchant Is Able To View Email Clicked Date And Count In Email Details,data-driven,TC_64 Validate Merchant Is Able To View Email Clicked Date And Count In Email Details,"*** Settings ***
Documentation    Validate TC_64 Validate Merchant Is Able To View Email Clicked Date And Count In Email Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_64 Validate Merchant Is Able To View Email Clicked Date And Count In Email Details
    [Documentation]    Validate TC_64 Validate Merchant Is Able To View Email Clicked Date And Count In Email Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Select All Invoices    ${nan}    ${nan}    ${nan}    
    Send Mail For The Selected Invoice    ${EMAIL}    ${nan}    ${nan}    
    Open Paynow From Email    ${EMAIL}    ${EMAIL_PASSWORD}    ${TEST Invoice invoice_number from Sterling Cooper}    
    Select Tab In Customer Page    ${Email Details}    ${nan}    ${nan}    
    Validated Email Clicked Date And Count In Email Details    ${invoice_number}    ${1}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Select All Invoices
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Mail For The Selected Invoice
    [Arguments]    ${EMAIL}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${nan}    ${nan}

Open Paynow From Email
    [Arguments]    ${EMAIL}    ${EMAIL_PASSWORD}    ${TEST Invoice invoice_number from Sterling Cooper}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${EMAIL_PASSWORD}    ${TEST Invoice invoice_number from Sterling Cooper}

Select Tab In Customer Page
    [Arguments]    ${Email Details}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Email Details}    ${nan}    ${nan}

Validated Email Clicked Date And Count In Email Details
    [Arguments]    ${invoice_number}    ${1}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${1}    ${nan}

","The test case ""TC_64 Validate Merchant Is Able To View Email Clicked Date And Count In Email Details"" is designed to ensure that merchants can access and view specific metrics related to their email campaigns. The main objective is to verify that the email details section displays both the dates on which recipients clicked the email links and the total number of clicks. This functionality is crucial for merchants to analyze the engagement levels and effectiveness of their email marketing strategies. By confirming that these details are accurately and clearly presented, the test case helps to ensure that merchants have the necessary insights to make informed marketing decisions."
Create data-driven clientcentral_testcases for customers Testcases TC_65 Validate Merchant Is Able To View Credit Count And Credit Amount,data-driven,TC_65 Validate Merchant Is Able To View Credit Count And Credit Amount,"*** Settings ***
Documentation    Validate TC_65 Validate Merchant Is Able To View Credit Count And Credit Amount
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_65 Validate Merchant Is Able To View Credit Count And Credit Amount
    [Documentation]    Validate TC_65 Validate Merchant Is Able To View Credit Count And Credit Amount using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${invoice1}    
    Select Module    ${Customers}    ${nan}    ${nan}    
    Filter With Customer Number    ${account_number}    ${nan}    ${nan}    
    Validate Filtered Customer Number Is Displayed    ${account_number}    ${nan}    ${nan}    
    Validate Credit Count And Amount    ${1}    ${100}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice1}

Select Module
    [Arguments]    ${Customers}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customers}    ${nan}    ${nan}

Filter With Customer Number
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Validate Filtered Customer Number Is Displayed
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Validate Credit Count And Amount
    [Arguments]    ${1}    ${100}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${1}    ${100}    ${nan}

","The test case 'TC_65 Validate Merchant Is Able To View Credit Count And Credit Amount' is intended to verify that a merchant has the capability to accurately view their credit transactions within a financial or e-commerce system. The purpose of this test case includes ensuring the merchant can access and review the total number of credit transactions (credit count) and the cumulative monetary value of all credits received (credit amount).

Key objectives of the test case include:

1. **Access Verification**: Confirming that the merchant can log in and navigate to the appropriate section or dashboard within the system where credit transactions are displayed.
2. **Data Display**: Ensuring the interface correctly shows the number of credit transactions (credit count) and the total value of these credits ("
Build data-driven clientcentral_testcases for customers Testcases TC_66 Validate Merchant Is Able To Cancel Payment Method,data-driven,TC_66 Validate Merchant Is Able To Cancel Payment Method,"*** Settings ***
Documentation    Validate TC_66 Validate Merchant Is Able To Cancel Payment Method
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_66 Validate Merchant Is Able To Cancel Payment Method
    [Documentation]    Validate TC_66 Validate Merchant Is Able To Cancel Payment Method using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Saved Payments}    ${nan}    ${nan}    
    Add Payment Method    ${nan}    ${nan}    ${nan}    
    Cancel Payment Method    ${nan}    ${nan}    ${nan}    
    Validate Payment Method Is Cancelled    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Saved Payments}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Saved Payments}    ${nan}    ${nan}

Add Payment Method
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Cancel Payment Method
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Payment Method Is Cancelled
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_66 Validate Merchant Is Able To Cancel Payment Method' is designed to verify the functionality that allows a merchant to cancel a previously initiated payment method. The primary objectives are to ensure that the cancellation process works as intended, that the user interface accurately reflects the cancellation, and that no errors occur during the cancellation process. Additionally, this test case checks that the system updates all relevant records and displays appropriate notifications or confirmations to the merchant, confirming that the payment method has been successfully canceled. The overall purpose is to guarantee a smooth, reliable, and user-friendly experience for merchants managing their payment methods."
Validate data-driven clientcentral_testcases for customers Testcases TC_67 Validate Merchant Is Able To Add New Payment Method When One Exists,data-driven,TC_67 Validate Merchant Is Able To Add New Payment Method When One Exists,"*** Settings ***
Documentation    Validate TC_67 Validate Merchant Is Able To Add New Payment Method When One Exists
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_67 Validate Merchant Is Able To Add New Payment Method When One Exists
    [Documentation]    Validate TC_67 Validate Merchant Is Able To Add New Payment Method When One Exists using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Generate Random Customer Details    ${nan}    ${nan}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Saved Payments}    ${nan}    ${nan}    
    Add Payment Method    ${nan}    ${nan}    ${nan}    
    Enter Payment Details    ${customer_details}    ${nan}    ${nan}    
    Enter Nickname    ${Card}    ${nan}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Submit Payment Method    ${nan}    ${nan}    ${nan}    
    Validate Saved Payment Details Is Displayed    ${Card}    ${nan}    ${nan}    
    Add Payment Method    ${nan}    ${nan}    ${nan}    
    Enter Payment Details    ${customer_details}    ${nan}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Submit Payment Method    ${nan}    ${nan}    ${nan}    
    Validate Saved Payment Details Is Displayed    ${Card}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Generate Random Customer Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Saved Payments}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Saved Payments}    ${nan}    ${nan}

Add Payment Method
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Enter Payment Details
    [Arguments]    ${customer_details}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${nan}    ${nan}

Enter Nickname
    [Arguments]    ${Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Card}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Submit Payment Method
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Saved Payment Details Is Displayed
    [Arguments]    ${Card}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Card}    ${nan}    ${nan}

Add Payment Method
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Enter Payment Details
    [Arguments]    ${customer_details}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${customer_details}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Submit Payment Method
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Saved Payment Details Is Displayed
    [Arguments]    ${Card}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Card}    ${nan}    ${nan}

","The test case 'TC_67 Validate Merchant Is Able To Add New Payment Method When One Exists' aims to ensure that a merchant can successfully add an additional payment method to their account even if a payment method is already present. The purpose of this test is to validate the functionality of the system in handling multiple payment methods for one account. It ensures that the user experience remains seamless and that the system accurately stores and distinguishes between multiple payment methods. This test checks for any potential issues like errors, limitations, or constraints that might prevent the addition of another payment method, and ensures the interface guides the user appropriately throughout the process."
Build data-driven clientcentral_testcases for customers Testcases TC_68 Validate Merchant Is Able To Enable Multiple PDFs In Emails,data-driven,TC_68 Validate Merchant Is Able To Enable Multiple PDFs In Emails,"*** Settings ***
Documentation    Validate TC_68 Validate Merchant Is Able To Enable Multiple PDFs In Emails
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_68 Validate Merchant Is Able To Enable Multiple PDFs In Emails
    [Documentation]    Validate TC_68 Validate Merchant Is Able To Enable Multiple PDFs In Emails using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Create Multiple Invoices Through API    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Customer Settings}    ${nan}    ${nan}    
    Select Multiple PDF Option    ${Attach PDF to Invoice Email}    ${True}    ${nan}    
    Select Multiple PDF Option    ${Multiple Pdfs in email}    ${True}    ${nan}    
    Scroll Till Element Is Visible    ${web.button.clientcentral.customers.leftarrow}    ${nan}    ${nan}    
    Double Click Element    ${web.button.clientcentral.customers.leftarrow}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Select All Invoices    ${nan}    ${nan}    ${nan}    
    Send Mail For The Selected Invoice    ${EMAIL}    ${nan}    ${nan}    
    Validate Multiple PDF Attachment    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Customer Settings}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customer Settings}    ${nan}    ${nan}

Select Multiple PDF Option
    [Arguments]    ${Attach PDF to Invoice Email}    ${True}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${Attach PDF to Invoice Email}    ${True}    ${nan}

Select Multiple PDF Option
    [Arguments]    ${Multiple Pdfs in email}    ${True}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${Multiple Pdfs in email}    ${True}    ${nan}

Scroll Till Element Is Visible
    [Arguments]    ${web.button.clientcentral.customers.leftarrow}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${web.button.clientcentral.customers.leftarrow}    ${nan}    ${nan}

Double Click Element
    [Arguments]    ${web.button.clientcentral.customers.leftarrow}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${web.button.clientcentral.customers.leftarrow}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Select All Invoices
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Send Mail For The Selected Invoice
    [Arguments]    ${EMAIL}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${nan}    ${nan}

Validate Multiple PDF Attachment
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","Sure! The test case 'TC_68 Validate Merchant Is Able To Enable Multiple PDFs In Emails' is designed to ensure that a merchant on an e-commerce platform (or any relevant system) can successfully attach multiple PDF documents to emails sent from the system. The purpose of this test case is to verify that the feature allowing the inclusion of multiple PDFs in transactional or marketing emails functions properly.

The key objectives are:
1. To confirm that the merchant can select and attach more than one PDF file to an email.
2. To ensure the email system correctly manages and sends multiple PDF attachments without errors.
3. To verify that recipients receive the email with all attached PDFs intact and accessible.
4. To assess both the user interface for attaching multiple PDFs and the"
Validate data-driven clientcentral_testcases for dashboard Testcases TC_01 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer,data-driven,TC_01 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer,"*** Settings ***
Documentation    Validate TC_01 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer
    [Documentation]    Validate TC_01 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Create Multiple Invoices Through API    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoices_list.1}    
    Send Invoice Email And Navigate To Email Summary    ${account_number}    ${nan}    ${nan}    
    Navigate To Customer Details Page From Email Summary    ${nan}    ${nan}    ${nan}    
    Validate Customer Details Page Is Displayed    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoices_list.1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoices_list.1}

Send Invoice Email And Navigate To Email Summary
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Navigate To Customer Details Page From Email Summary
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Customer Details Page Is Displayed
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","The test case 'TC_01 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer' aims to verify that a merchant can successfully access the customer details page through a defined navigation action in the application's user interface. The primary focus is to ensure that upon clicking on a customer’s name or relevant indicator within the merchant’s dashboard or list, the system correctly directs the merchant to the detailed information page of that specific customer. 

The purpose of this test case is to affirm that the customer navigation functionality is working as expected, enhancing user experience by providing seamless access to detailed customer information. This helps merchants in quickly retrieving and viewing critical customer details necessary for their operations, thereby ensuring smooth and efficient workflow within the application."
Build data-driven clientcentral_testcases for dashboard Testcases TC_02 Validate Merchant Is Able To View Email Format Details,data-driven,TC_02 Validate Merchant Is Able To View Email Format Details,"*** Settings ***
Documentation    Validate TC_02 Validate Merchant Is Able To View Email Format Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Merchant Is Able To View Email Format Details
    [Documentation]    Validate TC_02 Validate Merchant Is Able To View Email Format Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Create Multiple Invoices Through API    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoices_list.1}    
    Send Invoice Email And Navigate To Email Summary    ${account_number}    ${nan}    ${nan}    
    Expand Details In Email Summary    ${nan}    ${nan}    ${nan}    
    Validate Email Format In Email Details    ${Format: Summary}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoices_list.1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoices_list.1}

Send Invoice Email And Navigate To Email Summary
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Expand Details In Email Summary
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Email Format In Email Details
    [Arguments]    ${Format: Summary}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Format: Summary}    ${nan}    ${nan}

","The test case ""TC_02 Validate Merchant Is Able To View Email Format Details"" is designed to ensure that merchants using an application or platform can access and view details related to email formats efficiently. The purpose of this test is to verify that the interface or function allowing merchants to see the email format details is working as intended. This includes checking factors like the accessibility of the email format details, the correctness and comprehensibility of the information displayed, and ensuring that the feature meets user interface and functional requirements. Consequently, successful validation of this test case ensures that merchants have the necessary support to manage their email communication settings effectively, thereby enhancing user experience and operational efficiency."
Create data-driven clientcentral_testcases for dashboard Testcases TC_03 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer Number,data-driven,TC_03 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer Number,"*** Settings ***
Documentation    Validate TC_03 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer Number
    [Documentation]    Validate TC_03 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer Number using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Create Multiple Invoices Through API    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoices_list.1}    
    Send Invoice Email And Navigate To Email Summary    ${account_number}    ${nan}    ${nan}    
    Expand Details In Email Summary    ${nan}    ${nan}    ${nan}    
    Navigate To Customer Details Page From Email Details    ${Customer Number}    ${nan}    ${nan}    
    Validate Customer Details Page Is Displayed    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoices_list.1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoices_list.1}

Send Invoice Email And Navigate To Email Summary
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Expand Details In Email Summary
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Navigate To Customer Details Page From Email Details
    [Arguments]    ${Customer Number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customer Number}    ${nan}    ${nan}

Validate Customer Details Page Is Displayed
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","### Summary of Test Case: TC_03 - Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer Number

**Purpose:**
The primary objective of this test case is to verify that a merchant user can successfully navigate to the Customer Details Page by clicking on a customer's number within the application. This functionality is essential for user-interface navigation and for ensuring that merchants can easily access detailed information about a customer to better manage their interactions and transactions.

**Key Steps:**
1. **Login:** The test starts by ensuring that the merchant user is logged into the application.
2. **Navigation:** The user then navigates to the section where the customer list is displayed (such as a dashboard or customer management page).
3. **Interaction:**"
Create data-driven clientcentral_testcases for dashboard Testcases TC_04 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer Name,data-driven,TC_04 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer Name,"*** Settings ***
Documentation    Validate TC_04 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer Name
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer Name
    [Documentation]    Validate TC_04 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer Name using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Create Multiple Invoices Through API    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoices_list.1}    
    Send Invoice Email And Navigate To Email Summary    ${account_number}    ${nan}    ${nan}    
    Expand Details In Email Summary    ${nan}    ${nan}    ${nan}    
    Navigate To Customer Details Page From Email Details    ${Customer Name}    ${nan}    ${nan}    
    Validate Customer Details Page Is Displayed    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoices_list.1}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoices_list.1}

Send Invoice Email And Navigate To Email Summary
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Expand Details In Email Summary
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Navigate To Customer Details Page From Email Details
    [Arguments]    ${Customer Name}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customer Name}    ${nan}    ${nan}

Validate Customer Details Page Is Displayed
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","The test case 'TC_04 Validate Merchant Is Able To Navigate To Customer Details Page By Clicking on Customer Name' is created to verify the correct functionality of navigation within a merchant's interface. Specifically, it aims to ensure that when a merchant clicks on a customer's name, they are successfully redirected to the Customer Details Page. 

The purpose of this test case is:
1. To validate that the hyperlink or clickable element associated with the customer's name is functioning correctly.
2. To confirm that the Customer Details Page loads properly upon clicking the customer's name.
3. To ensure that all relevant customer information is accessible and displayed accurately on the Customer Details Page.
4. To enhance the user experience by making navigation intuitive and seamless for merchants.

This test case is crucial"
Create data-driven clientcentral_testcases for dashboard Testcases TC_05 Validate Merchant Is Able To View Pdf Attached Status In Email Details,data-driven,TC_05 Validate Merchant Is Able To View Pdf Attached Status In Email Details,"*** Settings ***
Documentation    Validate TC_05 Validate Merchant Is Able To View Pdf Attached Status In Email Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Merchant Is Able To View Pdf Attached Status In Email Details
    [Documentation]    Validate TC_05 Validate Merchant Is Able To View Pdf Attached Status In Email Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Select Module    ${Invoices}    ${nan}    ${nan}    
    Filter Details In Invoices    ${account_number}    ${invoice_number}    ${Customer Number}    
    Navigate To Details Page From Invoices    ${account_number}    ${nan}    ${nan}    
    Select PDF Setting In Cusomer Setting    ${True}    ${nan}    ${nan}    
    Select Module    ${Dashboard}    ${nan}    ${nan}    
    Navigate To Email Summary Page    ${today}    ${nan}    ${nan}    
    Filter With Customer Number In Email Details    ${Customer}    ${account_number}    ${nan}    
    Expand Details In Email Summary    ${nan}    ${nan}    ${nan}    
    Validate Email PDF Attachment Status    ${PDF Attached: Yes}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Filter Details In Invoices
    [Arguments]    ${account_number}    ${invoice_number}    ${Customer Number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${Customer Number}

Navigate To Details Page From Invoices
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select PDF Setting In Cusomer Setting
    [Arguments]    ${True}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${True}    ${nan}    ${nan}

Select Module
    [Arguments]    ${Dashboard}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Dashboard}    ${nan}    ${nan}

Navigate To Email Summary Page
    [Arguments]    ${today}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${today}    ${nan}    ${nan}

Filter With Customer Number In Email Details
    [Arguments]    ${Customer}    ${account_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${Customer}    ${account_number}    ${nan}

Expand Details In Email Summary
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Email PDF Attachment Status
    [Arguments]    ${PDF Attached: Yes}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${PDF Attached: Yes}    ${nan}    ${nan}

","The test case 'TC_05 Validate Merchant Is Able To View PDF Attached Status In Email Details' aims to verify that a merchant is capable of identifying whether a PDF document is attached to an email within their email details interface. The primary purposes of this test case are to ensure that the email system's user interface clearly indicates the presence of an attached PDF, to confirm the functionality works as expected, and to ensure that merchants have the necessary information to proceed with email processing efficiently. By validating this feature, the test case helps to improve the overall user experience and operational effectiveness for merchants dealing with email communications that may include critical document attachments."
Generate data-driven clientcentral_testcases for dashboard Testcases TC_06 Validate Merchant Is Able To Verify Email Details,data-driven,TC_06 Validate Merchant Is Able To Verify Email Details,"*** Settings ***
Documentation    Validate TC_06 Validate Merchant Is Able To Verify Email Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_06 Validate Merchant Is Able To Verify Email Details
    [Documentation]    Validate TC_06 Validate Merchant Is Able To Verify Email Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Send Invoice Email And Navigate To Email Summary    ${account_number}    ${nan}    ${nan}    
    Expand Details In Email Summary    ${nan}    ${nan}    ${nan}    
    Validate Email Format In Email Details    ${Format: Single}    ${nan}    ${nan}    
    Validate Email Sent Date And Subject    ${TEST Invoice invoice_number from Sterling Cooper}    ${corpsdt@gmail.com}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Send Invoice Email And Navigate To Email Summary
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Expand Details In Email Summary
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Email Format In Email Details
    [Arguments]    ${Format: Single}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Format: Single}    ${nan}    ${nan}

Validate Email Sent Date And Subject
    [Arguments]    ${TEST Invoice invoice_number from Sterling Cooper}    ${corpsdt@gmail.com}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${TEST Invoice invoice_number from Sterling Cooper}    ${corpsdt@gmail.com}    ${nan}

","The test case 'TC_06 Validate Merchant Is Able To Verify Email Details' is designed to ensure that a merchant can successfully verify the email details of their customers or users within a designated system (such as an e-commerce platform or a CRM system). The purpose of this test case is to confirm that the functionality for retrieving and validating email information works correctly and that the merchant can access necessary details without encountering errors.

Key points include:
- Ensuring the system successfully retrieves email details from the database or data repository.
- Verifying that the displayed email information is accurate and corresponds to the correct customer or user.
- Confirming that any associated features, such as verification prompts or warning messages, function as expected.
- Checking for edge cases like handling invalid or"
Build data-driven clientcentral_testcases for dashboard Testcases TC_07 Validate Merchant Is Able To Expand And Collapse Email Details,data-driven,TC_07 Validate Merchant Is Able To Expand And Collapse Email Details,"*** Settings ***
Documentation    Validate TC_07 Validate Merchant Is Able To Expand And Collapse Email Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Merchant Is Able To Expand And Collapse Email Details
    [Documentation]    Validate TC_07 Validate Merchant Is Able To Expand And Collapse Email Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Send Invoice Email And Navigate To Email Summary    ${account_number}    ${nan}    ${nan}    
    Expand Details In Email Summary    ${nan}    ${nan}    ${nan}    
    Validate Email Details Are Expanded In Email Summary    ${nan}    ${nan}    ${nan}    
    Collapse Details In Email Summary    ${nan}    ${nan}    ${nan}    
    Validate Email Details Are Collapsed In Email Summary    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Send Invoice Email And Navigate To Email Summary
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Expand Details In Email Summary
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Email Details Are Expanded In Email Summary
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Collapse Details In Email Summary
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Email Details Are Collapsed In Email Summary
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_07 Validate Merchant Is Able To Expand And Collapse Email Details' is designed to confirm that a merchant can successfully interact with the email information section in the user interface by expanding and collapsing its details. The primary purpose of this test case is to ensure that when a merchant clicks on the designated control (such as an arrow or a plus/minus icon), the email details section expands to display more information and collapses back to hide the details when clicked again. This functionality is essential for a streamlined user experience, helping merchants to manage and review email information efficiently without cluttering the interface. The test verifies correct behavior, visual cues, and ensures there are no errors or UI issues during the expansion and collapse actions."
Generate data-driven clientcentral_testcases for dashboard Testcases TC_08 Validate Merchant Is Able To View Email Details In Email Summary,data-driven,TC_08 Validate Merchant Is Able To View Email Details In Email Summary,"*** Settings ***
Documentation    Validate TC_08 Validate Merchant Is Able To View Email Details In Email Summary
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_08 Validate Merchant Is Able To View Email Details In Email Summary
    [Documentation]    Validate TC_08 Validate Merchant Is Able To View Email Details In Email Summary using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Send Invoice Email And Navigate To Email Summary    ${account_number}    ${nan}    ${nan}    
    Validate Email Details Are Displayed    ${EMAIL}    ${today}    ${TEST Invoice invoice_number from Sterling Cooper}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Send Invoice Email And Navigate To Email Summary
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Validate Email Details Are Displayed
    [Arguments]    ${EMAIL}    ${today}    ${TEST Invoice invoice_number from Sterling Cooper}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${today}    ${TEST Invoice invoice_number from Sterling Cooper}

","The test case 'TC_08 Validate Merchant Is Able To View Email Details In Email Summary' is designed to ensure that merchants have the capability to access and review email details in the email summary section of their interface. The purpose of this test case is to verify that the functionality enabling merchants to view comprehensive email information, such as recipient details, subject lines, and timestamps, is working correctly. This feature is crucial for merchants to monitor and manage their email communications efficiently, ensuring transparency and enhancing their ability to track correspondence with customers and other stakeholders."
Generate data-driven clientcentral_testcases for dashboard Testcases TC_09 Validate Merchant Is Able To View Email Details In Next And Previous Page,data-driven,TC_09 Validate Merchant Is Able To View Email Details In Next And Previous Page,"*** Settings ***
Documentation    Validate TC_09 Validate Merchant Is Able To View Email Details In Next And Previous Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_09 Validate Merchant Is Able To View Email Details In Next And Previous Page
    [Documentation]    Validate TC_09 Validate Merchant Is Able To View Email Details In Next And Previous Page using the following steps
Select Module    ${Dashboard}    ${}    ${}    
    Navigate To Email Summary Page    ${week}    ${}    ${}    
    Navigate To Pages    ${next}    ${}    ${}    
    Validate Details Are Displayed In Next And Previous Page    ${21 - 40}    ${}    ${}    
    Navigate To Pages    ${previous}    ${}    ${}    
    Validate Details Are Displayed In Next And Previous Page    ${1 - 20}    ${}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${Dashboard}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Dashboard}    ${}    ${}

Navigate To Email Summary Page
    [Arguments]    ${week}    ${}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${week}    ${}    ${}

Navigate To Pages
    [Arguments]    ${next}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${next}    ${}    ${}

Validate Details Are Displayed In Next And Previous Page
    [Arguments]    ${21 - 40}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${21 - 40}    ${}    ${}

Navigate To Pages
    [Arguments]    ${previous}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${previous}    ${}    ${}

Validate Details Are Displayed In Next And Previous Page
    [Arguments]    ${1 - 20}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${1 - 20}    ${}    ${}

","The test case 'TC_09 Validate Merchant Is Able To View Email Details In Next And Previous Page' primarily aims to ensure that a merchant using the system can seamlessly navigate through email details across multiple pages. The main purpose of this test case is to verify the following aspects:

1. **Navigation Functionality**: Confirm that the 'Next' and 'Previous' buttons allow the merchant to move forward and backward through a list of email details without any issues.

2. **Data Consistency**: Ensure that the email details displayed are accurate and maintain consistency when navigating between pages.

3. **User Experience**: Assess that the user interface is responsive and provides feedback during navigation, enhancing the overall user experience for the merchant.

4. **Boundary Conditions"
Create data-driven clientcentral_testcases for dashboard Testcases TC_10 Validate Merchant Is Able To View Email Details In Last And First Page,data-driven,TC_10 Validate Merchant Is Able To View Email Details In Last And First Page,"*** Settings ***
Documentation    Validate TC_10 Validate Merchant Is Able To View Email Details In Last And First Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Merchant Is Able To View Email Details In Last And First Page
    [Documentation]    Validate TC_10 Validate Merchant Is Able To View Email Details In Last And First Page using the following steps
Select Module    ${Dashboard}    ${}    ${}    
    Navigate To Email Summary Page    ${week}    ${}    ${}    
    Navigate To Pages    ${last}    ${}    ${}    
    Validate Details Are Displayed In Last Page    ${nan}    ${}    ${}    
    Navigate To Pages    ${first}    ${}    ${}    
    Validate Details Are Displayed In First Page    ${nan}    ${}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${Dashboard}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Dashboard}    ${}    ${}

Navigate To Email Summary Page
    [Arguments]    ${week}    ${}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${week}    ${}    ${}

Navigate To Pages
    [Arguments]    ${last}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${last}    ${}    ${}

Validate Details Are Displayed In Last Page
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Navigate To Pages
    [Arguments]    ${first}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${first}    ${}    ${}

Validate Details Are Displayed In First Page
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

","The purpose of the test case 'TC_10 Validate Merchant Is Able To View Email Details In Last And First Page' is to ensure that a merchant can successfully navigate through the email details displayed on both the first and last pages of a paginated interface within an application or platform. This test case verifies that the functionality for accessing and viewing email details is working correctly on both ends of the pagination. Specifically, it checks:

1. That email details are properly displayed on the first page, ensuring the initial load is correct.
2. That users can navigate to the last page and view the email details there, confirming the pagination works and the data integrity is maintained throughout the navigation.

This test ensures a seamless and intuitive user experience, confirming that merchants can efficiently"
Validate data-driven clientcentral_testcases for dashboard Testcases TC_11 Valiadate Merchant Is Able To Reset Filter,data-driven,TC_11 Valiadate Merchant Is Able To Reset Filter,"*** Settings ***
Documentation    Validate TC_11 Valiadate Merchant Is Able To Reset Filter
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_11 Valiadate Merchant Is Able To Reset Filter
    [Documentation]    Validate TC_11 Valiadate Merchant Is Able To Reset Filter using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Send Invoice Email And Navigate To Email Summary    ${account_number}    ${nan}    ${nan}    
    Reset Filter    ${nan}    ${nan}    ${nan}    
    Validate Reset Filter Details Are Displayed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Send Invoice Email And Navigate To Email Summary
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Reset Filter
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Reset Filter Details Are Displayed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","**Summary for Test Case TC_11: ""Validate Merchant Is Able To Reset Filter""**

**Purpose:**
The test case ""TC_11 Validate Merchant Is Able To Reset Filter"" aims to ensure that the filter functionality for merchants operates correctly, specifically focusing on the ability to reset the applied filters. This test verifies that once a merchant has applied certain filters to view products or data, they can subsequently reset or clear these filters to return to the default or unfiltered view.

**Objectives:**
1. **Functionality Check:** Confirm that the 'Reset Filter' or similar option is present and visible within the merchant interface.
2. **Filter Application:** Apply a set of filters (e.g., by category, price range, date, etc"
Build data-driven clientcentral_testcases for failed login attempts Testcases TC_01 Validate Merchant Is Able To Filter With Customer Number In Failed PayNOW Logins,data-driven,TC_01 Validate Merchant Is Able To Filter With Customer Number In Failed PayNOW Logins,"*** Settings ***
Documentation    Validate TC_01 Validate Merchant Is Able To Filter With Customer Number In Failed PayNOW Logins
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Merchant Is Able To Filter With Customer Number In Failed PayNOW Logins
    [Documentation]    Validate TC_01 Validate Merchant Is Able To Filter With Customer Number In Failed PayNOW Logins using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Login To PayNOW With Invalid Credentials    ${account_number}    ${12345}    ${nan}    
    Select Module    ${Failed PayNOW Logins}    ${nan}    ${nan}    
    Filter With Customer Number In Failed PayNOW Logins    ${account_number}    ${nan}    ${nan}    
    Validate Filterd Customer Number Is Displayed    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Login To PayNOW With Invalid Credentials
    [Arguments]    ${account_number}    ${12345}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${12345}    ${nan}

Select Module
    [Arguments]    ${Failed PayNOW Logins}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Failed PayNOW Logins}    ${nan}    ${nan}

Filter With Customer Number In Failed PayNOW Logins
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Validate Filterd Customer Number Is Displayed
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","### Summary of Test Case 'TC_01: Validate Merchant Is Able To Filter With Customer Number In Failed PayNOW Logins'

#### Purpose:

The test case aims to ensure that a merchant using the PayNOW system can effectively utilize the filtering feature based on customer numbers to review failed login attempts. 

#### Key Objectives:
1. **Ensure Accessibility:** Verify that the filtering option for customer numbers is easily accessible to the merchant on the PayNOW platform.
2. **Filter Accuracy:** Confirm that when a merchant inputs a specific customer number, the system accurately filters and displays all relevant failed login attempts associated with that number.
3. **Data Integrity:** Ensure the filtered results are comprehensive and correct, reflecting all failed login entries tied to that customer number without om"
Build data-driven clientcentral_testcases for failed login attempts Testcases TC_02 Validate Merchant Is Able To View Number Of Recent And Total Login Failed Attempts,data-driven,TC_02 Validate Merchant Is Able To View Number Of Recent And Total Login Failed Attempts,"*** Settings ***
Documentation    Validate TC_02 Validate Merchant Is Able To View Number Of Recent And Total Login Failed Attempts
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Merchant Is Able To View Number Of Recent And Total Login Failed Attempts
    [Documentation]    Validate TC_02 Validate Merchant Is Able To View Number Of Recent And Total Login Failed Attempts using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Login To PayNOW With Invalid Credentials    ${account_number}    ${12345}    ${nan}    
    Select Module    ${Failed PayNOW Logins}    ${nan}    ${nan}    
    Filter With Customer Number In Failed PayNOW Logins    ${account_number}    ${nan}    ${nan}    
    Validate Number Of Recent Login Failed Attempts    ${account_number}    ${1}    ${nan}    
    Validate Total Number Of Login Failed Attempts    ${account_number}    ${1}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Login To PayNOW With Invalid Credentials
    [Arguments]    ${account_number}    ${12345}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${12345}    ${nan}

Select Module
    [Arguments]    ${Failed PayNOW Logins}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Failed PayNOW Logins}    ${nan}    ${nan}

Filter With Customer Number In Failed PayNOW Logins
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Validate Number Of Recent Login Failed Attempts
    [Arguments]    ${account_number}    ${1}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${1}    ${nan}

Validate Total Number Of Login Failed Attempts
    [Arguments]    ${account_number}    ${1}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${1}    ${nan}

","The purpose of the test case 'TC_02 Validate Merchant Is Able To View Number Of Recent And Total Login Failed Attempts' is to ensure that a merchant, upon logging into the system, can correctly access and review both the recent and cumulative failed login attempts associated with their account. This functionality is crucial for account security, enabling the merchant to monitor and detect any potential unauthorized access attempts. The test case verifies that the information displayed is accurate and up-to-date, which helps the merchant take necessary actions if suspicious activities are observed."
Build data-driven clientcentral_testcases for failed login attempts Testcases TC_03 Validate Merchant Is Able To Expand And Collapse Customer Details In Failed PayNOW Logins,data-driven,TC_03 Validate Merchant Is Able To Expand And Collapse Customer Details In Failed PayNOW Logins,"*** Settings ***
Documentation    Validate TC_03 Validate Merchant Is Able To Expand And Collapse Customer Details In Failed PayNOW Logins
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate Merchant Is Able To Expand And Collapse Customer Details In Failed PayNOW Logins
    [Documentation]    Validate TC_03 Validate Merchant Is Able To Expand And Collapse Customer Details In Failed PayNOW Logins using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Login To PayNOW With Invalid Credentials    ${account_number}    ${12345}    ${nan}    
    Select Module    ${Failed PayNOW Logins}    ${nan}    ${nan}    
    Filter With Customer Number In Failed PayNOW Logins    ${account_number}    ${nan}    ${nan}    
    Expand Customer Failed Login Details    ${nan}    ${nan}    ${nan}    
    Validate Customer Failed Login Details Are Expanded    ${STERLING_COOPER}    ${nan}    ${nan}    
    Collapse Customer Failed Login Details    ${nan}    ${nan}    ${nan}    
    Validate Customer Failed Login Details Are Collapsed    ${STERLING_COOPER}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Login To PayNOW With Invalid Credentials
    [Arguments]    ${account_number}    ${12345}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${12345}    ${nan}

Select Module
    [Arguments]    ${Failed PayNOW Logins}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Failed PayNOW Logins}    ${nan}    ${nan}

Filter With Customer Number In Failed PayNOW Logins
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Expand Customer Failed Login Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Customer Failed Login Details Are Expanded
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Collapse Customer Failed Login Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Customer Failed Login Details Are Collapsed
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

","The test case 'TC_03 Validate Merchant Is Able To Expand And Collapse Customer Details In Failed PayNOW Logins' is designed to verify the functionality of the PayNOW system's login process specifically related to failed login attempts. Its purpose is to ensure that merchants have the capability to expand and view detailed customer information when a login attempt has failed, and subsequently collapse this information when it is no longer needed. This feature is crucial for merchants to effectively manage and troubleshoot login issues, by providing easy access to relevant customer details without cluttering the interface with unnecessary information. The validation process ensures that the expand and collapse functionalities are working correctly, enhancing the usability and efficiency of the PayNOW system for merchants."
Create data-driven clientcentral_testcases for failed login attempts Testcases TC_04 Validate Merchant Is Able To View First And Last Login Failed Attempt,data-driven,TC_04 Validate Merchant Is Able To View First And Last Login Failed Attempt,"*** Settings ***
Documentation    Validate TC_04 Validate Merchant Is Able To View First And Last Login Failed Attempt
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate Merchant Is Able To View First And Last Login Failed Attempt
    [Documentation]    Validate TC_04 Validate Merchant Is Able To View First And Last Login Failed Attempt using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Login To PayNOW With Invalid Credentials    ${account_number}    ${12345}    ${nan}    
    Select Module    ${Failed PayNOW Logins}    ${nan}    ${nan}    
    Filter With Customer Number In Failed PayNOW Logins    ${account_number}    ${nan}    ${nan}    
    Validate First Login Failed Attempt Is Displayed    ${account_number}    ${today}    ${nan}    
    Validate Last Login Failed Attempt Is Displayed    ${account_number}    ${today}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Login To PayNOW With Invalid Credentials
    [Arguments]    ${account_number}    ${12345}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${12345}    ${nan}

Select Module
    [Arguments]    ${Failed PayNOW Logins}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Failed PayNOW Logins}    ${nan}    ${nan}

Filter With Customer Number In Failed PayNOW Logins
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Validate First Login Failed Attempt Is Displayed
    [Arguments]    ${account_number}    ${today}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${today}    ${nan}

Validate Last Login Failed Attempt Is Displayed
    [Arguments]    ${account_number}    ${today}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${today}    ${nan}

","The test case 'TC_04 Validate Merchant Is Able To View First And Last Login Failed Attempt' aims to verify that a merchant using the application/platform can access and view information regarding their login attempts, specifically focusing on the first and the most recent failed login attempts. The purpose of this test is to ensure that the system correctly logs and displays these failed attempts, providing the merchant with valuable security information that can help them monitor unauthorized access attempts and take necessary actions to secure their account. This functionality also contributes to the overall security and transparency of the authentication system within the application."
Build data-driven clientcentral_testcases for invoices Testcases TC_01 Validate Merchant Is Able To Search Invoice Details With Invoice Number,data-driven,TC_01 Validate Merchant Is Able To Search Invoice Details With Invoice Number,"*** Settings ***
Documentation    Validate TC_01 Validate Merchant Is Able To Search Invoice Details With Invoice Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Merchant Is Able To Search Invoice Details With Invoice Number
    [Documentation]    Validate TC_01 Validate Merchant Is Able To Search Invoice Details With Invoice Number using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Select Module    ${Invoices}    ${nan}    ${nan}    
    Filter Details In Invoices    ${account_number}    ${invoice_number}    ${Invoice Number}    
    Validate Filtered Invoice Number In Displayed In Invoices    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Filter Details In Invoices
    [Arguments]    ${account_number}    ${invoice_number}    ${Invoice Number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${Invoice Number}

Validate Filtered Invoice Number In Displayed In Invoices
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","The test case 'TC_01 Validate Merchant Is Able To Search Invoice Details With Invoice Number' is designed to ensure that merchants using the system can successfully locate specific invoice details using a unique invoice number. The primary objective is to verify the functionality of the search feature within the merchant portal, assessing whether it accurately retrieves and displays the appropriate invoice details when queried by the merchant. This test case aims to confirm that the system correctly handles search requests, returns the correct results, and helps maintain efficient and accurate transaction management for merchants."
Create data-driven clientcentral_testcases for invoices Testcases TC_02 Validate Merchant Is Able To Search Invoice Details With Customer Number,data-driven,TC_02 Validate Merchant Is Able To Search Invoice Details With Customer Number,"*** Settings ***
Documentation    Validate TC_02 Validate Merchant Is Able To Search Invoice Details With Customer Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Merchant Is Able To Search Invoice Details With Customer Number
    [Documentation]    Validate TC_02 Validate Merchant Is Able To Search Invoice Details With Customer Number using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Select Module    ${Invoices}    ${nan}    ${nan}    
    Filter Details In Invoices    ${account_number}    ${invoice_number}    ${Customer Number}    
    Validate Filtered Cusomer Number In Displayed In Invoices    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Filter Details In Invoices
    [Arguments]    ${account_number}    ${invoice_number}    ${Customer Number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${Customer Number}

Validate Filtered Cusomer Number In Displayed In Invoices
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","### Summary of Test Case: TC_02 Validate Merchant Is Able To Search Invoice Details With Customer Number

**Purpose:**

The objective of this test case is to ensure that merchants can efficiently search and retrieve invoice details using a customer's unique number within the system. This functionality is crucial for merchants to perform various tasks such as reviewing transaction history, processing refunds, assisting customers with queries, and managing financial records.

**Key Goals:**

1. **Verify Search Functionality**: Confirm that the search feature correctly processes the customer number input and returns accurate and relevant invoice details.
2. **Data Accuracy**: Ensure that the displayed invoice details correspond exactly to the entered customer number, without discrepancies.
3. **Ease of Use**: Assess whether the search"
Validate data-driven clientcentral_testcases for invoices Testcases TC_03 Validate Merchant Is Able To Search With Invoice And Customer Number,data-driven,TC_03 Validate Merchant Is Able To Search With Invoice And Customer Number,"*** Settings ***
Documentation    Validate TC_03 Validate Merchant Is Able To Search With Invoice And Customer Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate Merchant Is Able To Search With Invoice And Customer Number
    [Documentation]    Validate TC_03 Validate Merchant Is Able To Search With Invoice And Customer Number using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Select Module    ${Invoices}    ${nan}    ${nan}    
    Filter Invoice Details With Invoice And Customer Number    ${invoice_number}    ${account_number}    ${nan}    
    Validate Invoice Details Are Displayed    ${account_number}    ${today}    ${$100.00}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Filter Invoice Details With Invoice And Customer Number
    [Arguments]    ${invoice_number}    ${account_number}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${account_number}    ${nan}

Validate Invoice Details Are Displayed
    [Arguments]    ${account_number}    ${today}    ${$100.00}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${today}    ${$100.00}

","The test case 'TC_03 Validate Merchant Is Able To Search With Invoice And Customer Number' aims to verify the accuracy and functionality of the search feature available to merchants within a system, platform, or application. Specifically, the purpose is to ensure that the merchant can successfully use both invoice numbers and customer numbers as search criteria to retrieve relevant transaction or customer information.

Key objectives include:

1. Confirming that the search functionality accommodates both invoice numbers and customer numbers as valid inputs.
2. Ensuring that when an invoice number is entered, the search results display the corresponding invoice details accurately.
3. Verifying that when a customer number is entered, the search yields the right customer-related data.
4. Checking the user interface for usability, ensuring that the"
Build data-driven clientcentral_testcases for invoices Testcases TC_04 Validate Merchant Is Able To View Line Items Details,data-driven,TC_04 Validate Merchant Is Able To View Line Items Details,"*** Settings ***
Documentation    Validate TC_04 Validate Merchant Is Able To View Line Items Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate Merchant Is Able To View Line Items Details
    [Documentation]    Validate TC_04 Validate Merchant Is Able To View Line Items Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}    
    Select Module    ${Invoices}    ${nan}    ${}    
    Filter Details In Invoices    ${account_number}    ${invoice_number}    ${}    
    Navigate To Details Page From Invoices    ${invoice_number}    ${nan}    ${}    
    Validate Line Items Details Are Displayed    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${}

Filter Details In Invoices
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Navigate To Details Page From Invoices
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

Validate Line Items Details Are Displayed
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","**Test Case: TC_04 Validate Merchant Is Able To View Line Items Details**

**Purpose:**

The primary purpose of this test case is to ensure that a merchant can successfully view the detailed information of line items associated with a particular transaction or order. This functionality is crucial for merchants to manage their sales and inventory effectively. The test will confirm that the user interface correctly displays detailed line item information, such as product name, quantity, price, discounts, and any applicable taxes or fees. This validation helps ensure that merchants have access to accurate and comprehensive details needed for order processing, customer support, and reconciliation tasks."
"Build data-driven clientcentral_testcases for invoices Testcases TC_05 Validate Merchant Is Able To View Invoice, Order Date And Document Type In Invoice Summary",data-driven,"TC_05 Validate Merchant Is Able To View Invoice, Order Date And Document Type In Invoice Summary","*** Settings ***
Documentation    Validate TC_05 Validate Merchant Is Able To View Invoice, Order Date And Document Type In Invoice Summary
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Merchant Is Able To View Invoice, Order Date And Document Type In Invoice Summary
    [Documentation]    Validate TC_05 Validate Merchant Is Able To View Invoice, Order Date And Document Type In Invoice Summary using the following steps
Select Tab In Invoice Details Page    ${Summary}    ${nan}    ${}    
    Valiadate Invoice, Order Date And Document Type    ${today}    ${INVOICE}    ${}

*** Keywords ***
Select Tab In Invoice Details Page
    [Arguments]    ${Summary}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Summary}    ${nan}    ${}

Valiadate Invoice, Order Date And Document Type
    [Arguments]    ${today}    ${INVOICE}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${today}    ${INVOICE}    ${}

","**Test Case Summary: TC_05 Validate Merchant Is Able To View Invoice, Order Date, And Document Type In Invoice Summary**

**Purpose:** 

The primary objective of this test case is to ensure that the merchant can access and view critical pieces of information within the invoice summary section of their system. Specifically, it focuses on verifying that the following details are properly displayed:

1. **Invoice** – The unique descriptor or identifier for the invoice.
2. **Order Date** – The date when the order corresponding to the invoice was placed.
3. **Document Type** – The category or classification of the document, such as an invoice, receipt, or credit memo.

**Goals:**

- **Verify Visibility:** Ensure that when a merchant navigates"
Generate data-driven clientcentral_testcases for invoices Testcases TC_06 Validate Merchant Is Able To View Tracking Details,data-driven,TC_06 Validate Merchant Is Able To View Tracking Details,"*** Settings ***
Documentation    Validate TC_06 Validate Merchant Is Able To View Tracking Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_06 Validate Merchant Is Able To View Tracking Details
    [Documentation]    Validate TC_06 Validate Merchant Is Able To View Tracking Details using the following steps
Select Tab In Invoice Details Page    ${Tracking}    ${}    ${}    
    Validate Tracking Details Is Displayed    ${nan}    ${}    ${}

*** Keywords ***
Select Tab In Invoice Details Page
    [Arguments]    ${Tracking}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Tracking}    ${}    ${}

Validate Tracking Details Is Displayed
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

","The purpose of the test case 'TC_06 Validate Merchant Is Able To View Tracking Details' is to ensure that a merchant using the system can successfully access and view the tracking details of shipments or orders. This test case checks the functionality from the merchant's perspective to verify that the tracking information is accurately presented and easily accessible. It involves steps such as logging into the merchant account, navigating to the appropriate section or dashboard, and confirming that the tracking details (including shipment status, tracking number, and any other pertinent information) are displayed correctly and comprehensively. Ultimately, the goal is to validate that merchants have the necessary tools and information to keep track of their shipments, thereby maintaining efficiency and transparency in the supply chain process."
Generate data-driven clientcentral_testcases for invoices Testcases TC_07 Validate Merchant Is Able To View Email Address In Email Detail,data-driven,TC_07 Validate Merchant Is Able To View Email Address In Email Detail,"*** Settings ***
Documentation    Validate TC_07 Validate Merchant Is Able To View Email Address In Email Detail
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Merchant Is Able To View Email Address In Email Detail
    [Documentation]    Validate TC_07 Validate Merchant Is Able To View Email Address In Email Detail using the following steps
Select Tab In Invoice Details Page    ${Email Detail}    ${}    ${}    
    Validate Email Address Is Displayed    ${nobody@gmail.com}    ${}    ${}

*** Keywords ***
Select Tab In Invoice Details Page
    [Arguments]    ${Email Detail}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Email Detail}    ${}    ${}

Validate Email Address Is Displayed
    [Arguments]    ${nobody@gmail.com}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nobody@gmail.com}    ${}    ${}

","Test Case 'TC_07 Validate Merchant Is Able To View Email Address In Email Detail' is designed to verify that a merchant can successfully view the email address of the recipient or sender in the email details section of an application or platform. 

**Purpose:**
1. **User Experience:** To ensure that merchants have access to essential contact information without any hindrance, which facilitates communication and follow-up.
2. **Functionality:** To validate that the email detail view feature works as intended, displaying the email address correctly and accurately.
3. **Security Compliance:** To ensure that access to email details is granted to authorized users according to compliance and security protocols.
4. **Business Operations:** To streamline business operations where merchants need to view email addresses for order"
Generate data-driven clientcentral_testcases for invoices Testcases TC_08 Validate Merchant Is Able To View Financial Payments Details,data-driven,TC_08 Validate Merchant Is Able To View Financial Payments Details,"*** Settings ***
Documentation    Validate TC_08 Validate Merchant Is Able To View Financial Payments Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_08 Validate Merchant Is Able To View Financial Payments Details
    [Documentation]    Validate TC_08 Validate Merchant Is Able To View Financial Payments Details using the following steps
Select Tab In Invoice Details Page    ${Financial/Payments}    ${nan}    ${nan}    
    Valiadate Terms Amount Are Displayed In Financial Payments    ${$2.01}    ${$0.00}    ${2%10th Net Prox 25th}    
    Validate Financial Payment Details Are Displayed    ${$100.00}    ${$0.00}    ${No}

*** Keywords ***
Select Tab In Invoice Details Page
    [Arguments]    ${Financial/Payments}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Financial/Payments}    ${nan}    ${nan}

Valiadate Terms Amount Are Displayed In Financial Payments
    [Arguments]    ${$2.01}    ${$0.00}    ${2%10th Net Prox 25th}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${$2.01}    ${$0.00}    ${2%10th Net Prox 25th}

Validate Financial Payment Details Are Displayed
    [Arguments]    ${$100.00}    ${$0.00}    ${No}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${$100.00}    ${$0.00}    ${No}

","**TC_08 Validate Merchant Is Able To View Financial Payments Details**

**Purpose**: The objective of this test case is to verify that a merchant has the ability to access and view detailed information regarding the financial payments they have received. This includes ensuring that all relevant payment details, such as transaction dates, amounts, payment methods, and any related fees or charges, are accurately displayed and easily accessible within the merchant’s account or dashboard.

The test aims to confirm the following:

1. **Access Control**: The merchant should have the necessary permissions to view payment details.
2. **Accuracy of Data**: All financial payment details should be accurate and up-to-date.
3. **User Interface**: The information should be presented in a clear and"
Build data-driven clientcentral_testcases for invoices Testcases TC_09 Validate Merchant Is Able To Send Invoice Email From Invoice Details Page,data-driven,TC_09 Validate Merchant Is Able To Send Invoice Email From Invoice Details Page,"*** Settings ***
Documentation    Validate TC_09 Validate Merchant Is Able To Send Invoice Email From Invoice Details Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_09 Validate Merchant Is Able To Send Invoice Email From Invoice Details Page
    [Documentation]    Validate TC_09 Validate Merchant Is Able To Send Invoice Email From Invoice Details Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Id After Processing Transaction    ${response}    ${nan}    ${nan}    
    Select Module    ${Invoices}    ${nan}    ${nan}    
    Filter Details In Invoices    ${account_number}    ${invoice_number}    ${nan}    
    Navigate To Details Page From Invoices    ${invoice_number}    ${nan}    ${nan}    
    Select Tab In Invoice Details Page    ${Email Invoice}    ${nan}    ${nan}    
    Send Mail For The Selected Invoice    ${EMAIL}    ${nan}    ${nan}    
    Validate Transaction Receipt Is Received In Email    ${transaction_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Id After Processing Transaction
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Filter Details In Invoices
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Details Page From Invoices
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Select Tab In Invoice Details Page
    [Arguments]    ${Email Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Email Invoice}    ${nan}    ${nan}

Send Mail For The Selected Invoice
    [Arguments]    ${EMAIL}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${nan}    ${nan}

Validate Transaction Receipt Is Received In Email
    [Arguments]    ${transaction_id}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${transaction_id}    ${nan}    ${nan}

","The purpose of the test case 'TC_09 Validate Merchant Is Able To Send Invoice Email From Invoice Details Page' is to verify that a merchant user can successfully send an invoice via email directly from the invoice details page within the system. This test ensures that the feature which allows the merchant to share invoice information with customers through email is functioning correctly. It involves navigating to the invoice details page, selecting the option to email the invoice, and confirming that the email is dispatched to the specified recipient. The test aims to validate the effectiveness of the email functionality and confirm that invoices can be communicated efficiently, ultimately supporting smooth business operations and customer service."
Create data-driven clientcentral_testcases for invoices Testcases TC_10 Validate Merchant Is Able To Send Invoice Email Copy From Invoice Details Page,data-driven,TC_10 Validate Merchant Is Able To Send Invoice Email Copy From Invoice Details Page,"*** Settings ***
Documentation    Validate TC_10 Validate Merchant Is Able To Send Invoice Email Copy From Invoice Details Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_10 Validate Merchant Is Able To Send Invoice Email Copy From Invoice Details Page
    [Documentation]    Validate TC_10 Validate Merchant Is Able To Send Invoice Email Copy From Invoice Details Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Id After Processing Transaction    ${response}    ${nan}    ${nan}    
    Select Module    ${Invoices}    ${nan}    ${nan}    
    Filter Details In Invoices    ${account_number}    ${invoice_number}    ${nan}    
    Navigate To Details Page From Invoices    ${invoice_number}    ${nan}    ${nan}    
    Select Tab In Invoice Details Page    ${Email Invoice}    ${nan}    ${nan}    
    Send A Copy Of Email Invoice    ${EMAIL}    ${sdtcorp@gmail.com}    ${nan}    
    Validate Transaction Receipt Is Received In Email    ${transaction_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Id After Processing Transaction
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Filter Details In Invoices
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Details Page From Invoices
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Select Tab In Invoice Details Page
    [Arguments]    ${Email Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Email Invoice}    ${nan}    ${nan}

Send A Copy Of Email Invoice
    [Arguments]    ${EMAIL}    ${sdtcorp@gmail.com}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${sdtcorp@gmail.com}    ${nan}

Validate Transaction Receipt Is Received In Email
    [Arguments]    ${transaction_id}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${transaction_id}    ${nan}    ${nan}

","The test case TC_10, titled ""Validate Merchant Is Able To Send Invoice Email Copy From Invoice Details Page,"" aims to verify that a merchant has the capability to send an email copy of an invoice to a customer directly from the invoice details page within an application or system. 

### Purpose:

1. **Functionality Verification**:
    - Ensure that the feature for sending an invoice copy via email from the invoice details page is working as intended.

2. **User Experience**:
    - Confirm that the merchant can easily and effectively complete this action, which contributes to a fluid and efficient user experience.

3. **Accuracy of Invoice Information**:
    - Validate that the emailed invoice copy contains accurate and complete invoice details, matching those on the system"
Generate data-driven clientcentral_testcases for invoices Testcases TC_11 Validate Merchant Is Able To Cancel Send Invoice Email Popup,data-driven,TC_11 Validate Merchant Is Able To Cancel Send Invoice Email Popup,"*** Settings ***
Documentation    Validate TC_11 Validate Merchant Is Able To Cancel Send Invoice Email Popup
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_11 Validate Merchant Is Able To Cancel Send Invoice Email Popup
    [Documentation]    Validate TC_11 Validate Merchant Is Able To Cancel Send Invoice Email Popup using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Id After Processing Transaction    ${response}    ${nan}    ${nan}    
    Select Module    ${Invoices}    ${nan}    ${nan}    
    Filter Details In Invoices    ${account_number}    ${invoice_number}    ${nan}    
    Navigate To Details Page From Invoices    ${invoice_number}    ${nan}    ${nan}    
    Select Tab In Invoice Details Page    ${Email Invoice}    ${nan}    ${nan}    
    Validate Send From My Email Address Information Is Displayed    ${nan}    ${nan}    ${nan}    
    Cancel Send Invoice Receipt    ${nan}    ${nan}    ${nan}    
    Validate Transaction Receipt Is Received In Email    ${transaction_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Id After Processing Transaction
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Filter Details In Invoices
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Details Page From Invoices
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Select Tab In Invoice Details Page
    [Arguments]    ${Email Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Email Invoice}    ${nan}    ${nan}

Validate Send From My Email Address Information Is Displayed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Cancel Send Invoice Receipt
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Transaction Receipt Is Received In Email
    [Arguments]    ${transaction_id}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${transaction_id}    ${nan}    ${nan}

","**Test Case: TC_11 - Validate Merchant Is Able To Cancel Send Invoice Email Popup**

**Purpose:**

The primary objective of this test case is to ensure that the merchant has the functionality to cancel an ongoing operation of sending an invoice email through a popup interface. This includes verifying that upon triggering the 'Send Invoice Email' feature, a popup window appears with options to proceed or cancel the action. The test case aims to confirm the following:

1. **Popup Appearance**: Upon initiating the 'Send Invoice Email' action, a popup window should be displayed to the merchant.
2. **Cancel Option**: The popup must provide a clear option for cancellation.
3. **Functionality of Cancel Option**: When the merchant selects the cancel"
Generate data-driven clientcentral_testcases for invoices Testcases TC_12 Validate Merchant Is Able To Navigate To Virtual Terminal By Clicking On Pay Invoice in Invoice Details Tab,data-driven,TC_12 Validate Merchant Is Able To Navigate To Virtual Terminal By Clicking On Pay Invoice in Invoice Details Tab,"*** Settings ***
Documentation    Validate TC_12 Validate Merchant Is Able To Navigate To Virtual Terminal By Clicking On Pay Invoice in Invoice Details Tab
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_12 Validate Merchant Is Able To Navigate To Virtual Terminal By Clicking On Pay Invoice in Invoice Details Tab
    [Documentation]    Validate TC_12 Validate Merchant Is Able To Navigate To Virtual Terminal By Clicking On Pay Invoice in Invoice Details Tab using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}    
    Select Module    ${Invoices}    ${nan}    ${}    
    Filter Details In Invoices    ${account_number}    ${invoice_number}    ${}    
    Navigate To Details Page From Invoices    ${invoice_number}    ${nan}    ${}    
    Select Tab In Invoice Details Page    ${Pay Invoice}    ${nan}    ${}    
    Validate Virtual Terminal Page Is Displayed    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${}

Filter Details In Invoices
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Navigate To Details Page From Invoices
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

Select Tab In Invoice Details Page
    [Arguments]    ${Pay Invoice}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Pay Invoice}    ${nan}    ${}

Validate Virtual Terminal Page Is Displayed
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The purpose of the test case 'TC_12 Validate Merchant Is Able To Navigate To Virtual Terminal By Clicking On Pay Invoice in Invoice Details Tab' is to verify that a merchant has the ability to seamlessly access the Virtual Terminal from the Invoice Details tab by clicking on the 'Pay Invoice' button. This test ensures that the pathway is functional and that the navigation process is smooth and intuitive. Successful execution of this test case confirms that merchants can efficiently proceed with invoice payments, which is critical for maintaining a streamlined and professional billing process."
Validate data-driven clientcentral_testcases for invoices Testcases TC_13 Validate Merchant Is Able Navigate To Invoice Page By Clicking On Customer View in Invoice Details Page,data-driven,TC_13 Validate Merchant Is Able Navigate To Invoice Page By Clicking On Customer View in Invoice Details Page,"*** Settings ***
Documentation    Validate TC_13 Validate Merchant Is Able Navigate To Invoice Page By Clicking On Customer View in Invoice Details Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_13 Validate Merchant Is Able Navigate To Invoice Page By Clicking On Customer View in Invoice Details Page
    [Documentation]    Validate TC_13 Validate Merchant Is Able Navigate To Invoice Page By Clicking On Customer View in Invoice Details Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}    
    Select Module    ${Invoices}    ${nan}    ${}    
    Filter Details In Invoices    ${account_number}    ${invoice_number}    ${}    
    Navigate To Details Page From Invoices    ${invoice_number}    ${nan}    ${}    
    Select Tab In Invoice Details Page    ${Customer View}    ${nan}    ${}    
    Validate PayNOW Invoice Details Page Is Displayed    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${}

Filter Details In Invoices
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Navigate To Details Page From Invoices
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

Select Tab In Invoice Details Page
    [Arguments]    ${Customer View}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customer View}    ${nan}    ${}

Validate PayNOW Invoice Details Page Is Displayed
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The purpose of the test case 'TC_13 Validate Merchant Is Able to Navigate to Invoice Page by Clicking on Customer View in Invoice Details Page' is to ensure that merchants using the application can effectively navigate between the customer view and the invoice page within the invoice details section. This test case aims to verify that when a merchant is viewing detailed information about an invoice, they can click on a specific element or link (referred to as ""Customer View"") to seamlessly transition back to the main invoice page. This functionality is crucial for user experience, ensuring that merchants can efficiently manage and review invoices and related customer information without encountering navigation issues."
Build data-driven clientcentral_testcases for invoices Testcases TC_14 Validate Merchant Is Able To Navigate To Invoice Details Page From Invoice Page,data-driven,TC_14 Validate Merchant Is Able To Navigate To Invoice Details Page From Invoice Page,"*** Settings ***
Documentation    Validate TC_14 Validate Merchant Is Able To Navigate To Invoice Details Page From Invoice Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_14 Validate Merchant Is Able To Navigate To Invoice Details Page From Invoice Page
    [Documentation]    Validate TC_14 Validate Merchant Is Able To Navigate To Invoice Details Page From Invoice Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${Invoices}    ${nan}    ${nan}    
    Filter Details In Invoices    ${account_number}    ${invoice_number}    ${nan}    
    Navigate To Details Page From Invoices    ${invoice_number}    ${nan}    ${nan}    
    Validate Invoice Details Page Is Displayed    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Filter Details In Invoices
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Details Page From Invoices
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Validate Invoice Details Page Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","The purpose of the test case **'TC_14 Validate Merchant Is Able To Navigate To Invoice Details Page From Invoice Page'** is to ensure that merchants using a system or application can successfully access detailed information about individual invoices. Specifically, the test case verifies that upon selecting an invoice from a general invoice list or overview page, the navigation to a detailed view of that specific invoice is functional and displays the appropriate information.

**Key Points of the Test Case:**
1. **Initial State:** The merchant is on the main Invoice Page, which lists all invoices.
2. **Action:** The merchant selects an invoice from this list.
3. **Expected Outcome:** The system redirects the merchant to the Invoice Details Page for the selected invoice.
4. **"
Generate data-driven clientcentral_testcases for invoices Testcases TC_15 Validate Merchant Is Able To Navigate To Customer Details By Clicking On Customer Name,data-driven,TC_15 Validate Merchant Is Able To Navigate To Customer Details By Clicking On Customer Name,"*** Settings ***
Documentation    Validate TC_15 Validate Merchant Is Able To Navigate To Customer Details By Clicking On Customer Name
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_15 Validate Merchant Is Able To Navigate To Customer Details By Clicking On Customer Name
    [Documentation]    Validate TC_15 Validate Merchant Is Able To Navigate To Customer Details By Clicking On Customer Name using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${Invoices}    ${nan}    ${nan}    
    Filter Details In Invoices    ${account_number}    ${invoice_number}    ${nan}    
    Navigate To Details Page From Invoices    ${account_number_Testing}    ${nan}    ${nan}    
    Validate Customer Details Page Is Displayed    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Filter Details In Invoices
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Details Page From Invoices
    [Arguments]    ${account_number_Testing}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number_Testing}    ${nan}    ${nan}

Validate Customer Details Page Is Displayed
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","The purpose of the test case 'TC_15 Validate Merchant Is Able To Navigate To Customer Details By Clicking On Customer Name' is to ensure that when a merchant clicks on a customer's name within the merchant interface, the system successfully redirects them to the detailed information page of that specific customer. The test verifies the correct functionality and navigation flow, ensuring that merchants have seamless and accurate access to customer details. This functionality is critical for providing merchants with the information they need to manage and interact with their customers effectively."
Validate data-driven clientcentral_testcases for invoices Testcases TC_16 Validate Merchant Is Able To Navigate To Customer Details Page From Invoice Page,data-driven,TC_16 Validate Merchant Is Able To Navigate To Customer Details Page From Invoice Page,"*** Settings ***
Documentation    Validate TC_16 Validate Merchant Is Able To Navigate To Customer Details Page From Invoice Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_16 Validate Merchant Is Able To Navigate To Customer Details Page From Invoice Page
    [Documentation]    Validate TC_16 Validate Merchant Is Able To Navigate To Customer Details Page From Invoice Page using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${Invoices}    ${nan}    ${nan}    
    Filter Details In Invoices    ${account_number}    ${invoice_number}    ${nan}    
    Navigate To Details Page From Invoices    ${account_number}    ${nan}    ${nan}    
    Validate Customer Details Page Is Displayed    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Filter Details In Invoices
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Details Page From Invoices
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Validate Customer Details Page Is Displayed
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","Test Case 'TC_16 Validate Merchant Is Able To Navigate To Customer Details Page From Invoice Page' aims to ensure that a merchant using the system can successfully access and view specific customer details starting from an invoice page. The primary objectives of this test case are as follows:

1. Verify the availability of a navigational link or button on the invoice page that directs to the customer details page.
2. Ensure that clicking on the said link/button correctly redirects the merchant to the customer details page.
3. Validate that the customer details page displays accurate and complete information related to the customer associated with the invoice.

This test case is crucial for confirming the system's usability and functional integrity, allowing merchants to efficiently access customer information for tasks such as order verification, customer"
Build data-driven clientcentral_testcases for invoices Testcases TC_17 Validate Merchant Is Able To View Sent Date And Provider Response Message Of Email,data-driven,TC_17 Validate Merchant Is Able To View Sent Date And Provider Response Message Of Email,"*** Settings ***
Documentation    Validate TC_17 Validate Merchant Is Able To View Sent Date And Provider Response Message Of Email
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_17 Validate Merchant Is Able To View Sent Date And Provider Response Message Of Email
    [Documentation]    Validate TC_17 Validate Merchant Is Able To View Sent Date And Provider Response Message Of Email using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Send Email Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Validate Sent Date And Provider Response Message Is Displayed    ${today}    ${OK}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Send Email Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Sent Date And Provider Response Message Is Displayed
    [Arguments]    ${today}    ${OK}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${today}    ${OK}    ${nan}

","The test case 'TC_17 Validate Merchant Is Able To View Sent Date And Provider Response Message Of Email' is designed to verify that merchants using a specified system or platform can correctly see the date when an email was sent and view the response message from the email provider. 

### Purpose:
1. **Sent Date Visibility**: Ensure that after an email is sent through the platform, the merchant can view the exact date and time the email was dispatched. This feature is crucial for tracking and record-keeping purposes.

2. **Provider Response Message**: Ensure the merchant can see the response message from the email provider, which can include success notifications, bounce-back messages, or errors. This feedback helps the merchant understand the status of their email communications,"
Generate data-driven clientcentral_testcases for invoices Testcases TC_18 Validate Merchant Is Able To View Subject And Sent Address Of Email,data-driven,TC_18 Validate Merchant Is Able To View Subject And Sent Address Of Email,"*** Settings ***
Documentation    Validate TC_18 Validate Merchant Is Able To View Subject And Sent Address Of Email
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_18 Validate Merchant Is Able To View Subject And Sent Address Of Email
    [Documentation]    Validate TC_18 Validate Merchant Is Able To View Subject And Sent Address Of Email using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Send Email Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Validate Subject And Sent Address Is Displayed    ${invoice_number}    ${corpsdt@gmail.com}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Send Email Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Subject And Sent Address Is Displayed
    [Arguments]    ${invoice_number}    ${corpsdt@gmail.com}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${corpsdt@gmail.com}    ${nan}

","### Test Case Summary: TC_18 - Validate Merchant Is Able To View Subject And Sent Address Of Email

**Purpose:** The purpose of this test case is to verify that a merchant can correctly view the subject and the sent address of an email within the system. Ensuring that these elements are visible and accurate is crucial for the merchant to track communications and manage correspondence effectively.

**Steps to Validate:**
1. **Login as Merchant:** Log in to the system using valid merchant credentials.
2. **Navigate to Email Section:** Go to the specific section of the system where emails are displayed (e.g., inbox, sent items).
3. **Locate Email:** Identify a specific email from the list by its unique identifiers (date, time, order"
Validate data-driven clientcentral_testcases for invoices Testcases TC_19 Validate Merchant Is Able To View Format Type For Single Invoice,data-driven,TC_19 Validate Merchant Is Able To View Format Type For Single Invoice,"*** Settings ***
Documentation    Validate TC_19 Validate Merchant Is Able To View Format Type For Single Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_19 Validate Merchant Is Able To View Format Type For Single Invoice
    [Documentation]    Validate TC_19 Validate Merchant Is Able To View Format Type For Single Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Send Email Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Validate Email Format Type Is Displayed    ${Single}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Send Email Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Email Format Type Is Displayed
    [Arguments]    ${Single}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Single}    ${nan}    ${nan}

","The purpose of test case ""TC_19 Validate Merchant Is Able To View Format Type For Single Invoice"" is to ensure that merchants have the capability to view the format type of a single invoice within the system. This functionality is crucial as it allows merchants to confirm the presentation and structuring of their invoices before they're sent out to clients or used for internal records.

Key objectives of this test case include:
1. Verifying that the invoice format type (e.g., PDF, HTML, etc.) is accessible and visible to the merchant.
2. Ensuring that the correct format type is displayed for the selected invoice.
3. Confirming the accuracy and consistency of the format type information across different invoices and merchant accounts.

By validating this feature, the test"
Generate data-driven clientcentral_testcases for invoices Testcases TC_20 Validate Merchant Is Able To View Format Type For Multiple Invoices,data-driven,TC_20 Validate Merchant Is Able To View Format Type For Multiple Invoices,"*** Settings ***
Documentation    Validate TC_20 Validate Merchant Is Able To View Format Type For Multiple Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_20 Validate Merchant Is Able To View Format Type For Multiple Invoices
    [Documentation]    Validate TC_20 Validate Merchant Is Able To View Format Type For Multiple Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Create Multiple Invoices Through API    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Transaction For Multiple Invoices    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}    
    Send Email Invoice    ${account_number}    ${invoices_list.1}    ${nan}    
    Validate Email Format Type Is Displayed    ${Summary}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Transaction For Multiple Invoices
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}

Send Email Invoice
    [Arguments]    ${account_number}    ${invoices_list.1}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoices_list.1}    ${nan}

Validate Email Format Type Is Displayed
    [Arguments]    ${Summary}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Summary}    ${nan}    ${nan}

","**Test Case Summary: TC_20 Validate Merchant Is Able To View Format Type For Multiple Invoices**

**Purpose:**
The objective of this test case is to verify that merchants have the capability to view the format type of multiple invoices within their system. This functionality is essential for merchants as it enables them to understand and manage the format type of invoices efficiently, ensuring compliance with business standards and simplifying audit processes. Demonstrating the ability to view invoice formats in bulk can enhance the user experience by providing a streamlined process for handling and reviewing financial documentation.

Key Aspects to Validate:
1. **Accessibility**: Ensure merchants can easily access the section or interface where multiple invoices are displayed.
2. **Invoice List**: Verify that the system allows merchants to"
Validate data-driven clientcentral_testcases for invoices Testcases TC_21 Validate Merchant Is Able To View Pending Payments Details,data-driven,TC_21 Validate Merchant Is Able To View Pending Payments Details,"*** Settings ***
Documentation    Validate TC_21 Validate Merchant Is Able To View Pending Payments Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_21 Validate Merchant Is Able To View Pending Payments Details
    [Documentation]    Validate TC_21 Validate Merchant Is Able To View Pending Payments Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Process Payment Transaction From Virtual Terminal    ${nan}    ${nan}    ${nan}    
    Navigate To Financial Payments    ${account_number}    ${invoice_number}    ${nan}    
    Validate Pending Payments Details After Transaction From PayNOW    ${gateway_id}    ${PayNOW}    ${Received}    
    Validate Transaction Source After Transaction From Unified    ${id}    ${Unified Virtual Terminal}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Process Payment Transaction From Virtual Terminal
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Navigate To Financial Payments
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Validate Pending Payments Details After Transaction From PayNOW
    [Arguments]    ${gateway_id}    ${PayNOW}    ${Received}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${PayNOW}    ${Received}

Validate Transaction Source After Transaction From Unified
    [Arguments]    ${id}    ${Unified Virtual Terminal}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${id}    ${Unified Virtual Terminal}    ${nan}

","The test case ""TC_21 Validate Merchant Is Able To View Pending Payments Details"" is designed to ensure that a merchant can successfully access and view details of pending payments within a system. The purpose of this test is to verify that the functionality allowing merchants to track payments that have not yet been completed or processed is working as expected. This involves checking that the correct information is displayed for each pending payment, such as the payment amount, date, and the pending status, and that the interface is accessible and user-friendly. Ensuring this capability is crucial for merchants to manage their transactions effectively, monitor cash flow, and follow up on outstanding payments."
Build data-driven clientcentral_testcases for invoices Testcases TC_22 Validate Merchant Is Able To Navigate To Transaction Details From Pending Payments,data-driven,TC_22 Validate Merchant Is Able To Navigate To Transaction Details From Pending Payments,"*** Settings ***
Documentation    Validate TC_22 Validate Merchant Is Able To Navigate To Transaction Details From Pending Payments
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_22 Validate Merchant Is Able To Navigate To Transaction Details From Pending Payments
    [Documentation]    Validate TC_22 Validate Merchant Is Able To Navigate To Transaction Details From Pending Payments using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Select Module    ${Invoices}    ${nan}    ${nan}    
    Filter Details In Invoices    ${account_number}    ${invoice_number}    ${nan}    
    Navigate To Details Page From Invoices    ${invoice_number}    ${nan}    ${nan}    
    Select Tab In Invoice Details Page    ${Financial/Payments}    ${nan}    ${nan}    
    Navigate To Transaction Details From Pending Payments    ${gateway_id}    ${nan}    ${nan}    
    Validate Transaction Details Page Is Displayed    ${gateway_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Filter Details In Invoices
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Details Page From Invoices
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Select Tab In Invoice Details Page
    [Arguments]    ${Financial/Payments}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Financial/Payments}    ${nan}    ${nan}

Navigate To Transaction Details From Pending Payments
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Transaction Details Page Is Displayed
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

","The test case 'TC_22 Validate Merchant Is Able To Navigate To Transaction Details From Pending Payments' aims to ensure that a merchant can successfully navigate from the pending payments section to the detailed view of a specific transaction within a payment processing system or platform. 

The purpose of this test case is to verify the following:

1. The user-friendly functionality of the system, ensuring that merchants can easily access detailed information about pending transactions.
2. The seamless navigation links between high-level payment overviews (such as pending payments) and detailed transaction breakdowns.
3. The availability of all necessary transaction details (e.g., transaction ID, payment amount, customer information, payment status) that merchants might need for payment management and reconciliation.
4. The interface's responsiveness"
Build data-driven clientcentral_testcases for invoices Testcases TC_23 Validate Merchant Is Able To Send From My Email Address,data-driven,TC_23 Validate Merchant Is Able To Send From My Email Address,"*** Settings ***
Documentation    Validate TC_23 Validate Merchant Is Able To Send From My Email Address
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_23 Validate Merchant Is Able To Send From My Email Address
    [Documentation]    Validate TC_23 Validate Merchant Is Able To Send From My Email Address using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Id After Processing Transaction    ${response}    ${nan}    ${nan}    
    Select Module    ${Invoices}    ${nan}    ${nan}    
    Filter Details In Invoices    ${account_number}    ${invoice_number}    ${nan}    
    Navigate To Details Page From Invoices    ${invoice_number}    ${nan}    ${nan}    
    Select Tab In Invoice Details Page    ${Email Invoice}    ${nan}    ${nan}    
    Select Send From My Email Address    ${EMAIL}    ${nan}    ${nan}    
    Validate Transaction Receipt Is Received In Email    ${transaction_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Id After Processing Transaction
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Filter Details In Invoices
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Navigate To Details Page From Invoices
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Select Tab In Invoice Details Page
    [Arguments]    ${Email Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Email Invoice}    ${nan}    ${nan}

Select Send From My Email Address
    [Arguments]    ${EMAIL}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${nan}    ${nan}

Validate Transaction Receipt Is Received In Email
    [Arguments]    ${transaction_id}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${transaction_id}    ${nan}    ${nan}

","The test case 'TC_23 Validate Merchant Is Able To Send From My Email Address' is designed to ensure that merchants on a given platform have the capability to send emails from their own email addresses. The purpose of this test is to confirm that the system allows merchants to use their designated email addresses to communicate directly with their customers or other parties. This functionality typically involves verifying the following:

1. Merchants can input their email address in the appropriate setting or field within the merchant interface.
2. The system correctly validates and accepts the merchant's email address.
3. Emails sent from the platform appear as coming from the merchant's specified email address.
4. Recipients receive the email correctly without any issues related to the email delivery, such as being marked"
Generate data-driven clientcentral_testcases for invoices Testcases TC_24 Validate Merchant Is Able To Navigate To Customer Details From Invoice Summary,data-driven,TC_24 Validate Merchant Is Able To Navigate To Customer Details From Invoice Summary,"*** Settings ***
Documentation    Validate TC_24 Validate Merchant Is Able To Navigate To Customer Details From Invoice Summary
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_24 Validate Merchant Is Able To Navigate To Customer Details From Invoice Summary
    [Documentation]    Validate TC_24 Validate Merchant Is Able To Navigate To Customer Details From Invoice Summary using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Select Module    ${Invoices}    ${nan}    ${nan}    
    Filter Details In Invoices    ${account_number}    ${invoice_number}    ${Invoice Number}    
    Navigate To Details Page From Invoices    ${invoice_number}    ${nan}    ${nan}    
    Select Tab In Invoice Details Page    ${Summary}    ${nan}    ${nan}    
    Navigate To Customer Details Page From Summary    ${account_number}    ${nan}    ${nan}    
    Validate Customer Details Page Is Displayed    ${account_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Filter Details In Invoices
    [Arguments]    ${account_number}    ${invoice_number}    ${Invoice Number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${Invoice Number}

Navigate To Details Page From Invoices
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Select Tab In Invoice Details Page
    [Arguments]    ${Summary}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Summary}    ${nan}    ${nan}

Navigate To Customer Details Page From Summary
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Validate Customer Details Page Is Displayed
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

","The test case 'TC_24 Validate Merchant Is Able To Navigate To Customer Details From Invoice Summary' aims to ensure that merchants can seamlessly access customer details directly from the invoice summary page within a financial or billing application. The purpose of this test case is to verify the following:

1. **Functionality Verification**: Ensure that the navigation link or button on the invoice summary page correctly takes the user to the customer details page.
2. **User Experience**: Confirm that the transition between these pages is smooth and intuitive, contributing to a positive user experience.
3. **Data Integrity**: Validate that the customer details viewed match the information related to the invoice selected, ensuring the accuracy and consistency of the data.
4. **Access Control**: Check"
Build data-driven clientcentral_testcases for invoices Testcases TC_25 Validate Merchant Is Able to Expand And Collapes Invoice Details,data-driven,TC_25 Validate Merchant Is Able to Expand And Collapes Invoice Details,"*** Settings ***
Documentation    Validate TC_25 Validate Merchant Is Able to Expand And Collapes Invoice Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_25 Validate Merchant Is Able to Expand And Collapes Invoice Details
    [Documentation]    Validate TC_25 Validate Merchant Is Able to Expand And Collapes Invoice Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Send Email Invoice    ${account_number}    ${invoice_number}    ${nan}    
    Expand Email Details    ${nan}    ${nan}    ${nan}    
    Validate Email Details Are Expanded    ${nan}    ${nan}    ${nan}    
    Collapse Email Details    ${nan}    ${nan}    ${nan}    
    Validate Email Details Are Collapsed    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Send Email Invoice
    [Arguments]    ${account_number}    ${invoice_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${nan}

Expand Email Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Email Details Are Expanded
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Collapse Email Details
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Email Details Are Collapsed
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case TC_25, titled ""Validate Merchant Is Able to Expand And Collapse Invoice Details,"" aims to ensure that the user interface functionality for displaying invoice details is working correctly. Specifically, its purpose is to verify that a merchant can successfully expand an invoice to view detailed information and then collapse it to hide the details. This functionality is crucial for maintaining an organized and efficient user experience, enabling merchants to quickly access and manage invoice information as needed without cluttering the interface. By validating this feature, the test case ensures that the invoice management process is both user-friendly and functional."
Validate data-driven clientcentral_testcases for invoices Testcases TC_26 Validate Merchant Is Able To Enable Only show open invoices,data-driven,TC_26 Validate Merchant Is Able To Enable Only show open invoices,"*** Settings ***
Documentation    Validate TC_26 Validate Merchant Is Able To Enable Only show open invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_26 Validate Merchant Is Able To Enable Only show open invoices
    [Documentation]    Validate TC_26 Validate Merchant Is Able To Enable Only show open invoices using the following steps
Select Module    ${Invoices}    ${}    ${}    
    Enable Toggle Button    ${Only show past due invoices}    ${}    ${}    
    Validate Toggle Button Is Enabled    ${Only show past due invoices}    ${}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${Invoices}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${}    ${}

Enable Toggle Button
    [Arguments]    ${Only show past due invoices}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Only show past due invoices}    ${}    ${}

Validate Toggle Button Is Enabled
    [Arguments]    ${Only show past due invoices}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Only show past due invoices}    ${}    ${}

","Test Case 'TC_26 Validate Merchant Is Able To Enable Only Show Open Invoices' is designed to verify that a merchant has the functionality to configure their invoicing system such that only open (unpaid or partially paid) invoices are displayed. The primary purpose of this test case is to ensure that the invoicing system implements a filter or a setting which, when enabled, excludes closed (fully paid or cancelled) invoices from the default view.

Here are key points indicating the purpose and what should be verified in this test case:

1. **Configuration Setting/Filter Presence**: Verify the presence of an option (checkbox, switch, toggle, or dropdown) within the merchant's invoicing system to 'Only Show Open Invoices.'
   
2."
Validate data-driven clientcentral_testcases for invoices Testcases TC_27 Validate Merchant Is Able To Enable Only show past due invoices,data-driven,TC_27 Validate Merchant Is Able To Enable Only show past due invoices,"*** Settings ***
Documentation    Validate TC_27 Validate Merchant Is Able To Enable Only show past due invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_27 Validate Merchant Is Able To Enable Only show past due invoices
    [Documentation]    Validate TC_27 Validate Merchant Is Able To Enable Only show past due invoices using the following steps
Select Module    ${Invoices}    ${}    ${}    
    Enable Toggle Button    ${Only show past due invoices}    ${}    ${}    
    Validate Toggle Button Is Enabled    ${Only show past due invoices}    ${}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${Invoices}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${}    ${}

Enable Toggle Button
    [Arguments]    ${Only show past due invoices}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Only show past due invoices}    ${}    ${}

Validate Toggle Button Is Enabled
    [Arguments]    ${Only show past due invoices}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Only show past due invoices}    ${}    ${}

","**Test Case: TC_27 Validate Merchant Is Able To Enable 'Only Show Past Due Invoices'**

**Purpose:**

The main objective of this test case is to ensure that merchants using the system have the capability to filter and view only the past due invoices. This functionality is essential for merchants to efficiently manage and prioritize their overdue payments, aiding in better financial management and follow-ups. By validating this feature, the test aims to confirm that:

1. The option to filter and display only past due invoices is accessible to the merchant.
2. The system correctly updates the list of invoices to show exclusively those that are past their due date when this filter is activated.
3. The user interface (UI) responds appropriately by indicating that the filter is"
Generate data-driven clientcentral_testcases for invoices Testcases TC_28 Validate Merchant Is Able To View Invoices In Next And Previous Page,data-driven,TC_28 Validate Merchant Is Able To View Invoices In Next And Previous Page,"*** Settings ***
Documentation    Validate TC_28 Validate Merchant Is Able To View Invoices In Next And Previous Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_28 Validate Merchant Is Able To View Invoices In Next And Previous Page
    [Documentation]    Validate TC_28 Validate Merchant Is Able To View Invoices In Next And Previous Page using the following steps
Select Module    ${Invoices}    ${}    ${}    
    Navigate To Pages    ${next}    ${}    ${}    
    Validate Details Are Displayed In Next And Previous Page    ${26 - 50}    ${}    ${}    
    Navigate To Pages    ${previous}    ${}    ${}    
    Validate Details Are Displayed In Next And Previous Page    ${1 - 25}    ${}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${Invoices}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${}    ${}

Navigate To Pages
    [Arguments]    ${next}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${next}    ${}    ${}

Validate Details Are Displayed In Next And Previous Page
    [Arguments]    ${26 - 50}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${26 - 50}    ${}    ${}

Navigate To Pages
    [Arguments]    ${previous}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${previous}    ${}    ${}

Validate Details Are Displayed In Next And Previous Page
    [Arguments]    ${1 - 25}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${1 - 25}    ${}    ${}

","The test case 'TC_28 Validate Merchant Is Able To View Invoices In Next And Previous Page' is designed to ensure that the functionality for navigating through multiple pages of invoices is working correctly in the merchant's dashboard or invoice management system. 

### Purpose:
1. **Validate Pagination Functionality**: Confirm that the pagination controls (Next and Previous buttons) are functioning properly, allowing the merchant to navigate through different pages of invoices.
2. **User Experience**: Ensure the user experience is smooth and intuitive for merchants when they need to access their invoices across multiple pages.
3. **Accessibility and Usability**: Check that the navigation buttons are accessible and easy to use, including visual indicators or labels that help guide the merchant.
4. **"
Generate data-driven clientcentral_testcases for invoices Testcases TC_29 Validate Merchant Is Able To View Invoices In Last And First Page,data-driven,TC_29 Validate Merchant Is Able To View Invoices In Last And First Page,"*** Settings ***
Documentation    Validate TC_29 Validate Merchant Is Able To View Invoices In Last And First Page
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_29 Validate Merchant Is Able To View Invoices In Last And First Page
    [Documentation]    Validate TC_29 Validate Merchant Is Able To View Invoices In Last And First Page using the following steps
Select Module    ${Invoices}    ${}    ${}    
    Navigate To Pages    ${last}    ${}    ${}    
    Validate Details Are Displayed In Last Page    ${nan}    ${}    ${}    
    Navigate To Pages    ${first}    ${}    ${}    
    Validate Details Are Displayed In First Page    ${nan}    ${}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${Invoices}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${}    ${}

Navigate To Pages
    [Arguments]    ${last}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${last}    ${}    ${}

Validate Details Are Displayed In Last Page
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Navigate To Pages
    [Arguments]    ${first}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${first}    ${}    ${}

Validate Details Are Displayed In First Page
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

","The test case 'TC_29 Validate Merchant Is Able To View Invoices In Last And First Page' is aimed at verifying the functionality of a web application's pagination system within the merchant portal, specifically related to the invoice viewing feature. The purpose of this test is to ensure that merchants can correctly navigate to and view invoices listed on both the first and last pages of the invoice list. This involves checking that:

1. The pagination controls (e.g., ""First Page"", ""Last Page"", ""Next"", ""Previous"") are functioning as intended.
2. The correct set of invoices are displayed when the merchant navigates to the first and the last pages.
3. The user interface updates appropriately and remains responsive during these actions.
4. No errors or"
Build data-driven clientcentral_testcases for invoices Testcases TC_30 Validate Merchant Is Able To Filter Invoice Data In Invoice Details Grid,data-driven,TC_30 Validate Merchant Is Able To Filter Invoice Data In Invoice Details Grid,"*** Settings ***
Documentation    Validate TC_30 Validate Merchant Is Able To Filter Invoice Data In Invoice Details Grid
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_30 Validate Merchant Is Able To Filter Invoice Data In Invoice Details Grid
    [Documentation]    Validate TC_30 Validate Merchant Is Able To Filter Invoice Data In Invoice Details Grid using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}    
    Select Module    ${Invoices}    ${nan}    ${}    
    Filter Invoice In Grid    ${invoice_number}    ${nan}    ${}    
    Validate Filtered Invoice Is Displayed    ${invoice_number}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${}

Filter Invoice In Grid
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

Validate Filtered Invoice Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

","The test case **'TC_30 Validate Merchant Is Able To Filter Invoice Data In Invoice Details Grid'** is designed to verify the functionality of the invoice filtering feature in the invoice details grid within a merchant's dashboard. The purpose of this test case is to ensure that the merchant can effectively use the filtering options to locate specific invoices based on various criteria such as date, invoice number, customer name, status, or any other filter available in the system. By successfully filtering the invoice data, the merchant should be able to manage and review invoices more efficiently, thereby improving the overall usability and functionality of the invoicing system. This test ensures that the filtering feature works accurately and reliably, providing correct and relevant results as per the specified filter conditions."
Create data-driven clientcentral_testcases for invoices Testcases TC_31 Validate Merchant Is Able To View The Email Clicked Date And Count when It Is Clicked,data-driven,TC_31 Validate Merchant Is Able To View The Email Clicked Date And Count when It Is Clicked,"*** Settings ***
Documentation    Validate TC_31 Validate Merchant Is Able To View The Email Clicked Date And Count when It Is Clicked
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_31 Validate Merchant Is Able To View The Email Clicked Date And Count when It Is Clicked
    [Documentation]    Validate TC_31 Validate Merchant Is Able To View The Email Clicked Date And Count when It Is Clicked using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Select Module    ${Invoices}    ${nan}    ${nan}    
    Filter Details In Invoices    ${account_number}    ${invoice_number}    ${Invoice Number}    
    Navigate To Details Page From Invoices    ${invoice_number}    ${nan}    ${nan}    
    Select Tab In Invoice Details Page    ${Email Invoice}    ${nan}    ${nan}    
    Enter Email Address And Message In Send Invoice Email    ${EMAIL}    ${nan}    ${nan}    
    Open Paynow From Email    ${EMAIL}    ${EMAIL_PASSWORD}    ${TEST Invoice invoice_number from Sterling Cooper}    
    Validate Email Clicked Date And Count    ${today}    ${1}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Select Module
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Filter Details In Invoices
    [Arguments]    ${account_number}    ${invoice_number}    ${Invoice Number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${Invoice Number}

Navigate To Details Page From Invoices
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Select Tab In Invoice Details Page
    [Arguments]    ${Email Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Email Invoice}    ${nan}    ${nan}

Enter Email Address And Message In Send Invoice Email
    [Arguments]    ${EMAIL}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${nan}    ${nan}

Open Paynow From Email
    [Arguments]    ${EMAIL}    ${EMAIL_PASSWORD}    ${TEST Invoice invoice_number from Sterling Cooper}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${EMAIL_PASSWORD}    ${TEST Invoice invoice_number from Sterling Cooper}

Validate Email Clicked Date And Count
    [Arguments]    ${today}    ${1}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${today}    ${1}    ${nan}

","The test case 'TC_31 Validate Merchant Is Able To View The Email Clicked Date And Count when It Is Clicked' is designed to ensure that a merchant can successfully view specific details, such as the date and the count of clicks, related to emails they have sent. The purpose of this test case is to verify that:

1. The system correctly records the date when a recipient clicks on an email sent by the merchant.
2. The system accurately counts the number of times the email has been clicked by recipients.
3. The merchant can easily access and view these details from their user interface or reporting dashboard.

By validating these functionalities, the test case ensures that merchants can gain insights into their email campaign performance, helping them to track engagement and"
Create data-driven clientcentral_testcases for payment status Testcases TC_01 Validate Merchant Is Able To Custom Date Range And View Payment Status Summary And Payment Date In Grid,data-driven,TC_01 Validate Merchant Is Able To Custom Date Range And View Payment Status Summary And Payment Date In Grid,"*** Settings ***
Documentation    Validate TC_01 Validate Merchant Is Able To Custom Date Range And View Payment Status Summary And Payment Date In Grid
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Merchant Is Able To Custom Date Range And View Payment Status Summary And Payment Date In Grid
    [Documentation]    Validate TC_01 Validate Merchant Is Able To Custom Date Range And View Payment Status Summary And Payment Date In Grid using the following steps
Select Module    ${Payment Status}    ${nan}    ${}    
    Select Custom Date Range From Calendar    ${today-3}    ${today}    ${}    
    Validate Selected Date Is Displayed In Date Range    ${today-3}    ${today}    ${}    
    Validate Transaction Payment Date    ${today-3}    ${today}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${Payment Status}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment Status}    ${nan}    ${}

Select Custom Date Range From Calendar
    [Arguments]    ${today-3}    ${today}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${today-3}    ${today}    ${}

Validate Selected Date Is Displayed In Date Range
    [Arguments]    ${today-3}    ${today}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${today-3}    ${today}    ${}

Validate Transaction Payment Date
    [Arguments]    ${today-3}    ${today}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${today-3}    ${today}    ${}

","**Test Case: TC_01 Validate Merchant Is Able To Custom Date Range And View Payment Status Summary And Payment Date In Grid**

**Purpose:**
The purpose of this test case is to verify that a merchant has the functionality to filter payment transactions based on a custom date range and subsequently view a summary of the payment statuses as well as the specific dates of the payments within a grid format.

**Key Points:**
1. **Custom Date Range Selection:** Ensure the merchant can select a start and end date to define a custom date range for viewing payment transactions.
2. **Payment Status Summary:** Validate that within the defined date range, the system accurately displays a summary of payment statuses (e.g., completed, pending, failed) for the transactions."
Validate data-driven clientcentral_testcases for payment status Testcases TC_02 Validate Merchant Is Able To View Filtered Invoice In Payment Status,data-driven,TC_02 Validate Merchant Is Able To View Filtered Invoice In Payment Status,"*** Settings ***
Documentation    Validate TC_02 Validate Merchant Is Able To View Filtered Invoice In Payment Status
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Merchant Is Able To View Filtered Invoice In Payment Status
    [Documentation]    Validate TC_02 Validate Merchant Is Able To View Filtered Invoice In Payment Status using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${Payment Status}    ${nan}    ${nan}    
    Filter With Invoice Number In Payment Status    ${invoice_number}    ${nan}    ${nan}    
    Validate Filtered Invoice Number In Displayed    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${Payment Status}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment Status}    ${nan}    ${nan}

Filter With Invoice Number In Payment Status
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Validate Filtered Invoice Number In Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","The test case 'TC_02 Validate Merchant Is Able To View Filtered Invoice In Payment Status' is designed to ensure that a merchant can successfully use a filtering feature to view invoices based on their payment statuses. The purpose of this test case is to verify that:

1. The filtering functionality works correctly on the invoicing platform, allowing merchants to select various payment statuses (e.g., paid, unpaid, overdue).
2. The system accurately displays the invoices that match the selected payment status, ensuring the filter criteria are applied correctly.
3. The user interface (UI) properly reflects the filtered results, maintaining visibility, and accessibility standards.
4. The merchant can navigate through the filtered invoices without any errors or issues.

By validating these aspects, the test"
Create data-driven clientcentral_testcases for payment status Testcases TC_03 Validate Merchant Is Able To View Received Transactions Payment Status And Payment Information (i) In Payment Status,data-driven,TC_03 Validate Merchant Is Able To View Received Transactions Payment Status And Payment Information (i) In Payment Status,"*** Settings ***
Documentation    Validate TC_03 Validate Merchant Is Able To View Received Transactions Payment Status And Payment Information (i) In Payment Status
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate Merchant Is Able To View Received Transactions Payment Status And Payment Information (i) In Payment Status
    [Documentation]    Validate TC_03 Validate Merchant Is Able To View Received Transactions Payment Status And Payment Information (i) In Payment Status using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${Payment Status}    ${nan}    ${nan}    
    Select Payment Status Type    ${Received}    ${nan}    ${nan}    
    Validate Selected Payment Type Is Displayed    ${Received}    ${nan}    ${nan}    
    Validate Payment Status    ${invoice_number}    ${Received}    ${nan}    
    Validate Payment Status Information    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${Payment Status}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment Status}    ${nan}    ${nan}

Select Payment Status Type
    [Arguments]    ${Received}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Received}    ${nan}    ${nan}

Validate Selected Payment Type Is Displayed
    [Arguments]    ${Received}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Received}    ${nan}    ${nan}

Validate Payment Status
    [Arguments]    ${invoice_number}    ${Received}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${Received}    ${nan}

Validate Payment Status Information
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case ""TC_03 Validate Merchant Is Able To View Received Transactions Payment Status And Payment Information (i) In Payment Status"" aims to ensure that a merchant can successfully access and view the payment status and detailed payment information for transactions received through a given platform or system. 

### Purpose:
1. **Authentication and Navigation:** Confirm that the merchant can log into their account and navigate to the section where transaction details are displayed.
2. **Payment Status Verification:** Verify that the merchant can see the status of each transaction (e.g., pending, completed, failed) accurately.
3. **Detailed Payment Information:** Ensure that detailed information about each transaction is readily accessible. This typically includes the transaction ID, date and time of the transaction, amount,"
Create data-driven clientcentral_testcases for payment status Testcases TC_04 Validate Merchant Is Able To View Transaction Details Page From Payment Status,data-driven,TC_04 Validate Merchant Is Able To View Transaction Details Page From Payment Status,"*** Settings ***
Documentation    Validate TC_04 Validate Merchant Is Able To View Transaction Details Page From Payment Status
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate Merchant Is Able To View Transaction Details Page From Payment Status
    [Documentation]    Validate TC_04 Validate Merchant Is Able To View Transaction Details Page From Payment Status using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Select Module    ${Payment Status}    ${nan}    ${nan}    
    Navigate To Transaction Details Page From Payment Status    ${gateway_id}    ${nan}    ${nan}    
    Validate Transaction Details Page Is Displayed    ${gateway_id}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Select Module
    [Arguments]    ${Payment Status}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment Status}    ${nan}    ${nan}

Navigate To Transaction Details Page From Payment Status
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

Validate Transaction Details Page Is Displayed
    [Arguments]    ${gateway_id}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${gateway_id}    ${nan}    ${nan}

","The purpose of the test case 'TC_04 Validate Merchant Is Able To View Transaction Details Page From Payment Status' is to ensure that merchants can access and view the detailed information of a specific transaction directly from the payment status page within the application. This test case verifies that the merchant has the capability to drill down into the details of a transaction after checking its status, thereby enabling them to review all pertinent data such as the transaction amount, date, payment method, and other relevant details without any issues. Essentially, it checks the seamless navigation and data accessibility for merchants to manage and review transactions effectively."
Generate data-driven clientcentral_testcases for payment status Testcases TC_05 Validate Merchant Is Able To View Invoice Details Page By ClickIng On Invoice Number In Payment Status,data-driven,TC_05 Validate Merchant Is Able To View Invoice Details Page By ClickIng On Invoice Number In Payment Status,"*** Settings ***
Documentation    Validate TC_05 Validate Merchant Is Able To View Invoice Details Page By ClickIng On Invoice Number In Payment Status
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Merchant Is Able To View Invoice Details Page By ClickIng On Invoice Number In Payment Status
    [Documentation]    Validate TC_05 Validate Merchant Is Able To View Invoice Details Page By ClickIng On Invoice Number In Payment Status using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment Through ACH/Echeck Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Select Module    ${Payment Status}    ${nan}    ${nan}    
    Navigate To Invoice Details Page From Payment Status    ${invoice_number}    ${nan}    ${nan}    
    Validate Invoice Details Page Is Displayed    ${invoice_number}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment Through ACH/Echeck Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Select Module
    [Arguments]    ${Payment Status}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Payment Status}    ${nan}    ${nan}

Navigate To Invoice Details Page From Payment Status
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

Validate Invoice Details Page Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${nan}

","Test Case 'TC_05 Validate Merchant Is Able To View Invoice Details Page By Clicking On Invoice Number In Payment Status'

**Purpose:**
The primary objective of this test case is to ensure that merchants can successfully access and view the detailed invoice page by clicking on the invoice number in the payment status section of their dashboard or payment records area. This functionality is vital for merchants to review specific transactions, verify payment details, and manage their financial records effectively. 

**Key Steps:**
1. **Login as Merchant:** The merchant logs into their account on the platform.
2. **Navigate to Payment Status:** The merchant goes to the section where payment statuses are listed, such as a dashboard or a specific payments section.
3. **Click on Invoice Number"
Create data-driven clientcentral_testcases for scheduled payments Testcases TC_01 Validate Merchant Is Able To Create And View Scheduled Payment Details,data-driven,TC_01 Validate Merchant Is Able To Create And View Scheduled Payment Details,"*** Settings ***
Documentation    Validate TC_01 Validate Merchant Is Able To Create And View Scheduled Payment Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Merchant Is Able To Create And View Scheduled Payment Details
    [Documentation]    Validate TC_01 Validate Merchant Is Able To Create And View Scheduled Payment Details using the following steps
Send Request To Create Customer    ${omnicorp}    ${3}    ${nan}    
    Send Request To Create Invoice For Customer    ${omnicorp}    ${account_number}    ${nan}    
    Select Merchant    ${Omnicorp}    ${nan}    ${nan}    
    Create Scheduled Payment    ${account_number}    ${nan}    ${nan}    
    Select Module    ${Customers}    ${nan}    ${nan}    
    Select Module    ${Scheduled Payments}    ${nan}    ${nan}    
    Filter Details    ${account_number}    ${nan}    ${nan}    
    Validate Scheduled Payment Details Are Displayed    ${today+1}    ${Created}    ${Manual}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${omnicorp}    ${3}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${omnicorp}    ${3}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${omnicorp}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${omnicorp}    ${account_number}    ${nan}

Select Merchant
    [Arguments]    ${Omnicorp}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Omnicorp}    ${nan}    ${nan}

Create Scheduled Payment
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Module
    [Arguments]    ${Customers}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customers}    ${nan}    ${nan}

Select Module
    [Arguments]    ${Scheduled Payments}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Scheduled Payments}    ${nan}    ${nan}

Filter Details
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Validate Scheduled Payment Details Are Displayed
    [Arguments]    ${today+1}    ${Created}    ${Manual}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${today+1}    ${Created}    ${Manual}

","Test Case Summary: TC_01 ""Validate Merchant Is Able To Create And View Scheduled Payment Details""

**Purpose:**
The purpose of TC_01 is to ensure that the merchant's scheduling payment functionality works correctly by validating two main aspects:

1. **Payment Creation:** The test verifies that a merchant can successfully create a scheduled payment. This involves checking that the merchant can access the payment scheduling interface, enter all necessary details (e.g., amount, date, recipient information), and submit the payment for scheduling without errors.

2. **Payment Viewing:** The test then checks if the merchant can view the details of the scheduled payment. This includes confirming that the scheduled payment appears in the appropriate section of the merchant’s account or dashboard, and the payment details"
Validate data-driven clientcentral_testcases for scheduled payments Testcases TC_02 Validate Merchant Is Able To Navigate To Customer Details From Scheduled Payments,data-driven,TC_02 Validate Merchant Is Able To Navigate To Customer Details From Scheduled Payments,"*** Settings ***
Documentation    Validate TC_02 Validate Merchant Is Able To Navigate To Customer Details From Scheduled Payments
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Merchant Is Able To Navigate To Customer Details From Scheduled Payments
    [Documentation]    Validate TC_02 Validate Merchant Is Able To Navigate To Customer Details From Scheduled Payments using the following steps
Send Request To Create Customer    ${omnicorp}    ${3}    ${}    
    Send Request To Create Invoice For Customer    ${omnicorp}    ${account_number}    ${}    
    Select Merchant    ${Omnicorp}    ${nan}    ${}    
    Create Scheduled Payment    ${account_number}    ${nan}    ${}    
    Select Module    ${Customers}    ${nan}    ${}    
    Select Module    ${Scheduled Payments}    ${nan}    ${}    
    Filter Details    ${account_number}    ${nan}    ${}    
    Navigate To Details Page From Invoices    ${account_number}    ${nan}    ${}    
    Validate Customer Details Page Is Displayed    ${account_number}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${omnicorp}    ${3}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${omnicorp}    ${3}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${omnicorp}    ${account_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${omnicorp}    ${account_number}    ${}

Select Merchant
    [Arguments]    ${Omnicorp}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Omnicorp}    ${nan}    ${}

Create Scheduled Payment
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Select Module
    [Arguments]    ${Customers}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customers}    ${nan}    ${}

Select Module
    [Arguments]    ${Scheduled Payments}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Scheduled Payments}    ${nan}    ${}

Filter Details
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Navigate To Details Page From Invoices
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Validate Customer Details Page Is Displayed
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

","The test case 'TC_02 Validate Merchant Is Able To Navigate To Customer Details From Scheduled Payments' is designed to ensure that the navigation functionality within a merchant platform works correctly. Specifically, it verifies that a merchant can successfully access customer details from the scheduled payments section. The purpose of this test case is to confirm that:

1. The scheduled payments section is accessible.
2. The interface allows the merchant to select a scheduled payment.
3. The merchant can then navigate from the selected scheduled payment to the corresponding customer's details.
4. The customer details page displays the appropriate information linked to the selected scheduled payment.

This test case is essential to confirm seamless navigation for merchants, and it ensures that all related customer information is readily accessible, thereby enhancing the user experience"
Create data-driven clientcentral_testcases for scheduled payments Testcases TC_03 Validate Merchant Is Able To Navigate To Invoice Details Page From Scheduled Payments,data-driven,TC_03 Validate Merchant Is Able To Navigate To Invoice Details Page From Scheduled Payments,"*** Settings ***
Documentation    Validate TC_03 Validate Merchant Is Able To Navigate To Invoice Details Page From Scheduled Payments
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate Merchant Is Able To Navigate To Invoice Details Page From Scheduled Payments
    [Documentation]    Validate TC_03 Validate Merchant Is Able To Navigate To Invoice Details Page From Scheduled Payments using the following steps
Send Request To Create Customer    ${omnicorp}    ${3}    ${}    
    Send Request To Create Invoice For Customer    ${omnicorp}    ${account_number}    ${}    
    Select Merchant    ${Omnicorp}    ${nan}    ${}    
    Create Scheduled Payment    ${account_number}    ${nan}    ${}    
    Select Module    ${Customers}    ${nan}    ${}    
    Select Module    ${Scheduled Payments}    ${nan}    ${}    
    Filter Details    ${account_number}    ${nan}    ${}    
    Navigate To Details Page From Invoices    ${invoice_number}    ${nan}    ${}    
    Validate Invoice Details Page Is Displayed    ${invoice_number}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${omnicorp}    ${3}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${omnicorp}    ${3}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${omnicorp}    ${account_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${omnicorp}    ${account_number}    ${}

Select Merchant
    [Arguments]    ${Omnicorp}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Omnicorp}    ${nan}    ${}

Create Scheduled Payment
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Select Module
    [Arguments]    ${Customers}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customers}    ${nan}    ${}

Select Module
    [Arguments]    ${Scheduled Payments}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Scheduled Payments}    ${nan}    ${}

Filter Details
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Navigate To Details Page From Invoices
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

Validate Invoice Details Page Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

","**Test Case Name**: TC_03 Validate Merchant Is Able To Navigate To Invoice Details Page From Scheduled Payments

**Purpose**: 

The purpose of this test case is to ensure that merchants can seamlessly access the detailed information of their invoices from the scheduled payments section within the application. This functionality is crucial for merchants to review, manage, and verify the details of their invoices and scheduled payments without any navigation issues or errors.

**Key Objectives**:

1. **Accessibility**: Verify that the merchant can locate and access the scheduled payments section in the application.
2. **Navigation**: Test the navigation flow from the scheduled payments section to the invoice details page.
3. **Functionality**: Ensure that all invoice details are displayed accurately and compreh"
Create data-driven clientcentral_testcases for scheduled payments Testcases TC_04 Validate Merchant Is Able To Cancel Scheduled Payment,data-driven,TC_04 Validate Merchant Is Able To Cancel Scheduled Payment,"*** Settings ***
Documentation    Validate TC_04 Validate Merchant Is Able To Cancel Scheduled Payment
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate Merchant Is Able To Cancel Scheduled Payment
    [Documentation]    Validate TC_04 Validate Merchant Is Able To Cancel Scheduled Payment using the following steps
Send Request To Create Customer    ${omnicorp}    ${3}    ${}    
    Send Request To Create Invoice For Customer    ${omnicorp}    ${account_number}    ${}    
    Select Merchant    ${Omnicorp}    ${nan}    ${}    
    Create Scheduled Payment    ${account_number}    ${nan}    ${}    
    Select Module    ${Customers}    ${nan}    ${}    
    Select Module    ${Scheduled Payments}    ${nan}    ${}    
    Filter Details    ${account_number}    ${nan}    ${}    
    Cancel Scheduled Payment    ${nan}    ${nan}    ${}    
    Filter Details    ${account_number}    ${nan}    ${}    
    Validate Status In Scheduled Payments    ${Cancelled}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${omnicorp}    ${3}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${omnicorp}    ${3}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${omnicorp}    ${account_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${omnicorp}    ${account_number}    ${}

Select Merchant
    [Arguments]    ${Omnicorp}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Omnicorp}    ${nan}    ${}

Create Scheduled Payment
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Select Module
    [Arguments]    ${Customers}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customers}    ${nan}    ${}

Select Module
    [Arguments]    ${Scheduled Payments}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Scheduled Payments}    ${nan}    ${}

Filter Details
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Cancel Scheduled Payment
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Filter Details
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Validate Status In Scheduled Payments
    [Arguments]    ${Cancelled}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Cancelled}    ${nan}    ${}

","The test case 'TC_04 Validate Merchant Is Able To Cancel Scheduled Payment' is designed to ensure that merchants have the capability to cancel a payment that has been scheduled but not yet processed. The purpose of this test case is to verify that the system correctly allows a merchant to cancel such payments and that all related functionalities work as required. This involves checking the following aspects:

1. **Access Control**: Confirm that the merchant has the necessary permissions to access the scheduled payments section and initiate the cancellation process.
2. **User Interface**: Validate that the option to cancel a scheduled payment is clearly available and functions as intended.
3. **Backend Processing**: Ensure that the backend processes the cancellation request accurately, updating the status of the scheduled payment accordingly"
Validate data-driven clientcentral_testcases for settings Testcases TC_01 Validate Merchant Is Unable To Upload Non-PDF File,data-driven,TC_01 Validate Merchant Is Unable To Upload Non-PDF File,"*** Settings ***
Documentation    Validate TC_01 Validate Merchant Is Unable To Upload Non-PDF File
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Merchant Is Unable To Upload Non-PDF File
    [Documentation]    Validate TC_01 Validate Merchant Is Unable To Upload Non-PDF File using the following steps
Select Module    ${Settings}    ${}    ${}    
    Select Document Type In Settings    ${nan}    ${}    ${}    
    Upload File In Settings Tab    ${Sample Text Document.txt}    ${}    ${}    
    Validate Message In Settings    ${Must be of file type .pdf}    ${}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${Settings}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Settings}    ${}    ${}

Select Document Type In Settings
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Upload File In Settings Tab
    [Arguments]    ${Sample Text Document.txt}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Sample Text Document.txt}    ${}    ${}

Validate Message In Settings
    [Arguments]    ${Must be of file type .pdf}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Must be of file type .pdf}    ${}    ${}

","The test case 'TC_01 Validate Merchant Is Unable To Upload Non-PDF File' is designed to ensure that a system or application adheres to a requirement that only PDF files can be uploaded by merchants. The purpose of this test case is to verify that the system correctly identifies and restricts the upload of files that do not meet the specified PDF format criteria. This helps maintain data integrity and ensures that the system functionality aligns with the defined business rules regarding file uploads. 

Key aspects include:

1. **Trigger event**: The merchant attempts to upload a non-PDF file (e.g., .docx, .jpg, .png).
2. **Expected Outcome**: The system blocks the upload attempt, possibly showing an error message such"
Validate data-driven clientcentral_testcases for settings Testcases TC_02 Validate Merchant Is Able To Upload PDF Files in Settings,data-driven,TC_02 Validate Merchant Is Able To Upload PDF Files in Settings,"*** Settings ***
Documentation    Validate TC_02 Validate Merchant Is Able To Upload PDF Files in Settings
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Merchant Is Able To Upload PDF Files in Settings
    [Documentation]    Validate TC_02 Validate Merchant Is Able To Upload PDF Files in Settings using the following steps
Select Module    ${Settings}    ${nan}    ${}    
    Select Document Type In Settings    ${nan}    ${nan}    ${}    
    Upload File In Settings Tab    ${Sterling Cooper Invoice PDF.pdf}    ${nan}    ${}    
    Validate File Is Uploaded    ${Sterling Cooper Invoice PDF.pdf}    ${Tax Forms}    ${}

*** Keywords ***
Select Module
    [Arguments]    ${Settings}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Settings}    ${nan}    ${}

Select Document Type In Settings
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Upload File In Settings Tab
    [Arguments]    ${Sterling Cooper Invoice PDF.pdf}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Sterling Cooper Invoice PDF.pdf}    ${nan}    ${}

Validate File Is Uploaded
    [Arguments]    ${Sterling Cooper Invoice PDF.pdf}    ${Tax Forms}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Sterling Cooper Invoice PDF.pdf}    ${Tax Forms}    ${}

","The test case 'TC_02 Validate Merchant Is Able To Upload PDF Files in Settings' aims to verify that the functionality allowing merchants to upload PDF files within the application's settings is working correctly. This involves ensuring that the system accepts PDF file uploads, processes them without errors, and that these files are appropriately integrated or stored within the merchant's settings. The goal is to confirm that merchants can successfully manage PDF documents as part of their settings configurations, enhancing usability and functionality within the system."
Build data-driven clientcentral_testcases for settings Testcases TC_03 Validate Merchant Is Able To Delete PDF,data-driven,TC_03 Validate Merchant Is Able To Delete PDF,"*** Settings ***
Documentation    Validate TC_03 Validate Merchant Is Able To Delete PDF
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate Merchant Is Able To Delete PDF
    [Documentation]    Validate TC_03 Validate Merchant Is Able To Delete PDF using the following steps
Delete PDF Attachment    ${nan}    ${}    ${}    
    Validate PDF Is Deleted In Settings    ${Document has been deleted}    ${}    ${}

*** Keywords ***
Delete PDF Attachment
    [Arguments]    ${nan}    ${}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${}    ${}

Validate PDF Is Deleted In Settings
    [Arguments]    ${Document has been deleted}    ${}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Document has been deleted}    ${}    ${}

","The test case ""TC_03 Validate Merchant Is Able To Delete PDF"" is designed to verify that a merchant user can successfully delete a PDF document from the system. 

### Purpose:
The primary aim is to ensure that the merchant has the capability to manage their documents effectively, including the deletion of outdated, incorrect, or unnecessary PDF files. This functionality is crucial for maintaining an organized and up-to-date document repository, thereby enhancing operational efficiency and data accuracy.

### Key Objectives:
1. **User Authentication**: Confirm that the user has appropriate credentials and access rights to perform the delete operation.
2. **Locate PDF File**: Ensure the merchant can easily locate the desired PDF file within the system's document repository or management section.
3. **Delete"
Create data-driven clientcentral_testcases for settings Testcases TC_04 Validate Merchant Is Able To View And Close PDF In PayNOW,data-driven,TC_04 Validate Merchant Is Able To View And Close PDF In PayNOW,"*** Settings ***
Documentation    Validate TC_04 Validate Merchant Is Able To View And Close PDF In PayNOW
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate Merchant Is Able To View And Close PDF In PayNOW
    [Documentation]    Validate TC_04 Validate Merchant Is Able To View And Close PDF In PayNOW using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}    
    Select Module    ${Settings}    ${nan}    ${}    
    Select Document Type In Settings    ${nan}    ${nan}    ${}    
    Upload File In Settings Tab    ${Sterling Cooper Invoice PDF.pdf}    ${nan}    ${}    
    Validate File Is Uploaded    ${Sterling Cooper Invoice PDF.pdf}    ${Tax Forms}    ${}    
    Navigate To PayNOW    ${account_number}    ${invoice_number}    ${}    
    Validate PDF Document Is Displayed In PayNOW    ${Sterling Cooper Invoice PDF.pdf}    ${nan}    ${}    
    Close PDF Document    ${nan}    ${nan}    ${}    
    Validate PDF Is Closed    ${nan}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${}

Select Module
    [Arguments]    ${Settings}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Settings}    ${nan}    ${}

Select Document Type In Settings
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Upload File In Settings Tab
    [Arguments]    ${Sterling Cooper Invoice PDF.pdf}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Sterling Cooper Invoice PDF.pdf}    ${nan}    ${}

Validate File Is Uploaded
    [Arguments]    ${Sterling Cooper Invoice PDF.pdf}    ${Tax Forms}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Sterling Cooper Invoice PDF.pdf}    ${Tax Forms}    ${}

Navigate To PayNOW
    [Arguments]    ${account_number}    ${invoice_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_number}    ${}

Validate PDF Document Is Displayed In PayNOW
    [Arguments]    ${Sterling Cooper Invoice PDF.pdf}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Sterling Cooper Invoice PDF.pdf}    ${nan}    ${}

Close PDF Document
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Validate PDF Is Closed
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

","The purpose of test case 'TC_04 Validate Merchant Is Able To View And Close PDF In PayNOW' is to verify that the merchant can successfully access and interact with PDF documents within the PayNOW application. This includes confirming that the merchant can open a PDF document without any errors and also close the document after viewing it. This test ensures the usability and functionality of the PDF viewing feature, which is essential for merchants to review important documents related to their transactions or account information. The objective is to ensure a seamless and error-free user experience in handling PDF documents within PayNOW."
Generate data-driven clientcentral_testcases for tokens Testcases TC_01 Validate Merchant Able To Navigate To PayNOW From Invoice Details,data-driven,TC_01 Validate Merchant Able To Navigate To PayNOW From Invoice Details,"*** Settings ***
Documentation    Validate TC_01 Validate Merchant Able To Navigate To PayNOW From Invoice Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Merchant Able To Navigate To PayNOW From Invoice Details
    [Documentation]    Validate TC_01 Validate Merchant Able To Navigate To PayNOW From Invoice Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}    
    Send Request To Create Invoice    ${STERLING_COOPER}    ${account_number}    ${}    
    Get Invoice Location    ${response}    ${nan}    ${}    
    Send Request To Get Invoice Token    ${invoice_location}    ${nan}    ${}    
    Navigate To Open Invoices Page With Invoice Token    ${account_number}    ${invoice_token}    ${}    
    Validate Open Invoices Page Is Displayed    ${invoice_number}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${}

Get Invoice Location
    [Arguments]    ${response}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${}

Send Request To Get Invoice Token
    [Arguments]    ${invoice_location}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${invoice_location}    ${nan}    ${}

Navigate To Open Invoices Page With Invoice Token
    [Arguments]    ${account_number}    ${invoice_token}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${invoice_token}    ${}

Validate Open Invoices Page Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

","**Test Case Summary: TC_01 Validate Merchant Able To Navigate To PayNOW From Invoice Details**

**Purpose:**

The primary objective of this test case is to ensure that merchants can easily and successfully navigate from the invoice details page to the PayNOW payment gateway. This functionality is crucial for enhancing the user experience by providing a seamless and efficient payment process. This test verifies the following key aspects:

1. **Navigation Accuracy:** Ensures the merchant is redirected to the correct PayNOW payment page from the invoice details.
2. **Usability:** Confirms the ease of the navigation process, verifying that steps are intuitive and straightforward.
3. **Functionality:** Checks that the PayNOW interface is fully functional once navigated to, allowing merchants to proceed"
Validate data-driven clientcentral_testcases for tokens Testcases TC_02 Validate Merchant Is Able To Navigate To PayNOW From Customer Details,data-driven,TC_02 Validate Merchant Is Able To Navigate To PayNOW From Customer Details,"*** Settings ***
Documentation    Validate TC_02 Validate Merchant Is Able To Navigate To PayNOW From Customer Details
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Merchant Is Able To Navigate To PayNOW From Customer Details
    [Documentation]    Validate TC_02 Validate Merchant Is Able To Navigate To PayNOW From Customer Details using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}    
    Send Request To Create Invoice    ${STERLING_COOPER}    ${account_number}    ${}    
    Send Request To Get PayNowSession Id    ${account_number}    ${nan}    ${}    
    Get PayNowSession Id From Request Body    ${response}    ${nan}    ${}    
    Navigate To Open Invoices Page With Session Token    ${saccount_number}    ${session_id}    ${}    
    Validate Open Invoices Page Is Displayed    ${invoice_number}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${}

Send Request To Get PayNowSession Id
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Get PayNowSession Id From Request Body
    [Arguments]    ${response}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${}

Navigate To Open Invoices Page With Session Token
    [Arguments]    ${saccount_number}    ${session_id}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${saccount_number}    ${session_id}    ${}

Validate Open Invoices Page Is Displayed
    [Arguments]    ${invoice_number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoice_number}    ${nan}    ${}

","The test case 'TC_02 Validate Merchant Is Able To Navigate To PayNOW From Customer Details' is designed to verify that a merchant can successfully access the PayNOW feature from the Customer Details page within the application. 

**Purpose:**
1. Ensure that the PayNOW functionality is properly integrated and accessible from the Customer Details interface.
2. Confirm that navigation from the Customer Details page to the PayNOW module is seamless and without errors.
3. Validate that all necessary customer information is correctly passed to the PayNOW page to facilitate a transaction.

**Steps typically involved:**
1. Log in to the merchant account on the platform.
2. Navigate to the Customer Details section.
3. Locate and select the option to initiate a payment (PayNOW"
Build data-driven clientcentral_testcases for tokens Testcases TC_03 Validate Merchant Is Able To Navigate To PayNOW From Email,data-driven,TC_03 Validate Merchant Is Able To Navigate To PayNOW From Email,"*** Settings ***
Documentation    Validate TC_03 Validate Merchant Is Able To Navigate To PayNOW From Email
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate Merchant Is Able To Navigate To PayNOW From Email
    [Documentation]    Validate TC_03 Validate Merchant Is Able To Navigate To PayNOW From Email using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Create Multiple Invoices Through API    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Transaction For Multiple Invoices    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}    
    Get Gatewayid    ${response}    ${nan}    ${nan}    
    Login To Client Central Application    ${EMAIL}    ${CLIENT_CENTRAL_PASSWORD}    ${nan}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Invoices}    ${nan}    ${nan}    
    Select All Invoices    ${nan}    ${nan}    ${nan}    
    Open Paynow From Email    ${EMAIL}    ${EMAIL_PASSWORD}    ${TEST-QA Invoice Summary from Sterling Cooper}    
    Validate PayNOW Open Invoices Page Is Displayed    ${invoices_list}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Transaction For Multiple Invoices
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoices_list.0}

Get Gatewayid
    [Arguments]    ${response}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${response}    ${nan}    ${nan}

Login To Client Central Application
    [Arguments]    ${EMAIL}    ${CLIENT_CENTRAL_PASSWORD}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${CLIENT_CENTRAL_PASSWORD}    ${nan}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Invoices}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Invoices}    ${nan}    ${nan}

Select All Invoices
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Open Paynow From Email
    [Arguments]    ${EMAIL}    ${EMAIL_PASSWORD}    ${TEST-QA Invoice Summary from Sterling Cooper}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${EMAIL}    ${EMAIL_PASSWORD}    ${TEST-QA Invoice Summary from Sterling Cooper}

Validate PayNOW Open Invoices Page Is Displayed
    [Arguments]    ${invoices_list}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${invoices_list}    ${nan}    ${nan}

","The test case ""TC_03 Validate Merchant Is Able To Navigate To PayNOW From Email"" aims to verify that a merchant can successfully navigate to the PayNOW platform through a link provided in an email. This involves checking that the email containing the PayNOW link is correctly received by the merchant, and that clicking on the link directs them to the intended PayNOW webpage or application without any errors. The purpose of this test case is to ensure a seamless user experience for merchants accessing the PayNOW service via email, confirming that the integration between the email notification system and the PayNOW platform functions as intended."
Create data-driven clientcentral_testcases for virtual terminal Testcases TC_01 Validate Merchant Is Unable To Process Transaction With More Than Due Amount For LumpSum,data-driven,TC_01 Validate Merchant Is Unable To Process Transaction With More Than Due Amount For LumpSum,"*** Settings ***
Documentation    Validate TC_01 Validate Merchant Is Unable To Process Transaction With More Than Due Amount For LumpSum
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_01 Validate Merchant Is Unable To Process Transaction With More Than Due Amount For LumpSum
    [Documentation]    Validate TC_01 Validate Merchant Is Unable To Process Transaction With More Than Due Amount For LumpSum using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}    
    Select Module    ${Virtual Terminal}    ${nan}    ${}    
    Search Customer In Virtual Terminal    ${account_number}    ${nan}    ${}    
    Select Country In Virtual Terminal    ${United States}    ${nan}    ${}    
    Select Payment Type    ${Apply To Oldest}    ${nan}    ${}    
    Enter Amount For Lumpusm    ${Sale}    ${200.00}    ${}    
    Select Payment Method    ${Credit Card}    ${nan}    ${}    
    Enter Debit Card Details    ${DEBIT_CARD_DETAILS}    ${nan}    ${}    
    Validate Error Message In Virtual Terminal    ${Payment amount exceeds total amount due for customer.}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${}

Select Module
    [Arguments]    ${Virtual Terminal}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${}

Search Customer In Virtual Terminal
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Select Country In Virtual Terminal
    [Arguments]    ${United States}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${United States}    ${nan}    ${}

Select Payment Type
    [Arguments]    ${Apply To Oldest}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Apply To Oldest}    ${nan}    ${}

Enter Amount For Lumpusm
    [Arguments]    ${Sale}    ${200.00}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Sale}    ${200.00}    ${}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${}

Enter Debit Card Details
    [Arguments]    ${DEBIT_CARD_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${DEBIT_CARD_DETAILS}    ${nan}    ${}

Validate Error Message In Virtual Terminal
    [Arguments]    ${Payment amount exceeds total amount due for customer.}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${Payment amount exceeds total amount due for customer.}    ${nan}    ${}

","The test case ""TC_01 Validate Merchant Is Unable To Process Transaction With More Than Due Amount For LumpSum"" aims to ensure that a merchant's payment processing system accurately enforces transaction limits based on the due amount for a single lump-sum payment. 

### Purpose:
1. **Validation of Transaction Limits**: The primary goal is to confirm that the system prevents merchants from processing payments that exceed the outstanding due amount for a transaction when a customer opts to pay the total amount in a single lump sum.
2. **Ensuring Correct Billing**: By enforcing this rule, the test ensures that customers are not overcharged and that payment records are accurate, thereby maintaining trust and compliance with financial regulations.
3. **System Reliability and Integrity**:"
Generate data-driven clientcentral_testcases for virtual terminal Testcases TC_02 Validate Merchant Is Unable To Process Transaction With More Than Due Amount for Specific Invoice,data-driven,TC_02 Validate Merchant Is Unable To Process Transaction With More Than Due Amount for Specific Invoice,"*** Settings ***
Documentation    Validate TC_02 Validate Merchant Is Unable To Process Transaction With More Than Due Amount for Specific Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_02 Validate Merchant Is Unable To Process Transaction With More Than Due Amount for Specific Invoice
    [Documentation]    Validate TC_02 Validate Merchant Is Unable To Process Transaction With More Than Due Amount for Specific Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}    
    Select Module    ${Virtual Terminal}    ${nan}    ${}    
    Search Customer In Virtual Terminal    ${account_number}    ${nan}    ${}    
    Select Country In Virtual Terminal    ${United States}    ${nan}    ${}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${}    
    Select Specific Invoice Checkbox    ${nan}    ${nan}    ${}    
    Edit Amount To Pay    ${200}    ${nan}    ${}    
    Select Payment Method    ${Credit Card}    ${nan}    ${}    
    Enter Debit Card Details    ${DEBIT_CARD_DETAILS}    ${nan}    ${}    
    Validate Error Message In Virtual Terminal    ${You can not pay more then is due on an invoice.}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${}

Select Module
    [Arguments]    ${Virtual Terminal}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${}

Search Customer In Virtual Terminal
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Select Country In Virtual Terminal
    [Arguments]    ${United States}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${United States}    ${nan}    ${}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${}

Select Specific Invoice Checkbox
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Edit Amount To Pay
    [Arguments]    ${200}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${200}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${}

Enter Debit Card Details
    [Arguments]    ${DEBIT_CARD_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${DEBIT_CARD_DETAILS}    ${nan}    ${}

Validate Error Message In Virtual Terminal
    [Arguments]    ${You can not pay more then is due on an invoice.}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${You can not pay more then is due on an invoice.}    ${nan}    ${}

","The test case 'TC_02 Validate Merchant Is Unable To Process Transaction With More Than Due Amount for Specific Invoice' aims to ensure that merchants cannot overcharge customers by processing transactions that exceed the due amount on a specific invoice. 

**Purpose:**

1. **Prevent Overcharging:** Verifies that the system enforces a limit to prevent merchants from charging more than the outstanding amount on an invoice, protecting customers from overpayment.

2. **Ensure Data Integrity:** Ensures the accuracy and integrity of invoice data by preventing transactions that don't correspond to the actual amount owed.

3. **Compliance and Regret Reduction:** Helps ensure the merchant’s transaction processes comply with financial regulations and reduces the risk of disputes and chargebacks resulting from overpayments.

By validating"
Create data-driven clientcentral_testcases for virtual terminal Testcases TC_03 Validate Merchant Is Able To View Searched With Customer Number,data-driven,TC_03 Validate Merchant Is Able To View Searched With Customer Number,"*** Settings ***
Documentation    Validate TC_03 Validate Merchant Is Able To View Searched With Customer Number
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_03 Validate Merchant Is Able To View Searched With Customer Number
    [Documentation]    Validate TC_03 Validate Merchant Is Able To View Searched With Customer Number using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}    
    Select Module    ${Virtual Terminal}    ${nan}    ${}    
    Search Customer In Virtual Terminal    ${account_number}    ${nan}    ${}    
    Validate Searched Customer Number Is Displayed    ${account_number}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${}

Select Module
    [Arguments]    ${Virtual Terminal}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${}

Search Customer In Virtual Terminal
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Validate Searched Customer Number Is Displayed
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

","The test case ""TC_03 Validate Merchant Is Able To View Searched With Customer Number"" is designed to ensure the functionality of the merchant dashboard by verifying that merchants can successfully search for and view customer details using a customer's unique number. The purpose of this test is to verify that the search functionality within the merchant interface is working correctly and efficiently. This includes confirming that the search returns accurate results, displays the relevant customer information, and allows the merchant to access and possibly interact with the customer's data as intended. Ensuring this functionality is vital for customer relationship management and operational efficiency within the merchant's system."
Validate data-driven clientcentral_testcases for virtual terminal Testcases TC_04 Validate Merchant Is Unable To Process Transaction With Negative Amount Due In Specific Invoice,data-driven,TC_04 Validate Merchant Is Unable To Process Transaction With Negative Amount Due In Specific Invoice,"*** Settings ***
Documentation    Validate TC_04 Validate Merchant Is Unable To Process Transaction With Negative Amount Due In Specific Invoice
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_04 Validate Merchant Is Unable To Process Transaction With Negative Amount Due In Specific Invoice
    [Documentation]    Validate TC_04 Validate Merchant Is Unable To Process Transaction With Negative Amount Due In Specific Invoice using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${}    
    Select Module    ${Virtual Terminal}    ${nan}    ${}    
    Search Customer In Virtual Terminal    ${account_number}    ${nan}    ${}    
    Select Country In Virtual Terminal    ${United States}    ${nan}    ${}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${}    
    Select Specific Invoice Checkbox    ${nan}    ${nan}    ${}    
    Edit Amount To Pay    ${-10}    ${nan}    ${}    
    Select Payment Method    ${Credit Card}    ${nan}    ${}    
    Enter Debit Card Details    ${DEBIT_CARD_DETAILS}    ${nan}    ${}    
    Validate Error Message In Virtual Terminal    ${You can not take a greater credit amount then is allowed.}    ${nan}    ${}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${}

Select Module
    [Arguments]    ${Virtual Terminal}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${}

Search Customer In Virtual Terminal
    [Arguments]    ${account_number}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${}

Select Country In Virtual Terminal
    [Arguments]    ${United States}    ${nan}    ${}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${United States}    ${nan}    ${}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${}

Select Specific Invoice Checkbox
    [Arguments]    ${nan}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${}

Edit Amount To Pay
    [Arguments]    ${-10}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${-10}    ${nan}    ${}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${}

Enter Debit Card Details
    [Arguments]    ${DEBIT_CARD_DETAILS}    ${nan}    ${}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${DEBIT_CARD_DETAILS}    ${nan}    ${}

Validate Error Message In Virtual Terminal
    [Arguments]    ${You can not take a greater credit amount then is allowed.}    ${nan}    ${}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${You can not take a greater credit amount then is allowed.}    ${nan}    ${}

","The test case 'TC_04 Validate Merchant Is Unable To Process Transaction With Negative Amount Due In Specific Invoice' aims to ensure that the system correctly handles and prevents any attempt by a merchant to process a transaction where the invoice reflects a negative amount due. 

**Purpose:**
1. **Data Integrity and Validity:** To confirm that the system maintains data integrity by not allowing transactions with invalid or nonsensical monetary values, which could disrupt financial records and calculations.
2. **Error Handling:** To verify that the system can accurately detect and respond to the anomaly of a negative transaction amount, providing a clear and appropriate error message or feedback to the user (merchant).
3. **Regulatory Compliance:** To ensure the platform adheres to financial regulations and"
Build data-driven clientcentral_testcases for virtual terminal Testcases TC_05 Validate Merchant Is Able To View Surcharge Exempt Is Applied For Customer In Virtual Terminal,data-driven,TC_05 Validate Merchant Is Able To View Surcharge Exempt Is Applied For Customer In Virtual Terminal,"*** Settings ***
Documentation    Validate TC_05 Validate Merchant Is Able To View Surcharge Exempt Is Applied For Customer In Virtual Terminal
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_05 Validate Merchant Is Able To View Surcharge Exempt Is Applied For Customer In Virtual Terminal
    [Documentation]    Validate TC_05 Validate Merchant Is Able To View Surcharge Exempt Is Applied For Customer In Virtual Terminal using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Customer Settings}    ${nan}    ${nan}    
    Select Surcharge Exempt    ${True}    ${nan}    ${nan}    
    Select Module    ${Virtual Terminal}    ${nan}    ${nan}    
    Search Customer In Virtual Terminal    ${account_number}    ${nan}    ${nan}    
    Select Country In Virtual Terminal    ${United States}    ${nan}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Select Specific Invoice Checkbox    ${nan}    ${nan}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Validate Surcharge    ${0}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Customer Settings}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customer Settings}    ${nan}    ${nan}

Select Surcharge Exempt
    [Arguments]    ${True}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${True}    ${nan}    ${nan}

Select Module
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Search Customer In Virtual Terminal
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Country In Virtual Terminal
    [Arguments]    ${United States}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${United States}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Select Specific Invoice Checkbox
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Validate Surcharge
    [Arguments]    ${0}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${0}    ${nan}    ${nan}

","The purpose of the test case ""TC_05 Validate Merchant Is Able To View Surcharge Exempt Is Applied For Customer In Virtual Terminal"" is to ensure that the virtual terminal interface properly indicates when a surcharge exemption has been applied to a transaction for a customer. This test case verifies that merchants can accurately see and confirm the application of surcharge exemptions during the transaction process, which is critical for compliance with any applicable regulations and for maintaining transparency with customers regarding fees. The test case checks for the correct display and accurate reflection of surcharge exemption statuses on the virtual terminal to prevent any potential billing errors and to facilitate a seamless transaction experience."
Build data-driven clientcentral_testcases for virtual terminal Testcases TC_06 Validate Merchant Is Able To View Surcharge And Change In Total Amount After Selecting Multiple Invoices,data-driven,TC_06 Validate Merchant Is Able To View Surcharge And Change In Total Amount After Selecting Multiple Invoices,"*** Settings ***
Documentation    Validate TC_06 Validate Merchant Is Able To View Surcharge And Change In Total Amount After Selecting Multiple Invoices
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_06 Validate Merchant Is Able To View Surcharge And Change In Total Amount After Selecting Multiple Invoices
    [Documentation]    Validate TC_06 Validate Merchant Is Able To View Surcharge And Change In Total Amount After Selecting Multiple Invoices using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Create Multiple Invoices Through API    ${STERLING_COOPER}    ${account_number}    ${today-2}    
    Select Module    ${Virtual Terminal}    ${nan}    ${nan}    
    Search Customer In Virtual Terminal    ${account_number}    ${nan}    ${nan}    
    Select Country In Virtual Terminal    ${United States}    ${nan}    ${nan}    
    Select Payment Type    ${Specific Invoice}    ${nan}    ${nan}    
    Select Specific Invoice Checkbox    ${nan}    ${nan}    ${nan}    
    Validate Total Amount Is Updated    ${100}    ${nan}    ${nan}    
    Select Multiple Invoices    ${nan}    ${nan}    ${nan}    
    Validate Total Amount Is Updated    ${200}    ${nan}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Credit Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Validate Surcharge    ${6}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Create Multiple Invoices Through API
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${today-2}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${today-2}

Select Module
    [Arguments]    ${Virtual Terminal}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Virtual Terminal}    ${nan}    ${nan}

Search Customer In Virtual Terminal
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Country In Virtual Terminal
    [Arguments]    ${United States}    ${nan}    ${nan}
    [Return]    ${integer}
    [Documentation]    Keyword description
    Log    ${United States}    ${nan}    ${nan}

Select Payment Type
    [Arguments]    ${Specific Invoice}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Specific Invoice}    ${nan}    ${nan}

Select Specific Invoice Checkbox
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Total Amount Is Updated
    [Arguments]    ${100}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${100}    ${nan}    ${nan}

Select Multiple Invoices
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    @{list}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Validate Total Amount Is Updated
    [Arguments]    ${200}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${200}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Credit Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Validate Surcharge
    [Arguments]    ${6}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${6}    ${nan}    ${nan}

","The test case 'TC_06 Validate Merchant Is Able To View Surcharge And Change In Total Amount After Selecting Multiple Invoices' is designed to verify that a merchant can accurately view the additional surcharge and the updated total amount when multiple invoices are selected within the system. 

**Purpose:**
1. **Surcharge Calculation:** Ensure that the system correctly calculates and displays the surcharge for the selected invoices.
2. **Total Amount Update:** Validate that the total amount is correctly updated to reflect the sum of the selected invoices plus any applicable surcharges.
3. **User Interface Verification:** Confirm that these updates are clearly and visibly presented to the merchant in the user interface, ensuring transparency and accuracy.
4. **Functionality Check:** Ensure the functionality works as"
Create data-driven clientcentral_testcases for virtual terminal Testcases TC_07 Validate Merchant Is Able To View Surcharge Exempt Is Applied For Customer In PayNOW,data-driven,TC_07 Validate Merchant Is Able To View Surcharge Exempt Is Applied For Customer In PayNOW,"*** Settings ***
Documentation    Validate TC_07 Validate Merchant Is Able To View Surcharge Exempt Is Applied For Customer In PayNOW
Test Template    Test Execution
Resource         resource_file.robot

*** Variables ***
${VALID_USER}       testuser
${VALID_PASSWORD}   secret

*** Test Cases ***
TC_07 Validate Merchant Is Able To View Surcharge Exempt Is Applied For Customer In PayNOW
    [Documentation]    Validate TC_07 Validate Merchant Is Able To View Surcharge Exempt Is Applied For Customer In PayNOW using the following steps
Send Request To Create Customer    ${STERLING_COOPER}    ${nan}    ${nan}    
    Send Request To Create Invoice For Customer    ${STERLING_COOPER}    ${account_number}    ${nan}    
    Send Request To Process Payment For Credit Card    ${STERLING_COOPER}    ${account_number}    ${invoice_number}    
    Navigate To Customer Details Page    ${account_number}    ${nan}    ${nan}    
    Select Tab In Customer Page    ${Customer Settings}    ${nan}    ${nan}    
    Select Surcharge Exempt    ${True}    ${nan}    ${nan}    
    Select View PayNow    ${nan}    ${nan}    ${nan}    
    Navigate To PayNOW And Select State    ${OH (OHIO)}    ${nan}    ${nan}    
    Select Payment Method    ${Credit Card}    ${nan}    ${nan}    
    Enter Card Details    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}    
    Validate Surchage Exempt Is Applied    ${nan}    ${nan}    ${nan}

*** Keywords ***
Send Request To Create Customer
    [Arguments]    ${STERLING_COOPER}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${nan}    ${nan}

Send Request To Create Invoice For Customer
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${nan}

Send Request To Process Payment For Credit Card
    [Arguments]    ${STERLING_COOPER}    ${account_number}    ${invoice_number}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${STERLING_COOPER}    ${account_number}    ${invoice_number}

Navigate To Customer Details Page
    [Arguments]    ${account_number}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${account_number}    ${nan}    ${nan}

Select Tab In Customer Page
    [Arguments]    ${Customer Settings}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Customer Settings}    ${nan}    ${nan}

Select Surcharge Exempt
    [Arguments]    ${True}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${True}    ${nan}    ${nan}

Select View PayNow
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

Navigate To PayNOW And Select State
    [Arguments]    ${OH (OHIO)}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${OH (OHIO)}    ${nan}    ${nan}

Select Payment Method
    [Arguments]    ${Credit Card}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${Credit Card}    ${nan}    ${nan}

Enter Card Details
    [Arguments]    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}
    [Return]    ${string}
    [Documentation]    Keyword description
    Log    ${CREDIT_CARD_DETAILS}    ${nan}    ${nan}

Validate Surchage Exempt Is Applied
    [Arguments]    ${nan}    ${nan}    ${nan}
    [Return]    ${boolean}
    [Documentation]    Keyword description
    Log    ${nan}    ${nan}    ${nan}

","The test case 'TC_07 Validate Merchant Is Able To View Surcharge Exempt Is Applied For Customer In PayNOW' is designed to ensure that merchants are able to verify when a surcharge exemption is appropriately applied to a customer's transaction in the PayNOW system. The primary objectives of this test case include:

1. **Verification Process:** Confirming that the merchant can view and identify transactions where the surcharge exemption has been applied.
2. **Functionality Check:** Ensuring that the system correctly implements the surcharge exemption rules as per predefined criteria during a transaction.
3. **User Experience:** Assessing whether the interface clearly displays surcharge exemption status to the merchant, enhancing transparency and trust in the payment system.
4. **Compliance:** Guaranteeing adherence to relevant"
